// eslint-disable-next-line
export default "var __BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=true,process=this.process||{},__METRO_GLOBAL_PREFIX__='',__requireCycleIgnorePatterns=[/(^|\\/|\\\\)node_modules($|\\/|\\\\)/];process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||\"development\";\n(function (global) {\n  \"use strict\";\n\n  global.__r = metroRequire;\n  global[`${__METRO_GLOBAL_PREFIX__}__d`] = define;\n  global.__c = clear;\n  global.__registerSegment = registerSegment;\n  var modules = clear();\n  var EMPTY = {};\n  var CYCLE_DETECTED = {};\n  var _ref = {},\n    hasOwnProperty = _ref.hasOwnProperty;\n  if (__DEV__) {\n    global.$RefreshReg$ = function () {};\n    global.$RefreshSig$ = function () {\n      return function (type) {\n        return type;\n      };\n    };\n  }\n  function clear() {\n    modules = new Map();\n    return modules;\n  }\n  if (__DEV__) {\n    var verboseNamesToModuleIds = new Map();\n    var getModuleIdForVerboseName = function getModuleIdForVerboseName(verboseName) {\n      var moduleId = verboseNamesToModuleIds.get(verboseName);\n      if (moduleId == null) {\n        throw new Error(`Unknown named module: \"${verboseName}\"`);\n      }\n      return moduleId;\n    };\n    var initializingModuleIds = [];\n  }\n  function define(factory, moduleId, dependencyMap) {\n    if (modules.has(moduleId)) {\n      if (__DEV__) {\n        var inverseDependencies = arguments[4];\n        if (inverseDependencies) {\n          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);\n        }\n      }\n      return;\n    }\n    var mod = {\n      dependencyMap: dependencyMap,\n      factory: factory,\n      hasError: false,\n      importedAll: EMPTY,\n      importedDefault: EMPTY,\n      isInitialized: false,\n      publicModule: {\n        exports: {}\n      }\n    };\n    modules.set(moduleId, mod);\n    if (__DEV__) {\n      mod.hot = createHotReloadingObject();\n      var verboseName = arguments[3];\n      if (verboseName) {\n        mod.verboseName = verboseName;\n        verboseNamesToModuleIds.set(verboseName, moduleId);\n      }\n    }\n  }\n  function metroRequire(moduleId) {\n    if (__DEV__ && typeof moduleId === \"string\") {\n      var verboseName = moduleId;\n      moduleId = getModuleIdForVerboseName(verboseName);\n      console.warn(`Requiring module \"${verboseName}\" by name is only supported for ` + \"debugging purposes and will BREAK IN PRODUCTION!\");\n    }\n    var moduleIdReallyIsNumber = moduleId;\n    if (__DEV__) {\n      var initializingIndex = initializingModuleIds.indexOf(moduleIdReallyIsNumber);\n      if (initializingIndex !== -1) {\n        var cycle = initializingModuleIds.slice(initializingIndex).map(function (id) {\n          var _modules$get$verboseN, _modules$get;\n          return (_modules$get$verboseN = (_modules$get = modules.get(id)) == null ? void 0 : _modules$get.verboseName) != null ? _modules$get$verboseN : \"[unknown]\";\n        });\n        if (shouldPrintRequireCycle(cycle)) {\n          cycle.push(cycle[0]);\n          console.warn(`Require cycle: ${cycle.join(\" -> \")}\\n\\n` + \"Require cycles are allowed, but can result in uninitialized values. \" + \"Consider refactoring to remove the need for a cycle.\");\n        }\n      }\n    }\n    var module = modules.get(moduleIdReallyIsNumber);\n    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);\n  }\n  function shouldPrintRequireCycle(modules) {\n    var regExps = global[__METRO_GLOBAL_PREFIX__ + \"__requireCycleIgnorePatterns\"];\n    if (!Array.isArray(regExps)) {\n      return true;\n    }\n    var isIgnored = function isIgnored(module) {\n      return module != null && regExps.some(function (regExp) {\n        return regExp.test(module);\n      });\n    };\n    return modules.every(function (module) {\n      return !isIgnored(module);\n    });\n  }\n  function metroImportDefault(moduleId) {\n    if (__DEV__ && typeof moduleId === \"string\") {\n      var verboseName = moduleId;\n      moduleId = getModuleIdForVerboseName(verboseName);\n    }\n    var moduleIdReallyIsNumber = moduleId;\n    var maybeInitializedModule = modules.get(moduleIdReallyIsNumber);\n    if (maybeInitializedModule && maybeInitializedModule.importedDefault !== EMPTY) {\n      return maybeInitializedModule.importedDefault;\n    }\n    var exports = metroRequire(moduleIdReallyIsNumber);\n    var importedDefault = exports && exports.__esModule ? exports.default : exports;\n    var initializedModule = modules.get(moduleIdReallyIsNumber);\n    return initializedModule.importedDefault = importedDefault;\n  }\n  metroRequire.importDefault = metroImportDefault;\n  function metroImportAll(moduleId) {\n    if (__DEV__ && typeof moduleId === \"string\") {\n      var verboseName = moduleId;\n      moduleId = getModuleIdForVerboseName(verboseName);\n    }\n    var moduleIdReallyIsNumber = moduleId;\n    var maybeInitializedModule = modules.get(moduleIdReallyIsNumber);\n    if (maybeInitializedModule && maybeInitializedModule.importedAll !== EMPTY) {\n      return maybeInitializedModule.importedAll;\n    }\n    var exports = metroRequire(moduleIdReallyIsNumber);\n    var importedAll;\n    if (exports && exports.__esModule) {\n      importedAll = exports;\n    } else {\n      importedAll = {};\n      if (exports) {\n        for (var key in exports) {\n          if (hasOwnProperty.call(exports, key)) {\n            importedAll[key] = exports[key];\n          }\n        }\n      }\n      importedAll.default = exports;\n    }\n    var initializedModule = modules.get(moduleIdReallyIsNumber);\n    return initializedModule.importedAll = importedAll;\n  }\n  metroRequire.importAll = metroImportAll;\n  metroRequire.context = function fallbackRequireContext() {\n    if (__DEV__) {\n      throw new Error(\"The experimental Metro feature `require.context` is not enabled in your project.\\nThis can be enabled by setting the `transformer.unstable_allowRequireContext` property to `true` in your Metro configuration.\");\n    }\n    throw new Error(\"The experimental Metro feature `require.context` is not enabled in your project.\");\n  };\n  metroRequire.resolveWeak = function fallbackRequireResolveWeak() {\n    if (__DEV__) {\n      throw new Error(\"require.resolveWeak cannot be called dynamically. Ensure you are using the same version of `metro` and `metro-runtime`.\");\n    }\n    throw new Error(\"require.resolveWeak cannot be called dynamically.\");\n  };\n  var inGuard = false;\n  function guardedLoadModule(moduleId, module) {\n    if (!inGuard && global.ErrorUtils) {\n      inGuard = true;\n      var returnValue;\n      try {\n        returnValue = loadModuleImplementation(moduleId, module);\n      } catch (e) {\n        global.ErrorUtils.reportFatalError(e);\n      }\n      inGuard = false;\n      return returnValue;\n    } else {\n      return loadModuleImplementation(moduleId, module);\n    }\n  }\n  var ID_MASK_SHIFT = 16;\n  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;\n  function unpackModuleId(moduleId) {\n    var segmentId = moduleId >>> ID_MASK_SHIFT;\n    var localId = moduleId & LOCAL_ID_MASK;\n    return {\n      segmentId: segmentId,\n      localId: localId\n    };\n  }\n  metroRequire.unpackModuleId = unpackModuleId;\n  function packModuleId(value) {\n    return (value.segmentId << ID_MASK_SHIFT) + value.localId;\n  }\n  metroRequire.packModuleId = packModuleId;\n  var moduleDefinersBySegmentID = [];\n  var definingSegmentByModuleID = new Map();\n  function registerSegment(segmentId, moduleDefiner, moduleIds) {\n    moduleDefinersBySegmentID[segmentId] = moduleDefiner;\n    if (__DEV__) {\n      if (segmentId === 0 && moduleIds) {\n        throw new Error(\"registerSegment: Expected moduleIds to be null for main segment\");\n      }\n      if (segmentId !== 0 && !moduleIds) {\n        throw new Error(\"registerSegment: Expected moduleIds to be passed for segment #\" + segmentId);\n      }\n    }\n    if (moduleIds) {\n      moduleIds.forEach(function (moduleId) {\n        if (!modules.has(moduleId) && !definingSegmentByModuleID.has(moduleId)) {\n          definingSegmentByModuleID.set(moduleId, segmentId);\n        }\n      });\n    }\n  }\n  function loadModuleImplementation(moduleId, module) {\n    if (!module && moduleDefinersBySegmentID.length > 0) {\n      var _definingSegmentByMod;\n      var segmentId = (_definingSegmentByMod = definingSegmentByModuleID.get(moduleId)) != null ? _definingSegmentByMod : 0;\n      var definer = moduleDefinersBySegmentID[segmentId];\n      if (definer != null) {\n        definer(moduleId);\n        module = modules.get(moduleId);\n        definingSegmentByModuleID.delete(moduleId);\n      }\n    }\n    var nativeRequire = global.nativeRequire;\n    if (!module && nativeRequire) {\n      var _unpackModuleId = unpackModuleId(moduleId),\n        _segmentId = _unpackModuleId.segmentId,\n        localId = _unpackModuleId.localId;\n      nativeRequire(localId, _segmentId);\n      module = modules.get(moduleId);\n    }\n    if (!module) {\n      throw unknownModuleError(moduleId);\n    }\n    if (module.hasError) {\n      throw module.error;\n    }\n    if (__DEV__) {\n      var Systrace = requireSystrace();\n      var Refresh = requireRefresh();\n    }\n    module.isInitialized = true;\n    var _module = module,\n      factory = _module.factory,\n      dependencyMap = _module.dependencyMap;\n    if (__DEV__) {\n      initializingModuleIds.push(moduleId);\n    }\n    try {\n      if (__DEV__) {\n        Systrace.beginEvent(\"JS_require_\" + (module.verboseName || moduleId));\n      }\n      var moduleObject = module.publicModule;\n      if (__DEV__) {\n        moduleObject.hot = module.hot;\n        var prevRefreshReg = global.$RefreshReg$;\n        var prevRefreshSig = global.$RefreshSig$;\n        if (Refresh != null) {\n          var RefreshRuntime = Refresh;\n          global.$RefreshReg$ = function (type, id) {\n            RefreshRuntime.register(type, moduleId + \" \" + id);\n          };\n          global.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;\n        }\n      }\n      moduleObject.id = moduleId;\n      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);\n      if (!__DEV__) {\n        module.factory = undefined;\n        module.dependencyMap = undefined;\n      }\n      if (__DEV__) {\n        Systrace.endEvent();\n        if (Refresh != null) {\n          registerExportsForReactRefresh(Refresh, moduleObject.exports, moduleId);\n        }\n      }\n      return moduleObject.exports;\n    } catch (e) {\n      module.hasError = true;\n      module.error = e;\n      module.isInitialized = false;\n      module.publicModule.exports = undefined;\n      throw e;\n    } finally {\n      if (__DEV__) {\n        if (initializingModuleIds.pop() !== moduleId) {\n          throw new Error(\"initializingModuleIds is corrupt; something is terribly wrong\");\n        }\n        global.$RefreshReg$ = prevRefreshReg;\n        global.$RefreshSig$ = prevRefreshSig;\n      }\n    }\n  }\n  function unknownModuleError(id) {\n    var message = 'Requiring unknown module \"' + id + '\".';\n    if (__DEV__) {\n      message += \" If you are sure the module exists, try restarting Metro. \" + \"You may also want to run `yarn` or `npm install`.\";\n    }\n    return Error(message);\n  }\n  if (__DEV__) {\n    metroRequire.Systrace = {\n      beginEvent: function beginEvent() {},\n      endEvent: function endEvent() {}\n    };\n    metroRequire.getModules = function () {\n      return modules;\n    };\n    var createHotReloadingObject = function createHotReloadingObject() {\n      var hot = {\n        _acceptCallback: null,\n        _disposeCallback: null,\n        _didAccept: false,\n        accept: function accept(callback) {\n          hot._didAccept = true;\n          hot._acceptCallback = callback;\n        },\n        dispose: function dispose(callback) {\n          hot._disposeCallback = callback;\n        }\n      };\n      return hot;\n    };\n    var reactRefreshTimeout = null;\n    var metroHotUpdateModule = function metroHotUpdateModule(id, factory, dependencyMap, inverseDependencies) {\n      var mod = modules.get(id);\n      if (!mod) {\n        if (factory) {\n          return;\n        }\n        throw unknownModuleError(id);\n      }\n      if (!mod.hasError && !mod.isInitialized) {\n        mod.factory = factory;\n        mod.dependencyMap = dependencyMap;\n        return;\n      }\n      var Refresh = requireRefresh();\n      var refreshBoundaryIDs = new Set();\n      var didBailOut = false;\n      var updatedModuleIDs;\n      try {\n        updatedModuleIDs = topologicalSort([id], function (pendingID) {\n          var pendingModule = modules.get(pendingID);\n          if (pendingModule == null) {\n            return [];\n          }\n          var pendingHot = pendingModule.hot;\n          if (pendingHot == null) {\n            throw new Error(\"[Refresh] Expected module.hot to always exist in DEV.\");\n          }\n          var canAccept = pendingHot._didAccept;\n          if (!canAccept && Refresh != null) {\n            var isBoundary = isReactRefreshBoundary(Refresh, pendingModule.publicModule.exports);\n            if (isBoundary) {\n              canAccept = true;\n              refreshBoundaryIDs.add(pendingID);\n            }\n          }\n          if (canAccept) {\n            return [];\n          }\n          var parentIDs = inverseDependencies[pendingID];\n          if (parentIDs.length === 0) {\n            performFullRefresh(\"No root boundary\", {\n              source: mod,\n              failed: pendingModule\n            });\n            didBailOut = true;\n            return [];\n          }\n          return parentIDs;\n        }, function () {\n          return didBailOut;\n        }).reverse();\n      } catch (e) {\n        if (e === CYCLE_DETECTED) {\n          performFullRefresh(\"Dependency cycle\", {\n            source: mod\n          });\n          return;\n        }\n        throw e;\n      }\n      if (didBailOut) {\n        return;\n      }\n      var seenModuleIDs = new Set();\n      for (var i = 0; i < updatedModuleIDs.length; i++) {\n        var updatedID = updatedModuleIDs[i];\n        if (seenModuleIDs.has(updatedID)) {\n          continue;\n        }\n        seenModuleIDs.add(updatedID);\n        var updatedMod = modules.get(updatedID);\n        if (updatedMod == null) {\n          throw new Error(\"[Refresh] Expected to find the updated module.\");\n        }\n        var prevExports = updatedMod.publicModule.exports;\n        var didError = runUpdatedModule(updatedID, updatedID === id ? factory : undefined, updatedID === id ? dependencyMap : undefined);\n        var nextExports = updatedMod.publicModule.exports;\n        if (didError) {\n          return;\n        }\n        if (refreshBoundaryIDs.has(updatedID)) {\n          var isNoLongerABoundary = !isReactRefreshBoundary(Refresh, nextExports);\n          var didInvalidate = shouldInvalidateReactRefreshBoundary(Refresh, prevExports, nextExports);\n          if (isNoLongerABoundary || didInvalidate) {\n            var parentIDs = inverseDependencies[updatedID];\n            if (parentIDs.length === 0) {\n              performFullRefresh(isNoLongerABoundary ? \"No longer a boundary\" : \"Invalidated boundary\", {\n                source: mod,\n                failed: updatedMod\n              });\n              return;\n            }\n            for (var j = 0; j < parentIDs.length; j++) {\n              var parentID = parentIDs[j];\n              var parentMod = modules.get(parentID);\n              if (parentMod == null) {\n                throw new Error(\"[Refresh] Expected to find parent module.\");\n              }\n              var canAcceptParent = isReactRefreshBoundary(Refresh, parentMod.publicModule.exports);\n              if (canAcceptParent) {\n                refreshBoundaryIDs.add(parentID);\n                updatedModuleIDs.push(parentID);\n              } else {\n                performFullRefresh(\"Invalidated boundary\", {\n                  source: mod,\n                  failed: parentMod\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      if (Refresh != null) {\n        if (reactRefreshTimeout == null) {\n          reactRefreshTimeout = setTimeout(function () {\n            reactRefreshTimeout = null;\n            Refresh.performReactRefresh();\n          }, 30);\n        }\n      }\n    };\n    var topologicalSort = function topologicalSort(roots, getEdges, earlyStop) {\n      var result = [];\n      var visited = new Set();\n      var stack = new Set();\n      function traverseDependentNodes(node) {\n        if (stack.has(node)) {\n          throw CYCLE_DETECTED;\n        }\n        if (visited.has(node)) {\n          return;\n        }\n        visited.add(node);\n        stack.add(node);\n        var dependentNodes = getEdges(node);\n        if (earlyStop(node)) {\n          stack.delete(node);\n          return;\n        }\n        dependentNodes.forEach(function (dependent) {\n          traverseDependentNodes(dependent);\n        });\n        stack.delete(node);\n        result.push(node);\n      }\n      roots.forEach(function (root) {\n        traverseDependentNodes(root);\n      });\n      return result;\n    };\n    var runUpdatedModule = function runUpdatedModule(id, factory, dependencyMap) {\n      var mod = modules.get(id);\n      if (mod == null) {\n        throw new Error(\"[Refresh] Expected to find the module.\");\n      }\n      var hot = mod.hot;\n      if (!hot) {\n        throw new Error(\"[Refresh] Expected module.hot to always exist in DEV.\");\n      }\n      if (hot._disposeCallback) {\n        try {\n          hot._disposeCallback();\n        } catch (error) {\n          console.error(`Error while calling dispose handler for module ${id}: `, error);\n        }\n      }\n      if (factory) {\n        mod.factory = factory;\n      }\n      if (dependencyMap) {\n        mod.dependencyMap = dependencyMap;\n      }\n      mod.hasError = false;\n      mod.error = undefined;\n      mod.importedAll = EMPTY;\n      mod.importedDefault = EMPTY;\n      mod.isInitialized = false;\n      var prevExports = mod.publicModule.exports;\n      mod.publicModule.exports = {};\n      hot._didAccept = false;\n      hot._acceptCallback = null;\n      hot._disposeCallback = null;\n      metroRequire(id);\n      if (mod.hasError) {\n        mod.hasError = false;\n        mod.isInitialized = true;\n        mod.error = null;\n        mod.publicModule.exports = prevExports;\n        return true;\n      }\n      if (hot._acceptCallback) {\n        try {\n          hot._acceptCallback();\n        } catch (error) {\n          console.error(`Error while calling accept handler for module ${id}: `, error);\n        }\n      }\n      return false;\n    };\n    var performFullRefresh = function performFullRefresh(reason, modules) {\n      if (typeof window !== \"undefined\" && window.location != null && typeof window.location.reload === \"function\") {\n        window.location.reload();\n      } else {\n        var Refresh = requireRefresh();\n        if (Refresh != null) {\n          var _modules$source$verbo, _modules$source, _modules$failed$verbo, _modules$failed;\n          var sourceName = (_modules$source$verbo = (_modules$source = modules.source) == null ? void 0 : _modules$source.verboseName) != null ? _modules$source$verbo : \"unknown\";\n          var failedName = (_modules$failed$verbo = (_modules$failed = modules.failed) == null ? void 0 : _modules$failed.verboseName) != null ? _modules$failed$verbo : \"unknown\";\n          Refresh.performFullRefresh(`Fast Refresh - ${reason} <${sourceName}> <${failedName}>`);\n        } else {\n          console.warn(\"Could not reload the application after an edit.\");\n        }\n      }\n    };\n    var isReactRefreshBoundary = function isReactRefreshBoundary(Refresh, moduleExports) {\n      if (Refresh.isLikelyComponentType(moduleExports)) {\n        return true;\n      }\n      if (moduleExports == null || typeof moduleExports !== \"object\") {\n        return false;\n      }\n      var hasExports = false;\n      var areAllExportsComponents = true;\n      for (var key in moduleExports) {\n        hasExports = true;\n        if (key === \"__esModule\") {\n          continue;\n        }\n        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);\n        if (desc && desc.get) {\n          return false;\n        }\n        var exportValue = moduleExports[key];\n        if (!Refresh.isLikelyComponentType(exportValue)) {\n          areAllExportsComponents = false;\n        }\n      }\n      return hasExports && areAllExportsComponents;\n    };\n    var shouldInvalidateReactRefreshBoundary = function shouldInvalidateReactRefreshBoundary(Refresh, prevExports, nextExports) {\n      var prevSignature = getRefreshBoundarySignature(Refresh, prevExports);\n      var nextSignature = getRefreshBoundarySignature(Refresh, nextExports);\n      if (prevSignature.length !== nextSignature.length) {\n        return true;\n      }\n      for (var i = 0; i < nextSignature.length; i++) {\n        if (prevSignature[i] !== nextSignature[i]) {\n          return true;\n        }\n      }\n      return false;\n    };\n    var getRefreshBoundarySignature = function getRefreshBoundarySignature(Refresh, moduleExports) {\n      var signature = [];\n      signature.push(Refresh.getFamilyByType(moduleExports));\n      if (moduleExports == null || typeof moduleExports !== \"object\") {\n        return signature;\n      }\n      for (var key in moduleExports) {\n        if (key === \"__esModule\") {\n          continue;\n        }\n        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);\n        if (desc && desc.get) {\n          continue;\n        }\n        var exportValue = moduleExports[key];\n        signature.push(key);\n        signature.push(Refresh.getFamilyByType(exportValue));\n      }\n      return signature;\n    };\n    var registerExportsForReactRefresh = function registerExportsForReactRefresh(Refresh, moduleExports, moduleID) {\n      Refresh.register(moduleExports, moduleID + \" %exports%\");\n      if (moduleExports == null || typeof moduleExports !== \"object\") {\n        return;\n      }\n      for (var key in moduleExports) {\n        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);\n        if (desc && desc.get) {\n          continue;\n        }\n        var exportValue = moduleExports[key];\n        var typeID = moduleID + \" %exports% \" + key;\n        Refresh.register(exportValue, typeID);\n      }\n    };\n    global.__accept = metroHotUpdateModule;\n  }\n  if (__DEV__) {\n    var requireSystrace = function requireSystrace() {\n      return global[__METRO_GLOBAL_PREFIX__ + \"__SYSTRACE\"] || metroRequire.Systrace;\n    };\n    var requireRefresh = function requireRefresh() {\n      return global[__METRO_GLOBAL_PREFIX__ + \"__ReactRefresh\"] || metroRequire.Refresh;\n    };\n  }\n})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);\n(function (global) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @polyfill\n   * @nolint\n   * @format\n   */\n\n  /* eslint-disable no-shadow, eqeqeq, curly, no-unused-vars, no-void, no-control-regex  */\n\n  /**\n   * This pipes all of our console logging functions to native logging so that\n   * JavaScript errors in required modules show up in Xcode via NSLog.\n   */\n  var inspect = function () {\n    // Copyright Joyent, Inc. and other Node contributors.\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a\n    // copy of this software and associated documentation files (the\n    // \"Software\"), to deal in the Software without restriction, including\n    // without limitation the rights to use, copy, modify, merge, publish,\n    // distribute, sublicense, and/or sell copies of the Software, and to permit\n    // persons to whom the Software is furnished to do so, subject to the\n    // following conditions:\n    //\n    // The above copyright notice and this permission notice shall be included\n    // in all copies or substantial portions of the Software.\n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n    // USE OR OTHER DEALINGS IN THE SOFTWARE.\n    //\n    // https://github.com/joyent/node/blob/master/lib/util.js\n\n    function inspect(obj, opts) {\n      var ctx = {\n        seen: [],\n        formatValueCalls: 0,\n        stylize: stylizeNoColor\n      };\n      return formatValue(ctx, obj, opts.depth);\n    }\n    function stylizeNoColor(str, styleType) {\n      return str;\n    }\n    function arrayToHash(array) {\n      var hash = {};\n      array.forEach(function (val, idx) {\n        hash[val] = true;\n      });\n      return hash;\n    }\n    function formatValue(ctx, value, recurseTimes) {\n      ctx.formatValueCalls++;\n      if (ctx.formatValueCalls > 200) {\n        return `[TOO BIG formatValueCalls ${ctx.formatValueCalls} exceeded limit of 200]`;\n      }\n\n      // Primitive types cannot have properties\n      var primitive = formatPrimitive(ctx, value);\n      if (primitive) {\n        return primitive;\n      }\n\n      // Look up the keys of the object.\n      var keys = Object.keys(value);\n      var visibleKeys = arrayToHash(keys);\n\n      // IE doesn't make error fields non-enumerable\n      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n        return formatError(value);\n      }\n\n      // Some type of object without properties can be shortcutted.\n      if (keys.length === 0) {\n        if (isFunction(value)) {\n          var name = value.name ? ': ' + value.name : '';\n          return ctx.stylize('[Function' + name + ']', 'special');\n        }\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n        }\n        if (isDate(value)) {\n          return ctx.stylize(Date.prototype.toString.call(value), 'date');\n        }\n        if (isError(value)) {\n          return formatError(value);\n        }\n      }\n      var base = '',\n        array = false,\n        braces = ['{', '}'];\n\n      // Make Array say that they are Array\n      if (isArray(value)) {\n        array = true;\n        braces = ['[', ']'];\n      }\n\n      // Make functions say that they are functions\n      if (isFunction(value)) {\n        var n = value.name ? ': ' + value.name : '';\n        base = ' [Function' + n + ']';\n      }\n\n      // Make RegExps say that they are RegExps\n      if (isRegExp(value)) {\n        base = ' ' + RegExp.prototype.toString.call(value);\n      }\n\n      // Make dates with properties first say the date\n      if (isDate(value)) {\n        base = ' ' + Date.prototype.toUTCString.call(value);\n      }\n\n      // Make error with message first say the error\n      if (isError(value)) {\n        base = ' ' + formatError(value);\n      }\n      if (keys.length === 0 && (!array || value.length == 0)) {\n        return braces[0] + base + braces[1];\n      }\n      if (recurseTimes < 0) {\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n        } else {\n          return ctx.stylize('[Object]', 'special');\n        }\n      }\n      ctx.seen.push(value);\n      var output;\n      if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n      } else {\n        output = keys.map(function (key) {\n          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n      }\n      ctx.seen.pop();\n      return reduceToSingleString(output, base, braces);\n    }\n    function formatPrimitive(ctx, value) {\n      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n      if (isString(value)) {\n        var simple = \"'\" + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n        return ctx.stylize(simple, 'string');\n      }\n      if (isNumber(value)) return ctx.stylize('' + value, 'number');\n      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');\n      // For some reason typeof null is \"object\", so special case here.\n      if (isNull(value)) return ctx.stylize('null', 'null');\n    }\n    function formatError(value) {\n      return '[' + Error.prototype.toString.call(value) + ']';\n    }\n    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n      var output = [];\n      for (var i = 0, l = value.length; i < l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n        } else {\n          output.push('');\n        }\n      }\n      keys.forEach(function (key) {\n        if (!key.match(/^\\d+$/)) {\n          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n        }\n      });\n      return output;\n    }\n    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n      var name, str, desc;\n      desc = Object.getOwnPropertyDescriptor(value, key) || {\n        value: value[key]\n      };\n      if (desc.get) {\n        if (desc.set) {\n          str = ctx.stylize('[Getter/Setter]', 'special');\n        } else {\n          str = ctx.stylize('[Getter]', 'special');\n        }\n      } else {\n        if (desc.set) {\n          str = ctx.stylize('[Setter]', 'special');\n        }\n      }\n      if (!hasOwnProperty(visibleKeys, key)) {\n        name = '[' + key + ']';\n      }\n      if (!str) {\n        if (ctx.seen.indexOf(desc.value) < 0) {\n          if (isNull(recurseTimes)) {\n            str = formatValue(ctx, desc.value, null);\n          } else {\n            str = formatValue(ctx, desc.value, recurseTimes - 1);\n          }\n          if (str.indexOf('\\n') > -1) {\n            if (array) {\n              str = str.split('\\n').map(function (line) {\n                return '  ' + line;\n              }).join('\\n').slice(2);\n            } else {\n              str = '\\n' + str.split('\\n').map(function (line) {\n                return '   ' + line;\n              }).join('\\n');\n            }\n          }\n        } else {\n          str = ctx.stylize('[Circular]', 'special');\n        }\n      }\n      if (isUndefined(name)) {\n        if (array && key.match(/^\\d+$/)) {\n          return str;\n        }\n        name = JSON.stringify('' + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.slice(1, name.length - 1);\n          name = ctx.stylize(name, 'name');\n        } else {\n          name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n          name = ctx.stylize(name, 'string');\n        }\n      }\n      return name + ': ' + str;\n    }\n    function reduceToSingleString(output, base, braces) {\n      var numLinesEst = 0;\n      var length = output.reduce(function (prev, cur) {\n        numLinesEst++;\n        if (cur.indexOf('\\n') >= 0) numLinesEst++;\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n      }, 0);\n      if (length > 60) {\n        return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n      }\n      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n    }\n\n    // NOTE: These type checking functions intentionally don't use `instanceof`\n    // because it is fragile and can be easily faked with `Object.create()`.\n    function isArray(ar) {\n      return Array.isArray(ar);\n    }\n    function isBoolean(arg) {\n      return typeof arg === 'boolean';\n    }\n    function isNull(arg) {\n      return arg === null;\n    }\n    function isNullOrUndefined(arg) {\n      return arg == null;\n    }\n    function isNumber(arg) {\n      return typeof arg === 'number';\n    }\n    function isString(arg) {\n      return typeof arg === 'string';\n    }\n    function isSymbol(arg) {\n      return typeof arg === 'symbol';\n    }\n    function isUndefined(arg) {\n      return arg === void 0;\n    }\n    function isRegExp(re) {\n      return isObject(re) && objectToString(re) === '[object RegExp]';\n    }\n    function isObject(arg) {\n      return typeof arg === 'object' && arg !== null;\n    }\n    function isDate(d) {\n      return isObject(d) && objectToString(d) === '[object Date]';\n    }\n    function isError(e) {\n      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n    }\n    function isFunction(arg) {\n      return typeof arg === 'function';\n    }\n    function objectToString(o) {\n      return Object.prototype.toString.call(o);\n    }\n    function hasOwnProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n    return inspect;\n  }();\n  var OBJECT_COLUMN_NAME = '(index)';\n  var LOG_LEVELS = {\n    trace: 0,\n    info: 1,\n    warn: 2,\n    error: 3\n  };\n  var INSPECTOR_LEVELS = [];\n  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';\n  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';\n  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';\n  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';\n\n  // Strip the inner function in getNativeLogFunction(), if in dev also\n  // strip method printing to originalConsole.\n  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;\n  function getNativeLogFunction(level) {\n    return function () {\n      var str;\n      if (arguments.length === 1 && typeof arguments[0] === 'string') {\n        str = arguments[0];\n      } else {\n        str = Array.prototype.map.call(arguments, function (arg) {\n          return inspect(arg, {\n            depth: 10\n          });\n        }).join(', ');\n      }\n\n      // TRICKY\n      // If more than one argument is provided, the code above collapses them all\n      // into a single formatted string. This transform wraps string arguments in\n      // single quotes (e.g. \"foo\" -> \"'foo'\") which then breaks the \"Warning:\"\n      // check below. So it's important that we look at the first argument, rather\n      // than the formatted argument string.\n      var firstArg = arguments[0];\n      var logLevel = level;\n      if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {\n        // React warnings use console.error so that a stack trace is shown,\n        // but we don't (currently) want these to show a redbox\n        // (Note: Logic duplicated in ExceptionsManager.js.)\n        logLevel = LOG_LEVELS.warn;\n      }\n      if (global.__inspectorLog) {\n        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);\n      }\n      if (groupStack.length) {\n        str = groupFormat('', str);\n      }\n      global.nativeLoggingHook(str, logLevel);\n    };\n  }\n  function repeat(element, n) {\n    return Array.apply(null, Array(n)).map(function () {\n      return element;\n    });\n  }\n  function consoleTablePolyfill(rows) {\n    // convert object -> array\n    if (!Array.isArray(rows)) {\n      var data = rows;\n      rows = [];\n      for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n          var row = data[key];\n          row[OBJECT_COLUMN_NAME] = key;\n          rows.push(row);\n        }\n      }\n    }\n    if (rows.length === 0) {\n      global.nativeLoggingHook('', LOG_LEVELS.info);\n      return;\n    }\n    var columns = Object.keys(rows[0]).sort();\n    var stringRows = [];\n    var columnWidths = [];\n\n    // Convert each cell to a string. Also\n    // figure out max cell width for each column\n    columns.forEach(function (k, i) {\n      columnWidths[i] = k.length;\n      for (var j = 0; j < rows.length; j++) {\n        var cellStr = (rows[j][k] || '?').toString();\n        stringRows[j] = stringRows[j] || [];\n        stringRows[j][i] = cellStr;\n        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);\n      }\n    });\n\n    // Join all elements in the row into a single string with | separators\n    // (appends extra spaces to each cell to make separators  | aligned)\n    function joinRow(row, space) {\n      var cells = row.map(function (cell, i) {\n        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');\n        return cell + extraSpaces;\n      });\n      space = space || ' ';\n      return cells.join(space + '|' + space);\n    }\n    var separators = columnWidths.map(function (columnWidth) {\n      return repeat('-', columnWidth).join('');\n    });\n    var separatorRow = joinRow(separators, '-');\n    var header = joinRow(columns);\n    var table = [header, separatorRow];\n    for (var i = 0; i < rows.length; i++) {\n      table.push(joinRow(stringRows[i]));\n    }\n\n    // Notice extra empty line at the beginning.\n    // Native logging hook adds \"RCTLog >\" at the front of every\n    // logged string, which would shift the header and screw up\n    // the table\n    global.nativeLoggingHook('\\n' + table.join('\\n'), LOG_LEVELS.info);\n  }\n  var GROUP_PAD = \"\\u2502\"; // Box light vertical\n  var GROUP_OPEN = \"\\u2510\"; // Box light down+left\n  var GROUP_CLOSE = \"\\u2518\"; // Box light up+left\n\n  var groupStack = [];\n  function groupFormat(prefix, msg) {\n    // Insert group formatting before the console message\n    return groupStack.join('') + prefix + ' ' + (msg || '');\n  }\n  function consoleGroupPolyfill(label) {\n    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);\n    groupStack.push(GROUP_PAD);\n  }\n  function consoleGroupCollapsedPolyfill(label) {\n    global.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);\n    groupStack.push(GROUP_PAD);\n  }\n  function consoleGroupEndPolyfill() {\n    groupStack.pop();\n    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);\n  }\n  function consoleAssertPolyfill(expression, label) {\n    if (!expression) {\n      global.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);\n    }\n  }\n  if (global.nativeLoggingHook) {\n    var originalConsole = global.console;\n    // Preserve the original `console` as `originalConsole`\n    if (__DEV__ && originalConsole) {\n      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');\n      if (descriptor) {\n        Object.defineProperty(global, 'originalConsole', descriptor);\n      }\n    }\n    global.console = {\n      error: getNativeLogFunction(LOG_LEVELS.error),\n      info: getNativeLogFunction(LOG_LEVELS.info),\n      log: getNativeLogFunction(LOG_LEVELS.info),\n      warn: getNativeLogFunction(LOG_LEVELS.warn),\n      trace: getNativeLogFunction(LOG_LEVELS.trace),\n      debug: getNativeLogFunction(LOG_LEVELS.trace),\n      table: consoleTablePolyfill,\n      group: consoleGroupPolyfill,\n      groupEnd: consoleGroupEndPolyfill,\n      groupCollapsed: consoleGroupCollapsedPolyfill,\n      assert: consoleAssertPolyfill\n    };\n    Object.defineProperty(console, '_isPolyfilled', {\n      value: true,\n      enumerable: false\n    });\n\n    // If available, also call the original `console` method since that is\n    // sometimes useful. Ex: on OS X, this will let you see rich output in\n    // the Safari Web Inspector console.\n    if (__DEV__ && originalConsole) {\n      Object.keys(console).forEach(function (methodName) {\n        var reactNativeMethod = console[methodName];\n        if (originalConsole[methodName]) {\n          console[methodName] = function () {\n            originalConsole[methodName].apply(originalConsole, arguments);\n            reactNativeMethod.apply(console, arguments);\n          };\n        }\n      });\n\n      // The following methods are not supported by this polyfill but\n      // we still should pass them to original console if they are\n      // supported by it.\n      ['clear', 'dir', 'dirxml', 'profile', 'profileEnd'].forEach(function (methodName) {\n        if (typeof originalConsole[methodName] === 'function') {\n          console[methodName] = function () {\n            originalConsole[methodName].apply(originalConsole, arguments);\n          };\n        }\n      });\n    }\n  } else if (!global.console) {\n    var stub = function stub() {};\n    var log = global.print || stub;\n    global.console = {\n      debug: log,\n      error: log,\n      info: log,\n      log: log,\n      trace: log,\n      warn: log,\n      assert: function assert(expression, label) {\n        if (!expression) {\n          log('Assertion failed: ' + label);\n        }\n      },\n      clear: stub,\n      dir: stub,\n      dirxml: stub,\n      group: stub,\n      groupCollapsed: stub,\n      groupEnd: stub,\n      profile: stub,\n      profileEnd: stub,\n      table: stub\n    };\n    Object.defineProperty(console, '_isPolyfilled', {\n      value: true,\n      enumerable: false\n    });\n  }\n})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);\n(function (global) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   * @polyfill\n   */\n\n  var _inGuard = 0;\n  /**\n   * This is the error handler that is called when we encounter an exception\n   * when loading a module. This will report any errors encountered before\n   * ExceptionsManager is configured.\n   */\n  var _globalHandler = function onError(e, isFatal) {\n    throw e;\n  };\n\n  /**\n   * The particular require runtime that we are using looks for a global\n   * `ErrorUtils` object and if it exists, then it requires modules with the\n   * error handler specified via ErrorUtils.setGlobalHandler by calling the\n   * require function with applyWithGuard. Since the require module is loaded\n   * before any of the modules, this ErrorUtils must be defined (and the handler\n   * set) globally before requiring anything.\n   */\n  var ErrorUtils = {\n    setGlobalHandler: function setGlobalHandler(fun) {\n      _globalHandler = fun;\n    },\n    getGlobalHandler: function getGlobalHandler() {\n      return _globalHandler;\n    },\n    reportError: function reportError(error) {\n      _globalHandler && _globalHandler(error, false);\n    },\n    reportFatalError: function reportFatalError(error) {\n      // NOTE: This has an untyped call site in Metro.\n      _globalHandler && _globalHandler(error, true);\n    },\n    applyWithGuard: function applyWithGuard(fun, context, args,\n    // Unused, but some code synced from www sets it to null.\n    unused_onError,\n    // Some callers pass a name here, which we ignore.\n    unused_name) {\n      try {\n        _inGuard++;\n        /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        return fun.apply(context, args);\n      } catch (e) {\n        ErrorUtils.reportError(e);\n      } finally {\n        _inGuard--;\n      }\n      return null;\n    },\n    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {\n      if (ErrorUtils.inGuard()) {\n        /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        return fun.apply(context, args);\n      } else {\n        ErrorUtils.applyWithGuard(fun, context, args);\n      }\n      return null;\n    },\n    inGuard: function inGuard() {\n      return !!_inGuard;\n    },\n    guard: function guard(fun, name, context) {\n      var _ref;\n      // TODO: (moti) T48204753 Make sure this warning is never hit and remove it - types\n      // should be sufficient.\n      if (typeof fun !== 'function') {\n        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);\n        return null;\n      }\n      var guardName = (_ref = name != null ? name : fun.name) != null ? _ref : '<generated guard>';\n      /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      function guarded() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return ErrorUtils.applyWithGuard(fun, context != null ? context : this, args, null, guardName);\n      }\n      return guarded;\n    }\n  };\n  global.ErrorUtils = ErrorUtils;\n})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var THREE = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], \"three\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  global.renderCubeScene = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (device, context) {\n      var _context$canvas = context.canvas,\n        width = _context$canvas.width,\n        height = _context$canvas.height;\n      var camera = new THREE.PerspectiveCamera(70, width / height, 0.01, 10);\n      camera.position.z = 1;\n      var scene = new THREE.Scene();\n      var geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);\n      var material = new THREE.MeshNormalMaterial();\n      var mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      var renderer = (0, _$$_REQUIRE(_dependencyMap[3], \"./components/makeWebGPURenderer\").makeWebGPURenderer)(context, device);\n      console.log(\"Before init()\");\n      yield renderer.init();\n      console.log(\"After init()\");\n      function animate(time) {\n        mesh.rotation.x = time / 2000;\n        mesh.rotation.y = time / 1000;\n        renderer.render(scene, camera);\n        context.present();\n        requestAnimationFrame(animate);\n      }\n      requestAnimationFrame(animate);\n      return function () {\n        renderer.setAnimationLoop(null);\n      };\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n},0,[1,2,3,33],\"src/ThreeJS/CubeScene.ts\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      \"default\": e\n    };\n  }\n  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},1,[],\"../../node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function asyncGeneratorStep(n, t, e, r, o, a, c) {\n    try {\n      var i = n[a](c),\n        u = i.value;\n    } catch (n) {\n      return void e(n);\n    }\n    i.done ? t(u) : Promise.resolve(u).then(r, o);\n  }\n  function _asyncToGenerator(n) {\n    return function () {\n      var t = this,\n        e = arguments;\n      return new Promise(function (r, o) {\n        var a = n.apply(t, e);\n        function _next(n) {\n          asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n        }\n        function _throw(n) {\n          asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n        }\n        _next(void 0);\n      });\n    };\n  }\n  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},2,[],\"../../node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"ACESFilmicToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ACESFilmicToneMapping;\n    }\n  });\n  exports.AONode = void 0;\n  Object.defineProperty(exports, \"AddEquation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation;\n    }\n  });\n  Object.defineProperty(exports, \"AddOperation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddOperation;\n    }\n  });\n  Object.defineProperty(exports, \"AdditiveAnimationBlendMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AdditiveAnimationBlendMode;\n    }\n  });\n  Object.defineProperty(exports, \"AdditiveBlending\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AdditiveBlending;\n    }\n  });\n  Object.defineProperty(exports, \"AgXToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AgXToneMapping;\n    }\n  });\n  Object.defineProperty(exports, \"AlphaFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlphaFormat;\n    }\n  });\n  Object.defineProperty(exports, \"AlwaysCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysCompare;\n    }\n  });\n  Object.defineProperty(exports, \"AlwaysDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysDepth;\n    }\n  });\n  Object.defineProperty(exports, \"AlwaysStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"AmbientLight\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AmbientLight;\n    }\n  });\n  exports.AnalyticLightNode = exports.AmbientLightNode = void 0;\n  Object.defineProperty(exports, \"AnimationAction\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AnimationAction;\n    }\n  });\n  Object.defineProperty(exports, \"AnimationClip\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AnimationClip;\n    }\n  });\n  Object.defineProperty(exports, \"AnimationLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AnimationLoader;\n    }\n  });\n  Object.defineProperty(exports, \"AnimationMixer\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AnimationMixer;\n    }\n  });\n  Object.defineProperty(exports, \"AnimationObjectGroup\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AnimationObjectGroup;\n    }\n  });\n  Object.defineProperty(exports, \"AnimationUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AnimationUtils;\n    }\n  });\n  Object.defineProperty(exports, \"ArcCurve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ArcCurve;\n    }\n  });\n  Object.defineProperty(exports, \"ArrayCamera\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ArrayCamera;\n    }\n  });\n  exports.ArrayElementNode = void 0;\n  Object.defineProperty(exports, \"ArrowHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ArrowHelper;\n    }\n  });\n  exports.AssignNode = void 0;\n  Object.defineProperty(exports, \"AttachedBindMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AttachedBindMode;\n    }\n  });\n  exports.AttributeNode = void 0;\n  Object.defineProperty(exports, \"Audio\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Audio;\n    }\n  });\n  Object.defineProperty(exports, \"AudioAnalyser\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AudioAnalyser;\n    }\n  });\n  Object.defineProperty(exports, \"AudioContext\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AudioContext;\n    }\n  });\n  Object.defineProperty(exports, \"AudioListener\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AudioListener;\n    }\n  });\n  Object.defineProperty(exports, \"AudioLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AudioLoader;\n    }\n  });\n  Object.defineProperty(exports, \"AxesHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AxesHelper;\n    }\n  });\n  Object.defineProperty(exports, \"BackSide\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n    }\n  });\n  Object.defineProperty(exports, \"BasicDepthPacking\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BasicDepthPacking;\n    }\n  });\n  exports.BasicEnvironmentNode = void 0;\n  Object.defineProperty(exports, \"BasicShadowMap\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BasicShadowMap;\n    }\n  });\n  exports.BatchNode = void 0;\n  Object.defineProperty(exports, \"BatchedMesh\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BatchedMesh;\n    }\n  });\n  Object.defineProperty(exports, \"Bone\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Bone;\n    }\n  });\n  Object.defineProperty(exports, \"BooleanKeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BooleanKeyframeTrack;\n    }\n  });\n  Object.defineProperty(exports, \"Box2\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Box2;\n    }\n  });\n  Object.defineProperty(exports, \"Box3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Box3;\n    }\n  });\n  Object.defineProperty(exports, \"Box3Helper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Box3Helper;\n    }\n  });\n  Object.defineProperty(exports, \"BoxGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BoxGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"BoxHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BoxHelper;\n    }\n  });\n  Object.defineProperty(exports, \"BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferAttribute;\n    }\n  });\n  exports.BufferAttributeNode = void 0;\n  Object.defineProperty(exports, \"BufferGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"BufferGeometryLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferGeometryLoader;\n    }\n  });\n  exports.BypassNode = exports.BundleGroup = exports.BumpMapNode = exports.BufferNode = void 0;\n  Object.defineProperty(exports, \"ByteType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ByteType;\n    }\n  });\n  Object.defineProperty(exports, \"Cache\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Cache;\n    }\n  });\n  exports.CacheNode = void 0;\n  Object.defineProperty(exports, \"Camera\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Camera;\n    }\n  });\n  Object.defineProperty(exports, \"CameraHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CameraHelper;\n    }\n  });\n  Object.defineProperty(exports, \"CanvasTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CanvasTexture;\n    }\n  });\n  Object.defineProperty(exports, \"CapsuleGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CapsuleGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"CatmullRomCurve3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CatmullRomCurve3;\n    }\n  });\n  Object.defineProperty(exports, \"CineonToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CineonToneMapping;\n    }\n  });\n  Object.defineProperty(exports, \"CircleGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CircleGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"ClampToEdgeWrapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ClampToEdgeWrapping;\n    }\n  });\n  exports.ClippingGroup = void 0;\n  Object.defineProperty(exports, \"Clock\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Clock;\n    }\n  });\n  exports.CodeNode = void 0;\n  Object.defineProperty(exports, \"Color\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color;\n    }\n  });\n  Object.defineProperty(exports, \"ColorKeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorKeyframeTrack;\n    }\n  });\n  Object.defineProperty(exports, \"ColorManagement\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement;\n    }\n  });\n  exports.ColorSpaceNode = void 0;\n  Object.defineProperty(exports, \"CompressedArrayTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CompressedArrayTexture;\n    }\n  });\n  Object.defineProperty(exports, \"CompressedCubeTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CompressedCubeTexture;\n    }\n  });\n  Object.defineProperty(exports, \"CompressedTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CompressedTexture;\n    }\n  });\n  Object.defineProperty(exports, \"CompressedTextureLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CompressedTextureLoader;\n    }\n  });\n  exports.ComputeNode = void 0;\n  Object.defineProperty(exports, \"ConeGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ConeGeometry;\n    }\n  });\n  exports.ConstNode = void 0;\n  Object.defineProperty(exports, \"ConstantAlphaFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ConstantAlphaFactor;\n    }\n  });\n  Object.defineProperty(exports, \"ConstantColorFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ConstantColorFactor;\n    }\n  });\n  exports.ContextNode = void 0;\n  Object.defineProperty(exports, \"Controls\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Controls;\n    }\n  });\n  exports.ConvertNode = void 0;\n  Object.defineProperty(exports, \"CubeCamera\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeCamera;\n    }\n  });\n  Object.defineProperty(exports, \"CubeReflectionMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping;\n    }\n  });\n  Object.defineProperty(exports, \"CubeRefractionMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping;\n    }\n  });\n  Object.defineProperty(exports, \"CubeTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeTexture;\n    }\n  });\n  Object.defineProperty(exports, \"CubeTextureLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeTextureLoader;\n    }\n  });\n  exports.CubeTextureNode = void 0;\n  Object.defineProperty(exports, \"CubeUVReflectionMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeUVReflectionMapping;\n    }\n  });\n  Object.defineProperty(exports, \"CubicBezierCurve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubicBezierCurve;\n    }\n  });\n  Object.defineProperty(exports, \"CubicBezierCurve3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubicBezierCurve3;\n    }\n  });\n  Object.defineProperty(exports, \"CubicInterpolant\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubicInterpolant;\n    }\n  });\n  Object.defineProperty(exports, \"CullFaceBack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceBack;\n    }\n  });\n  Object.defineProperty(exports, \"CullFaceFront\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceFront;\n    }\n  });\n  Object.defineProperty(exports, \"CullFaceFrontBack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceFrontBack;\n    }\n  });\n  Object.defineProperty(exports, \"CullFaceNone\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceNone;\n    }\n  });\n  Object.defineProperty(exports, \"Curve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Curve;\n    }\n  });\n  Object.defineProperty(exports, \"CurvePath\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CurvePath;\n    }\n  });\n  Object.defineProperty(exports, \"CustomBlending\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CustomBlending;\n    }\n  });\n  Object.defineProperty(exports, \"CustomToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CustomToneMapping;\n    }\n  });\n  Object.defineProperty(exports, \"CylinderGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CylinderGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"Cylindrical\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Cylindrical;\n    }\n  });\n  Object.defineProperty(exports, \"Data3DTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Data3DTexture;\n    }\n  });\n  Object.defineProperty(exports, \"DataArrayTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DataArrayTexture;\n    }\n  });\n  Object.defineProperty(exports, \"DataTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DataTexture;\n    }\n  });\n  Object.defineProperty(exports, \"DataTextureLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DataTextureLoader;\n    }\n  });\n  Object.defineProperty(exports, \"DataUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DataUtils;\n    }\n  });\n  Object.defineProperty(exports, \"DecrementStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DecrementStencilOp;\n    }\n  });\n  Object.defineProperty(exports, \"DecrementWrapStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DecrementWrapStencilOp;\n    }\n  });\n  Object.defineProperty(exports, \"DefaultLoadingManager\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DefaultLoadingManager;\n    }\n  });\n  Object.defineProperty(exports, \"DepthFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthFormat;\n    }\n  });\n  Object.defineProperty(exports, \"DepthStencilFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthStencilFormat;\n    }\n  });\n  Object.defineProperty(exports, \"DepthTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture;\n    }\n  });\n  Object.defineProperty(exports, \"DetachedBindMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DetachedBindMode;\n    }\n  });\n  Object.defineProperty(exports, \"DirectionalLight\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DirectionalLight;\n    }\n  });\n  Object.defineProperty(exports, \"DirectionalLightHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DirectionalLightHelper;\n    }\n  });\n  exports.DirectionalLightNode = void 0;\n  Object.defineProperty(exports, \"DiscreteInterpolant\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DiscreteInterpolant;\n    }\n  });\n  Object.defineProperty(exports, \"DodecahedronGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DodecahedronGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"DoubleSide\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide;\n    }\n  });\n  Object.defineProperty(exports, \"DstAlphaFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DstAlphaFactor;\n    }\n  });\n  Object.defineProperty(exports, \"DstColorFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DstColorFactor;\n    }\n  });\n  Object.defineProperty(exports, \"DynamicCopyUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicCopyUsage;\n    }\n  });\n  Object.defineProperty(exports, \"DynamicDrawUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage;\n    }\n  });\n  Object.defineProperty(exports, \"DynamicReadUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicReadUsage;\n    }\n  });\n  Object.defineProperty(exports, \"EdgesGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EdgesGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"EllipseCurve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EllipseCurve;\n    }\n  });\n  exports.EnvironmentNode = void 0;\n  Object.defineProperty(exports, \"EqualCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualCompare;\n    }\n  });\n  Object.defineProperty(exports, \"EqualDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualDepth;\n    }\n  });\n  Object.defineProperty(exports, \"EqualStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualStencilFunc;\n    }\n  });\n  exports.EquirectUVNode = void 0;\n  Object.defineProperty(exports, \"EquirectangularReflectionMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularReflectionMapping;\n    }\n  });\n  Object.defineProperty(exports, \"EquirectangularRefractionMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularRefractionMapping;\n    }\n  });\n  Object.defineProperty(exports, \"Euler\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Euler;\n    }\n  });\n  Object.defineProperty(exports, \"EventDispatcher\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EventDispatcher;\n    }\n  });\n  exports.ExpressionNode = void 0;\n  Object.defineProperty(exports, \"ExtrudeGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ExtrudeGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"FileLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FileLoader;\n    }\n  });\n  Object.defineProperty(exports, \"Float16BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Float16BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Float32BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Float32BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"FloatType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType;\n    }\n  });\n  Object.defineProperty(exports, \"Fog\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Fog;\n    }\n  });\n  Object.defineProperty(exports, \"FogExp2\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FogExp2;\n    }\n  });\n  Object.defineProperty(exports, \"FramebufferTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FramebufferTexture;\n    }\n  });\n  exports.FrontFacingNode = void 0;\n  Object.defineProperty(exports, \"FrontSide\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FrontSide;\n    }\n  });\n  Object.defineProperty(exports, \"Frustum\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Frustum;\n    }\n  });\n  exports.FunctionOverloadingNode = exports.FunctionNode = exports.FunctionCallNode = void 0;\n  Object.defineProperty(exports, \"GLBufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GLBufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"GLSL1\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GLSL1;\n    }\n  });\n  Object.defineProperty(exports, \"GLSL3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GLSL3;\n    }\n  });\n  exports.GLSLNodeParser = void 0;\n  Object.defineProperty(exports, \"GreaterCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterCompare;\n    }\n  });\n  Object.defineProperty(exports, \"GreaterDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterDepth;\n    }\n  });\n  Object.defineProperty(exports, \"GreaterEqualCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualCompare;\n    }\n  });\n  Object.defineProperty(exports, \"GreaterEqualDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualDepth;\n    }\n  });\n  Object.defineProperty(exports, \"GreaterEqualStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"GreaterStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"GridHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GridHelper;\n    }\n  });\n  Object.defineProperty(exports, \"Group\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Group;\n    }\n  });\n  Object.defineProperty(exports, \"HalfFloatType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType;\n    }\n  });\n  Object.defineProperty(exports, \"HemisphereLight\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HemisphereLight;\n    }\n  });\n  Object.defineProperty(exports, \"HemisphereLightHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HemisphereLightHelper;\n    }\n  });\n  exports.IESSpotLightNode = exports.IESSpotLight = exports.HemisphereLightNode = void 0;\n  Object.defineProperty(exports, \"IcosahedronGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IcosahedronGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"ImageBitmapLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ImageBitmapLoader;\n    }\n  });\n  Object.defineProperty(exports, \"ImageLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ImageLoader;\n    }\n  });\n  Object.defineProperty(exports, \"ImageUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ImageUtils;\n    }\n  });\n  Object.defineProperty(exports, \"IncrementStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IncrementStencilOp;\n    }\n  });\n  Object.defineProperty(exports, \"IncrementWrapStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IncrementWrapStencilOp;\n    }\n  });\n  exports.InstanceNode = exports.IndirectStorageBufferAttribute = exports.IndexNode = void 0;\n  Object.defineProperty(exports, \"InstancedBufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedBufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"InstancedBufferGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedBufferGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"InstancedInterleavedBuffer\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedInterleavedBuffer;\n    }\n  });\n  Object.defineProperty(exports, \"InstancedMesh\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedMesh;\n    }\n  });\n  exports.InstancedPointsNodeMaterial = exports.InstancedMeshNode = void 0;\n  Object.defineProperty(exports, \"Int16BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Int16BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Int32BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Int32BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Int8BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Int8BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"IntType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType;\n    }\n  });\n  Object.defineProperty(exports, \"InterleavedBuffer\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterleavedBuffer;\n    }\n  });\n  Object.defineProperty(exports, \"InterleavedBufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterleavedBufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Interpolant\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Interpolant;\n    }\n  });\n  Object.defineProperty(exports, \"InterpolateDiscrete\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterpolateDiscrete;\n    }\n  });\n  Object.defineProperty(exports, \"InterpolateLinear\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterpolateLinear;\n    }\n  });\n  Object.defineProperty(exports, \"InterpolateSmooth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterpolateSmooth;\n    }\n  });\n  Object.defineProperty(exports, \"InvertStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InvertStencilOp;\n    }\n  });\n  exports.JoinNode = exports.IrradianceNode = void 0;\n  Object.defineProperty(exports, \"KeepStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").KeepStencilOp;\n    }\n  });\n  Object.defineProperty(exports, \"KeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").KeyframeTrack;\n    }\n  });\n  Object.defineProperty(exports, \"LOD\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LOD;\n    }\n  });\n  Object.defineProperty(exports, \"LatheGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LatheGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"Layers\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Layers;\n    }\n  });\n  Object.defineProperty(exports, \"LessCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessCompare;\n    }\n  });\n  Object.defineProperty(exports, \"LessDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessDepth;\n    }\n  });\n  Object.defineProperty(exports, \"LessEqualCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualCompare;\n    }\n  });\n  Object.defineProperty(exports, \"LessEqualDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualDepth;\n    }\n  });\n  Object.defineProperty(exports, \"LessEqualStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"LessStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"Light\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Light;\n    }\n  });\n  Object.defineProperty(exports, \"LightProbe\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LightProbe;\n    }\n  });\n  exports.LightsNode = exports.LightingNode = exports.LightingModel = exports.LightingContextNode = exports.Lighting = exports.LightProbeNode = void 0;\n  Object.defineProperty(exports, \"Line\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Line;\n    }\n  });\n  exports.Line2NodeMaterial = void 0;\n  Object.defineProperty(exports, \"Line3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Line3;\n    }\n  });\n  Object.defineProperty(exports, \"LineBasicMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineBasicMaterial;\n    }\n  });\n  exports.LineBasicNodeMaterial = void 0;\n  Object.defineProperty(exports, \"LineCurve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineCurve;\n    }\n  });\n  Object.defineProperty(exports, \"LineCurve3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineCurve3;\n    }\n  });\n  Object.defineProperty(exports, \"LineDashedMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineDashedMaterial;\n    }\n  });\n  exports.LineDashedNodeMaterial = void 0;\n  Object.defineProperty(exports, \"LineLoop\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineLoop;\n    }\n  });\n  Object.defineProperty(exports, \"LineSegments\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineSegments;\n    }\n  });\n  Object.defineProperty(exports, \"LinearFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter;\n    }\n  });\n  Object.defineProperty(exports, \"LinearInterpolant\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearInterpolant;\n    }\n  });\n  Object.defineProperty(exports, \"LinearMipMapLinearFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipMapLinearFilter;\n    }\n  });\n  Object.defineProperty(exports, \"LinearMipMapNearestFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipMapNearestFilter;\n    }\n  });\n  Object.defineProperty(exports, \"LinearMipmapLinearFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter;\n    }\n  });\n  Object.defineProperty(exports, \"LinearMipmapNearestFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapNearestFilter;\n    }\n  });\n  Object.defineProperty(exports, \"LinearSRGBColorSpace\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace;\n    }\n  });\n  Object.defineProperty(exports, \"LinearToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearToneMapping;\n    }\n  });\n  Object.defineProperty(exports, \"LinearTransfer\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearTransfer;\n    }\n  });\n  Object.defineProperty(exports, \"Loader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Loader;\n    }\n  });\n  Object.defineProperty(exports, \"LoaderUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LoaderUtils;\n    }\n  });\n  Object.defineProperty(exports, \"LoadingManager\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LoadingManager;\n    }\n  });\n  exports.LoopNode = void 0;\n  Object.defineProperty(exports, \"LoopOnce\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LoopOnce;\n    }\n  });\n  Object.defineProperty(exports, \"LoopPingPong\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LoopPingPong;\n    }\n  });\n  Object.defineProperty(exports, \"LoopRepeat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LoopRepeat;\n    }\n  });\n  Object.defineProperty(exports, \"LuminanceAlphaFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LuminanceAlphaFormat;\n    }\n  });\n  Object.defineProperty(exports, \"LuminanceFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LuminanceFormat;\n    }\n  });\n  Object.defineProperty(exports, \"MOUSE\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MOUSE;\n    }\n  });\n  exports.MatcapUVNode = exports.MRTNode = void 0;\n  Object.defineProperty(exports, \"Material\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Material;\n    }\n  });\n  Object.defineProperty(exports, \"MaterialLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MaterialLoader;\n    }\n  });\n  exports.MaterialReferenceNode = exports.MaterialNode = void 0;\n  Object.defineProperty(exports, \"MathUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MathUtils;\n    }\n  });\n  Object.defineProperty(exports, \"Matrix2\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix2;\n    }\n  });\n  Object.defineProperty(exports, \"Matrix3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix3;\n    }\n  });\n  Object.defineProperty(exports, \"Matrix4\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4;\n    }\n  });\n  Object.defineProperty(exports, \"MaxEquation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MaxEquation;\n    }\n  });\n  exports.MaxMipLevelNode = void 0;\n  Object.defineProperty(exports, \"Mesh\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh;\n    }\n  });\n  Object.defineProperty(exports, \"MeshBasicMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshBasicMaterial;\n    }\n  });\n  exports.MeshBasicNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshDepthMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshDepthMaterial;\n    }\n  });\n  Object.defineProperty(exports, \"MeshDistanceMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshDistanceMaterial;\n    }\n  });\n  Object.defineProperty(exports, \"MeshLambertMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshLambertMaterial;\n    }\n  });\n  exports.MeshLambertNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshMatcapMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshMatcapMaterial;\n    }\n  });\n  exports.MeshMatcapNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshNormalMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshNormalMaterial;\n    }\n  });\n  exports.MeshNormalNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshPhongMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshPhongMaterial;\n    }\n  });\n  exports.MeshPhongNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshPhysicalMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshPhysicalMaterial;\n    }\n  });\n  exports.MeshSSSNodeMaterial = exports.MeshPhysicalNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshStandardMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshStandardMaterial;\n    }\n  });\n  exports.MeshStandardNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MeshToonMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshToonMaterial;\n    }\n  });\n  exports.MeshToonNodeMaterial = void 0;\n  Object.defineProperty(exports, \"MinEquation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MinEquation;\n    }\n  });\n  Object.defineProperty(exports, \"MirroredRepeatWrapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MirroredRepeatWrapping;\n    }\n  });\n  Object.defineProperty(exports, \"MixOperation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MixOperation;\n    }\n  });\n  exports.MorphNode = exports.ModelNode = void 0;\n  Object.defineProperty(exports, \"MultiplyBlending\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyBlending;\n    }\n  });\n  Object.defineProperty(exports, \"MultiplyOperation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyOperation;\n    }\n  });\n  Object.defineProperty(exports, \"NearestFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter;\n    }\n  });\n  Object.defineProperty(exports, \"NearestMipMapLinearFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipMapLinearFilter;\n    }\n  });\n  Object.defineProperty(exports, \"NearestMipMapNearestFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipMapNearestFilter;\n    }\n  });\n  Object.defineProperty(exports, \"NearestMipmapLinearFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter;\n    }\n  });\n  Object.defineProperty(exports, \"NearestMipmapNearestFilter\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapNearestFilter;\n    }\n  });\n  Object.defineProperty(exports, \"NeutralToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeutralToneMapping;\n    }\n  });\n  Object.defineProperty(exports, \"NeverCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverCompare;\n    }\n  });\n  Object.defineProperty(exports, \"NeverDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverDepth;\n    }\n  });\n  Object.defineProperty(exports, \"NeverStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"NoBlending\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending;\n    }\n  });\n  Object.defineProperty(exports, \"NoColorSpace\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoColorSpace;\n    }\n  });\n  Object.defineProperty(exports, \"NoToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping;\n    }\n  });\n  exports.Node = void 0;\n  exports.NodeVarying = exports.NodeVar = exports.NodeUtils = exports.NodeUpdateType = exports.NodeUniform = exports.NodeType = exports.NodeShaderStage = exports.NodeObjectLoader = exports.NodeMaterialObserver = exports.NodeMaterialLoader = exports.NodeMaterial = exports.NodeLoader = exports.NodeFunctionInput = exports.NodeFrame = exports.NodeCode = exports.NodeCache = exports.NodeBuilder = exports.NodeAttribute = exports.NodeAccess = void 0;\n  Object.defineProperty(exports, \"NormalAnimationBlendMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalAnimationBlendMode;\n    }\n  });\n  Object.defineProperty(exports, \"NormalBlending\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending;\n    }\n  });\n  exports.NormalMapNode = void 0;\n  Object.defineProperty(exports, \"NotEqualCompare\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualCompare;\n    }\n  });\n  Object.defineProperty(exports, \"NotEqualDepth\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualDepth;\n    }\n  });\n  Object.defineProperty(exports, \"NotEqualStencilFunc\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualStencilFunc;\n    }\n  });\n  Object.defineProperty(exports, \"NumberKeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NumberKeyframeTrack;\n    }\n  });\n  Object.defineProperty(exports, \"Object3D\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Object3D;\n    }\n  });\n  exports.Object3DNode = void 0;\n  Object.defineProperty(exports, \"ObjectLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ObjectLoader;\n    }\n  });\n  Object.defineProperty(exports, \"ObjectSpaceNormalMap\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ObjectSpaceNormalMap;\n    }\n  });\n  Object.defineProperty(exports, \"OctahedronGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OctahedronGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"OneFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OneMinusConstantAlphaFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusConstantAlphaFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OneMinusConstantColorFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusConstantColorFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OneMinusDstAlphaFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusDstAlphaFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OneMinusDstColorFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusDstColorFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OneMinusSrcAlphaFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusSrcAlphaFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OneMinusSrcColorFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusSrcColorFactor;\n    }\n  });\n  Object.defineProperty(exports, \"OrthographicCamera\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OrthographicCamera;\n    }\n  });\n  exports.OutputStructNode = void 0;\n  Object.defineProperty(exports, \"PCFShadowMap\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PCFShadowMap;\n    }\n  });\n  Object.defineProperty(exports, \"PCFSoftShadowMap\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PCFSoftShadowMap;\n    }\n  });\n  exports.PassNode = exports.ParameterNode = exports.PMREMNode = exports.PMREMGenerator = void 0;\n  Object.defineProperty(exports, \"Path\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Path;\n    }\n  });\n  Object.defineProperty(exports, \"PerspectiveCamera\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PerspectiveCamera;\n    }\n  });\n  exports.PhysicalLightingModel = exports.PhongLightingModel = void 0;\n  Object.defineProperty(exports, \"Plane\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Plane;\n    }\n  });\n  Object.defineProperty(exports, \"PlaneGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PlaneGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"PlaneHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PlaneHelper;\n    }\n  });\n  Object.defineProperty(exports, \"PointLight\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PointLight;\n    }\n  });\n  Object.defineProperty(exports, \"PointLightHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PointLightHelper;\n    }\n  });\n  exports.PointUVNode = exports.PointLightNode = void 0;\n  Object.defineProperty(exports, \"Points\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Points;\n    }\n  });\n  Object.defineProperty(exports, \"PointsMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PointsMaterial;\n    }\n  });\n  exports.PointsNodeMaterial = void 0;\n  Object.defineProperty(exports, \"PolarGridHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PolarGridHelper;\n    }\n  });\n  Object.defineProperty(exports, \"PolyhedronGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PolyhedronGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"PositionalAudio\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PositionalAudio;\n    }\n  });\n  exports.PosterizeNode = exports.PostProcessing = void 0;\n  Object.defineProperty(exports, \"PropertyBinding\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PropertyBinding;\n    }\n  });\n  Object.defineProperty(exports, \"PropertyMixer\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PropertyMixer;\n    }\n  });\n  exports.QuadMesh = exports.PropertyNode = void 0;\n  Object.defineProperty(exports, \"QuadraticBezierCurve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").QuadraticBezierCurve;\n    }\n  });\n  Object.defineProperty(exports, \"QuadraticBezierCurve3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").QuadraticBezierCurve3;\n    }\n  });\n  Object.defineProperty(exports, \"Quaternion\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Quaternion;\n    }\n  });\n  Object.defineProperty(exports, \"QuaternionKeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").QuaternionKeyframeTrack;\n    }\n  });\n  Object.defineProperty(exports, \"QuaternionLinearInterpolant\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").QuaternionLinearInterpolant;\n    }\n  });\n  Object.defineProperty(exports, \"RED_GREEN_RGTC2_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RED_GREEN_RGTC2_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RED_RGTC1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RED_RGTC1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"REVISION\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").REVISION;\n    }\n  });\n  Object.defineProperty(exports, \"RGBADepthPacking\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBADepthPacking;\n    }\n  });\n  Object.defineProperty(exports, \"RGBAFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat;\n    }\n  });\n  Object.defineProperty(exports, \"RGBAIntegerFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAIntegerFormat;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_10x10_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x10_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_10x5_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x5_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_10x6_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x6_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_10x8_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x8_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_12x10_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x10_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_12x12_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x12_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_4x4_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_4x4_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_5x4_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x4_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_5x5_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x5_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_6x5_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x5_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_6x6_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x6_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_8x5_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x5_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_8x6_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x6_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ASTC_8x8_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x8_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_BPTC_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_BPTC_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_ETC2_EAC_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ETC2_EAC_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_PVRTC_2BPPV1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_PVRTC_2BPPV1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_PVRTC_4BPPV1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_PVRTC_4BPPV1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_S3TC_DXT1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_S3TC_DXT3_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT3_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBA_S3TC_DXT5_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT5_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGBDepthPacking\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBDepthPacking;\n    }\n  });\n  Object.defineProperty(exports, \"RGBFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBFormat;\n    }\n  });\n  Object.defineProperty(exports, \"RGBIntegerFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBIntegerFormat;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_BPTC_SIGNED_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_BPTC_SIGNED_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_BPTC_UNSIGNED_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_BPTC_UNSIGNED_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_ETC1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_ETC2_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC2_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_PVRTC_2BPPV1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_PVRTC_2BPPV1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_PVRTC_4BPPV1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_PVRTC_4BPPV1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGB_S3TC_DXT1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_S3TC_DXT1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"RGDepthPacking\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGDepthPacking;\n    }\n  });\n  Object.defineProperty(exports, \"RGFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGFormat;\n    }\n  });\n  Object.defineProperty(exports, \"RGIntegerFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGIntegerFormat;\n    }\n  });\n  exports.RangeNode = exports.RTTNode = void 0;\n  Object.defineProperty(exports, \"RawShaderMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RawShaderMaterial;\n    }\n  });\n  Object.defineProperty(exports, \"Ray\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Ray;\n    }\n  });\n  Object.defineProperty(exports, \"Raycaster\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Raycaster;\n    }\n  });\n  Object.defineProperty(exports, \"RectAreaLight\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RectAreaLight;\n    }\n  });\n  exports.RectAreaLightNode = void 0;\n  Object.defineProperty(exports, \"RedFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedFormat;\n    }\n  });\n  Object.defineProperty(exports, \"RedIntegerFormat\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedIntegerFormat;\n    }\n  });\n  exports.ReflectorNode = exports.ReferenceNode = void 0;\n  Object.defineProperty(exports, \"ReinhardToneMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReinhardToneMapping;\n    }\n  });\n  exports.RenderOutputNode = exports.RemapNode = void 0;\n  Object.defineProperty(exports, \"RenderTarget\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget;\n    }\n  });\n  Object.defineProperty(exports, \"RenderTarget3D\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget3D;\n    }\n  });\n  Object.defineProperty(exports, \"RenderTargetArray\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTargetArray;\n    }\n  });\n  exports.RendererUtils = exports.RendererReferenceNode = void 0;\n  Object.defineProperty(exports, \"RepeatWrapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RepeatWrapping;\n    }\n  });\n  Object.defineProperty(exports, \"ReplaceStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReplaceStencilOp;\n    }\n  });\n  Object.defineProperty(exports, \"ReverseSubtractEquation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReverseSubtractEquation;\n    }\n  });\n  Object.defineProperty(exports, \"RingGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RingGeometry;\n    }\n  });\n  exports.RotateNode = void 0;\n  Object.defineProperty(exports, \"SIGNED_RED_GREEN_RGTC2_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SIGNED_RED_GREEN_RGTC2_Format;\n    }\n  });\n  Object.defineProperty(exports, \"SIGNED_RED_RGTC1_Format\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SIGNED_RED_RGTC1_Format;\n    }\n  });\n  Object.defineProperty(exports, \"SRGBColorSpace\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace;\n    }\n  });\n  Object.defineProperty(exports, \"SRGBTransfer\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBTransfer;\n    }\n  });\n  Object.defineProperty(exports, \"Scene\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Scene;\n    }\n  });\n  exports.SetNode = exports.ScriptableValueNode = exports.ScriptableNode = exports.ScreenNode = exports.SceneNode = void 0;\n  Object.defineProperty(exports, \"ShaderMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShaderMaterial;\n    }\n  });\n  exports.ShadowBaseNode = void 0;\n  Object.defineProperty(exports, \"ShadowMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShadowMaterial;\n    }\n  });\n  exports.ShadowNodeMaterial = exports.ShadowNode = void 0;\n  Object.defineProperty(exports, \"Shape\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Shape;\n    }\n  });\n  Object.defineProperty(exports, \"ShapeGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShapeGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"ShapePath\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShapePath;\n    }\n  });\n  Object.defineProperty(exports, \"ShapeUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShapeUtils;\n    }\n  });\n  Object.defineProperty(exports, \"ShortType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShortType;\n    }\n  });\n  Object.defineProperty(exports, \"Skeleton\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Skeleton;\n    }\n  });\n  Object.defineProperty(exports, \"SkeletonHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SkeletonHelper;\n    }\n  });\n  Object.defineProperty(exports, \"SkinnedMesh\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SkinnedMesh;\n    }\n  });\n  exports.SkinningNode = void 0;\n  Object.defineProperty(exports, \"Source\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Source;\n    }\n  });\n  Object.defineProperty(exports, \"Sphere\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Sphere;\n    }\n  });\n  Object.defineProperty(exports, \"SphereGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SphereGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"Spherical\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Spherical;\n    }\n  });\n  Object.defineProperty(exports, \"SphericalHarmonics3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SphericalHarmonics3;\n    }\n  });\n  Object.defineProperty(exports, \"SplineCurve\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SplineCurve;\n    }\n  });\n  exports.SplitNode = void 0;\n  Object.defineProperty(exports, \"SpotLight\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SpotLight;\n    }\n  });\n  Object.defineProperty(exports, \"SpotLightHelper\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SpotLightHelper;\n    }\n  });\n  exports.SpotLightNode = void 0;\n  Object.defineProperty(exports, \"Sprite\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Sprite;\n    }\n  });\n  Object.defineProperty(exports, \"SpriteMaterial\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SpriteMaterial;\n    }\n  });\n  exports.SpriteSheetUVNode = exports.SpriteNodeMaterial = void 0;\n  Object.defineProperty(exports, \"SrcAlphaFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcAlphaFactor;\n    }\n  });\n  Object.defineProperty(exports, \"SrcAlphaSaturateFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcAlphaSaturateFactor;\n    }\n  });\n  Object.defineProperty(exports, \"SrcColorFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcColorFactor;\n    }\n  });\n  exports.StackNode = void 0;\n  Object.defineProperty(exports, \"StaticCopyUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StaticCopyUsage;\n    }\n  });\n  Object.defineProperty(exports, \"StaticDrawUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StaticDrawUsage;\n    }\n  });\n  Object.defineProperty(exports, \"StaticReadUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StaticReadUsage;\n    }\n  });\n  Object.defineProperty(exports, \"StereoCamera\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StereoCamera;\n    }\n  });\n  exports.StorageTextureNode = exports.StorageTexture = exports.StorageInstancedBufferAttribute = exports.StorageBufferNode = exports.StorageBufferAttribute = exports.StorageArrayElementNode = void 0;\n  Object.defineProperty(exports, \"StreamCopyUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StreamCopyUsage;\n    }\n  });\n  Object.defineProperty(exports, \"StreamDrawUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StreamDrawUsage;\n    }\n  });\n  Object.defineProperty(exports, \"StreamReadUsage\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StreamReadUsage;\n    }\n  });\n  Object.defineProperty(exports, \"StringKeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StringKeyframeTrack;\n    }\n  });\n  Object.defineProperty(exports, \"SubtractEquation\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractEquation;\n    }\n  });\n  Object.defineProperty(exports, \"SubtractiveBlending\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractiveBlending;\n    }\n  });\n  Object.defineProperty(exports, \"TOUCH\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TOUCH;\n    }\n  });\n  exports.TSL = void 0;\n  Object.defineProperty(exports, \"TangentSpaceNormalMap\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TangentSpaceNormalMap;\n    }\n  });\n  exports.TempNode = void 0;\n  Object.defineProperty(exports, \"TetrahedronGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TetrahedronGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"Texture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Texture;\n    }\n  });\n  exports.Texture3DNode = void 0;\n  Object.defineProperty(exports, \"TextureLoader\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TextureLoader;\n    }\n  });\n  exports.TextureSizeNode = exports.TextureNode = void 0;\n  Object.defineProperty(exports, \"TextureUtils\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TextureUtils;\n    }\n  });\n  exports.ToonOutlinePassNode = exports.ToneMappingNode = void 0;\n  Object.defineProperty(exports, \"TorusGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TorusGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"TorusKnotGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TorusKnotGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"Triangle\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Triangle;\n    }\n  });\n  Object.defineProperty(exports, \"TriangleFanDrawMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TriangleFanDrawMode;\n    }\n  });\n  Object.defineProperty(exports, \"TriangleStripDrawMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TriangleStripDrawMode;\n    }\n  });\n  Object.defineProperty(exports, \"TrianglesDrawMode\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TrianglesDrawMode;\n    }\n  });\n  exports.TriplanarTexturesNode = void 0;\n  Object.defineProperty(exports, \"TubeGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TubeGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"UVMapping\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UVMapping;\n    }\n  });\n  Object.defineProperty(exports, \"Uint16BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uint16BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Uint32BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uint32BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Uint8BufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uint8BufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Uint8ClampedBufferAttribute\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uint8ClampedBufferAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"Uniform\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uniform;\n    }\n  });\n  exports.UniformNode = exports.UniformGroupNode = exports.UniformArrayNode = void 0;\n  Object.defineProperty(exports, \"UniformsGroup\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UniformsGroup;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedByteType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedInt248Type\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt248Type;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedInt5999Type\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt5999Type;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedIntType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedShort4444Type\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShort4444Type;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedShort5551Type\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShort5551Type;\n    }\n  });\n  Object.defineProperty(exports, \"UnsignedShortType\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType;\n    }\n  });\n  exports.UserDataNode = void 0;\n  Object.defineProperty(exports, \"VSMShadowMap\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VSMShadowMap;\n    }\n  });\n  exports.VaryingNode = exports.VarNode = void 0;\n  Object.defineProperty(exports, \"Vector2\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2;\n    }\n  });\n  Object.defineProperty(exports, \"Vector3\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3;\n    }\n  });\n  Object.defineProperty(exports, \"Vector4\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4;\n    }\n  });\n  Object.defineProperty(exports, \"VectorKeyframeTrack\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VectorKeyframeTrack;\n    }\n  });\n  exports.VertexColorNode = void 0;\n  Object.defineProperty(exports, \"VideoTexture\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VideoTexture;\n    }\n  });\n  exports.VolumeNodeMaterial = exports.ViewportTextureNode = exports.ViewportSharedTextureNode = exports.ViewportDepthTextureNode = exports.ViewportDepthNode = void 0;\n  Object.defineProperty(exports, \"WebGL3DRenderTarget\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGL3DRenderTarget;\n    }\n  });\n  Object.defineProperty(exports, \"WebGLArrayRenderTarget\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLArrayRenderTarget;\n    }\n  });\n  Object.defineProperty(exports, \"WebGLCoordinateSystem\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCoordinateSystem;\n    }\n  });\n  Object.defineProperty(exports, \"WebGLCubeRenderTarget\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCubeRenderTarget;\n    }\n  });\n  Object.defineProperty(exports, \"WebGLRenderTarget\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLRenderTarget;\n    }\n  });\n  Object.defineProperty(exports, \"WebGPUCoordinateSystem\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem;\n    }\n  });\n  exports.WebGPURenderer = void 0;\n  Object.defineProperty(exports, \"WireframeGeometry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WireframeGeometry;\n    }\n  });\n  Object.defineProperty(exports, \"WrapAroundEnding\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WrapAroundEnding;\n    }\n  });\n  Object.defineProperty(exports, \"ZeroCurvatureEnding\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroCurvatureEnding;\n    }\n  });\n  Object.defineProperty(exports, \"ZeroFactor\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroFactor;\n    }\n  });\n  Object.defineProperty(exports, \"ZeroSlopeEnding\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroSlopeEnding;\n    }\n  });\n  Object.defineProperty(exports, \"ZeroStencilOp\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroStencilOp;\n    }\n  });\n  Object.defineProperty(exports, \"createCanvasElement\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").createCanvasElement;\n    }\n  });\n  exports.vectorComponents = exports.shaderStages = exports.defaultShaderStages = exports.defaultBuildStages = void 0;\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n  var _readOnlyError2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/readOnlyError\"));\n  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/wrapNativeSuper\"));\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/slicedToArray\"));\n  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/get\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"@babel/runtime/helpers/inherits\"));\n  var _construct2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"@babel/runtime/helpers/construct\"));\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14], \"@babel/runtime/helpers/createClass\"));\n  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**\n * @license\n * Copyright 2010-2024 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n  var refreshUniforms = ['alphaMap', 'alphaTest', 'anisotropy', 'anisotropyMap', 'anisotropyRotation', 'aoMap', 'attenuationColor', 'attenuationDistance', 'bumpMap', 'clearcoat', 'clearcoatMap', 'clearcoatNormalMap', 'clearcoatNormalScale', 'clearcoatRoughness', 'color', 'dispersion', 'displacementMap', 'emissive', 'emissiveMap', 'envMap', 'gradientMap', 'ior', 'iridescence', 'iridescenceIOR', 'iridescenceMap', 'iridescenceThicknessMap', 'lightMap', 'map', 'matcap', 'metalness', 'metalnessMap', 'normalMap', 'normalScale', 'opacity', 'roughness', 'roughnessMap', 'sheen', 'sheenColor', 'sheenColorMap', 'sheenRoughnessMap', 'shininess', 'specular', 'specularColor', 'specularColorMap', 'specularIntensity', 'specularIntensityMap', 'specularMap', 'thickness', 'transmission', 'transmissionMap'];\n\n  /**\n   * This class is used by {@link WebGPURenderer} as management component.\n   * It's primary purpose is to determine whether render objects require a\n   * refresh right before they are going to be rendered or not.\n   */\n  var NodeMaterialObserver = exports.NodeMaterialObserver = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node material observer.\n     *\n     * @param {NodeBuilder} builder - The node builder.\n     */\n    function NodeMaterialObserver(builder) {\n      (0, _classCallCheck2.default)(this, NodeMaterialObserver);\n      /**\n       * A node material can be used by more than one render object so the\n       * monitor must maintain a list of render objects.\n       *\n       * @type {WeakMap<RenderObject,Object>}\n       */\n      this.renderObjects = new WeakMap();\n\n      /**\n       * Whether the material uses node objects or not.\n       *\n       * @type {Boolean}\n       */\n      this.hasNode = this.containsNode(builder);\n\n      /**\n       * Whether the node builder's 3D object is animated or not.\n       *\n       * @type {Boolean}\n       */\n      this.hasAnimation = builder.object.isSkinnedMesh === true;\n\n      /**\n       * A list of all possible material uniforms\n       *\n       * @type {Array<String>}\n       */\n      this.refreshUniforms = refreshUniforms;\n\n      /**\n       * Holds the current render ID from the node frame.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.renderId = 0;\n    }\n\n    /**\n     * Returns `true` if the given render object is verified for the first time of this observer.\n     *\n     * @param {RenderObject} renderObject - The render object.\n     * @return {Boolean} Whether the given render object is verified for the first time of this observer.\n     */\n    return (0, _createClass2.default)(NodeMaterialObserver, [{\n      key: \"firstInitialization\",\n      value: function firstInitialization(renderObject) {\n        var hasInitialized = this.renderObjects.has(renderObject);\n        if (hasInitialized === false) {\n          this.getRenderObjectData(renderObject);\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Returns monitoring data for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Object} The monitoring data.\n       */\n    }, {\n      key: \"getRenderObjectData\",\n      value: function getRenderObjectData(renderObject) {\n        var data = this.renderObjects.get(renderObject);\n        if (data === undefined) {\n          var geometry = renderObject.geometry,\n            material = renderObject.material,\n            object = renderObject.object;\n          data = {\n            material: this.getMaterialData(material),\n            geometry: {\n              attributes: this.getAttributesData(geometry.attributes),\n              indexVersion: geometry.index ? geometry.index.version : null,\n              drawRange: {\n                start: geometry.drawRange.start,\n                count: geometry.drawRange.count\n              }\n            },\n            worldMatrix: object.matrixWorld.clone()\n          };\n          if (object.center) {\n            data.center = object.center.clone();\n          }\n          if (object.morphTargetInfluences) {\n            data.morphTargetInfluences = object.morphTargetInfluences.slice();\n          }\n          if (renderObject.bundle !== null) {\n            data.version = renderObject.bundle.version;\n          }\n          if (data.material.transmission > 0) {\n            var _renderObject$context = renderObject.context,\n              width = _renderObject$context.width,\n              height = _renderObject$context.height;\n            data.bufferWidth = width;\n            data.bufferHeight = height;\n          }\n          this.renderObjects.set(renderObject, data);\n        }\n        return data;\n      }\n\n      /**\n       * Returns an attribute data structure holding the attributes versions for\n       * monitoring.\n       *\n       * @param {Object} attributes - The geometry attributes.\n       * @return {Object} An object for monitoring the versions of attributes.\n       */\n    }, {\n      key: \"getAttributesData\",\n      value: function getAttributesData(attributes) {\n        var attributesData = {};\n        for (var name in attributes) {\n          var _attribute = attributes[name];\n          attributesData[name] = {\n            version: _attribute.version\n          };\n        }\n        return attributesData;\n      }\n\n      /**\n       * Returns `true` if the node builder's material uses\n       * node properties.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Boolean} Whether the node builder's material uses node properties or not.\n       */\n    }, {\n      key: \"containsNode\",\n      value: function containsNode(builder) {\n        var material = builder.material;\n        for (var _property in material) {\n          if (material[_property] && material[_property].isNode) return true;\n        }\n        if (builder.renderer.nodes.modelViewMatrix !== null || builder.renderer.nodes.modelNormalViewMatrix !== null) return true;\n        return false;\n      }\n\n      /**\n       * Returns a material data structure holding the material property values for\n       * monitoring.\n       *\n       * @param {Material} material - The material.\n       * @return {Object} An object for monitoring material properties.\n       */\n    }, {\n      key: \"getMaterialData\",\n      value: function getMaterialData(material) {\n        var data = {};\n        for (var _property2 of this.refreshUniforms) {\n          var value = material[_property2];\n          if (value === null || value === undefined) continue;\n          if (typeof value === 'object' && value.clone !== undefined) {\n            if (value.isTexture === true) {\n              data[_property2] = {\n                id: value.id,\n                version: value.version\n              };\n            } else {\n              data[_property2] = value.clone();\n            }\n          } else {\n            data[_property2] = value;\n          }\n        }\n        return data;\n      }\n\n      /**\n       * Returns `true` if the given render object has not changed its state.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Boolean} Whether the given render object has changed its state or not.\n       */\n    }, {\n      key: \"equals\",\n      value: function equals(renderObject) {\n        var object = renderObject.object,\n          material = renderObject.material,\n          geometry = renderObject.geometry;\n        var renderObjectData = this.getRenderObjectData(renderObject);\n\n        // world matrix\n\n        if (renderObjectData.worldMatrix.equals(object.matrixWorld) !== true) {\n          renderObjectData.worldMatrix.copy(object.matrixWorld);\n          return false;\n        }\n\n        // material\n\n        var materialData = renderObjectData.material;\n        for (var _property3 in materialData) {\n          var value = materialData[_property3];\n          var mtlValue = material[_property3];\n          if (value.equals !== undefined) {\n            if (value.equals(mtlValue) === false) {\n              value.copy(mtlValue);\n              return false;\n            }\n          } else if (mtlValue.isTexture === true) {\n            if (value.id !== mtlValue.id || value.version !== mtlValue.version) {\n              value.id = mtlValue.id;\n              value.version = mtlValue.version;\n              return false;\n            }\n          } else if (value !== mtlValue) {\n            materialData[_property3] = mtlValue;\n            return false;\n          }\n        }\n        if (materialData.transmission > 0) {\n          var _renderObject$context2 = renderObject.context,\n            width = _renderObject$context2.width,\n            height = _renderObject$context2.height;\n          if (renderObjectData.bufferWidth !== width || renderObjectData.bufferHeight !== height) {\n            renderObjectData.bufferWidth = width;\n            renderObjectData.bufferHeight = height;\n            return false;\n          }\n        }\n\n        // geometry\n\n        var storedGeometryData = renderObjectData.geometry;\n        var attributes = geometry.attributes;\n        var storedAttributes = storedGeometryData.attributes;\n        var storedAttributeNames = Object.keys(storedAttributes);\n        var currentAttributeNames = Object.keys(attributes);\n        if (storedAttributeNames.length !== currentAttributeNames.length) {\n          renderObjectData.geometry.attributes = this.getAttributesData(attributes);\n          return false;\n        }\n\n        // compare each attribute\n\n        for (var name of storedAttributeNames) {\n          var storedAttributeData = storedAttributes[name];\n          var _attribute2 = attributes[name];\n          if (_attribute2 === undefined) {\n            // attribute was removed\n            delete storedAttributes[name];\n            return false;\n          }\n          if (storedAttributeData.version !== _attribute2.version) {\n            storedAttributeData.version = _attribute2.version;\n            return false;\n          }\n        }\n\n        // check index\n\n        var index = geometry.index;\n        var storedIndexVersion = storedGeometryData.indexVersion;\n        var currentIndexVersion = index ? index.version : null;\n        if (storedIndexVersion !== currentIndexVersion) {\n          storedGeometryData.indexVersion = currentIndexVersion;\n          return false;\n        }\n\n        // check drawRange\n\n        if (storedGeometryData.drawRange.start !== geometry.drawRange.start || storedGeometryData.drawRange.count !== geometry.drawRange.count) {\n          storedGeometryData.drawRange.start = geometry.drawRange.start;\n          storedGeometryData.drawRange.count = geometry.drawRange.count;\n          return false;\n        }\n\n        // morph targets\n\n        if (renderObjectData.morphTargetInfluences) {\n          var morphChanged = false;\n          for (var i = 0; i < renderObjectData.morphTargetInfluences.length; i++) {\n            if (renderObjectData.morphTargetInfluences[i] !== object.morphTargetInfluences[i]) {\n              morphChanged = true;\n            }\n          }\n          if (morphChanged) return true;\n        }\n\n        // center\n\n        if (renderObjectData.center) {\n          if (renderObjectData.center.equals(object.center) === false) {\n            renderObjectData.center.copy(object.center);\n            return true;\n          }\n        }\n\n        // bundle\n\n        if (renderObject.bundle !== null) {\n          renderObjectData.version = renderObject.bundle.version;\n        }\n        return true;\n      }\n\n      /**\n       * Checks if the given render object requires a refresh.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @param {NodeFrame} nodeFrame - The current node frame.\n       * @return {Boolean} Whether the given render object requires a refresh or not.\n       */\n    }, {\n      key: \"needsRefresh\",\n      value: function needsRefresh(renderObject, nodeFrame) {\n        if (this.hasNode || this.hasAnimation || this.firstInitialization(renderObject)) return true;\n        var renderId = nodeFrame.renderId;\n        if (this.renderId !== renderId) {\n          this.renderId = renderId;\n          return true;\n        }\n        var isStatic = renderObject.object.static === true;\n        var isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData(renderObject).version === renderObject.bundle.version;\n        if (isStatic || isBundle) return false;\n        var notEqual = this.equals(renderObject) !== true;\n        return notEqual;\n      }\n    }]);\n  }();\n  /** @module NodeUtils **/\n  // cyrb53 (c) 2018 bryc (github.com/bryc). License: Public domain. Attribution appreciated.\n  // A fast and simple 64-bit (or 53-bit) string hash function with decent collision resistance.\n  // Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity.\n  // See https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480\n  // https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js\n  function cyrb53(value) {\n    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var h1 = 0xdeadbeef ^ seed,\n      h2 = 0x41c6ce57 ^ seed;\n    if (value instanceof Array) {\n      for (var i = 0, val; i < value.length; i++) {\n        val = value[i];\n        h1 = Math.imul(h1 ^ val, 2654435761);\n        h2 = Math.imul(h2 ^ val, 1597334677);\n      }\n    } else {\n      for (var _i = 0, ch; _i < value.length; _i++) {\n        ch = value.charCodeAt(_i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n      }\n    }\n    h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n    h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n    h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n    h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n  }\n\n  /**\n   * Computes a hash for the given string.\n   *\n   * @method\n   * @param {String} str - The string to be hashed.\n   * @return {Number} The hash.\n   */\n  var hashString = function hashString(str) {\n    return cyrb53(str);\n  };\n\n  /**\n   * Computes a hash for the given array.\n   *\n   * @method\n   * @param {Array<Number>} array - The array to be hashed.\n   * @return {Number} The hash.\n   */\n  var hashArray = function hashArray(array) {\n    return cyrb53(array);\n  };\n\n  /**\n   * Computes a hash for the given list of parameters.\n   *\n   * @method\n   * @param {...Number} params - A list of parameters.\n   * @return {Number} The hash.\n   */\n  var hash$1 = function hash$1() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n    return cyrb53(params);\n  };\n\n  /**\n   * Computes a cache key for the given node.\n   *\n   * @method\n   * @param {Object} object - The object to be hashed.\n   * @param {Boolean} [force=false] - Whether to force a cache key computation or not.\n   * @return {Number} The hash.\n   */\n  function getCacheKey$1(object) {\n    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var values = [];\n    if (object.isNode === true) {\n      values.push(object.id);\n      object = object.getSelf();\n    }\n    for (var _ref of getNodeChildren(object)) {\n      var _property4 = _ref.property;\n      var childNode = _ref.childNode;\n      values.push(values, cyrb53(_property4.slice(0, -4)), childNode.getCacheKey(force));\n    }\n    return cyrb53(values);\n  }\n\n  /**\n   * This generator function can be used to iterate over the node children\n   * of the given object.\n   *\n   * @generator\n   * @param {Object} node - The object to be hashed.\n   * @param {Boolean} [toJSON=false] - Whether to return JSON or not.\n   * @yields {Object} A result node holding the property, index (if available) and the child node.\n   */\n  function getNodeChildren(node) {\n    var toJSON = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return function* () {\n      for (var _property5 in node) {\n        // Ignore private properties.\n        if (_property5.startsWith('_') === true) continue;\n        var object = node[_property5];\n        if (Array.isArray(object) === true) {\n          for (var i = 0; i < object.length; i++) {\n            var child = object[i];\n            if (child && (child.isNode === true || toJSON && typeof child.toJSON === 'function')) {\n              yield {\n                property: _property5,\n                index: i,\n                childNode: child\n              };\n            }\n          }\n        } else if (object && object.isNode === true) {\n          yield {\n            property: _property5,\n            childNode: object\n          };\n        } else if (typeof object === 'object') {\n          for (var subProperty in object) {\n            var _child = object[subProperty];\n            if (_child && (_child.isNode === true || toJSON && typeof _child.toJSON === 'function')) {\n              yield {\n                property: _property5,\n                index: subProperty,\n                childNode: _child\n              };\n            }\n          }\n        }\n      }\n    }();\n  }\n  var typeFromLength = /*@__PURE__*/new Map([[1, 'float'], [2, 'vec2'], [3, 'vec3'], [4, 'vec4'], [9, 'mat3'], [16, 'mat4']]);\n  var dataFromObject = /*@__PURE__*/new WeakMap();\n\n  /**\n   * Returns the data type for the given the length.\n   *\n   * @method\n   * @param {Number} length - The length.\n   * @return {String} The data type.\n   */\n  function _getTypeFromLength(length) {\n    return typeFromLength.get(length);\n  }\n\n  /**\n   * Returns the typed array for the given data type.\n   *\n   * @method\n   * @param {String} type - The data type.\n   * @return {TypedArray} The typed array.\n   */\n  function getTypedArrayFromType(type) {\n    // Handle component type for vectors and matrices\n    if (/[iu]?vec\\d/.test(type)) {\n      // Handle int vectors\n      if (type.startsWith('ivec')) return Int32Array;\n      // Handle uint vectors\n      if (type.startsWith('uvec')) return Uint32Array;\n      // Default to float vectors\n      return Float32Array;\n    }\n\n    // Handle matrices (always float)\n    if (/mat\\d/.test(type)) return Float32Array;\n\n    // Basic types\n    if (/float/.test(type)) return Float32Array;\n    if (/uint/.test(type)) return Uint32Array;\n    if (/int/.test(type)) return Int32Array;\n    throw new Error(`THREE.NodeUtils: Unsupported type: ${type}`);\n  }\n\n  /**\n   * Returns the length for the given data type.\n   *\n   * @method\n   * @param {String} type - The data type.\n   * @return {Number} The length.\n   */\n  function getLengthFromType(type) {\n    if (/float|int|uint/.test(type)) return 1;\n    if (/vec2/.test(type)) return 2;\n    if (/vec3/.test(type)) return 3;\n    if (/vec4/.test(type)) return 4;\n    if (/mat3/.test(type)) return 9;\n    if (/mat4/.test(type)) return 16;\n    console.error('THREE.TSL: Unsupported type:', type);\n  }\n\n  /**\n   * Returns the data type for the given value.\n   *\n   * @method\n   * @param {Any} value - The value.\n   * @return {String?} The data type.\n   */\n  function getValueType(value) {\n    if (value === undefined || value === null) return null;\n    var typeOf = typeof value;\n    if (value.isNode === true) {\n      return 'node';\n    } else if (typeOf === 'number') {\n      return 'float';\n    } else if (typeOf === 'boolean') {\n      return 'bool';\n    } else if (typeOf === 'string') {\n      return 'string';\n    } else if (typeOf === 'function') {\n      return 'shader';\n    } else if (value.isVector2 === true) {\n      return 'vec2';\n    } else if (value.isVector3 === true) {\n      return 'vec3';\n    } else if (value.isVector4 === true) {\n      return 'vec4';\n    } else if (value.isMatrix3 === true) {\n      return 'mat3';\n    } else if (value.isMatrix4 === true) {\n      return 'mat4';\n    } else if (value.isColor === true) {\n      return 'color';\n    } else if (value instanceof ArrayBuffer) {\n      return 'ArrayBuffer';\n    }\n    return null;\n  }\n\n  /**\n   * Returns the value/object for the given data type and parameters.\n   *\n   * @method\n   * @param {String} type - The given type.\n   * @param {...Any} params - A parameter list.\n   * @return {Any} The value/object.\n   */\n  function getValueFromType(type) {\n    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      params[_key2 - 1] = arguments[_key2];\n    }\n    var last4 = type ? type.slice(-4) : undefined;\n    if (params.length === 1) {\n      // ensure same behaviour as in NodeBuilder.format()\n\n      if (last4 === 'vec2') params = [params[0], params[0]];else if (last4 === 'vec3') params = [params[0], params[0], params[0]];else if (last4 === 'vec4') params = [params[0], params[0], params[0], params[0]];\n    }\n    if (type === 'color') {\n      return (0, _construct2.default)(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color, (0, _toConsumableArray2.default)(params));\n    } else if (last4 === 'vec2') {\n      return (0, _construct2.default)(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2, (0, _toConsumableArray2.default)(params));\n    } else if (last4 === 'vec3') {\n      return (0, _construct2.default)(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3, (0, _toConsumableArray2.default)(params));\n    } else if (last4 === 'vec4') {\n      return (0, _construct2.default)(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4, (0, _toConsumableArray2.default)(params));\n    } else if (last4 === 'mat3') {\n      return (0, _construct2.default)(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix3, (0, _toConsumableArray2.default)(params));\n    } else if (last4 === 'mat4') {\n      return (0, _construct2.default)(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4, (0, _toConsumableArray2.default)(params));\n    } else if (type === 'bool') {\n      return params[0] || false;\n    } else if (type === 'float' || type === 'int' || type === 'uint') {\n      return params[0] || 0;\n    } else if (type === 'string') {\n      return params[0] || '';\n    } else if (type === 'ArrayBuffer') {\n      return base64ToArrayBuffer(params[0]);\n    }\n    return null;\n  }\n\n  /**\n   * Gets the object data that can be shared between different rendering steps.\n   *\n   * @param {Object} object - The object to get the data for.\n   * @return {Object} The object data.\n   */\n  function getDataFromObject(object) {\n    var data = dataFromObject.get(object);\n    if (data === undefined) {\n      data = {};\n      dataFromObject.set(object, data);\n    }\n    return data;\n  }\n\n  /**\n   * Converts the given array buffer to a Base64 string.\n   *\n   * @method\n   * @param {ArrayBuffer} arrayBuffer - The array buffer.\n   * @return {String} The Base64 string.\n   */\n  function arrayBufferToBase64(arrayBuffer) {\n    var chars = '';\n    var array = new Uint8Array(arrayBuffer);\n    for (var i = 0; i < array.length; i++) {\n      chars += String.fromCharCode(array[i]);\n    }\n    return btoa(chars);\n  }\n\n  /**\n   * Converts the given Base64 string to an array buffer.\n   *\n   * @method\n   * @param {String} base64 - The Base64 string.\n   * @return {ArrayBuffer} The array buffer.\n   */\n  function base64ToArrayBuffer(base64) {\n    return Uint8Array.from(atob(base64), function (c) {\n      return c.charCodeAt(0);\n    }).buffer;\n  }\n  var NodeUtils = exports.NodeUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    arrayBufferToBase64: arrayBufferToBase64,\n    base64ToArrayBuffer: base64ToArrayBuffer,\n    getCacheKey: getCacheKey$1,\n    getDataFromObject: getDataFromObject,\n    getLengthFromType: getLengthFromType,\n    getNodeChildren: getNodeChildren,\n    getTypeFromLength: _getTypeFromLength,\n    getTypedArrayFromType: getTypedArrayFromType,\n    getValueFromType: getValueFromType,\n    getValueType: getValueType,\n    hash: hash$1,\n    hashArray: hashArray,\n    hashString: hashString\n  });\n\n  /** @module NodeConstants **/\n\n  /**\n   * Possible shader stages.\n   *\n   * @property {string} VERTEX The vertex shader stage.\n   * @property {string} FRAGMENT The fragment shader stage.\n   */\n  var NodeShaderStage = exports.NodeShaderStage = {\n    VERTEX: 'vertex',\n    FRAGMENT: 'fragment'\n  };\n\n  /**\n   * Update types of a node.\n   *\n   * @property {string} NONE The update method is not executed.\n   * @property {string} FRAME The update method is executed per frame.\n   * @property {string} RENDER The update method is executed per render. A frame might be produced by multiple render calls so this value allows more detailed updates than FRAME.\n   * @property {string} OBJECT The update method is executed per {@link Object3D} that uses the node for rendering.\n   */\n  var NodeUpdateType = exports.NodeUpdateType = {\n    NONE: 'none',\n    FRAME: 'frame',\n    RENDER: 'render',\n    OBJECT: 'object'\n  };\n\n  /**\n   * Data types of a node.\n   *\n   * @property {string} BOOLEAN Boolean type.\n   * @property {string} INTEGER Integer type.\n   * @property {string} FLOAT Float type.\n   * @property {string} VECTOR2 Two-dimensional vector type.\n   * @property {string} VECTOR3 Three-dimensional vector type.\n   * @property {string} VECTOR4 Four-dimensional vector type.\n   * @property {string} MATRIX2 2x2 matrix type.\n   * @property {string} MATRIX3 3x3 matrix type.\n   * @property {string} MATRIX4 4x4 matrix type.\n   */\n  var NodeType = exports.NodeType = {\n    BOOLEAN: 'bool',\n    INTEGER: 'int',\n    FLOAT: 'float',\n    VECTOR2: 'vec2',\n    VECTOR3: 'vec3',\n    VECTOR4: 'vec4',\n    MATRIX2: 'mat2',\n    MATRIX3: 'mat3',\n    MATRIX4: 'mat4'\n  };\n\n  /**\n   * Access types of a node. These are relevant for compute and storage usage.\n   *\n   * @property {string} READ_ONLY Read-only access\n   * @property {string} WRITE_ONLY Write-only access.\n   * @property {string} READ_WRITE Read and write access.\n   */\n  var NodeAccess = exports.NodeAccess = {\n    READ_ONLY: 'readOnly',\n    WRITE_ONLY: 'writeOnly',\n    READ_WRITE: 'readWrite'\n  };\n  var defaultShaderStages = exports.defaultShaderStages = ['fragment', 'vertex'];\n  var defaultBuildStages = exports.defaultBuildStages = ['setup', 'analyze', 'generate'];\n  var shaderStages = exports.shaderStages = [].concat(defaultShaderStages, ['compute']);\n  var vectorComponents = exports.vectorComponents = ['x', 'y', 'z', 'w'];\n  var _nodeId = 0;\n\n  /**\n   * Base class for all nodes.\n   *\n   * @augments EventDispatcher\n   */\n  var Node = exports.Node = /*#__PURE__*/function (_EventDispatcher) {\n    /**\n     * Constructs a new node.\n     *\n     * @param {String?} nodeType - The node type.\n     */\n    function Node() {\n      var _this;\n      var nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, Node);\n      _this = _callSuper(this, Node);\n\n      /**\n       * The node type. This represents the result type of the node (e.g. `float` or `vec3`).\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this.nodeType = nodeType;\n\n      /**\n       * The update type of the node's {@link Node#update} method. Possible values are listed in {@link NodeUpdateType}.\n       *\n       * @type {String}\n       * @default 'none'\n       */\n      _this.updateType = NodeUpdateType.NONE;\n\n      /**\n       * The update type of the node's {@link Node#updateBefore} method. Possible values are listed in {@link NodeUpdateType}.\n       *\n       * @type {String}\n       * @default 'none'\n       */\n      _this.updateBeforeType = NodeUpdateType.NONE;\n\n      /**\n       * The update type of the node's {@link Node#updateAfter} method. Possible values are listed in {@link NodeUpdateType}.\n       *\n       * @type {String}\n       * @default 'none'\n       */\n      _this.updateAfterType = NodeUpdateType.NONE;\n\n      /**\n       * The UUID of the node.\n       *\n       * @type {String}\n       * @readonly\n       */\n      _this.uuid = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MathUtils.generateUUID();\n\n      /**\n       * The version of the node. The version automatically is increased when {@link Node#needsUpdate} is set to `true`.\n       *\n       * @type {Number}\n       * @readonly\n       * @default 0\n       */\n      _this.version = 0;\n\n      /**\n       * Whether this node is global or not. This property is relevant for the internal\n       * node caching system. All nodes which should be declared just once should\n       * set this flag to `true` (a typical example is {@link AttributeNode}).\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this.global = false;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this.isNode = true;\n\n      // private\n\n      /**\n       * The cache key of this node.\n       *\n       * @private\n       * @type {Number?}\n       * @default null\n       */\n      _this._cacheKey = null;\n\n      /**\n       * The cache key 's version.\n       *\n       * @private\n       * @type {Number}\n       * @default 0\n       */\n      _this._cacheKeyVersion = 0;\n      Object.defineProperty(_this, 'id', {\n        value: _nodeId++\n      });\n      return _this;\n    }\n\n    /**\n     * Set this property to `true` when the node should be regenerated.\n     *\n     * @type {Boolean}\n     * @default false\n     * @param {boolean} value\n     */\n    (0, _inherits2.default)(Node, _EventDispatcher);\n    return (0, _createClass2.default)(Node, [{\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) {\n          this.version++;\n        }\n      }\n\n      /**\n       * The type of the class. The value is usually the constructor name.\n       *\n       * @type {String}\n      \t * @readonly\n       */\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this.constructor.type;\n      }\n\n      /**\n       * Convenient method for defining {@link Node#update}.\n       *\n       * @param {Function} callback - The update method.\n       * @param {String} updateType - The update type.\n       * @return {Node} A reference to this node.\n       */\n    }, {\n      key: \"onUpdate\",\n      value: function onUpdate(callback, updateType) {\n        this.updateType = updateType;\n        this.update = callback.bind(this.getSelf());\n        return this;\n      }\n\n      /**\n       * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\n       * this method automatically sets the update type to `FRAME`.\n       *\n       * @param {Function} callback - The update method.\n       * @return {Node} A reference to this node.\n       */\n    }, {\n      key: \"onFrameUpdate\",\n      value: function onFrameUpdate(callback) {\n        return this.onUpdate(callback, NodeUpdateType.FRAME);\n      }\n\n      /**\n       * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\n       * this method automatically sets the update type to `RENDER`.\n       *\n       * @param {Function} callback - The update method.\n       * @return {Node} A reference to this node.\n       */\n    }, {\n      key: \"onRenderUpdate\",\n      value: function onRenderUpdate(callback) {\n        return this.onUpdate(callback, NodeUpdateType.RENDER);\n      }\n\n      /**\n       * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\n       * this method automatically sets the update type to `OBJECT`.\n       *\n       * @param {Function} callback - The update method.\n       * @return {Node} A reference to this node.\n       */\n    }, {\n      key: \"onObjectUpdate\",\n      value: function onObjectUpdate(callback) {\n        return this.onUpdate(callback, NodeUpdateType.OBJECT);\n      }\n\n      /**\n       * Convenient method for defining {@link Node#updateReference}.\n       *\n       * @param {Function} callback - The update method.\n       * @return {Node} A reference to this node.\n       */\n    }, {\n      key: \"onReference\",\n      value: function onReference(callback) {\n        this.updateReference = callback.bind(this.getSelf());\n        return this;\n      }\n\n      /**\n       * The `this` reference might point to a Proxy so this method can be used\n       * to get the reference to the actual node instance.\n       *\n       * @return {Node} A reference to the node.\n       */\n    }, {\n      key: \"getSelf\",\n      value: function getSelf() {\n        // Returns non-node object.\n\n        return this.self || this;\n      }\n\n      /**\n       * Nodes might refer to other objects like materials. This method allows to dynamically update the reference\n       * to such objects based on a given state (e.g. the current node frame or builder).\n       *\n       * @param {Any} state - This method can be invocated in different contexts so `state` can refer to any object type.\n       * @return {Any} The updated reference.\n       */\n    }, {\n      key: \"updateReference\",\n      value: function updateReference(/*state*/\n      ) {\n        return this;\n      }\n\n      /**\n       * By default this method returns the value of the {@link Node#global} flag. This method\n       * can be overwritten in derived classes if an analytical way is required to determine the\n       * global status.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Boolean} Whether this node is global or not.\n       */\n    }, {\n      key: \"isGlobal\",\n      value: function isGlobal(/*builder*/\n      ) {\n        return this.global;\n      }\n\n      /**\n       * Generator function that can be used to iterate over the child nodes.\n       *\n       * @generator\n       * @yields {Node} A child node.\n       */\n    }, {\n      key: \"getChildren\",\n      value: function* getChildren() {\n        for (var _ref2 of getNodeChildren(this)) {\n          var childNode = _ref2.childNode;\n          yield childNode;\n        }\n      }\n\n      /**\n       * Calling this method dispatches the `dispose` event. This event can be used\n       * to register event listeners for clean up tasks.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n      }\n\n      /**\n       * Callback for {@link Node#traverse}.\n       *\n       * @callback traverseCallback\n       * @param {Node} node - The current node.\n       */\n\n      /**\n       * Can be used to traverse through the node's hierarchy.\n       *\n       * @param {traverseCallback} callback - A callback that is executed per node.\n       */\n    }, {\n      key: \"traverse\",\n      value: function traverse(callback) {\n        callback(this);\n        for (var childNode of this.getChildren()) {\n          childNode.traverse(callback);\n        }\n      }\n\n      /**\n       * Returns the cache key for this node.\n       *\n       * @param {Boolean} [force=false] - When set to `true`, a recomputation of the cache key is forced.\n       * @return {Number} The cache key of the node.\n       */\n    }, {\n      key: \"getCacheKey\",\n      value: function getCacheKey() {\n        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        force = force || this.version !== this._cacheKeyVersion;\n        if (force === true || this._cacheKey === null) {\n          this._cacheKey = hash$1(getCacheKey$1(this, force), this.customCacheKey());\n          this._cacheKeyVersion = this.version;\n        }\n        return this._cacheKey;\n      }\n\n      /**\n       * Generate a custom cache key for this node.\n       *\n       * @return {Number} The cache key of the node.\n       */\n    }, {\n      key: \"customCacheKey\",\n      value: function customCacheKey() {\n        return 0;\n      }\n\n      /**\n       * Returns the references to this node which is by default `this`.\n       *\n       * @return {Node} A reference to this node.\n       */\n    }, {\n      key: \"getScope\",\n      value: function getScope() {\n        return this;\n      }\n\n      /**\n       * Returns the hash of the node which is used to identify the node. By default it's\n       * the {@link Node#uuid} however derived node classes might have to overwrite this method\n       * depending on their implementation.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The hash.\n       */\n    }, {\n      key: \"getHash\",\n      value: function getHash(/*builder*/\n      ) {\n        return this.uuid;\n      }\n\n      /**\n       * Returns the update type of {@link Node#update}.\n       *\n       * @return {NodeUpdateType} The update type.\n       */\n    }, {\n      key: \"getUpdateType\",\n      value: function getUpdateType() {\n        return this.updateType;\n      }\n\n      /**\n       * Returns the update type of {@link Node#updateBefore}.\n       *\n       * @return {NodeUpdateType} The update type.\n       */\n    }, {\n      key: \"getUpdateBeforeType\",\n      value: function getUpdateBeforeType() {\n        return this.updateBeforeType;\n      }\n\n      /**\n       * Returns the update type of {@link Node#updateAfter}.\n       *\n       * @return {NodeUpdateType} The update type.\n       */\n    }, {\n      key: \"getUpdateAfterType\",\n      value: function getUpdateAfterType() {\n        return this.updateAfterType;\n      }\n\n      /**\n       * Certain types are composed of multiple elements. For example a `vec3`\n       * is composed of three `float` values. This method returns the type of\n       * these elements.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The type of the node.\n       */\n    }, {\n      key: \"getElementType\",\n      value: function getElementType(builder) {\n        var type = this.getNodeType(builder);\n        var elementType = builder.getElementType(type);\n        return elementType;\n      }\n\n      /**\n       * Returns the node's type.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The type of the node.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var nodeProperties = builder.getNodeProperties(this);\n        if (nodeProperties.outputNode) {\n          return nodeProperties.outputNode.getNodeType(builder);\n        }\n        return this.nodeType;\n      }\n\n      /**\n       * This method is used during the build process of a node and ensures\n       * equal nodes are not built multiple times but just once. For example if\n       * `attribute( 'uv' )` is used multiple times by the user, the build\n       * process makes sure to process just the first node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node} The shared node if possible. Otherwise `this` is returned.\n       */\n    }, {\n      key: \"getShared\",\n      value: function getShared(builder) {\n        var hash = this.getHash(builder);\n        var nodeFromHash = builder.getNodeFromHash(hash);\n        return nodeFromHash || this;\n      }\n\n      /**\n       * Represents the setup stage which is the first step of the build process, see {@link Node#build} method.\n       * This method is often overwritten in derived modules to prepare the node which is used as the output/result.\n       * The output node must be returned in the `return` statement.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node?} The output node.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var nodeProperties = builder.getNodeProperties(this);\n        var index = 0;\n        for (var childNode of this.getChildren()) {\n          nodeProperties['node' + index++] = childNode;\n        }\n\n        // return a outputNode if exists or null\n\n        return nodeProperties.outputNode || null;\n      }\n\n      /**\n       * Represents the analyze stage which is the second step of the build process, see {@link Node#build} method.\n       * This stage analyzes the node hierarchy and ensures descendent nodes are built.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"analyze\",\n      value: function analyze(builder) {\n        var usageCount = builder.increaseUsage(this);\n        if (usageCount === 1) {\n          // node flow children\n\n          var nodeProperties = builder.getNodeProperties(this);\n          for (var childNode of Object.values(nodeProperties)) {\n            if (childNode && childNode.isNode === true) {\n              childNode.build(builder);\n            }\n          }\n        }\n      }\n\n      /**\n       * Represents the generate stage which is the third step of the build process, see {@link Node#build} method.\n       * This state builds the output node and returns the resulting shader string.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {String?} output - Can be used to define the output type.\n       * @return {String?} The generated shader string.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var _builder$getNodePrope = builder.getNodeProperties(this),\n          outputNode = _builder$getNodePrope.outputNode;\n        if (outputNode && outputNode.isNode === true) {\n          return outputNode.build(builder, output);\n        }\n      }\n\n      /**\n       * The method can be implemented to update the node's internal state before it is used to render an object.\n       * The {@link Node#updateBeforeType} property defines how often the update is executed.\n       *\n       * @abstract\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       * @return {Boolean?} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\n       */\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(/*frame*/\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * The method can be implemented to update the node's internal state after it was used to render an object.\n       * The {@link Node#updateAfterType} property defines how often the update is executed.\n       *\n       * @abstract\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       * @return {Boolean?} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\n       */\n    }, {\n      key: \"updateAfter\",\n      value: function updateAfter(/*frame*/\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * The method can be implemented to update the node's internal state when it is used to render an object.\n       * The {@link Node#updateType} property defines how often the update is executed.\n       *\n       * @abstract\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       * @return {Boolean?} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * This method performs the build of a node. The behavior of this method as well as its return value depend\n       * on the current build stage (setup, analyze or generate).\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {String?} output - Can be used to define the output type.\n       * @return {String?} When this method is executed in the setup or analyze stage, `null` is returned. In the generate stage, the generated shader string.\n       */\n    }, {\n      key: \"build\",\n      value: function build(builder) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var refNode = this.getShared(builder);\n        if (this !== refNode) {\n          return refNode.build(builder, output);\n        }\n        builder.addNode(this);\n        builder.addChain(this);\n\n        /* Build stages expected results:\n        \t- \"setup\"\t\t-> Node\n        \t- \"analyze\"\t\t-> null\n        \t- \"generate\"\t-> String\n        */\n        var result = null;\n        var buildStage = builder.getBuildStage();\n        if (buildStage === 'setup') {\n          this.updateReference(builder);\n          var properties = builder.getNodeProperties(this);\n          if (properties.initialized !== true) {\n            //const stackNodesBeforeSetup = builder.stack.nodes.length;\n\n            properties.initialized = true;\n            var outputNode = this.setup(builder); // return a node or null\n            var isNodeOutput = outputNode && outputNode.isNode === true;\n\n            /*if ( isNodeOutput && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\n            \t\t// !! no outputNode !!\n            \t//outputNode = builder.stack;\n            \t}*/\n\n            for (var childNode of Object.values(properties)) {\n              if (childNode && childNode.isNode === true) {\n                childNode.build(builder);\n              }\n            }\n            if (isNodeOutput) {\n              outputNode.build(builder);\n            }\n            properties.outputNode = outputNode;\n          }\n        } else if (buildStage === 'analyze') {\n          this.analyze(builder);\n        } else if (buildStage === 'generate') {\n          var isGenerateOnce = this.generate.length === 1;\n          if (isGenerateOnce) {\n            var type = this.getNodeType(builder);\n            var nodeData = builder.getDataFromNode(this);\n            result = nodeData.snippet;\n            if (result === undefined) {\n              result = this.generate(builder) || '';\n              nodeData.snippet = result;\n            } else if (nodeData.flowCodes !== undefined && builder.context.nodeBlock !== undefined) {\n              builder.addFlowCodeHierarchy(this, builder.context.nodeBlock);\n            }\n            result = builder.format(result, type, output);\n          } else {\n            result = this.generate(builder, output) || '';\n          }\n        }\n        builder.removeChain(this);\n        builder.addSequentialNode(this);\n        return result;\n      }\n\n      /**\n       * Returns the child nodes as a JSON object.\n       *\n       * @return {Object} The serialized child objects as JSON.\n       */\n    }, {\n      key: \"getSerializeChildren\",\n      value: function getSerializeChildren() {\n        return getNodeChildren(this);\n      }\n\n      /**\n       * Serializes the node to JSON.\n       *\n       * @param {Object} json - The output JSON object.\n       */\n    }, {\n      key: \"serialize\",\n      value: function serialize(json) {\n        var nodeChildren = this.getSerializeChildren();\n        var inputNodes = {};\n        for (var _ref3 of nodeChildren) {\n          var _property6 = _ref3.property;\n          var index = _ref3.index;\n          var childNode = _ref3.childNode;\n          if (index !== undefined) {\n            if (inputNodes[_property6] === undefined) {\n              inputNodes[_property6] = Number.isInteger(index) ? [] : {};\n            }\n            inputNodes[_property6][index] = childNode.toJSON(json.meta).uuid;\n          } else {\n            inputNodes[_property6] = childNode.toJSON(json.meta).uuid;\n          }\n        }\n        if (Object.keys(inputNodes).length > 0) {\n          json.inputNodes = inputNodes;\n        }\n      }\n\n      /**\n       * Deserializes the node from the given JSON.\n       *\n       * @param {Object} json - The JSON object.\n       */\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(json) {\n        if (json.inputNodes !== undefined) {\n          var nodes = json.meta.nodes;\n          for (var _property7 in json.inputNodes) {\n            if (Array.isArray(json.inputNodes[_property7])) {\n              var inputArray = [];\n              for (var uuid of json.inputNodes[_property7]) {\n                inputArray.push(nodes[uuid]);\n              }\n              this[_property7] = inputArray;\n            } else if (typeof json.inputNodes[_property7] === 'object') {\n              var inputObject = {};\n              for (var subProperty in json.inputNodes[_property7]) {\n                var _uuid = json.inputNodes[_property7][subProperty];\n                inputObject[subProperty] = nodes[_uuid];\n              }\n              this[_property7] = inputObject;\n            } else {\n              var _uuid2 = json.inputNodes[_property7];\n              this[_property7] = nodes[_uuid2];\n            }\n          }\n        }\n      }\n\n      /**\n       * Serializes the node into the three.js JSON Object/Scene format.\n       *\n       * @param {Object?} meta - An optional JSON object that already holds serialized data from other scene objects.\n       * @return {Object} The serialized node.\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var uuid = this.uuid,\n          type = this.type;\n        var isRoot = meta === undefined || typeof meta === 'string';\n        if (isRoot) {\n          meta = {\n            textures: {},\n            images: {},\n            nodes: {}\n          };\n        }\n\n        // serialize\n\n        var data = meta.nodes[uuid];\n        if (data === undefined) {\n          data = {\n            uuid: uuid,\n            type: type,\n            meta: meta,\n            metadata: {\n              version: 4.6,\n              type: 'Node',\n              generator: 'Node.toJSON'\n            }\n          };\n          if (isRoot !== true) meta.nodes[data.uuid] = data;\n          this.serialize(data);\n          delete data.meta;\n        }\n\n        // TODO: Copied from Object3D.toJSON\n\n        function extractFromCache(cache) {\n          var values = [];\n          for (var key in cache) {\n            var _data = cache[key];\n            delete _data.metadata;\n            values.push(_data);\n          }\n          return values;\n        }\n        if (isRoot) {\n          var textures = extractFromCache(meta.textures);\n          var images = extractFromCache(meta.images);\n          var nodes = extractFromCache(meta.nodes);\n          if (textures.length > 0) data.textures = textures;\n          if (images.length > 0) data.images = images;\n          if (nodes.length > 0) data.nodes = nodes;\n        }\n        return data;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'Node';\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EventDispatcher);\n  /**\n   * Base class for representing element access on an array-like\n   * node data structures.\n   *\n   * @augments Node\n   */\n  var ArrayElementNode = exports.ArrayElementNode = /*#__PURE__*/function (_Node) {\n    /**\n     * Constructs an array element node.\n     *\n     * @param {Node} node - The array-like node.\n     * @param {Node} indexNode - The index node that defines the element access.\n     */\n    function ArrayElementNode(node, indexNode) {\n      var _this2;\n      (0, _classCallCheck2.default)(this, ArrayElementNode);\n      _this2 = _callSuper(this, ArrayElementNode);\n\n      /**\n       * The array-like node.\n       *\n       * @type {Node}\n       */\n      _this2.node = node;\n\n      /**\n       * The index node that defines the element access.\n       *\n       * @type {Node}\n       */\n      _this2.indexNode = indexNode;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this2.isArrayElementNode = true;\n      return _this2;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from the array-like node.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(ArrayElementNode, _Node);\n    return (0, _createClass2.default)(ArrayElementNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.node.getElementType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var nodeSnippet = this.node.build(builder);\n        var indexSnippet = this.indexNode.build(builder, 'uint');\n        return `${nodeSnippet}[ ${indexSnippet} ]`;\n      }\n    }], [{\n      key: \"type\",\n      get:\n      // @TODO: If extending from TempNode it breaks webgpu_compute\n\n      function get() {\n        return 'ArrayElementNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * This module is part of the TSL core and usually not used in app level code.\n   * It represents a convert operation during the shader generation process\n   * meaning it converts the data type of a node to a target data type.\n   *\n   * @augments Node\n   */\n  var ConvertNode = exports.ConvertNode = /*#__PURE__*/function (_Node2) {\n    /**\n     * Constructs a new convert node.\n     *\n     * @param {Node} node - The node which type should be converted.\n     * @param {String} convertTo - The target node type. Multiple types can be defined by separating them with a `|` sign.\n     */\n    function ConvertNode(node, convertTo) {\n      var _this3;\n      (0, _classCallCheck2.default)(this, ConvertNode);\n      _this3 = _callSuper(this, ConvertNode);\n\n      /**\n       * The node which type should be converted.\n       *\n       * @type {Node}\n       */\n      _this3.node = node;\n\n      /**\n       * The target node type. Multiple types can be defined by separating them with a `|` sign.\n       *\n       * @type {String}\n       */\n      _this3.convertTo = convertTo;\n      return _this3;\n    }\n\n    /**\n     * This method is overwritten since the implementation tries to infer the best\n     * matching type from the {@link ConvertNode#convertTo} property.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(ConvertNode, _Node2);\n    return (0, _createClass2.default)(ConvertNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var requestType = this.node.getNodeType(builder);\n        var convertTo = null;\n        for (var overloadingType of this.convertTo.split('|')) {\n          if (convertTo === null || builder.getTypeLength(requestType) === builder.getTypeLength(overloadingType)) {\n            convertTo = overloadingType;\n          }\n        }\n        return convertTo;\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(ConvertNode, \"serialize\", this, 3)([data]);\n        data.convertTo = this.convertTo;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(ConvertNode, \"deserialize\", this, 3)([data]);\n        this.convertTo = data.convertTo;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var node = this.node;\n        var type = this.getNodeType(builder);\n        var snippet = node.build(builder, type);\n        return builder.format(snippet, type, output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ConvertNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * This module uses cache management to create temporary variables\n   * if the node is used more than once to prevent duplicate calculations.\n   *\n   * The class acts as a base class for many other nodes types.\n   *\n   * @augments Node\n   */\n  var TempNode = exports.TempNode = /*#__PURE__*/function (_Node3) {\n    /**\n     * Constructs a temp node.\n     *\n     * @param {String?} nodeType - The node type.\n     */\n    function TempNode() {\n      var _this4;\n      var nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, TempNode);\n      _this4 = _callSuper(this, TempNode, [nodeType]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this4.isTempNode = true;\n      return _this4;\n    }\n\n    /**\n     * Whether this node is used more than once in context of other nodes.\n     *\n     * @param {NodeBuilder} builder - The node builder.\n     * @return {Boolean} A flag that indicates if there is more than one dependency to other nodes.\n     */\n    (0, _inherits2.default)(TempNode, _Node3);\n    return (0, _createClass2.default)(TempNode, [{\n      key: \"hasDependencies\",\n      value: function hasDependencies(builder) {\n        return builder.getDataFromNode(this).usageCount > 1;\n      }\n    }, {\n      key: \"build\",\n      value: function build(builder, output) {\n        var buildStage = builder.getBuildStage();\n        if (buildStage === 'generate') {\n          var type = builder.getVectorType(this.getNodeType(builder, output));\n          var nodeData = builder.getDataFromNode(this);\n          if (nodeData.propertyName !== undefined) {\n            return builder.format(nodeData.propertyName, type, output);\n          } else if (type !== 'void' && output !== 'void' && this.hasDependencies(builder)) {\n            var snippet = _superPropGet(TempNode, \"build\", this, 3)([builder, type]);\n            var nodeVar = builder.getVarFromNode(this, null, type);\n            var propertyName = builder.getPropertyName(nodeVar);\n            builder.addLineFlowCode(`${propertyName} = ${snippet}`, this);\n            nodeData.snippet = snippet;\n            nodeData.propertyName = propertyName;\n            return builder.format(nodeData.propertyName, type, output);\n          }\n        }\n        return _superPropGet(TempNode, \"build\", this, 3)([builder, output]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'TempNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * This module is part of the TSL core and usually not used in app level code.\n   * It represents a join operation during the shader generation process.\n   * For example in can compose/join two single floats into a `vec2` type.\n   *\n   * @augments TempNode\n   */\n  var JoinNode = exports.JoinNode = /*#__PURE__*/function (_TempNode) {\n    /**\n     * Constructs a new join node.\n     *\n     * @param {Array<Node>} nodes - An array of nodes that should be joined.\n     * @param {String?} [nodeType=null] - The node type.\n     */\n    function JoinNode() {\n      var _this5;\n      var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, JoinNode);\n      _this5 = _callSuper(this, JoinNode, [nodeType]);\n\n      /**\n       * An array of nodes that should be joined.\n       *\n       * @type {Array<Node>}\n       */\n      _this5.nodes = nodes;\n      return _this5;\n    }\n\n    /**\n     * This method is overwritten since the node type must be inferred from the\n     * joined data length if not explicitly defined.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(JoinNode, _TempNode);\n    return (0, _createClass2.default)(JoinNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        if (this.nodeType !== null) {\n          return builder.getVectorType(this.nodeType);\n        }\n        return builder.getTypeFromLength(this.nodes.reduce(function (count, cur) {\n          return count + builder.getTypeLength(cur.getNodeType(builder));\n        }, 0));\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var type = this.getNodeType(builder);\n        var nodes = this.nodes;\n        var primitiveType = builder.getComponentType(type);\n        var snippetValues = [];\n        for (var input of nodes) {\n          var inputSnippet = input.build(builder);\n          var inputPrimitiveType = builder.getComponentType(input.getNodeType(builder));\n          if (inputPrimitiveType !== primitiveType) {\n            inputSnippet = builder.format(inputSnippet, inputPrimitiveType, primitiveType);\n          }\n          snippetValues.push(inputSnippet);\n        }\n        var snippet = `${builder.getType(type)}( ${snippetValues.join(', ')} )`;\n        return builder.format(snippet, type, output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'JoinNode';\n      }\n    }]);\n  }(TempNode);\n  var _stringVectorComponents = vectorComponents.join('');\n\n  /**\n   * This module is part of the TSL core and usually not used in app level code.\n   * `SplitNode` represents a property access operation which means it is\n   * used to implement any `.xyzw`, `.rgba` and `stpq` usage on node objects.\n   * For example:\n   * ```js\n   * const redValue = color.r;\n   * ```\n   *\n   * @augments Node\n   */\n  var SplitNode = exports.SplitNode = /*#__PURE__*/function (_Node4) {\n    /**\n     * Constructs a new split node.\n     *\n     * @param {Node} node - The node that should be accessed.\n     * @param {String} [components='x'] - The components that should be accessed.\n     */\n    function SplitNode(node) {\n      var _this6;\n      var components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n      (0, _classCallCheck2.default)(this, SplitNode);\n      _this6 = _callSuper(this, SplitNode);\n\n      /**\n       * The node that should be accessed.\n       *\n       * @type {Node}\n       */\n      _this6.node = node;\n\n      /**\n       * The components that should be accessed.\n       *\n       * @type {string}\n       */\n      _this6.components = components;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this6.isSplitNode = true;\n      return _this6;\n    }\n\n    /**\n     * Returns the vector length which is computed based on the requested components.\n     *\n     * @return {Number} The vector length.\n     */\n    (0, _inherits2.default)(SplitNode, _Node4);\n    return (0, _createClass2.default)(SplitNode, [{\n      key: \"getVectorLength\",\n      value: function getVectorLength() {\n        var vectorLength = this.components.length;\n        for (var c of this.components) {\n          vectorLength = Math.max(vectorComponents.indexOf(c) + 1, vectorLength);\n        }\n        return vectorLength;\n      }\n\n      /**\n       * Returns the component type of the node's type.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The component type.\n       */\n    }, {\n      key: \"getComponentType\",\n      value: function getComponentType(builder) {\n        return builder.getComponentType(this.node.getNodeType(builder));\n      }\n\n      /**\n       * This method is overwritten since the node type is inferred from requested components.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return builder.getTypeFromLength(this.components.length, this.getComponentType(builder));\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var node = this.node;\n        var nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n        var snippet = null;\n        if (nodeTypeLength > 1) {\n          var type = null;\n          var componentsLength = this.getVectorLength();\n          if (componentsLength >= nodeTypeLength) {\n            // needed expand the input node\n\n            type = builder.getTypeFromLength(this.getVectorLength(), this.getComponentType(builder));\n          }\n          var nodeSnippet = node.build(builder, type);\n          if (this.components.length === nodeTypeLength && this.components === _stringVectorComponents.slice(0, this.components.length)) {\n            // unnecessary swizzle\n\n            snippet = builder.format(nodeSnippet, type, output);\n          } else {\n            snippet = builder.format(`${nodeSnippet}.${this.components}`, this.getNodeType(builder), output);\n          }\n        } else {\n          // ignore .components if .node returns float/integer\n\n          snippet = node.build(builder, output);\n        }\n        return snippet;\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(SplitNode, \"serialize\", this, 3)([data]);\n        data.components = this.components;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(SplitNode, \"deserialize\", this, 3)([data]);\n        this.components = data.components;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SplitNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * This module is part of the TSL core and usually not used in app level code.\n   * `SetNode` represents a set operation which means it is used to implement any\n   * `setXYZW()`, `setRGBA()` and `setSTPQ()` method invocations on node objects.\n   * For example:\n   * ```js\n   * materialLine.colorNode = color( 0, 0, 0 ).setR( float( 1 ) );\n   * ```\n   *\n   * @augments TempNode\n   */\n  var SetNode = exports.SetNode = /*#__PURE__*/function (_TempNode2) {\n    /**\n     * Constructs a new set node.\n     *\n     * @param {Node} sourceNode - The node that should be updated.\n     * @param {String} components - The components that should be updated.\n     * @param {Node} targetNode - The value node.\n     */\n    function SetNode(sourceNode, components, targetNode) {\n      var _this7;\n      (0, _classCallCheck2.default)(this, SetNode);\n      _this7 = _callSuper(this, SetNode);\n\n      /**\n       * The node that should be updated.\n       *\n       * @type {Node}\n       */\n      _this7.sourceNode = sourceNode;\n\n      /**\n       * The components that should be updated.\n       *\n       * @type {String}\n       */\n      _this7.components = components;\n\n      /**\n       * The value node.\n       *\n       * @type {Node}\n       */\n      _this7.targetNode = targetNode;\n      return _this7;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from {@link SetNode#sourceNode}.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(SetNode, _TempNode2);\n    return (0, _createClass2.default)(SetNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.sourceNode.getNodeType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var sourceNode = this.sourceNode,\n          components = this.components,\n          targetNode = this.targetNode;\n        var sourceType = this.getNodeType(builder);\n        var componentType = builder.getComponentType(targetNode.getNodeType(builder));\n        var targetType = builder.getTypeFromLength(components.length, componentType);\n        var targetSnippet = targetNode.build(builder, targetType);\n        var sourceSnippet = sourceNode.build(builder, sourceType);\n        var length = builder.getTypeLength(sourceType);\n        var snippetValues = [];\n        for (var i = 0; i < length; i++) {\n          var component = vectorComponents[i];\n          if (component === components[0]) {\n            snippetValues.push(targetSnippet);\n            i += components.length - 1;\n          } else {\n            snippetValues.push(sourceSnippet + '.' + component);\n          }\n        }\n        return `${builder.getType(sourceType)}( ${snippetValues.join(', ')} )`;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SetNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * This module is part of the TSL core and usually not used in app level code.\n   * It represents a flip operation during the shader generation process\n   * meaning it flips normalized values with the following formula:\n   * ```\n   * x = 1 - x;\n   * ```\n   * `FlipNode` is internally used to implement any `flipXYZW()`, `flipRGBA()` and\n   * `flipSTPQ()` method invocations on node objects. For example:\n   * ```js\n   * uvNode = uvNode.flipY();\n   * ```\n   *\n   * @augments TempNode\n   */\n  var FlipNode = /*#__PURE__*/function (_TempNode3) {\n    /**\n     * Constructs a new flip node.\n     *\n     * @param {Node} sourceNode - The node which component(s) should be flipped.\n     * @param {String} components - The components that should be flipped e.g. `'x'` or `'xy'`.\n     */\n    function FlipNode(sourceNode, components) {\n      var _this8;\n      (0, _classCallCheck2.default)(this, FlipNode);\n      _this8 = _callSuper(this, FlipNode);\n\n      /**\n       * The node which component(s) should be flipped.\n       *\n       * @type {Node}\n       */\n      _this8.sourceNode = sourceNode;\n\n      /**\n       * The components that should be flipped e.g. `'x'` or `'xy'`.\n       *\n       * @type {String}\n       */\n      _this8.components = components;\n      return _this8;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from the source node.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(FlipNode, _TempNode3);\n    return (0, _createClass2.default)(FlipNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.sourceNode.getNodeType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var components = this.components,\n          sourceNode = this.sourceNode;\n        var sourceType = this.getNodeType(builder);\n        var sourceSnippet = sourceNode.build(builder);\n        var sourceCache = builder.getVarFromNode(this);\n        var sourceProperty = builder.getPropertyName(sourceCache);\n        builder.addLineFlowCode(sourceProperty + ' = ' + sourceSnippet, this);\n        var length = builder.getTypeLength(sourceType);\n        var snippetValues = [];\n        var componentIndex = 0;\n        for (var i = 0; i < length; i++) {\n          var component = vectorComponents[i];\n          if (component === components[componentIndex]) {\n            snippetValues.push('1.0 - ' + (sourceProperty + '.' + component));\n            componentIndex++;\n          } else {\n            snippetValues.push(sourceProperty + '.' + component);\n          }\n        }\n        return `${builder.getType(sourceType)}( ${snippetValues.join(', ')} )`;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'FlipNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * Base class for representing data input nodes.\n   *\n   * @augments Node\n   */\n  var InputNode = /*#__PURE__*/function (_Node5) {\n    /**\n     * Constructs a new input node.\n     *\n     * @param {Any} value - The value of this node. This can be a any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).\n     * @param {String?} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n     */\n    function InputNode(value) {\n      var _this9;\n      var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, InputNode);\n      _this9 = _callSuper(this, InputNode, [nodeType]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this9.isInputNode = true;\n\n      /**\n       * The value of this node. This can be a any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).\n       *\n       * @type {Any}\n       */\n      _this9.value = value;\n\n      /**\n       * The precision of the value in the shader.\n       *\n       * @type {('low'|'medium'|'high')?}\n       * @default null\n       */\n      _this9.precision = null;\n      return _this9;\n    }\n    (0, _inherits2.default)(InputNode, _Node5);\n    return (0, _createClass2.default)(InputNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(/*builder*/\n      ) {\n        if (this.nodeType === null) {\n          return getValueType(this.value);\n        }\n        return this.nodeType;\n      }\n\n      /**\n       * Returns the input type of the node which is by default the node type. Derived modules\n       * might overwrite this method and use a fixed type or compute one analytically.\n       *\n       * A typical example for different input and node types are textures. The input type of a\n       * normal RGBA texture is `texture` whereas its node type is `vec4`.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The input type.\n       */\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(builder) {\n        return this.getNodeType(builder);\n      }\n\n      /**\n       * Sets the precision to the given value. The method can be\n       * overwritten in derived classes if the final precision must be computed\n       * analytically.\n       *\n       * @param {('low'|'medium'|'high')} precision - The precision of the input value in the shader.\n       * @return {InputNode} A reference to this node.\n       */\n    }, {\n      key: \"setPrecision\",\n      value: function setPrecision(precision) {\n        this.precision = precision;\n        return this;\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(InputNode, \"serialize\", this, 3)([data]);\n        data.value = this.value;\n        if (this.value && this.value.toArray) data.value = this.value.toArray();\n        data.valueType = getValueType(this.value);\n        data.nodeType = this.nodeType;\n        if (data.valueType === 'ArrayBuffer') data.value = arrayBufferToBase64(data.value);\n        data.precision = this.precision;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(InputNode, \"deserialize\", this, 3)([data]);\n        this.nodeType = data.nodeType;\n        this.value = Array.isArray(data.value) ? getValueFromType.apply(void 0, [data.valueType].concat((0, _toConsumableArray2.default)(data.value))) : data.value;\n        this.precision = data.precision || null;\n        if (this.value && this.value.fromArray) this.value = this.value.fromArray(data.value);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(/*builder, output*/\n      ) {\n        console.warn('Abstract function.');\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'InputNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * Class for representing a constant value in the shader.\n   *\n   * @augments InputNode\n   */\n  var ConstNode = exports.ConstNode = /*#__PURE__*/function (_InputNode) {\n    /**\n     * Constructs a new input node.\n     *\n     * @param {Any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color).\n     * @param {String?} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n     */\n    function ConstNode(value) {\n      var _this10;\n      var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, ConstNode);\n      _this10 = _callSuper(this, ConstNode, [value, nodeType]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this10.isConstNode = true;\n      return _this10;\n    }\n\n    /**\n     * Generates the shader string of the value with the current node builder.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The generated value as a shader string.\n     */\n    (0, _inherits2.default)(ConstNode, _InputNode);\n    return (0, _createClass2.default)(ConstNode, [{\n      key: \"generateConst\",\n      value: function generateConst(builder) {\n        return builder.generateConst(this.getNodeType(builder), this.value);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var type = this.getNodeType(builder);\n        return builder.format(this.generateConst(builder), type, output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ConstNode';\n      }\n    }]);\n  }(InputNode); //\n  var currentStack = null;\n  var NodeElements = new Map();\n  function addMethodChaining(name, nodeElement) {\n    if (NodeElements.has(name)) {\n      console.warn(`Redefinition of method chaining ${name}`);\n      return;\n    }\n    if (typeof nodeElement !== 'function') throw new Error(`Node element ${name} is not a function`);\n    NodeElements.set(name, nodeElement);\n  }\n  var parseSwizzle = function parseSwizzle(props) {\n    return props.replace(/r|s/g, 'x').replace(/g|t/g, 'y').replace(/b|p/g, 'z').replace(/a|q/g, 'w');\n  };\n  var parseSwizzleAndSort = function parseSwizzleAndSort(props) {\n    return parseSwizzle(props).split('').sort().join('');\n  };\n  var shaderNodeHandler = {\n    setup: function setup(NodeClosure, params) {\n      var inputs = params.shift();\n      return NodeClosure.apply(void 0, [nodeObjects(inputs)].concat((0, _toConsumableArray2.default)(params)));\n    },\n    get: function get(node, prop, nodeObj) {\n      if (typeof prop === 'string' && node[prop] === undefined) {\n        if (node.isStackNode !== true && prop === 'assign') {\n          return function () {\n            var _currentStack;\n            for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              params[_key3] = arguments[_key3];\n            }\n            (_currentStack = currentStack).assign.apply(_currentStack, [nodeObj].concat(params));\n            return nodeObj;\n          };\n        } else if (NodeElements.has(prop)) {\n          var nodeElement = NodeElements.get(prop);\n          return node.isStackNode ? function () {\n            return nodeObj.add(nodeElement.apply(void 0, arguments));\n          } : function () {\n            for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              params[_key4] = arguments[_key4];\n            }\n            return nodeElement.apply(void 0, [nodeObj].concat(params));\n          };\n        } else if (prop === 'self') {\n          return node;\n        } else if (prop.endsWith('Assign') && NodeElements.has(prop.slice(0, prop.length - 'Assign'.length))) {\n          var _nodeElement = NodeElements.get(prop.slice(0, prop.length - 'Assign'.length));\n          return node.isStackNode ? function () {\n            return nodeObj.assign(arguments.length <= 0 ? undefined : arguments[0], _nodeElement.apply(void 0, arguments));\n          } : function () {\n            for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              params[_key5] = arguments[_key5];\n            }\n            return nodeObj.assign(_nodeElement.apply(void 0, [nodeObj].concat(params)));\n          };\n        } else if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {\n          // accessing properties ( swizzle )\n\n          prop = parseSwizzle(prop);\n          return nodeObject(new SplitNode(nodeObj, prop));\n        } else if (/^set[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {\n          // set properties ( swizzle ) and sort to xyzw sequence\n\n          prop = parseSwizzleAndSort(prop.slice(3).toLowerCase());\n          return function (value) {\n            return nodeObject(new SetNode(node, prop, value));\n          };\n        } else if (/^flip[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {\n          // set properties ( swizzle ) and sort to xyzw sequence\n\n          prop = parseSwizzleAndSort(prop.slice(4).toLowerCase());\n          return function () {\n            return nodeObject(new FlipNode(nodeObject(node), prop));\n          };\n        } else if (prop === 'width' || prop === 'height' || prop === 'depth') {\n          // accessing property\n\n          if (prop === 'width') prop = 'x';else if (prop === 'height') prop = 'y';else if (prop === 'depth') prop = 'z';\n          return nodeObject(new SplitNode(node, prop));\n        } else if (/^\\d+$/.test(prop) === true) {\n          // accessing array\n\n          return nodeObject(new ArrayElementNode(nodeObj, new ConstNode(Number(prop), 'uint')));\n        }\n      }\n      return Reflect.get(node, prop, nodeObj);\n    },\n    set: function set(node, prop, value, nodeObj) {\n      if (typeof prop === 'string' && node[prop] === undefined) {\n        // setting properties\n\n        if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test(prop) === true) {\n          nodeObj[prop].assign(value);\n          return true;\n        }\n      }\n      return Reflect.set(node, prop, value, nodeObj);\n    }\n  };\n  var nodeObjectsCacheMap = new WeakMap();\n  var nodeBuilderFunctionsCacheMap = new WeakMap();\n  var ShaderNodeObject = function ShaderNodeObject(obj) {\n    var altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var type = getValueType(obj);\n    if (type === 'node') {\n      var _nodeObject = nodeObjectsCacheMap.get(obj);\n      if (_nodeObject === undefined) {\n        _nodeObject = new Proxy(obj, shaderNodeHandler);\n        nodeObjectsCacheMap.set(obj, _nodeObject);\n        nodeObjectsCacheMap.set(_nodeObject, _nodeObject);\n      }\n      return _nodeObject;\n    } else if (altType === null && (type === 'float' || type === 'boolean') || type && type !== 'shader' && type !== 'string') {\n      return nodeObject(getConstNode(obj, altType));\n    } else if (type === 'shader') {\n      return Fn(obj);\n    }\n    return obj;\n  };\n  var ShaderNodeObjects = function ShaderNodeObjects(objects) {\n    var altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    for (var name in objects) {\n      objects[name] = nodeObject(objects[name], altType);\n    }\n    return objects;\n  };\n  var ShaderNodeArray = function ShaderNodeArray(array) {\n    var altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      array[i] = nodeObject(array[i], altType);\n    }\n    return array;\n  };\n  var ShaderNodeProxy = function ShaderNodeProxy(NodeClass) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var factor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var settings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var assignNode = function assignNode(node) {\n      return nodeObject(settings !== null ? Object.assign(node, settings) : node);\n    };\n    if (scope === null) {\n      return function () {\n        for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          params[_key6] = arguments[_key6];\n        }\n        return assignNode((0, _construct2.default)(NodeClass, (0, _toConsumableArray2.default)(nodeArray(params))));\n      };\n    } else if (factor !== null) {\n      factor = nodeObject(factor);\n      return function () {\n        for (var _len7 = arguments.length, params = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          params[_key7] = arguments[_key7];\n        }\n        return assignNode((0, _construct2.default)(NodeClass, [scope].concat((0, _toConsumableArray2.default)(nodeArray(params)), [factor])));\n      };\n    } else {\n      return function () {\n        for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n          params[_key8] = arguments[_key8];\n        }\n        return assignNode((0, _construct2.default)(NodeClass, [scope].concat((0, _toConsumableArray2.default)(nodeArray(params)))));\n      };\n    }\n  };\n  var ShaderNodeImmutable = function ShaderNodeImmutable(NodeClass) {\n    for (var _len9 = arguments.length, params = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      params[_key9 - 1] = arguments[_key9];\n    }\n    return nodeObject((0, _construct2.default)(NodeClass, (0, _toConsumableArray2.default)(nodeArray(params))));\n  };\n  var ShaderCallNodeInternal = /*#__PURE__*/function (_Node6) {\n    function ShaderCallNodeInternal(shaderNode, inputNodes) {\n      var _this11;\n      (0, _classCallCheck2.default)(this, ShaderCallNodeInternal);\n      _this11 = _callSuper(this, ShaderCallNodeInternal);\n      _this11.shaderNode = shaderNode;\n      _this11.inputNodes = inputNodes;\n      return _this11;\n    }\n    (0, _inherits2.default)(ShaderCallNodeInternal, _Node6);\n    return (0, _createClass2.default)(ShaderCallNodeInternal, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.shaderNode.nodeType || this.getOutputNode(builder).getNodeType(builder);\n      }\n    }, {\n      key: \"call\",\n      value: function call(builder) {\n        var shaderNode = this.shaderNode,\n          inputNodes = this.inputNodes;\n        var properties = builder.getNodeProperties(shaderNode);\n        if (properties.onceOutput) return properties.onceOutput;\n\n        //\n\n        var result = null;\n        if (shaderNode.layout) {\n          var functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get(builder.constructor);\n          if (functionNodesCacheMap === undefined) {\n            functionNodesCacheMap = new WeakMap();\n            nodeBuilderFunctionsCacheMap.set(builder.constructor, functionNodesCacheMap);\n          }\n          var functionNode = functionNodesCacheMap.get(shaderNode);\n          if (functionNode === undefined) {\n            functionNode = nodeObject(builder.buildFunctionNode(shaderNode));\n            functionNodesCacheMap.set(shaderNode, functionNode);\n          }\n          if (builder.currentFunctionNode !== null) {\n            builder.currentFunctionNode.includes.push(functionNode);\n          }\n          result = nodeObject(functionNode.call(inputNodes));\n        } else {\n          var jsFunc = shaderNode.jsFunc;\n          var outputNode = inputNodes !== null ? jsFunc(inputNodes, builder) : jsFunc(builder);\n          result = nodeObject(outputNode);\n        }\n        if (shaderNode.once) {\n          properties.onceOutput = result;\n        }\n        return result;\n      }\n    }, {\n      key: \"getOutputNode\",\n      value: function getOutputNode(builder) {\n        var properties = builder.getNodeProperties(this);\n        if (properties.outputNode === null) {\n          properties.outputNode = this.setupOutput(builder);\n        }\n        return properties.outputNode;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        return this.getOutputNode(builder);\n      }\n    }, {\n      key: \"setupOutput\",\n      value: function setupOutput(builder) {\n        builder.addStack();\n        builder.stack.outputNode = this.call(builder);\n        return builder.removeStack();\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var outputNode = this.getOutputNode(builder);\n        return outputNode.build(builder, output);\n      }\n    }]);\n  }(Node);\n  var ShaderNodeInternal = /*#__PURE__*/function (_Node7) {\n    function ShaderNodeInternal(jsFunc, nodeType) {\n      var _this12;\n      (0, _classCallCheck2.default)(this, ShaderNodeInternal);\n      _this12 = _callSuper(this, ShaderNodeInternal, [nodeType]);\n      _this12.jsFunc = jsFunc;\n      _this12.layout = null;\n      _this12.global = true;\n      _this12.once = false;\n      return _this12;\n    }\n    (0, _inherits2.default)(ShaderNodeInternal, _Node7);\n    return (0, _createClass2.default)(ShaderNodeInternal, [{\n      key: \"setLayout\",\n      value: function setLayout(layout) {\n        this.layout = layout;\n        return this;\n      }\n    }, {\n      key: \"call\",\n      value: function call() {\n        var inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        nodeObjects(inputs);\n        return nodeObject(new ShaderCallNodeInternal(this, inputs));\n      }\n    }, {\n      key: \"setup\",\n      value: function setup() {\n        return this.call();\n      }\n    }]);\n  }(Node);\n  var bools = [false, true];\n  var uints = [0, 1, 2, 3];\n  var ints = [-1, -2];\n  var floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];\n  var boolsCacheMap = new Map();\n  for (var _bool of bools) boolsCacheMap.set(_bool, new ConstNode(_bool));\n  var uintsCacheMap = new Map();\n  for (var _uint of uints) uintsCacheMap.set(_uint, new ConstNode(_uint, 'uint'));\n  var intsCacheMap = new Map((0, _toConsumableArray2.default)(uintsCacheMap).map(function (el) {\n    return new ConstNode(el.value, 'int');\n  }));\n  for (var _int of ints) intsCacheMap.set(_int, new ConstNode(_int, 'int'));\n  var floatsCacheMap = new Map((0, _toConsumableArray2.default)(intsCacheMap).map(function (el) {\n    return new ConstNode(el.value);\n  }));\n  for (var _float of floats) floatsCacheMap.set(_float, new ConstNode(_float));\n  for (var _float2 of floats) floatsCacheMap.set(-_float2, new ConstNode(-_float2));\n  var cacheMaps = {\n    bool: boolsCacheMap,\n    uint: uintsCacheMap,\n    ints: intsCacheMap,\n    float: floatsCacheMap\n  };\n  var constNodesCacheMap = new Map([].concat((0, _toConsumableArray2.default)(boolsCacheMap), (0, _toConsumableArray2.default)(floatsCacheMap)));\n  var getConstNode = function getConstNode(value, type) {\n    if (constNodesCacheMap.has(value)) {\n      return constNodesCacheMap.get(value);\n    } else if (value.isNode === true) {\n      return value;\n    } else {\n      return new ConstNode(value, type);\n    }\n  };\n  var safeGetNodeType = function safeGetNodeType(node) {\n    try {\n      return node.getNodeType();\n    } catch (_) {\n      return undefined;\n    }\n  };\n  var ConvertType = function ConvertType(type) {\n    var cacheMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return function () {\n      for (var _len10 = arguments.length, params = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        params[_key10] = arguments[_key10];\n      }\n      if (params.length === 0 || !['bool', 'float', 'int', 'uint'].includes(type) && params.every(function (param) {\n        return typeof param !== 'object';\n      })) {\n        params = [getValueFromType.apply(void 0, [type].concat((0, _toConsumableArray2.default)(params)))];\n      }\n      if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {\n        return nodeObject(cacheMap.get(params[0]));\n      }\n      if (params.length === 1) {\n        var node = getConstNode(params[0], type);\n        if (safeGetNodeType(node) === type) return nodeObject(node);\n        return nodeObject(new ConvertNode(node, type));\n      }\n      var nodes = params.map(function (param) {\n        return getConstNode(param);\n      });\n      return nodeObject(new JoinNode(nodes, type));\n    };\n  };\n\n  // exports\n\n  var defined = function defined(v) {\n    return typeof v === 'object' && v !== null ? v.value : v;\n  }; // TODO: remove boolean conversion and defined function\n\n  // utils\n\n  var getConstNodeType = function getConstNodeType(value) {\n    return value !== undefined && value !== null ? value.nodeType || value.convertTo || (typeof value === 'string' ? value : null) : null;\n  };\n\n  // shader node base\n\n  function ShaderNode(jsFunc, nodeType) {\n    return new Proxy(new ShaderNodeInternal(jsFunc, nodeType), shaderNodeHandler);\n  }\n  var nodeObject = function nodeObject(val) {\n    var altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return /* new */ShaderNodeObject(val, altType);\n  };\n  var nodeObjects = function nodeObjects(val) {\n    var altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return new ShaderNodeObjects(val, altType);\n  };\n  var nodeArray = function nodeArray(val) {\n    var altType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return new ShaderNodeArray(val, altType);\n  };\n  var nodeProxy = function nodeProxy() {\n    for (var _len11 = arguments.length, params = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      params[_key11] = arguments[_key11];\n    }\n    return (0, _construct2.default)(ShaderNodeProxy, params);\n  };\n  var nodeImmutable = function nodeImmutable() {\n    for (var _len12 = arguments.length, params = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      params[_key12] = arguments[_key12];\n    }\n    return (0, _construct2.default)(ShaderNodeImmutable, params);\n  };\n  var Fn = function Fn(jsFunc, nodeType) {\n    var shaderNode = new ShaderNode(jsFunc, nodeType);\n    var fn = function fn() {\n      var inputs;\n      for (var _len13 = arguments.length, params = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        params[_key13] = arguments[_key13];\n      }\n      nodeObjects(params);\n      if (params[0] && params[0].isNode) {\n        inputs = [].concat(params);\n      } else {\n        inputs = params[0];\n      }\n      return shaderNode.call(inputs);\n    };\n    fn.shaderNode = shaderNode;\n    fn.setLayout = function (layout) {\n      shaderNode.setLayout(layout);\n      return fn;\n    };\n    fn.once = function () {\n      shaderNode.once = true;\n      return fn;\n    };\n    return fn;\n  };\n  var tslFn = function tslFn() {\n    // @deprecated, r168\n\n    console.warn('TSL.ShaderNode: tslFn() has been renamed to Fn().');\n    return Fn.apply(void 0, arguments);\n  };\n\n  //\n\n  addMethodChaining('toGlobal', function (node) {\n    node.global = true;\n    return node;\n  });\n\n  //\n\n  var setCurrentStack = function setCurrentStack(stack) {\n    currentStack = stack;\n  };\n  var getCurrentStack = function getCurrentStack() {\n    return currentStack;\n  };\n  var If = function If() {\n    var _currentStack2;\n    return (_currentStack2 = currentStack).If.apply(_currentStack2, arguments);\n  };\n  function append(node) {\n    if (currentStack) currentStack.add(node);\n    return node;\n  }\n  addMethodChaining('append', append);\n\n  // types\n\n  var color = new ConvertType('color');\n  var float = new ConvertType('float', cacheMaps.float);\n  var int = new ConvertType('int', cacheMaps.ints);\n  var uint = new ConvertType('uint', cacheMaps.uint);\n  var bool = new ConvertType('bool', cacheMaps.bool);\n  var vec2 = new ConvertType('vec2');\n  var ivec2 = new ConvertType('ivec2');\n  var uvec2 = new ConvertType('uvec2');\n  var bvec2 = new ConvertType('bvec2');\n  var vec3 = new ConvertType('vec3');\n  var ivec3 = new ConvertType('ivec3');\n  var uvec3 = new ConvertType('uvec3');\n  var bvec3 = new ConvertType('bvec3');\n  var vec4 = new ConvertType('vec4');\n  var ivec4 = new ConvertType('ivec4');\n  var uvec4 = new ConvertType('uvec4');\n  var bvec4 = new ConvertType('bvec4');\n  var mat2 = new ConvertType('mat2');\n  var mat3 = new ConvertType('mat3');\n  var mat4 = new ConvertType('mat4');\n  var string = function string() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return nodeObject(new ConstNode(value, 'string'));\n  };\n  var arrayBuffer = function arrayBuffer(value) {\n    return nodeObject(new ConstNode(value, 'ArrayBuffer'));\n  };\n  addMethodChaining('toColor', color);\n  addMethodChaining('toFloat', float);\n  addMethodChaining('toInt', int);\n  addMethodChaining('toUint', uint);\n  addMethodChaining('toBool', bool);\n  addMethodChaining('toVec2', vec2);\n  addMethodChaining('toIVec2', ivec2);\n  addMethodChaining('toUVec2', uvec2);\n  addMethodChaining('toBVec2', bvec2);\n  addMethodChaining('toVec3', vec3);\n  addMethodChaining('toIVec3', ivec3);\n  addMethodChaining('toUVec3', uvec3);\n  addMethodChaining('toBVec3', bvec3);\n  addMethodChaining('toVec4', vec4);\n  addMethodChaining('toIVec4', ivec4);\n  addMethodChaining('toUVec4', uvec4);\n  addMethodChaining('toBVec4', bvec4);\n  addMethodChaining('toMat2', mat2);\n  addMethodChaining('toMat3', mat3);\n  addMethodChaining('toMat4', mat4);\n\n  // basic nodes\n\n  var element = /*@__PURE__*/nodeProxy(ArrayElementNode);\n  var convert = function convert(node, types) {\n    return nodeObject(new ConvertNode(nodeObject(node), types));\n  };\n  var split = function split(node, channels) {\n    return nodeObject(new SplitNode(nodeObject(node), channels));\n  };\n  addMethodChaining('element', element);\n  addMethodChaining('convert', convert);\n\n  /** @module UniformGroupNode **/\n\n  /**\n   * This node can be used to group single instances of {@link UniformNode}\n   * and manage them as a uniform buffer.\n   *\n   * In most cases, the predefined nodes `objectGroup`, `renderGroup` and `frameGroup`\n   * will be used when defining the {@link UniformNode#groupNode} property.\n   *\n   * - `objectGroup`: Uniform buffer per object.\n   * - `renderGroup`: Shared uniform buffer, updated once per render call.\n   * - `frameGroup`: Shared uniform buffer, updated once per frame.\n   *\n   * @augments Node\n   */\n  var UniformGroupNode = exports.UniformGroupNode = /*#__PURE__*/function (_Node8) {\n    /**\n     * Constructs a new uniform group node.\n     *\n     * @param {String} name - The name of the uniform group node.\n     * @param {Boolean} [shared=false] - Whether this uniform group node is shared or not.\n     * @param {Number} [order=1] - Influences the internal sorting.\n     */\n    function UniformGroupNode(name) {\n      var _this13;\n      var shared = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      (0, _classCallCheck2.default)(this, UniformGroupNode);\n      _this13 = _callSuper(this, UniformGroupNode, ['string']);\n\n      /**\n       * The name of the uniform group node.\n       *\n       * @type {String}\n       */\n      _this13.name = name;\n\n      /**\n       * Whether this uniform group node is shared or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this13.shared = shared;\n\n      /**\n       * Influences the internal sorting.\n       * TODO: Add details when this property should be changed.\n       *\n       * @type {Number}\n       * @default 1\n       */\n      _this13.order = order;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this13.isUniformGroup = true;\n      return _this13;\n    }\n    (0, _inherits2.default)(UniformGroupNode, _Node8);\n    return (0, _createClass2.default)(UniformGroupNode, [{\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(UniformGroupNode, \"serialize\", this, 3)([data]);\n        data.name = this.name;\n        data.version = this.version;\n        data.shared = this.shared;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(UniformGroupNode, \"deserialize\", this, 3)([data]);\n        this.name = data.name;\n        this.version = data.version;\n        this.shared = data.shared;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'UniformGroupNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a uniform group node with the given name.\n   *\n   * @function\n   * @param {String} name - The name of the uniform group node.\n   * @returns {UniformGroupNode}\n   */\n  var uniformGroup = function uniformGroup(name) {\n    return new UniformGroupNode(name);\n  };\n\n  /**\n   * TSL function for creating a shared uniform group node with the given name and order.\n   *\n   * @function\n   * @param {String} name - The name of the uniform group node.\n   * @param {Number} [order=0] - Influences the internal sorting.\n   * @returns {UniformGroupNode}\n   */\n  var sharedUniformGroup = function sharedUniformGroup(name) {\n    var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return new UniformGroupNode(name, true, order);\n  };\n\n  /**\n   * TSL object that represents a shared uniform group node which is updated once per frame.\n   *\n   * @type {UniformGroupNode}\n   */\n  var frameGroup = /*@__PURE__*/sharedUniformGroup('frame');\n\n  /**\n   * TSL object that represents a shared uniform group node which is updated once per render.\n   *\n   * @type {UniformGroupNode}\n   */\n  var renderGroup = /*@__PURE__*/sharedUniformGroup('render');\n\n  /**\n   * TSL object that represents a uniform group node which is updated once per object.\n   *\n   * @type {UniformGroupNode}\n   */\n  var objectGroup = /*@__PURE__*/uniformGroup('object');\n\n  /** @module UniformNode **/\n\n  /**\n   * Class for representing a uniform.\n   *\n   * @augments InputNode\n   */\n  var UniformNode = exports.UniformNode = /*#__PURE__*/function (_InputNode2) {\n    /**\n     * Constructs a new uniform node.\n     *\n     * @param {Any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).\n     * @param {String?} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n     */\n    function UniformNode(value) {\n      var _this14;\n      var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, UniformNode);\n      _this14 = _callSuper(this, UniformNode, [value, nodeType]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this14.isUniformNode = true;\n\n      /**\n       * The name or label of the uniform.\n       *\n       * @type {String}\n       * @default ''\n       */\n      _this14.name = '';\n\n      /**\n       * The uniform group of this uniform. By default, uniforms are\n       * managed per object but they might belong to a shared group\n       * which is updated per frame or render call.\n       *\n       * @type {UniformGroupNode}\n       */\n      _this14.groupNode = objectGroup;\n      return _this14;\n    }\n\n    /**\n     * Sets the {@link UniformNode#name} property.\n     *\n     * @param {String} name - The name of the uniform.\n     * @return {UniformNode} A reference to this node.\n     */\n    (0, _inherits2.default)(UniformNode, _InputNode2);\n    return (0, _createClass2.default)(UniformNode, [{\n      key: \"label\",\n      value: function label(name) {\n        this.name = name;\n        return this;\n      }\n\n      /**\n       * Sets the {@link UniformNode#groupNode} property.\n       *\n       * @param {UniformGroupNode} group - The uniform group.\n       * @return {UniformNode} A reference to this node.\n       */\n    }, {\n      key: \"setGroup\",\n      value: function setGroup(group) {\n        this.groupNode = group;\n        return this;\n      }\n\n      /**\n       * Returns the {@link UniformNode#groupNode}.\n       *\n       * @return {UniformGroupNode} The uniform group.\n       */\n    }, {\n      key: \"getGroup\",\n      value: function getGroup() {\n        return this.groupNode;\n      }\n\n      /**\n       * By default, this method returns the result of {@link Node#getHash} but derived\n       * classes might overwrite this method with a different implementation.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The uniform hash.\n       */\n    }, {\n      key: \"getUniformHash\",\n      value: function getUniformHash(builder) {\n        return this.getHash(builder);\n      }\n    }, {\n      key: \"onUpdate\",\n      value: function onUpdate(callback, updateType) {\n        var _this15 = this;\n        var self = this.getSelf();\n        callback = callback.bind(self);\n        return _superPropGet(UniformNode, \"onUpdate\", this, 3)([function (frame) {\n          var value = callback(frame, self);\n          if (value !== undefined) {\n            _this15.value = value;\n          }\n        }, updateType]);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var type = this.getNodeType(builder);\n        var hash = this.getUniformHash(builder);\n        var sharedNode = builder.getNodeFromHash(hash);\n        if (sharedNode === undefined) {\n          builder.setHashNode(this, hash);\n          sharedNode = this;\n        }\n        var sharedNodeType = sharedNode.getInputType(builder);\n        var nodeUniform = builder.getUniformFromNode(sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label);\n        var propertyName = builder.getPropertyName(nodeUniform);\n        if (builder.context.label !== undefined) delete builder.context.label;\n        return builder.format(propertyName, type, output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'UniformNode';\n      }\n    }]);\n  }(InputNode);\n  /**\n   * TSL function for creating a uniform node.\n   *\n   * @function\n   * @param {Any} arg1 - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).\n   * @param {String?} arg2 - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n   * @returns {UniformNode}\n   */\n  var uniform = function uniform(arg1, arg2) {\n    var nodeType = getConstNodeType(arg2 || arg1);\n\n    // @TODO: get ConstNode from .traverse() in the future\n    var value = arg1 && arg1.isNode === true ? arg1.node && arg1.node.value || arg1.value : arg1;\n    return nodeObject(new UniformNode(value, nodeType));\n  };\n\n  /** @module PropertyNode **/\n\n  /**\n   * This class represents a shader property. It can be used\n   * to explicitly define a property and assign a value to it.\n   *\n   * ```js\n   * const threshold = property( 'float', 'threshold' ).assign( THRESHOLD );\n   *```\n   * `PropertyNode` is used by the engine to predefined common material properties\n   * for TSL code.\n   *\n   * @augments Node\n   */\n  var PropertyNode = exports.PropertyNode = /*#__PURE__*/function (_Node9) {\n    /**\n     * Constructs a new property node.\n     *\n     * @param {String} nodeType - The type of the node.\n     * @param {String?} [name=null] - The name of the property in the shader.\n     * @param {Boolean} [varying=false] - Whether this property is a varying or not.\n     */\n    function PropertyNode(nodeType) {\n      var _this16;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var varying = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      (0, _classCallCheck2.default)(this, PropertyNode);\n      _this16 = _callSuper(this, PropertyNode, [nodeType]);\n\n      /**\n       * The name of the property in the shader. If no name is defined,\n       * the node system auto-generates one.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this16.name = name;\n\n      /**\n       * Whether this property is a varying or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this16.varying = varying;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this16.isPropertyNode = true;\n      return _this16;\n    }\n    (0, _inherits2.default)(PropertyNode, _Node9);\n    return (0, _createClass2.default)(PropertyNode, [{\n      key: \"getHash\",\n      value: function getHash(builder) {\n        return this.name || _superPropGet(PropertyNode, \"getHash\", this, 3)([builder]);\n      }\n\n      /**\n       * The method is overwritten so it always returns `true`.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Boolean} Whether this node is global or not.\n       */\n    }, {\n      key: \"isGlobal\",\n      value: function isGlobal(/*builder*/\n      ) {\n        return true;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var nodeVar;\n        if (this.varying === true) {\n          nodeVar = builder.getVaryingFromNode(this, this.name);\n          nodeVar.needsInterpolation = true;\n        } else {\n          nodeVar = builder.getVarFromNode(this, this.name);\n        }\n        return builder.getPropertyName(nodeVar);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PropertyNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a property node.\n   *\n   * @function\n   * @param {String} type - The type of the node.\n   * @param {String?} [name=null] - The name of the property in the shader.\n   * @returns {PropertyNode}\n   */\n  var property = function property(type, name) {\n    return nodeObject(new PropertyNode(type, name));\n  };\n\n  /**\n   * TSL function for creating a varying property node.\n   *\n   * @function\n   * @param {String} type - The type of the node.\n   * @param {String?} [name=null] - The name of the varying in the shader.\n   * @returns {PropertyNode}\n   */\n  var varyingProperty = function varyingProperty(type, name) {\n    return nodeObject(new PropertyNode(type, name, true));\n  };\n\n  /**\n   * TSL object that represents the shader variable `DiffuseColor`.\n   *\n   * @type {PropertyNode<vec4>}\n   */\n  var diffuseColor = /*@__PURE__*/nodeImmutable(PropertyNode, 'vec4', 'DiffuseColor');\n\n  /**\n   * TSL object that represents the shader variable `EmissiveColor`.\n   *\n   * @type {PropertyNode<vec3>}\n   */\n  var emissive = /*@__PURE__*/nodeImmutable(PropertyNode, 'vec3', 'EmissiveColor');\n\n  /**\n   * TSL object that represents the shader variable `Roughness`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var roughness = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Roughness');\n\n  /**\n   * TSL object that represents the shader variable `Metalness`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var metalness = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Metalness');\n\n  /**\n   * TSL object that represents the shader variable `Clearcoat`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var clearcoat = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Clearcoat');\n\n  /**\n   * TSL object that represents the shader variable `ClearcoatRoughness`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var clearcoatRoughness = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'ClearcoatRoughness');\n\n  /**\n   * TSL object that represents the shader variable `Sheen`.\n   *\n   * @type {PropertyNode<vec3>}\n   */\n  var sheen = /*@__PURE__*/nodeImmutable(PropertyNode, 'vec3', 'Sheen');\n\n  /**\n   * TSL object that represents the shader variable `SheenRoughness`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var sheenRoughness = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'SheenRoughness');\n\n  /**\n   * TSL object that represents the shader variable `Iridescence`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var iridescence = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Iridescence');\n\n  /**\n   * TSL object that represents the shader variable `IridescenceIOR`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var iridescenceIOR = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'IridescenceIOR');\n\n  /**\n   * TSL object that represents the shader variable `IridescenceThickness`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var iridescenceThickness = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'IridescenceThickness');\n\n  /**\n   * TSL object that represents the shader variable `AlphaT`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var alphaT = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'AlphaT');\n\n  /**\n   * TSL object that represents the shader variable `Anisotropy`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var anisotropy = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Anisotropy');\n\n  /**\n   * TSL object that represents the shader variable `AnisotropyT`.\n   *\n   * @type {PropertyNode<vec3>}\n   */\n  var anisotropyT = /*@__PURE__*/nodeImmutable(PropertyNode, 'vec3', 'AnisotropyT');\n\n  /**\n   * TSL object that represents the shader variable `AnisotropyB`.\n   *\n   * @type {PropertyNode<vec3>}\n   */\n  var anisotropyB = /*@__PURE__*/nodeImmutable(PropertyNode, 'vec3', 'AnisotropyB');\n\n  /**\n   * TSL object that represents the shader variable `SpecularColor`.\n   *\n   * @type {PropertyNode<color>}\n   */\n  var specularColor = /*@__PURE__*/nodeImmutable(PropertyNode, 'color', 'SpecularColor');\n\n  /**\n   * TSL object that represents the shader variable `SpecularF90`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var specularF90 = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'SpecularF90');\n\n  /**\n   * TSL object that represents the shader variable `Shininess`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var shininess = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Shininess');\n\n  /**\n   * TSL object that represents the shader variable `Output`.\n   *\n   * @type {PropertyNode<vec4>}\n   */\n  var output = /*@__PURE__*/nodeImmutable(PropertyNode, 'vec4', 'Output');\n\n  /**\n   * TSL object that represents the shader variable `dashSize`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var dashSize = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'dashSize');\n\n  /**\n   * TSL object that represents the shader variable `gapSize`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var gapSize = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'gapSize');\n\n  /**\n   * TSL object that represents the shader variable `pointWidth`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var pointWidth = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'pointWidth');\n\n  /**\n   * TSL object that represents the shader variable `IOR`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var ior = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'IOR');\n\n  /**\n   * TSL object that represents the shader variable `Transmission`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var transmission = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Transmission');\n\n  /**\n   * TSL object that represents the shader variable `Thickness`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var thickness = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Thickness');\n\n  /**\n   * TSL object that represents the shader variable `AttenuationDistance`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var attenuationDistance = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'AttenuationDistance');\n\n  /**\n   * TSL object that represents the shader variable `AttenuationColor`.\n   *\n   * @type {PropertyNode<color>}\n   */\n  var attenuationColor = /*@__PURE__*/nodeImmutable(PropertyNode, 'color', 'AttenuationColor');\n\n  /**\n   * TSL object that represents the shader variable `Dispersion`.\n   *\n   * @type {PropertyNode<float>}\n   */\n  var dispersion = /*@__PURE__*/nodeImmutable(PropertyNode, 'float', 'Dispersion');\n\n  /** @module AssignNode **/\n\n  /**\n   * These node represents an assign operation. Meaning a node is assigned\n   * to another node.\n   *\n   * @augments TempNode\n   */\n  var AssignNode = exports.AssignNode = /*#__PURE__*/function (_TempNode4) {\n    /**\n     * Constructs a new assign node.\n     *\n     * @param {Node} targetNode - The target node.\n     * @param {Node} sourceNode - The source type.\n     */\n    function AssignNode(targetNode, sourceNode) {\n      var _this17;\n      (0, _classCallCheck2.default)(this, AssignNode);\n      _this17 = _callSuper(this, AssignNode);\n\n      /**\n       * The target node.\n       *\n       * @type {Node}\n       */\n      _this17.targetNode = targetNode;\n\n      /**\n       * The source node.\n       *\n       * @type {Node}\n       */\n      _this17.sourceNode = sourceNode;\n      return _this17;\n    }\n\n    /**\n     * Whether this node is used more than once in context of other nodes. This method\n     * is overwritten since it always returns `false` (assigns are unique).\n     *\n     * @return {Boolean} A flag that indicates if there is more than one dependency to other nodes. Always `false`.\n     */\n    (0, _inherits2.default)(AssignNode, _TempNode4);\n    return (0, _createClass2.default)(AssignNode, [{\n      key: \"hasDependencies\",\n      value: function hasDependencies() {\n        return false;\n      }\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder, output) {\n        return output !== 'void' ? this.targetNode.getNodeType(builder) : 'void';\n      }\n\n      /**\n       * Whether a split is required when assigning source to target. This can happen when the component length of\n       * target and source data type does not match.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Boolean} Whether a split is required when assigning source to target.\n       */\n    }, {\n      key: \"needsSplitAssign\",\n      value: function needsSplitAssign(builder) {\n        var targetNode = this.targetNode;\n        if (builder.isAvailable('swizzleAssign') === false && targetNode.isSplitNode && targetNode.components.length > 1) {\n          var targetLength = builder.getTypeLength(targetNode.node.getNodeType(builder));\n          var assignDifferentVector = vectorComponents.join('').slice(0, targetLength) !== targetNode.components;\n          return assignDifferentVector;\n        }\n        return false;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var targetNode = this.targetNode,\n          sourceNode = this.sourceNode;\n        var needsSplitAssign = this.needsSplitAssign(builder);\n        var targetType = targetNode.getNodeType(builder);\n        var target = targetNode.context({\n          assign: true\n        }).build(builder);\n        var source = sourceNode.build(builder, targetType);\n        var sourceType = sourceNode.getNodeType(builder);\n        var nodeData = builder.getDataFromNode(this);\n\n        //\n\n        var snippet;\n        if (nodeData.initialized === true) {\n          if (output !== 'void') {\n            snippet = target;\n          }\n        } else if (needsSplitAssign) {\n          var sourceVar = builder.getVarFromNode(this, null, targetType);\n          var sourceProperty = builder.getPropertyName(sourceVar);\n          builder.addLineFlowCode(`${sourceProperty} = ${source}`, this);\n          var targetRoot = targetNode.node.context({\n            assign: true\n          }).build(builder);\n          for (var i = 0; i < targetNode.components.length; i++) {\n            var component = targetNode.components[i];\n            builder.addLineFlowCode(`${targetRoot}.${component} = ${sourceProperty}[ ${i} ]`, this);\n          }\n          if (output !== 'void') {\n            snippet = target;\n          }\n        } else {\n          snippet = `${target} = ${source}`;\n          if (output === 'void' || sourceType === 'void') {\n            builder.addLineFlowCode(snippet, this);\n            if (output !== 'void') {\n              snippet = target;\n            }\n          }\n        }\n        nodeData.initialized = true;\n        return builder.format(snippet, targetType, output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'AssignNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating an assign node.\n   *\n   * @function\n   * @param {Node} targetNode - The target node.\n   * @param {Node} sourceNode - The source type.\n   * @returns {AssignNode}\n   */\n  var assign = /*@__PURE__*/nodeProxy(AssignNode);\n  addMethodChaining('assign', assign);\n\n  /**\n   * This module represents the call of a {@link FunctionNode}. Developers are usually not confronted\n   * with this module since they use the predefined TSL syntax `wgslFn` and `glslFn` which encapsulate\n   * this logic.\n   *\n   * @augments TempNode\n   */\n  var FunctionCallNode = exports.FunctionCallNode = /*#__PURE__*/function (_TempNode5) {\n    /**\n     * Constructs a new function call node.\n     *\n     * @param {FunctionNode?} functionNode - The function node.\n     * @param {Object<String, Node>} [parameters={}] - The parameters for the function call.\n     */\n    function FunctionCallNode() {\n      var _this18;\n      var functionNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, FunctionCallNode);\n      _this18 = _callSuper(this, FunctionCallNode);\n\n      /**\n       * The function node.\n       *\n       * @type {FunctionNode}\n       * @default null\n       */\n      _this18.functionNode = functionNode;\n\n      /**\n       * The parameters of the function call.\n       *\n       * @type {Object<String, Node>}\n       * @default {}\n       */\n      _this18.parameters = parameters;\n      return _this18;\n    }\n\n    /**\n     * Sets the parameters of the function call node.\n     *\n     * @param {Object<String, Node>} parameters - The parameters to set.\n     * @return {FunctionCallNode} A reference to this node.\n     */\n    (0, _inherits2.default)(FunctionCallNode, _TempNode5);\n    return (0, _createClass2.default)(FunctionCallNode, [{\n      key: \"setParameters\",\n      value: function setParameters(parameters) {\n        this.parameters = parameters;\n        return this;\n      }\n\n      /**\n       * Returns the parameters of the function call node.\n       *\n       * @return {Object<String, Node>} The parameters of this node.\n       */\n    }, {\n      key: \"getParameters\",\n      value: function getParameters() {\n        return this.parameters;\n      }\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.functionNode.getNodeType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var params = [];\n        var functionNode = this.functionNode;\n        var inputs = functionNode.getInputs(builder);\n        var parameters = this.parameters;\n        var generateInput = function generateInput(node, inputNode) {\n          var type = inputNode.type;\n          var pointer = type === 'pointer';\n          var output;\n          if (pointer) output = '&' + node.build(builder);else output = node.build(builder, type);\n          return output;\n        };\n        if (Array.isArray(parameters)) {\n          for (var i = 0; i < parameters.length; i++) {\n            params.push(generateInput(parameters[i], inputs[i]));\n          }\n        } else {\n          for (var inputNode of inputs) {\n            var node = parameters[inputNode.name];\n            if (node !== undefined) {\n              params.push(generateInput(node, inputNode));\n            } else {\n              throw new Error(`FunctionCallNode: Input '${inputNode.name}' not found in FunctionNode.`);\n            }\n          }\n        }\n        var functionName = functionNode.build(builder, 'property');\n        return `${functionName}( ${params.join(', ')} )`;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'FunctionCallNode';\n      }\n    }]);\n  }(TempNode);\n  var call = function call(func) {\n    for (var _len14 = arguments.length, params = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n      params[_key14 - 1] = arguments[_key14];\n    }\n    params = params.length > 1 || params[0] && params[0].isNode === true ? nodeArray(params) : nodeObjects(params[0]);\n    return nodeObject(new FunctionCallNode(nodeObject(func), params));\n  };\n  addMethodChaining('call', call);\n\n  /** @module OperatorNode **/\n\n  /**\n   * This node represents basic mathematical and logical operations like addition,\n   * subtraction or comparisons (e.g. `equal()`).\n   *\n   * @augments TempNode\n   */\n  var OperatorNode = /*#__PURE__*/function (_TempNode6) {\n    /**\n     * Constructs a new operator node.\n     *\n     * @param {String} op - The operator.\n     * @param {Node} aNode - The first input.\n     * @param {Node} bNode - The second input.\n     * @param {...Node} params - Additional input parameters.\n     */\n    function OperatorNode(op, aNode, bNode) {\n      var _this19;\n      (0, _classCallCheck2.default)(this, OperatorNode);\n      _this19 = _callSuper(this, OperatorNode);\n      if ((arguments.length <= 3 ? 0 : arguments.length - 3) > 0) {\n        var _ref4;\n        var finalOp = new OperatorNode(op, aNode, bNode);\n        for (var i = 0; i < (arguments.length <= 3 ? 0 : arguments.length - 3) - 1; i++) {\n          finalOp = new OperatorNode(op, finalOp, i + 3 < 3 || arguments.length <= i + 3 ? undefined : arguments[i + 3]);\n        }\n        aNode = finalOp;\n        bNode = (_ref4 = (arguments.length <= 3 ? 0 : arguments.length - 3) - 1 + 3, _ref4 < 3 || arguments.length <= _ref4 ? undefined : arguments[_ref4]);\n      }\n\n      /**\n       * The operator.\n       *\n       * @type {String}\n       */\n      _this19.op = op;\n\n      /**\n       * The first input.\n       *\n       * @type {Node}\n       */\n      _this19.aNode = aNode;\n\n      /**\n       * The second input.\n       *\n       * @type {Node}\n       */\n      _this19.bNode = bNode;\n      return _this19;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from the operator\n     * and the input node types.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @param {String} output - The current output string.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(OperatorNode, _TempNode6);\n    return (0, _createClass2.default)(OperatorNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder, output) {\n        var op = this.op;\n        var aNode = this.aNode;\n        var bNode = this.bNode;\n        var typeA = aNode.getNodeType(builder);\n        var typeB = typeof bNode !== 'undefined' ? bNode.getNodeType(builder) : null;\n        if (typeA === 'void' || typeB === 'void') {\n          return 'void';\n        } else if (op === '%') {\n          return typeA;\n        } else if (op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<') {\n          return builder.getIntegerType(typeA);\n        } else if (op === '!' || op === '==' || op === '&&' || op === '||' || op === '^^') {\n          return 'bool';\n        } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n          var typeLength = output ? builder.getTypeLength(output) : Math.max(builder.getTypeLength(typeA), builder.getTypeLength(typeB));\n          return typeLength > 1 ? `bvec${typeLength}` : 'bool';\n        } else {\n          if (typeA === 'float' && builder.isMatrix(typeB)) {\n            return typeB;\n          } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n            // matrix x vector\n\n            return builder.getVectorFromMatrix(typeA);\n          } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n            // vector x matrix\n\n            return builder.getVectorFromMatrix(typeB);\n          } else if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {\n            // anytype x anytype: use the greater length vector\n\n            return typeB;\n          }\n          return typeA;\n        }\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var op = this.op;\n        var aNode = this.aNode;\n        var bNode = this.bNode;\n        var type = this.getNodeType(builder, output);\n        var typeA = null;\n        var typeB = null;\n        if (type !== 'void') {\n          typeA = aNode.getNodeType(builder);\n          typeB = typeof bNode !== 'undefined' ? bNode.getNodeType(builder) : null;\n          if (op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==') {\n            if (builder.isVector(typeA)) {\n              typeB = typeA;\n            } else if (typeA !== typeB) {\n              typeA = typeB = 'float';\n            }\n          } else if (op === '>>' || op === '<<') {\n            typeA = type;\n            typeB = builder.changeComponentType(typeB, 'uint');\n          } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n            // matrix x vector\n\n            typeB = builder.getVectorFromMatrix(typeA);\n          } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n            // vector x matrix\n\n            typeA = builder.getVectorFromMatrix(typeB);\n          } else {\n            // anytype x anytype\n\n            typeA = typeB = type;\n          }\n        } else {\n          typeA = typeB = type;\n        }\n        var a = aNode.build(builder, typeA);\n        var b = typeof bNode !== 'undefined' ? bNode.build(builder, typeB) : null;\n        var outputLength = builder.getTypeLength(output);\n        var fnOpSnippet = builder.getFunctionOperator(op);\n        if (output !== 'void') {\n          if (op === '<' && outputLength > 1) {\n            if (builder.useComparisonMethod) {\n              return builder.format(`${builder.getMethod('lessThan', output)}( ${a}, ${b} )`, type, output);\n            } else {\n              return builder.format(`( ${a} < ${b} )`, type, output);\n            }\n          } else if (op === '<=' && outputLength > 1) {\n            if (builder.useComparisonMethod) {\n              return builder.format(`${builder.getMethod('lessThanEqual', output)}( ${a}, ${b} )`, type, output);\n            } else {\n              return builder.format(`( ${a} <= ${b} )`, type, output);\n            }\n          } else if (op === '>' && outputLength > 1) {\n            if (builder.useComparisonMethod) {\n              return builder.format(`${builder.getMethod('greaterThan', output)}( ${a}, ${b} )`, type, output);\n            } else {\n              return builder.format(`( ${a} > ${b} )`, type, output);\n            }\n          } else if (op === '>=' && outputLength > 1) {\n            if (builder.useComparisonMethod) {\n              return builder.format(`${builder.getMethod('greaterThanEqual', output)}( ${a}, ${b} )`, type, output);\n            } else {\n              return builder.format(`( ${a} >= ${b} )`, type, output);\n            }\n          } else if (op === '!' || op === '~') {\n            return builder.format(`(${op}${a})`, typeA, output);\n          } else if (fnOpSnippet) {\n            return builder.format(`${fnOpSnippet}( ${a}, ${b} )`, type, output);\n          } else {\n            return builder.format(`( ${a} ${op} ${b} )`, type, output);\n          }\n        } else if (typeA !== 'void') {\n          if (fnOpSnippet) {\n            return builder.format(`${fnOpSnippet}( ${a}, ${b} )`, type, output);\n          } else {\n            return builder.format(`${a} ${op} ${b}`, type, output);\n          }\n        }\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(OperatorNode, \"serialize\", this, 3)([data]);\n        data.op = this.op;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(OperatorNode, \"deserialize\", this, 3)([data]);\n        this.op = data.op;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'OperatorNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * Returns the addition of two or more value.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @param {...Node} params - Additional input parameters.\n   * @returns {OperatorNode}\n   */\n  var add = /*@__PURE__*/nodeProxy(OperatorNode, '+');\n\n  /**\n   * Returns the subtraction of two or more value.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @param {...Node} params - Additional input parameters.\n   * @returns {OperatorNode}\n   */\n  var sub = /*@__PURE__*/nodeProxy(OperatorNode, '-');\n\n  /**\n   * Returns the multiplication of two or more value.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @param {...Node} params - Additional input parameters.\n   * @returns {OperatorNode}\n   */\n  var mul = /*@__PURE__*/nodeProxy(OperatorNode, '*');\n\n  /**\n   * Returns the division of two or more value.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @param {...Node} params - Additional input parameters.\n   * @returns {OperatorNode}\n   */\n  var div = /*@__PURE__*/nodeProxy(OperatorNode, '/');\n\n  /**\n   * Computes the remainder of dividing the first node by the second, for integer values.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var modInt = /*@__PURE__*/nodeProxy(OperatorNode, '%');\n\n  /**\n   * Checks if two nodes are equal.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var equal = /*@__PURE__*/nodeProxy(OperatorNode, '==');\n\n  /**\n   * Checks if two nodes are not equal.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var notEqual = /*@__PURE__*/nodeProxy(OperatorNode, '!=');\n\n  /**\n   * Checks if the first node is less than the second.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var lessThan = /*@__PURE__*/nodeProxy(OperatorNode, '<');\n\n  /**\n   * Checks if the first node is greater than the second.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var greaterThan = /*@__PURE__*/nodeProxy(OperatorNode, '>');\n\n  /**\n   * Checks if the first node is less than or equal to the second.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var lessThanEqual = /*@__PURE__*/nodeProxy(OperatorNode, '<=');\n\n  /**\n   * Checks if the first node is greater than or equal to the second.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var greaterThanEqual = /*@__PURE__*/nodeProxy(OperatorNode, '>=');\n\n  /**\n   * Performs logical AND on two nodes.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var and = /*@__PURE__*/nodeProxy(OperatorNode, '&&');\n\n  /**\n   * Performs logical OR on two nodes.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var or = /*@__PURE__*/nodeProxy(OperatorNode, '||');\n\n  /**\n   * Performs logical NOT on a node.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var not = /*@__PURE__*/nodeProxy(OperatorNode, '!');\n\n  /**\n   * Performs logical XOR on two nodes.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var xor = /*@__PURE__*/nodeProxy(OperatorNode, '^^');\n\n  /**\n   * Performs bitwise AND on two nodes.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var bitAnd = /*@__PURE__*/nodeProxy(OperatorNode, '&');\n\n  /**\n   * Performs bitwise NOT on a node.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var bitNot = /*@__PURE__*/nodeProxy(OperatorNode, '~');\n\n  /**\n   * Performs bitwise OR on two nodes.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var bitOr = /*@__PURE__*/nodeProxy(OperatorNode, '|');\n\n  /**\n   * Performs bitwise XOR on two nodes.\n   *\n   * @function\n   * @param {Node} aNode - The first input.\n   * @param {Node} bNode - The second input.\n   * @returns {OperatorNode}\n   */\n  var bitXor = /*@__PURE__*/nodeProxy(OperatorNode, '^');\n\n  /**\n   * Shifts a node to the left.\n   *\n   * @function\n   * @param {Node} aNode - The node to shift.\n   * @param {Node} bNode - The value to shift.\n   * @returns {OperatorNode}\n   */\n  var shiftLeft = /*@__PURE__*/nodeProxy(OperatorNode, '<<');\n\n  /**\n   * Shifts a node to the right.\n   *\n   * @function\n   * @param {Node} aNode - The node to shift.\n   * @param {Node} bNode - The value to shift.\n   * @returns {OperatorNode}\n   */\n  var shiftRight = /*@__PURE__*/nodeProxy(OperatorNode, '>>');\n  addMethodChaining('add', add);\n  addMethodChaining('sub', sub);\n  addMethodChaining('mul', mul);\n  addMethodChaining('div', div);\n  addMethodChaining('modInt', modInt);\n  addMethodChaining('equal', equal);\n  addMethodChaining('notEqual', notEqual);\n  addMethodChaining('lessThan', lessThan);\n  addMethodChaining('greaterThan', greaterThan);\n  addMethodChaining('lessThanEqual', lessThanEqual);\n  addMethodChaining('greaterThanEqual', greaterThanEqual);\n  addMethodChaining('and', and);\n  addMethodChaining('or', or);\n  addMethodChaining('not', not);\n  addMethodChaining('xor', xor);\n  addMethodChaining('bitAnd', bitAnd);\n  addMethodChaining('bitNot', bitNot);\n  addMethodChaining('bitOr', bitOr);\n  addMethodChaining('bitXor', bitXor);\n  addMethodChaining('shiftLeft', shiftLeft);\n  addMethodChaining('shiftRight', shiftRight);\n  var remainder = function remainder() {\n    // @deprecated, r168\n\n    console.warn('TSL.OperatorNode: .remainder() has been renamed to .modInt().');\n    return modInt.apply(void 0, arguments);\n  };\n  addMethodChaining('remainder', remainder);\n\n  /** @module MathNode **/\n\n  /**\n   * This node represents a variety of mathematical methods available in shaders.\n   * They are divided into three categories:\n   *\n   * - Methods with one input like `sin`, `cos` or `normalize`.\n   * - Methods with two inputs like `dot`, `cross` or `pow`.\n   * - Methods with three inputs like `mix`, `clamp` or `smoothstep`.\n   *\n   * @augments TempNode\n   */\n  var MathNode = /*#__PURE__*/function (_TempNode7) {\n    /**\n     * Constructs a new math node.\n     *\n     * @param {String} method - The method name.\n     * @param {Node} aNode - The first input.\n     * @param {Node?} [bNode=null] - The second input.\n     * @param {Node?} [cNode=null] - The third input.\n     */\n    function MathNode(method, aNode) {\n      var _this20;\n      var bNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var cNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, MathNode);\n      _this20 = _callSuper(this, MathNode);\n\n      /**\n       * The method name.\n       *\n       * @type {String}\n       */\n      _this20.method = method;\n\n      /**\n       * The first input.\n       *\n       * @type {Node}\n       */\n      _this20.aNode = aNode;\n\n      /**\n       * The second input.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this20.bNode = bNode;\n\n      /**\n       * The third input.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this20.cNode = cNode;\n      return _this20;\n    }\n\n    /**\n     * The input type is inferred from the node types of the input nodes.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The input type.\n     */\n    (0, _inherits2.default)(MathNode, _TempNode7);\n    return (0, _createClass2.default)(MathNode, [{\n      key: \"getInputType\",\n      value: function getInputType(builder) {\n        var aType = this.aNode.getNodeType(builder);\n        var bType = this.bNode ? this.bNode.getNodeType(builder) : null;\n        var cType = this.cNode ? this.cNode.getNodeType(builder) : null;\n        var aLen = builder.isMatrix(aType) ? 0 : builder.getTypeLength(aType);\n        var bLen = builder.isMatrix(bType) ? 0 : builder.getTypeLength(bType);\n        var cLen = builder.isMatrix(cType) ? 0 : builder.getTypeLength(cType);\n        if (aLen > bLen && aLen > cLen) {\n          return aType;\n        } else if (bLen > cLen) {\n          return bType;\n        } else if (cLen > aLen) {\n          return cType;\n        }\n        return aType;\n      }\n\n      /**\n       * The selected method as well as the input type determine the node type of this node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var method = this.method;\n        if (method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT) {\n          return 'float';\n        } else if (method === MathNode.CROSS) {\n          return 'vec3';\n        } else if (method === MathNode.ALL) {\n          return 'bool';\n        } else if (method === MathNode.EQUALS) {\n          return builder.changeComponentType(this.aNode.getNodeType(builder), 'bool');\n        } else if (method === MathNode.MOD) {\n          return this.aNode.getNodeType(builder);\n        } else {\n          return this.getInputType(builder);\n        }\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var method = this.method;\n        var type = this.getNodeType(builder);\n        var inputType = this.getInputType(builder);\n        var a = this.aNode;\n        var b = this.bNode;\n        var c = this.cNode;\n        var coordinateSystem = builder.renderer.coordinateSystem;\n        if (method === MathNode.TRANSFORM_DIRECTION) {\n          // dir can be either a direction vector or a normal vector\n          // upper-left 3x3 of matrix is assumed to be orthogonal\n\n          var tA = a;\n          var tB = b;\n          if (builder.isMatrix(tA.getNodeType(builder))) {\n            tB = vec4(vec3(tB), 0.0);\n          } else {\n            tA = vec4(vec3(tA), 0.0);\n          }\n          var mulNode = mul(tA, tB).xyz;\n          return normalize(mulNode).build(builder, output);\n        } else if (method === MathNode.NEGATE) {\n          return builder.format('( - ' + a.build(builder, inputType) + ' )', type, output);\n        } else if (method === MathNode.ONE_MINUS) {\n          return sub(1.0, a).build(builder, output);\n        } else if (method === MathNode.RECIPROCAL) {\n          return div(1.0, a).build(builder, output);\n        } else if (method === MathNode.DIFFERENCE) {\n          return abs(sub(a, b)).build(builder, output);\n        } else {\n          var params = [];\n          if (method === MathNode.CROSS || method === MathNode.MOD) {\n            params.push(a.build(builder, type), b.build(builder, type));\n          } else if (coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCoordinateSystem && method === MathNode.STEP) {\n            params.push(a.build(builder, builder.getTypeLength(a.getNodeType(builder)) === 1 ? 'float' : inputType), b.build(builder, inputType));\n          } else if (coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCoordinateSystem && (method === MathNode.MIN || method === MathNode.MAX) || method === MathNode.MOD) {\n            params.push(a.build(builder, inputType), b.build(builder, builder.getTypeLength(b.getNodeType(builder)) === 1 ? 'float' : inputType));\n          } else if (method === MathNode.REFRACT) {\n            params.push(a.build(builder, inputType), b.build(builder, inputType), c.build(builder, 'float'));\n          } else if (method === MathNode.MIX) {\n            params.push(a.build(builder, inputType), b.build(builder, inputType), c.build(builder, builder.getTypeLength(c.getNodeType(builder)) === 1 ? 'float' : inputType));\n          } else {\n            if (coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem && method === MathNode.ATAN && b !== null) {\n              method = 'atan2';\n            }\n            params.push(a.build(builder, inputType));\n            if (b !== null) params.push(b.build(builder, inputType));\n            if (c !== null) params.push(c.build(builder, inputType));\n          }\n          return builder.format(`${builder.getMethod(method, type)}( ${params.join(', ')} )`, type, output);\n        }\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(MathNode, \"serialize\", this, 3)([data]);\n        data.method = this.method;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(MathNode, \"deserialize\", this, 3)([data]);\n        this.method = data.method;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MathNode';\n      }\n    }]);\n  }(TempNode); // 1 input\n  MathNode.ALL = 'all';\n  MathNode.ANY = 'any';\n  MathNode.RADIANS = 'radians';\n  MathNode.DEGREES = 'degrees';\n  MathNode.EXP = 'exp';\n  MathNode.EXP2 = 'exp2';\n  MathNode.LOG = 'log';\n  MathNode.LOG2 = 'log2';\n  MathNode.SQRT = 'sqrt';\n  MathNode.INVERSE_SQRT = 'inversesqrt';\n  MathNode.FLOOR = 'floor';\n  MathNode.CEIL = 'ceil';\n  MathNode.NORMALIZE = 'normalize';\n  MathNode.FRACT = 'fract';\n  MathNode.SIN = 'sin';\n  MathNode.COS = 'cos';\n  MathNode.TAN = 'tan';\n  MathNode.ASIN = 'asin';\n  MathNode.ACOS = 'acos';\n  MathNode.ATAN = 'atan';\n  MathNode.ABS = 'abs';\n  MathNode.SIGN = 'sign';\n  MathNode.LENGTH = 'length';\n  MathNode.NEGATE = 'negate';\n  MathNode.ONE_MINUS = 'oneMinus';\n  MathNode.DFDX = 'dFdx';\n  MathNode.DFDY = 'dFdy';\n  MathNode.ROUND = 'round';\n  MathNode.RECIPROCAL = 'reciprocal';\n  MathNode.TRUNC = 'trunc';\n  MathNode.FWIDTH = 'fwidth';\n  MathNode.TRANSPOSE = 'transpose';\n\n  // 2 inputs\n\n  MathNode.BITCAST = 'bitcast';\n  MathNode.EQUALS = 'equals';\n  MathNode.MIN = 'min';\n  MathNode.MAX = 'max';\n  MathNode.MOD = 'mod';\n  MathNode.STEP = 'step';\n  MathNode.REFLECT = 'reflect';\n  MathNode.DISTANCE = 'distance';\n  MathNode.DIFFERENCE = 'difference';\n  MathNode.DOT = 'dot';\n  MathNode.CROSS = 'cross';\n  MathNode.POW = 'pow';\n  MathNode.TRANSFORM_DIRECTION = 'transformDirection';\n\n  // 3 inputs\n\n  MathNode.MIX = 'mix';\n  MathNode.CLAMP = 'clamp';\n  MathNode.REFRACT = 'refract';\n  MathNode.SMOOTHSTEP = 'smoothstep';\n  MathNode.FACEFORWARD = 'faceforward';\n\n  // 1 inputs\n\n  /**\n   * A small value used to handle floating-point precision errors.\n   *\n   * @type {Node<float>}\n   */\n  var EPSILON = /*@__PURE__*/float(1e-6);\n\n  /**\n   * Represents infinity.\n   *\n   * @type {Node<float>}\n   */\n  var INFINITY = /*@__PURE__*/float(1e6);\n\n  /**\n   * Represents PI.\n   *\n   * @type {Node<float>}\n   */\n  var PI = /*@__PURE__*/float(Math.PI);\n\n  /**\n   * Represents PI * 2.\n   *\n   * @type {Node<float>}\n   */\n  var PI2 = /*@__PURE__*/float(Math.PI * 2);\n\n  /**\n   * Returns `true` if all components of `x` are `true`.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node<bool>}\n   */\n  var all = /*@__PURE__*/nodeProxy(MathNode, MathNode.ALL);\n\n  /**\n   * Returns `true` if any components of `x` are `true`.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node<bool>}\n   */\n  var any = /*@__PURE__*/nodeProxy(MathNode, MathNode.ANY);\n\n  /**\n   * Converts a quantity in degrees to radians.\n   *\n   * @function\n   * @param {Node | Number} x - The input in degrees.\n   * @returns {Node}\n   */\n  var radians = /*@__PURE__*/nodeProxy(MathNode, MathNode.RADIANS);\n\n  /**\n   * Convert a quantity in radians to degrees.\n   *\n   * @function\n   * @param {Node | Number} x - The input in radians.\n   * @returns {Node}\n   */\n  var degrees = /*@__PURE__*/nodeProxy(MathNode, MathNode.DEGREES);\n\n  /**\n   * Returns the natural exponentiation of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var exp = /*@__PURE__*/nodeProxy(MathNode, MathNode.EXP);\n\n  /**\n   * Returns 2 raised to the power of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var exp2 = /*@__PURE__*/nodeProxy(MathNode, MathNode.EXP2);\n\n  /**\n   * Returns the natural logarithm of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var log = /*@__PURE__*/nodeProxy(MathNode, MathNode.LOG);\n\n  /**\n   * Returns the base 2 logarithm of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var log2 = /*@__PURE__*/nodeProxy(MathNode, MathNode.LOG2);\n\n  /**\n   * Returns the square root of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var sqrt = /*@__PURE__*/nodeProxy(MathNode, MathNode.SQRT);\n\n  /**\n   * Returns the inverse of the square root of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var inverseSqrt = /*@__PURE__*/nodeProxy(MathNode, MathNode.INVERSE_SQRT);\n\n  /**\n   * Finds the nearest integer less than or equal to the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var floor = /*@__PURE__*/nodeProxy(MathNode, MathNode.FLOOR);\n\n  /**\n   * Finds the nearest integer that is greater than or equal to the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var ceil = /*@__PURE__*/nodeProxy(MathNode, MathNode.CEIL);\n\n  /**\n   * Calculates the unit vector in the same direction as the original vector.\n   *\n   * @function\n   * @param {Node} x - The input vector.\n   * @returns {Node}\n   */\n  var normalize = /*@__PURE__*/nodeProxy(MathNode, MathNode.NORMALIZE);\n\n  /**\n   * Computes the fractional part of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var fract = /*@__PURE__*/nodeProxy(MathNode, MathNode.FRACT);\n\n  /**\n   * Returns the sine of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var sin = /*@__PURE__*/nodeProxy(MathNode, MathNode.SIN);\n\n  /**\n   * Returns the cosine of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var cos = /*@__PURE__*/nodeProxy(MathNode, MathNode.COS);\n\n  /**\n   * Returns the tangent of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var tan = /*@__PURE__*/nodeProxy(MathNode, MathNode.TAN);\n\n  /**\n   * Returns the arcsine of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var asin = /*@__PURE__*/nodeProxy(MathNode, MathNode.ASIN);\n\n  /**\n   * Returns the arccosine of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var acos = /*@__PURE__*/nodeProxy(MathNode, MathNode.ACOS);\n\n  /**\n   * Returns the arc-tangent of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var atan = /*@__PURE__*/nodeProxy(MathNode, MathNode.ATAN);\n\n  /**\n   * Returns the absolute value of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var abs = /*@__PURE__*/nodeProxy(MathNode, MathNode.ABS);\n\n  /**\n   * Extracts the sign of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var sign = /*@__PURE__*/nodeProxy(MathNode, MathNode.SIGN);\n\n  /**\n   * Calculates the length of a vector.\n   *\n   * @function\n   * @param {Node} x - The parameter.\n   * @returns {Node<float>}\n   */\n  var length = /*@__PURE__*/nodeProxy(MathNode, MathNode.LENGTH);\n\n  /**\n   * Negates the value of the parameter (-x).\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var negate = /*@__PURE__*/nodeProxy(MathNode, MathNode.NEGATE);\n\n  /**\n   * Return `1` minus the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var oneMinus = /*@__PURE__*/nodeProxy(MathNode, MathNode.ONE_MINUS);\n\n  /**\n   * Returns the partial derivative of the parameter with respect to x.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var dFdx = /*@__PURE__*/nodeProxy(MathNode, MathNode.DFDX);\n\n  /**\n   * Returns the partial derivative of the parameter with respect to y.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var dFdy = /*@__PURE__*/nodeProxy(MathNode, MathNode.DFDY);\n\n  /**\n   * Rounds the parameter to the nearest integer.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var round = /*@__PURE__*/nodeProxy(MathNode, MathNode.ROUND);\n\n  /**\n   * Returns the reciprocal of the parameter `(1/x)`.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var reciprocal = /*@__PURE__*/nodeProxy(MathNode, MathNode.RECIPROCAL);\n\n  /**\n   * Truncates the parameter, removing the fractional part.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var trunc = /*@__PURE__*/nodeProxy(MathNode, MathNode.TRUNC);\n\n  /**\n   * Returns the sum of the absolute derivatives in x and y.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @returns {Node}\n   */\n  var fwidth = /*@__PURE__*/nodeProxy(MathNode, MathNode.FWIDTH);\n\n  /**\n   * Returns the transpose of a matrix.\n   *\n   * @function\n   * @param {Node<mat2|mat3|mat4>} x - The parameter.\n   * @returns {Node}\n   */\n  var transpose = /*@__PURE__*/nodeProxy(MathNode, MathNode.TRANSPOSE);\n\n  // 2 inputs\n\n  /**\n   * Reinterpret the bit representation of a value in one type as a value in another type.\n   *\n   * @function\n   * @param {Node | Number} x - The parameter.\n   * @param {String} y - The new type.\n   * @returns {Node}\n   */\n  var bitcast = /*@__PURE__*/nodeProxy(MathNode, MathNode.BITCAST);\n\n  /**\n   * Returns `true` if `x` equals `y`.\n   *\n   * @function\n   * @param {Node | Number} x - The first parameter.\n   * @param {Node | Number} y - The second parameter.\n   * @returns {Node<bool>}\n   */\n  var equals = /*@__PURE__*/nodeProxy(MathNode, MathNode.EQUALS);\n\n  /**\n   * Returns the lesser of two values.\n   *\n   * @function\n   * @param {Node | Number} x - The y parameter.\n   * @param {Node | Number} y - The x parameter.\n   * @returns {Node}\n   */\n  var min$1 = /*@__PURE__*/nodeProxy(MathNode, MathNode.MIN);\n\n  /**\n   * Returns the greater of two values.\n   *\n   * @function\n   * @param {Node | Number} x - The y parameter.\n   * @param {Node | Number} y - The x parameter.\n   * @returns {Node}\n   */\n  var max$1 = /*@__PURE__*/nodeProxy(MathNode, MathNode.MAX);\n\n  /**\n   * Computes the remainder of dividing the first node by the second one.\n   *\n   * @function\n   * @param {Node | Number} x - The y parameter.\n   * @param {Node | Number} y - The x parameter.\n   * @returns {Node}\n   */\n  var mod = /*@__PURE__*/nodeProxy(MathNode, MathNode.MOD);\n\n  /**\n   * Generate a step function by comparing two values.\n   *\n   * @function\n   * @param {Node | Number} x - The y parameter.\n   * @param {Node | Number} y - The x parameter.\n   * @returns {Node}\n   */\n  var step = /*@__PURE__*/nodeProxy(MathNode, MathNode.STEP);\n\n  /**\n   * Calculates the reflection direction for an incident vector.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} I - The incident vector.\n   * @param {Node<vec2|vec3|vec4>} N - The normal vector.\n   * @returns {Node<vec2|vec3|vec4>}\n   */\n  var reflect = /*@__PURE__*/nodeProxy(MathNode, MathNode.REFLECT);\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} x - The first point.\n   * @param {Node<vec2|vec3|vec4>} y - The second point.\n   * @returns {Node<float>}\n   */\n  var distance = /*@__PURE__*/nodeProxy(MathNode, MathNode.DISTANCE);\n\n  /**\n   * Calculates the absolute difference between two values.\n   *\n   * @function\n   * @param {Node | Number} x - The first parameter.\n   * @param {Node | Number} y - The second parameter.\n   * @returns {Node}\n   */\n  var difference = /*@__PURE__*/nodeProxy(MathNode, MathNode.DIFFERENCE);\n\n  /**\n   * Calculates the dot product of two vectors.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} x - The first vector.\n   * @param {Node<vec2|vec3|vec4>} y - The second vector.\n   * @returns {Node<float>}\n   */\n  var dot = /*@__PURE__*/nodeProxy(MathNode, MathNode.DOT);\n\n  /**\n   * Calculates the cross product of two vectors.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} x - The first vector.\n   * @param {Node<vec2|vec3|vec4>} y - The second vector.\n   * @returns {Node<vec2|vec3|vec4>}\n   */\n  var cross = /*@__PURE__*/nodeProxy(MathNode, MathNode.CROSS);\n\n  /**\n   * Return the value of the first parameter raised to the power of the second one.\n   *\n   * @function\n   * @param {Node | Number} x - The first parameter.\n   * @param {Node | Number} y - The second parameter.\n   * @returns {Node}\n   */\n  var pow = /*@__PURE__*/nodeProxy(MathNode, MathNode.POW);\n\n  /**\n   * Returns the square of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The first parameter.\n   * @returns {Node}\n   */\n  var pow2 = /*@__PURE__*/nodeProxy(MathNode, MathNode.POW, 2);\n\n  /**\n   * Returns the cube of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The first parameter.\n   * @returns {Node}\n   */\n  var pow3 = /*@__PURE__*/nodeProxy(MathNode, MathNode.POW, 3);\n\n  /**\n   * Returns the fourth power of the parameter.\n   *\n   * @function\n   * @param {Node | Number} x - The first parameter.\n   * @returns {Node}\n   */\n  var pow4 = /*@__PURE__*/nodeProxy(MathNode, MathNode.POW, 4);\n\n  /**\n   * Transforms the direction of a vector by a matrix and then normalizes the result.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} direction - The direction vector.\n   * @param {Node<mat2|mat3|mat4>} matrix - The transformation matrix.\n   * @returns {Node}\n   */\n  var transformDirection = /*@__PURE__*/nodeProxy(MathNode, MathNode.TRANSFORM_DIRECTION);\n\n  /**\n   * Returns the cube root of a number.\n   *\n   * @function\n   * @param {Node | Number} a - The first parameter.\n   * @returns {Node}\n   */\n  var cbrt = function cbrt(a) {\n    return mul(sign(a), pow(abs(a), 1.0 / 3.0));\n  };\n\n  /**\n   * Calculate the squared length of a vector.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} a - The vector.\n   * @returns {Node<float>}\n   */\n  var lengthSq = function lengthSq(a) {\n    return dot(a, a);\n  };\n\n  /**\n   * Linearly interpolates between two values.\n   *\n   * @function\n   * @param {Node | Number} a - The first parameter.\n   * @param {Node | Number} b - The second parameter.\n   * @param {Node | Number} t - The interpolation value.\n   * @returns {Node}\n   */\n  var mix = /*@__PURE__*/nodeProxy(MathNode, MathNode.MIX);\n\n  /**\n   * Constrains a value to lie between two further values.\n   *\n   * @function\n   * @param {Node | Number} value - The value to constrain.\n   * @param {Node | Number} [low=0] - The lower bound.\n   * @param {Node | Number} [high=1] - The upper bound.\n   * @returns {Node}\n   */\n  var clamp = function clamp(value) {\n    var low = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var high = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    return nodeObject(new MathNode(MathNode.CLAMP, nodeObject(value), nodeObject(low), nodeObject(high)));\n  };\n\n  /**\n   * Constrains a value between `0` and `1`.\n   *\n   * @function\n   * @param {Node | Number} value - The value to constrain.\n   * @returns {Node}\n   */\n  var saturate = function saturate(value) {\n    return clamp(value);\n  };\n\n  /**\n   * Calculates the refraction direction for an incident vector.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} I - The incident vector.\n   * @param {Node<vec2|vec3|vec4>} N - The normal vector.\n   * @param {Node<float>} eta - The the ratio of indices of refraction.\n   * @returns {Node<vec2|vec3|vec4>}\n   */\n  var refract = /*@__PURE__*/nodeProxy(MathNode, MathNode.REFRACT);\n\n  /**\n   * Performs a Hermite interpolation between two values.\n   *\n   * @function\n   * @param {Node | Number} low - The value of the lower edge of the Hermite function.\n   * @param {Node | Number} high - The value of the upper edge of the Hermite function.\n   * @param {Node | Number} x - The source value for interpolation.\n   * @returns {Node}\n   */\n  var smoothstep = /*@__PURE__*/nodeProxy(MathNode, MathNode.SMOOTHSTEP);\n\n  /**\n   * Returns a vector pointing in the same direction as another.\n   *\n   * @function\n   * @param {Node<vec2|vec3|vec4>} N - The vector to orient.\n   * @param {Node<vec2|vec3|vec4>} I - The incident vector.\n   * @param {Node<vec2|vec3|vec4>} Nref - The reference vector.\n   * @returns {Node<vec2|vec3|vec4>}\n   */\n  var faceForward = /*@__PURE__*/nodeProxy(MathNode, MathNode.FACEFORWARD);\n\n  /**\n   * Returns a random value for the given uv.\n   *\n   * @function\n   * @param {Node<vec2>} uv - The uv node.\n   * @returns {Node<float>}\n   */\n  var rand = /*@__PURE__*/Fn(function (_ref5) {\n    var _ref6 = (0, _slicedToArray2.default)(_ref5, 1),\n      uv = _ref6[0];\n    var a = 12.9898,\n      b = 78.233,\n      c = 43758.5453;\n    var dt = dot(uv.xy, vec2(a, b)),\n      sn = mod(dt, PI);\n    return fract(sin(sn).mul(c));\n  });\n\n  /**\n   * Alias for `mix()` with a different parameter order.\n   *\n   * @function\n   * @param {Node | Number} t - The interpolation value.\n   * @param {Node | Number} e1 - The first parameter.\n   * @param {Node | Number} e2 - The second parameter.\n   * @returns {Node}\n   */\n  var mixElement = function mixElement(t, e1, e2) {\n    return mix(e1, e2, t);\n  };\n\n  /**\n   * Alias for `smoothstep()` with a different parameter order.\n   *\n   * @function\n   * @param {Node | Number} x - The source value for interpolation.\n   * @param {Node | Number} low - The value of the lower edge of the Hermite function.\n   * @param {Node | Number} high - The value of the upper edge of the Hermite function.\n   * @returns {Node}\n   */\n  var smoothstepElement = function smoothstepElement(x, low, high) {\n    return smoothstep(low, high, x);\n  };\n\n  /**\n   * Returns the arc-tangent of the quotient of its parameters.\n   *\n   * @function\n   * @param {Node | Number} y - The y parameter.\n   * @param {Node | Number} x - The x parameter.\n   * @returns {Node}\n   */\n  var atan2 = function atan2(y, x) {\n    // @deprecated, r172\n\n    console.warn('THREE.TSL: \"atan2\" is overloaded. Use \"atan\" instead.');\n    return atan(y, x);\n  };\n\n  // GLSL alias function\n\n  var faceforward = faceForward;\n  var inversesqrt = inverseSqrt;\n\n  // Method chaining\n\n  addMethodChaining('all', all);\n  addMethodChaining('any', any);\n  addMethodChaining('equals', equals);\n  addMethodChaining('radians', radians);\n  addMethodChaining('degrees', degrees);\n  addMethodChaining('exp', exp);\n  addMethodChaining('exp2', exp2);\n  addMethodChaining('log', log);\n  addMethodChaining('log2', log2);\n  addMethodChaining('sqrt', sqrt);\n  addMethodChaining('inverseSqrt', inverseSqrt);\n  addMethodChaining('floor', floor);\n  addMethodChaining('ceil', ceil);\n  addMethodChaining('normalize', normalize);\n  addMethodChaining('fract', fract);\n  addMethodChaining('sin', sin);\n  addMethodChaining('cos', cos);\n  addMethodChaining('tan', tan);\n  addMethodChaining('asin', asin);\n  addMethodChaining('acos', acos);\n  addMethodChaining('atan', atan);\n  addMethodChaining('abs', abs);\n  addMethodChaining('sign', sign);\n  addMethodChaining('length', length);\n  addMethodChaining('lengthSq', lengthSq);\n  addMethodChaining('negate', negate);\n  addMethodChaining('oneMinus', oneMinus);\n  addMethodChaining('dFdx', dFdx);\n  addMethodChaining('dFdy', dFdy);\n  addMethodChaining('round', round);\n  addMethodChaining('reciprocal', reciprocal);\n  addMethodChaining('trunc', trunc);\n  addMethodChaining('fwidth', fwidth);\n  addMethodChaining('atan2', atan2);\n  addMethodChaining('min', min$1);\n  addMethodChaining('max', max$1);\n  addMethodChaining('mod', mod);\n  addMethodChaining('step', step);\n  addMethodChaining('reflect', reflect);\n  addMethodChaining('distance', distance);\n  addMethodChaining('dot', dot);\n  addMethodChaining('cross', cross);\n  addMethodChaining('pow', pow);\n  addMethodChaining('pow2', pow2);\n  addMethodChaining('pow3', pow3);\n  addMethodChaining('pow4', pow4);\n  addMethodChaining('transformDirection', transformDirection);\n  addMethodChaining('mix', mixElement);\n  addMethodChaining('clamp', clamp);\n  addMethodChaining('refract', refract);\n  addMethodChaining('smoothstep', smoothstepElement);\n  addMethodChaining('faceForward', faceForward);\n  addMethodChaining('difference', difference);\n  addMethodChaining('saturate', saturate);\n  addMethodChaining('cbrt', cbrt);\n  addMethodChaining('transpose', transpose);\n  addMethodChaining('rand', rand);\n\n  /** @module ConditionalNode **/\n\n  /**\n   * Represents a logical `if/else` statement. Can be used as an alternative\n   * to the `If()`/`Else()` syntax.\n   *\n   * The corresponding TSL `select()` looks like so:\n   * ```js\n   * velocity = position.greaterThanEqual( limit ).select( velocity.negate(), velocity );\n   * ```\n   * The `select()` method is called in a chaining fashion on a condition. The parameter nodes of `select()`\n   * determine the outcome of the entire statement.\n   *\n   * @augments Node\n   */\n  var ConditionalNode = /*#__PURE__*/function (_Node10) {\n    /**\n     * Constructs a new conditional node.\n     *\n     * @param {Node} condNode - The node that defines the condition.\n     * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.\n     * @param {Node?} [elseNode=null] - The node that is evaluate when the condition ends up `false`.\n     */\n    function ConditionalNode(condNode, ifNode) {\n      var _this21;\n      var elseNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, ConditionalNode);\n      _this21 = _callSuper(this, ConditionalNode);\n\n      /**\n       * The node that defines the condition.\n       *\n       * @type {Node}\n       */\n      _this21.condNode = condNode;\n\n      /**\n       * The node that is evaluate when the condition ends up `true`.\n       *\n       * @type {Node}\n       */\n      _this21.ifNode = ifNode;\n\n      /**\n       * The node that is evaluate when the condition ends up `false`.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this21.elseNode = elseNode;\n      return _this21;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from the if/else\n     * nodes.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(ConditionalNode, _Node10);\n    return (0, _createClass2.default)(ConditionalNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var _builder$getNodePrope2 = builder.getNodeProperties(this),\n          ifNode = _builder$getNodePrope2.ifNode,\n          elseNode = _builder$getNodePrope2.elseNode;\n        if (ifNode === undefined) {\n          // fallback setup\n\n          this.setup(builder);\n          return this.getNodeType(builder);\n        }\n        var ifType = ifNode.getNodeType(builder);\n        if (elseNode !== null) {\n          var elseType = elseNode.getNodeType(builder);\n          if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n            return elseType;\n          }\n        }\n        return ifType;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var condNode = this.condNode.cache();\n        var ifNode = this.ifNode.cache();\n        var elseNode = this.elseNode ? this.elseNode.cache() : null;\n\n        //\n\n        var currentNodeBlock = builder.context.nodeBlock;\n        builder.getDataFromNode(ifNode).parentNodeBlock = currentNodeBlock;\n        if (elseNode !== null) builder.getDataFromNode(elseNode).parentNodeBlock = currentNodeBlock;\n\n        //\n\n        var properties = builder.getNodeProperties(this);\n        properties.condNode = condNode;\n        properties.ifNode = ifNode.context({\n          nodeBlock: ifNode\n        });\n        properties.elseNode = elseNode ? elseNode.context({\n          nodeBlock: elseNode\n        }) : null;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var type = this.getNodeType(builder);\n        var nodeData = builder.getDataFromNode(this);\n        if (nodeData.nodeProperty !== undefined) {\n          return nodeData.nodeProperty;\n        }\n        var _builder$getNodePrope3 = builder.getNodeProperties(this),\n          condNode = _builder$getNodePrope3.condNode,\n          ifNode = _builder$getNodePrope3.ifNode,\n          elseNode = _builder$getNodePrope3.elseNode;\n        var needsOutput = output !== 'void';\n        var nodeProperty = needsOutput ? property(type).build(builder) : '';\n        nodeData.nodeProperty = nodeProperty;\n        var nodeSnippet = condNode.build(builder, 'bool');\n        builder.addFlowCode(`\\n${builder.tab}if ( ${nodeSnippet} ) {\\n\\n`).addFlowTab();\n        var ifSnippet = ifNode.build(builder, type);\n        if (ifSnippet) {\n          if (needsOutput) {\n            ifSnippet = nodeProperty + ' = ' + ifSnippet + ';';\n          } else {\n            ifSnippet = 'return ' + ifSnippet + ';';\n          }\n        }\n        builder.removeFlowTab().addFlowCode(builder.tab + '\\t' + ifSnippet + '\\n\\n' + builder.tab + '}');\n        if (elseNode !== null) {\n          builder.addFlowCode(' else {\\n\\n').addFlowTab();\n          var elseSnippet = elseNode.build(builder, type);\n          if (elseSnippet) {\n            if (needsOutput) {\n              elseSnippet = nodeProperty + ' = ' + elseSnippet + ';';\n            } else {\n              elseSnippet = 'return ' + elseSnippet + ';';\n            }\n          }\n          builder.removeFlowTab().addFlowCode(builder.tab + '\\t' + elseSnippet + '\\n\\n' + builder.tab + '}\\n\\n');\n        } else {\n          builder.addFlowCode('\\n\\n');\n        }\n        return builder.format(nodeProperty, type, output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ConditionalNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a conditional node.\n   *\n   * @function\n   * @param {Node} condNode - The node that defines the condition.\n   * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.\n   * @param {Node?} [elseNode=null] - The node that is evaluate when the condition ends up `false`.\n   * @returns {ConditionalNode}\n   */\n  var select = /*@__PURE__*/nodeProxy(ConditionalNode);\n  addMethodChaining('select', select);\n\n  //\n\n  var cond = function cond() {\n    // @deprecated, r168\n\n    console.warn('TSL.ConditionalNode: cond() has been renamed to select().');\n    return select.apply(void 0, arguments);\n  };\n  addMethodChaining('cond', cond);\n\n  /** @module ContextNode **/\n\n  /**\n   * This node can be used as a context management component for another node.\n   * {@link NodeBuilder} performs its node building process in a specific context and\n   * this node allows the modify the context. A typical use case is to overwrite `getUV()` e.g.:\n   *\n   * ```js\n   *node.context( { getUV: () => customCoord } );\n   *```\n   * @augments Node\n   */\n  var ContextNode = exports.ContextNode = /*#__PURE__*/function (_Node11) {\n    /**\n     * Constructs a new context node.\n     *\n     * @param {Node} node - The node whose context should be modified.\n     * @param {Object} [value={}] - The modified context data.\n     */\n    function ContextNode(node) {\n      var _this22;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, ContextNode);\n      _this22 = _callSuper(this, ContextNode);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this22.isContextNode = true;\n\n      /**\n       * The node whose context should be modified.\n       *\n       * @type {Node}\n       */\n      _this22.node = node;\n\n      /**\n       * The modified context data.\n       *\n       * @type {Object}\n       * @default {}\n       */\n      _this22.value = value;\n      return _this22;\n    }\n\n    /**\n     * This method is overwritten to ensure it returns the reference to {@link module:ContextNode~ContextNode#node}.\n     *\n     * @return {Node} A reference to {@link module:ContextNode~ContextNode#node}.\n     */\n    (0, _inherits2.default)(ContextNode, _Node11);\n    return (0, _createClass2.default)(ContextNode, [{\n      key: \"getScope\",\n      value: function getScope() {\n        return this.node.getScope();\n      }\n\n      /**\n       * This method is overwritten to ensure it returns the type of {@link module:ContextNode~ContextNode#node}.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.node.getNodeType(builder);\n      }\n    }, {\n      key: \"analyze\",\n      value: function analyze(builder) {\n        this.node.build(builder);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var previousContext = builder.getContext();\n        builder.setContext(Object.assign({}, builder.context, this.value));\n        var node = this.node.build(builder);\n        builder.setContext(previousContext);\n        return node;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var previousContext = builder.getContext();\n        builder.setContext(Object.assign({}, builder.context, this.value));\n        var snippet = this.node.build(builder, output);\n        builder.setContext(previousContext);\n        return snippet;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ContextNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a context node.\n   *\n   * @function\n   * @param {Node} node - The node whose context should be modified.\n   * @param {Object} [value={}] - The modified context data.\n   * @returns {ContextNode}\n   */\n  var context = /*@__PURE__*/nodeProxy(ContextNode);\n\n  /**\n   * TSL function for defining a label context value for a given node.\n   *\n   * @function\n   * @param {Node} node - The node whose context should be modified.\n   * @param {String} name - The name/label to set.\n   * @returns {ContextNode}\n   */\n  var label = function label(node, name) {\n    return context(node, {\n      label: name\n    });\n  };\n  addMethodChaining('context', context);\n  addMethodChaining('label', label);\n\n  /** @module VarNode **/\n\n  /**\n   * Class for representing shader variables as nodes. Variables are created from\n   * existing nodes like the following:\n   *\n   * ```js\n   * const depth = sampleDepth( uvNode ).toVar( 'depth' );\n   * ```\n   *\n   * @augments Node\n   */\n  var VarNode = exports.VarNode = /*#__PURE__*/function (_Node12) {\n    /**\n     * Constructs a new variable node.\n     *\n     * @param {Node} node - The node for which a variable should be created.\n     * @param {String?} name - The name of the variable in the shader.\n     */\n    function VarNode(node) {\n      var _this23;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, VarNode);\n      _this23 = _callSuper(this, VarNode);\n\n      /**\n       * The node for which a variable should be created.\n       *\n       * @type {Node}\n       */\n      _this23.node = node;\n\n      /**\n       * The name of the variable in the shader. If no name is defined,\n       * the node system auto-generates one.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this23.name = name;\n\n      /**\n       * `VarNode` sets this property to `true` by default.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this23.global = true;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this23.isVarNode = true;\n      return _this23;\n    }\n    (0, _inherits2.default)(VarNode, _Node12);\n    return (0, _createClass2.default)(VarNode, [{\n      key: \"getHash\",\n      value: function getHash(builder) {\n        return this.name || _superPropGet(VarNode, \"getHash\", this, 3)([builder]);\n      }\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.node.getNodeType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var node = this.node,\n          name = this.name;\n        var nodeVar = builder.getVarFromNode(this, name, builder.getVectorType(this.getNodeType(builder)));\n        var propertyName = builder.getPropertyName(nodeVar);\n        var snippet = node.build(builder, nodeVar.type);\n        builder.addLineFlowCode(`${propertyName} = ${snippet}`, this);\n        return propertyName;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'VarNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a var node.\n   *\n   * @function\n   * @param {Node} node - The node for which a variable should be created.\n   * @param {String?} name - The name of the variable in the shader.\n   * @returns {VarNode}\n   */\n  var createVar = /*@__PURE__*/nodeProxy(VarNode);\n  addMethodChaining('toVar', function () {\n    return createVar.apply(void 0, arguments).append();\n  });\n\n  // Deprecated\n\n  var temp = function temp(node) {\n    // @deprecated, r170\n\n    console.warn('TSL: \"temp\" is deprecated. Use \".toVar()\" instead.');\n    return createVar(node);\n  };\n  addMethodChaining('temp', temp);\n\n  /** @module VaryingNode **/\n\n  /**\n   * Class for representing shader varyings as nodes. Varyings are create from\n   * existing nodes like the following:\n   *\n   * ```js\n   * const positionLocal = positionGeometry.varying( 'vPositionLocal' );\n   * ```\n   *\n   * @augments Node\n   */\n  var VaryingNode = exports.VaryingNode = /*#__PURE__*/function (_Node13) {\n    /**\n     * Constructs a new varying node.\n     *\n     * @param {Node} node - The node for which a varying should be created.\n     * @param {String?} name - The name of the varying in the shader.\n     */\n    function VaryingNode(node) {\n      var _this24;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, VaryingNode);\n      _this24 = _callSuper(this, VaryingNode);\n\n      /**\n       * The node for which a varying should be created.\n       *\n       * @type {Node}\n       */\n      _this24.node = node;\n\n      /**\n       * The name of the varying in the shader. If no name is defined,\n       * the node system auto-generates one.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this24.name = name;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this24.isVaryingNode = true;\n      return _this24;\n    }\n\n    /**\n     * The method is overwritten so it always returns `true`.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {Boolean} Whether this node is global or not.\n     */\n    (0, _inherits2.default)(VaryingNode, _Node13);\n    return (0, _createClass2.default)(VaryingNode, [{\n      key: \"isGlobal\",\n      value: function isGlobal(/*builder*/\n      ) {\n        return true;\n      }\n    }, {\n      key: \"getHash\",\n      value: function getHash(builder) {\n        return this.name || _superPropGet(VaryingNode, \"getHash\", this, 3)([builder]);\n      }\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        // VaryingNode is auto type\n\n        return this.node.getNodeType(builder);\n      }\n\n      /**\n       * This method performs the setup of a varying node with the current node builder.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {NodeVarying} The node varying from the node builder.\n       */\n    }, {\n      key: \"setupVarying\",\n      value: function setupVarying(builder) {\n        var properties = builder.getNodeProperties(this);\n        var varying = properties.varying;\n        if (varying === undefined) {\n          var name = this.name;\n          var type = this.getNodeType(builder);\n          properties.varying = varying = builder.getVaryingFromNode(this, name, type);\n          properties.node = this.node;\n        }\n\n        // this property can be used to check if the varying can be optimized for a variable\n        varying.needsInterpolation || (varying.needsInterpolation = builder.shaderStage === 'fragment');\n        return varying;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this.setupVarying(builder);\n      }\n    }, {\n      key: \"analyze\",\n      value: function analyze(builder) {\n        this.setupVarying(builder);\n        return this.node.analyze(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var properties = builder.getNodeProperties(this);\n        var varying = this.setupVarying(builder);\n        var needsReassign = builder.shaderStage === 'fragment' && properties.reassignPosition === true && builder.context.needsPositionReassign;\n        if (properties.propertyName === undefined || needsReassign) {\n          var type = this.getNodeType(builder);\n          var propertyName = builder.getPropertyName(varying, NodeShaderStage.VERTEX);\n\n          // force node run in vertex stage\n          builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node, type, propertyName);\n          properties.propertyName = propertyName;\n          if (needsReassign) {\n            // once reassign varying in fragment stage\n            properties.reassignPosition = false;\n          } else if (properties.reassignPosition === undefined && builder.context.isPositionNodeInput) {\n            properties.reassignPosition = true;\n          }\n        }\n        return builder.getPropertyName(varying);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'VaryingNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a varying node.\n   *\n   * @function\n   * @param {Node} node - The node for which a varying should be created.\n   * @param {String?} name - The name of the varying in the shader.\n   * @returns {VaryingNode}\n   */\n  var varying = /*@__PURE__*/nodeProxy(VaryingNode);\n\n  /**\n   * Computes a node in the vertex stage.\n   *\n   * @function\n   * @param {Node} node - The node which should be executed in the vertex stage.\n   * @returns {VaryingNode}\n   */\n  var vertexStage = function vertexStage(node) {\n    return varying(node);\n  };\n  addMethodChaining('varying', varying);\n  addMethodChaining('vertexStage', vertexStage);\n\n  /** @module ColorSpaceFunctions **/\n\n  /**\n   * Converts the given color value from sRGB to linear-sRGB color space.\n   *\n   * @method\n   * @param {Node<vec3>} color - The sRGB color.\n   * @return {Node<vec3>} The linear-sRGB color.\n   */\n  var sRGBTransferEOTF = /*@__PURE__*/Fn(function (_ref7) {\n    var _ref8 = (0, _slicedToArray2.default)(_ref7, 1),\n      color = _ref8[0];\n    var a = color.mul(0.9478672986).add(0.0521327014).pow(2.4);\n    var b = color.mul(0.0773993808);\n    var factor = color.lessThanEqual(0.04045);\n    var rgbResult = mix(a, b, factor);\n    return rgbResult;\n  }).setLayout({\n    name: 'sRGBTransferEOTF',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }]\n  });\n\n  /**\n   * Converts the given color value from linear-sRGB to sRGB color space.\n   *\n   * @method\n   * @param {Node<vec3>} color - The linear-sRGB color.\n   * @return {Node<vec3>} The sRGB color.\n   */\n  var sRGBTransferOETF = /*@__PURE__*/Fn(function (_ref9) {\n    var _ref10 = (0, _slicedToArray2.default)(_ref9, 1),\n      color = _ref10[0];\n    var a = color.pow(0.41666).mul(1.055).sub(0.055);\n    var b = color.mul(12.92);\n    var factor = color.lessThanEqual(0.0031308);\n    var rgbResult = mix(a, b, factor);\n    return rgbResult;\n  }).setLayout({\n    name: 'sRGBTransferOETF',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }]\n  });\n\n  /** @module ColorSpaceNode **/\n\n  var WORKING_COLOR_SPACE = 'WorkingColorSpace';\n  var OUTPUT_COLOR_SPACE = 'OutputColorSpace';\n\n  /**\n   * This node represents a color space conversion. Meaning it converts\n   * a color value from a source to a target color space.\n   *\n   * @augments TempNode\n   */\n  var ColorSpaceNode = exports.ColorSpaceNode = /*#__PURE__*/function (_TempNode8) {\n    /**\n     * Constructs a new color space node.\n     *\n     * @param {Node} colorNode - Represents the color to convert.\n     * @param {String} source - The source color space.\n     * @param {String} target - The target color space.\n     */\n    function ColorSpaceNode(colorNode, source, target) {\n      var _this25;\n      (0, _classCallCheck2.default)(this, ColorSpaceNode);\n      _this25 = _callSuper(this, ColorSpaceNode, ['vec4']);\n\n      /**\n       * Represents the color to convert.\n       *\n       * @type {Node}\n       */\n      _this25.colorNode = colorNode;\n\n      /**\n       * The source color space.\n       *\n       * @type {String}\n       */\n      _this25.source = source;\n\n      /**\n       * The target color space.\n       *\n       * @type {String}\n       */\n      _this25.target = target;\n      return _this25;\n    }\n\n    /**\n     * This method resolves the constants `WORKING_COLOR_SPACE` and\n     * `OUTPUT_COLOR_SPACE` based on the current configuration of the\n     * color management and renderer.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @param {String} colorSpace - The color space to resolve.\n     * @return {String} The resolved color space.\n     */\n    (0, _inherits2.default)(ColorSpaceNode, _TempNode8);\n    return (0, _createClass2.default)(ColorSpaceNode, [{\n      key: \"resolveColorSpace\",\n      value: function resolveColorSpace(builder, colorSpace) {\n        if (colorSpace === WORKING_COLOR_SPACE) {\n          return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.workingColorSpace;\n        } else if (colorSpace === OUTPUT_COLOR_SPACE) {\n          return builder.context.outputColorSpace || builder.renderer.outputColorSpace;\n        }\n        return colorSpace;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var colorNode = this.colorNode;\n        var source = this.resolveColorSpace(builder, this.source);\n        var target = this.resolveColorSpace(builder, this.target);\n        var outputNode = colorNode;\n        if (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.enabled === false || source === target || !source || !target) {\n          return outputNode;\n        }\n        if (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.getTransfer(source) === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBTransfer) {\n          outputNode = vec4(sRGBTransferEOTF(outputNode.rgb), outputNode.a);\n        }\n        if (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.getPrimaries(source) !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.getPrimaries(target)) {\n          outputNode = vec4(mat3(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement._getMatrix(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix3)(), source, target)).mul(outputNode.rgb), outputNode.a);\n        }\n        if (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.getTransfer(target) === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBTransfer) {\n          outputNode = vec4(sRGBTransferOETF(outputNode.rgb), outputNode.a);\n        }\n        return outputNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ColorSpaceNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for converting a given color node to the current output color space.\n   *\n   * @function\n   * @param {Node} node - Represents the node to convert.\n   * @returns {ColorSpaceNode}\n   */\n  var toOutputColorSpace = function toOutputColorSpace(node) {\n    return nodeObject(new ColorSpaceNode(nodeObject(node), WORKING_COLOR_SPACE, OUTPUT_COLOR_SPACE));\n  };\n\n  /**\n   * TSL function for converting a given color node to the current working color space.\n   *\n   * @function\n   * @param {Node} node - Represents the node to convert.\n   * @returns {ColorSpaceNode}\n   */\n  var toWorkingColorSpace = function toWorkingColorSpace(node) {\n    return nodeObject(new ColorSpaceNode(nodeObject(node), OUTPUT_COLOR_SPACE, WORKING_COLOR_SPACE));\n  };\n\n  /**\n   * TSL function for converting a given color node from the current working color space to the given color space.\n   *\n   * @function\n   * @param {Node} node - Represents the node to convert.\n   * @param {String} colorSpace - The target color space.\n   * @returns {ColorSpaceNode}\n   */\n  var workingToColorSpace = function workingToColorSpace(node, colorSpace) {\n    return nodeObject(new ColorSpaceNode(nodeObject(node), WORKING_COLOR_SPACE, colorSpace));\n  };\n\n  /**\n   * TSL function for converting a given color node from the given color space to the current working color space.\n   *\n   * @function\n   * @param {Node} node - Represents the node to convert.\n   * @param {String} colorSpace - The source color space.\n   * @returns {ColorSpaceNode}\n   */\n  var colorSpaceToWorking = function colorSpaceToWorking(node, colorSpace) {\n    return nodeObject(new ColorSpaceNode(nodeObject(node), colorSpace, WORKING_COLOR_SPACE));\n  };\n\n  /**\n   * TSL function for converting a given color node from one color space to another one.\n   *\n   * @function\n   * @param {Node} node - Represents the node to convert.\n   * @param {String} sourceColorSpace - The source color space.\n   * @param {String} targetColorSpace - The target color space.\n   * @returns {ColorSpaceNode}\n   */\n  var convertColorSpace = function convertColorSpace(node, sourceColorSpace, targetColorSpace) {\n    return nodeObject(new ColorSpaceNode(nodeObject(node), sourceColorSpace, targetColorSpace));\n  };\n  addMethodChaining('toOutputColorSpace', toOutputColorSpace);\n  addMethodChaining('toWorkingColorSpace', toWorkingColorSpace);\n  addMethodChaining('workingToColorSpace', workingToColorSpace);\n  addMethodChaining('colorSpaceToWorking', colorSpaceToWorking);\n\n  // TODO: Avoid duplicated code and ues only ReferenceBaseNode or ReferenceNode\n\n  /** @module ReferenceBaseNode **/\n\n  /**\n   * This class is only relevant if the referenced property is array-like.\n   * In this case, `ReferenceElementNode` allows to refer to a specific\n   * element inside the data structure via an index.\n   *\n   * @augments ArrayElementNode\n   */\n  var ReferenceElementNode$1 = /*#__PURE__*/function (_ArrayElementNode) {\n    /**\n     * Constructs a new reference element node.\n     *\n     * @param {Node?} referenceNode - The reference node.\n     * @param {Node} indexNode - The index node that defines the element access.\n     */\n    function ReferenceElementNode(referenceNode, indexNode) {\n      var _this26;\n      (0, _classCallCheck2.default)(this, ReferenceElementNode);\n      _this26 = _callSuper(this, ReferenceElementNode, [referenceNode, indexNode]);\n\n      /**\n       * Similar to {@link module:ReferenceBaseNode~ReferenceBaseNode#reference}, an additional\n       * property references to the current node.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this26.referenceNode = referenceNode;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this26.isReferenceElementNode = true;\n      return _this26;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from\n     * the uniform type of the reference node.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(ReferenceElementNode, _ArrayElementNode);\n    return (0, _createClass2.default)(ReferenceElementNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType() {\n        return this.referenceNode.uniformType;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var snippet = _superPropGet(ReferenceElementNode, \"generate\", this, 3)([builder]);\n        var arrayType = this.referenceNode.getNodeType();\n        var elementType = this.getNodeType();\n        return builder.format(snippet, arrayType, elementType);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ReferenceElementNode';\n      }\n    }]);\n  }(ArrayElementNode);\n\n  /**\n   * Base class for nodes which establishes a reference to a property of another object.\n   * In this way, the value of the node is automatically linked to the value of\n   * referenced object. Reference nodes internally represent the linked value\n   * as a uniform.\n   *\n   * @augments Node\n   */\n  var ReferenceBaseNode = /*#__PURE__*/function (_Node14) {\n    /**\n     * Constructs a new reference base node.\n     *\n     * @param {String} property - The name of the property the node refers to.\n     * @param {String} uniformType - The uniform type that should be used to represent the property value.\n     * @param {Object?} [object=null] - The object the property belongs to.\n     * @param {Number?} [count=null] - When the linked property is an array-like, this parameter defines its length.\n     */\n    function ReferenceBaseNode(property, uniformType) {\n      var _this27;\n      var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, ReferenceBaseNode);\n      _this27 = _callSuper(this, ReferenceBaseNode);\n\n      /**\n       * The name of the property the node refers to.\n       *\n       * @type {String}\n       */\n      _this27.property = property;\n\n      /**\n       * The uniform type that should be used to represent the property value.\n       *\n       * @type {String}\n       */\n      _this27.uniformType = uniformType;\n\n      /**\n       * The object the property belongs to.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      _this27.object = object;\n\n      /**\n       * When the linked property is an array, this parameter defines its length.\n       *\n       * @type {Number?}\n       * @default null\n       */\n      _this27.count = count;\n\n      /**\n       * The property name might have dots so nested properties can be referred.\n       * The hierarchy of the names is stored inside this array.\n       *\n       * @type {Array<String>}\n       */\n      _this27.properties = property.split('.');\n\n      /**\n       * Points to the current referred object. This property exists next to {@link module:ReferenceNode~ReferenceNode#object}\n       * since the final reference might be updated from calling code.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      _this27.reference = object;\n\n      /**\n       * The uniform node that holds the value of the reference node.\n       *\n       * @type {UniformNode}\n       * @default null\n       */\n      _this27.node = null;\n\n      /**\n       * The uniform group of the internal uniform.\n       *\n       * @type {UniformGroupNode}\n       * @default null\n       */\n      _this27.group = null;\n\n      /**\n       * Overwritten since reference nodes are updated per object.\n       *\n       * @type {String}\n       * @default 'object'\n       */\n      _this27.updateType = NodeUpdateType.OBJECT;\n      return _this27;\n    }\n\n    /**\n     * Sets the uniform group for this reference node.\n     *\n     * @param {UniformGroupNode} group - The uniform group to set.\n     * @return {ReferenceBaseNode} A reference to this node.\n     */\n    (0, _inherits2.default)(ReferenceBaseNode, _Node14);\n    return (0, _createClass2.default)(ReferenceBaseNode, [{\n      key: \"setGroup\",\n      value: function setGroup(group) {\n        this.group = group;\n        return this;\n      }\n\n      /**\n       * When the referred property is array-like, this method can be used\n       * to access elements via an index node.\n       *\n       * @param {IndexNode} indexNode - indexNode.\n       * @return {ReferenceElementNode} A reference to an element.\n       */\n    }, {\n      key: \"element\",\n      value: function element(indexNode) {\n        return nodeObject(new ReferenceElementNode$1(this, nodeObject(indexNode)));\n      }\n\n      /**\n       * Sets the node type which automatically defines the internal\n       * uniform type.\n       *\n       * @param {String} uniformType - The type to set.\n       */\n    }, {\n      key: \"setNodeType\",\n      value: function setNodeType(uniformType) {\n        var node = uniform(null, uniformType).getSelf();\n        if (this.group !== null) {\n          node.setGroup(this.group);\n        }\n        this.node = node;\n      }\n\n      /**\n       * This method is overwritten since the node type is inferred from\n       * the type of the reference node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        if (this.node === null) {\n          this.updateReference(builder);\n          this.updateValue();\n        }\n        return this.node.getNodeType(builder);\n      }\n\n      /**\n       * Returns the property value from the given referred object.\n       *\n       * @param {Object} [object=this.reference] - The object to retrieve the property value from.\n       * @return {Any} The value.\n       */\n    }, {\n      key: \"getValueFromReference\",\n      value: function getValueFromReference() {\n        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.reference;\n        var properties = this.properties;\n        var value = object[properties[0]];\n        for (var i = 1; i < properties.length; i++) {\n          value = value[properties[i]];\n        }\n        return value;\n      }\n\n      /**\n       * Allows to update the reference based on the given state. The state is only\n       * evaluated {@link module:ReferenceBaseNode~ReferenceBaseNode#object} is not set.\n       *\n       * @param {(NodeFrame|NodeBuilder)} state - The current state.\n       * @return {Object} The updated reference.\n       */\n    }, {\n      key: \"updateReference\",\n      value: function updateReference(state) {\n        this.reference = this.object !== null ? this.object : state.object;\n        return this.reference;\n      }\n\n      /**\n       * The output of the reference node is the internal uniform node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {UniformNode} The output node.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup() {\n        this.updateValue();\n        return this.node;\n      }\n\n      /**\n       * Overwritten to to update the internal uniform value.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        this.updateValue();\n      }\n\n      /**\n       * Retrieves the value from the referred object property and uses it\n       * to updated the internal uniform.\n       */\n    }, {\n      key: \"updateValue\",\n      value: function updateValue() {\n        if (this.node === null) this.setNodeType(this.uniformType);\n        var value = this.getValueFromReference();\n        if (Array.isArray(value)) {\n          this.node.array = value;\n        } else {\n          this.node.value = value;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ReferenceBaseNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a reference base node.\n   *\n   * @function\n   * @param {String} name - The name of the property the node refers to.\n   * @param {String} type - The uniform type that should be used to represent the property value.\n   * @param {Object} object - The object the property belongs to.\n   * @returns {ReferenceBaseNode}\n   */\n  var reference$1 = function reference$1(name, type, object) {\n    return nodeObject(new ReferenceBaseNode(name, type, object));\n  };\n\n  /** @module RendererReferenceNode **/\n\n  /**\n   * This node is a special type of reference node which is intended\n   * for linking renderer properties with node values.\n   * ```js\n   * const exposureNode = rendererReference( 'toneMappingExposure', 'float', renderer );\n   * ```\n   * When changing `renderer.toneMappingExposure`, the node value of `exposureNode` will\n   * automatically be updated.\n   *\n   * @augments ReferenceBaseNode\n   */\n  var RendererReferenceNode = exports.RendererReferenceNode = /*#__PURE__*/function (_ReferenceBaseNode) {\n    /**\n     * Constructs a new renderer reference node.\n     *\n     * @param {String} property - The name of the property the node refers to.\n     * @param {String} inputType - The uniform type that should be used to represent the property value.\n     * @param {Renderer?} [renderer=null] - The renderer the property belongs to. When no renderer is set,\n     * the node refers to the renderer of the current state.\n     */\n    function RendererReferenceNode(property, inputType) {\n      var _this28;\n      var renderer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, RendererReferenceNode);\n      _this28 = _callSuper(this, RendererReferenceNode, [property, inputType, renderer]);\n\n      /**\n       * The renderer the property belongs to. When no renderer is set,\n       * the node refers to the renderer of the current state.\n       *\n       * @type {Renderer?}\n       * @default null\n       */\n      _this28.renderer = renderer;\n      _this28.setGroup(renderGroup);\n      return _this28;\n    }\n\n    /**\n     * Updates the reference based on the given state. The state is only evaluated\n     * {@link module:RendererReferenceNode~RendererReferenceNode#renderer} is not set.\n     *\n     * @param {(NodeFrame|NodeBuilder)} state - The current state.\n     * @return {Object} The updated reference.\n     */\n    (0, _inherits2.default)(RendererReferenceNode, _ReferenceBaseNode);\n    return (0, _createClass2.default)(RendererReferenceNode, [{\n      key: \"updateReference\",\n      value: function updateReference(state) {\n        this.reference = this.renderer !== null ? this.renderer : state.renderer;\n        return this.reference;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RendererReferenceNode';\n      }\n    }]);\n  }(ReferenceBaseNode);\n  /**\n   * TSL function for creating a renderer reference node.\n   *\n   * @function\n   * @param {String} name - The name of the property the node refers to.\n   * @param {String} type - The uniform type that should be used to represent the property value.\n   * @param {Renderer?} [renderer=null] - The renderer the property belongs to. When no renderer is set,\n   * the node refers to the renderer of the current state.\n   * @returns {RendererReferenceNode}\n   */\n  var rendererReference = function rendererReference(name, type) {\n    var renderer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return nodeObject(new RendererReferenceNode(name, type, renderer));\n  };\n\n  /** @module ToneMappingNode **/\n\n  /**\n   * This node represents a tone mapping operation.\n   *\n   * @augments TempNode\n   */\n  var ToneMappingNode = exports.ToneMappingNode = /*#__PURE__*/function (_TempNode9) {\n    /**\n     * Constructs a new tone mapping node.\n     *\n     * @param {Number} toneMapping - The tone mapping type.\n     * @param {Node} exposureNode - The tone mapping exposure.\n     * @param {Node} [colorNode=null] - The color node to process.\n     */\n    function ToneMappingNode(toneMapping) {\n      var _this29;\n      var exposureNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : toneMappingExposure;\n      var colorNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, ToneMappingNode);\n      _this29 = _callSuper(this, ToneMappingNode, ['vec3']);\n\n      /**\n       * The tone mapping type.\n       *\n       * @type {Number}\n       */\n      _this29.toneMapping = toneMapping;\n\n      /**\n       * The tone mapping exposure.\n       *\n       * @type {Node}\n       * @default null\n       */\n      _this29.exposureNode = exposureNode;\n\n      /**\n       * Represents the color to process.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this29.colorNode = colorNode;\n      return _this29;\n    }\n\n    /**\n     * Overwrites the default `customCacheKey()` implementation by including the tone\n     * mapping type into the cache key.\n     *\n     * @return {Number} The hash.\n     */\n    (0, _inherits2.default)(ToneMappingNode, _TempNode9);\n    return (0, _createClass2.default)(ToneMappingNode, [{\n      key: \"customCacheKey\",\n      value: function customCacheKey() {\n        return hash$1(this.toneMapping);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var colorNode = this.colorNode || builder.context.color;\n        var toneMapping = this.toneMapping;\n        if (toneMapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping) return colorNode;\n        var outputNode = null;\n        var toneMappingFn = builder.renderer.library.getToneMappingFunction(toneMapping);\n        if (toneMappingFn !== null) {\n          outputNode = vec4(toneMappingFn(colorNode.rgb, this.exposureNode), colorNode.a);\n        } else {\n          console.error('ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping);\n          outputNode = colorNode;\n        }\n        return outputNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ToneMappingNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a tone mapping node.\n   *\n   * @function\n   * @param {Number} mapping - The tone mapping type.\n   * @param {Node<float> | Number} exposure - The tone mapping exposure.\n   * @param {Node<vec3> | Color} color - The color node to process.\n   * @returns {ToneMappingNode<vec3>}\n   */\n  var toneMapping = function toneMapping(mapping, exposure, color) {\n    return nodeObject(new ToneMappingNode(mapping, nodeObject(exposure), nodeObject(color)));\n  };\n\n  /**\n   * TSL object that represents the global tone mapping exposure of the renderer.\n   *\n   * @type {RendererReferenceNode<vec3>}\n   */\n  var toneMappingExposure = /*@__PURE__*/rendererReference('toneMappingExposure', 'float');\n  addMethodChaining('toneMapping', function (color, mapping, exposure) {\n    return toneMapping(mapping, exposure, color);\n  });\n\n  /** @module BufferAttributeNode **/\n\n  /**\n   * In earlier `three.js` versions it was only possible to define attribute data\n   * on geometry level. With `BufferAttributeNode`, it is also possible to do this\n   * on the node level.\n   * ```js\n   * const geometry = new THREE.PlaneGeometry();\n   * const positionAttribute = geometry.getAttribute( 'position' );\n   *\n   * const colors = [];\n   * for ( let i = 0; i < position.count; i ++ ) {\n   * \tcolors.push( 1, 0, 0 );\n   * }\n   *\n   * material.colorNode = bufferAttribute( new THREE.Float32BufferAttribute( colors, 3 ) );\n   * ```\n   * This new approach is especially interesting when geometry data are generated via\n   * compute shaders. The below line converts a storage buffer into an attribute node.\n   * ```js\n   * material.positionNode = positionBuffer.toAttribute();\n   * ```\n   * @augments InputNode\n   */\n  var BufferAttributeNode = exports.BufferAttributeNode = /*#__PURE__*/function (_InputNode3) {\n    /**\n     * Constructs a new buffer attribute node.\n     *\n     * @param {BufferAttribute|InterleavedBuffer|TypedArray} value - The attribute data.\n     * @param {String?} [bufferType=null] - The buffer type (e.g. `'vec3'`).\n     * @param {Number} [bufferStride=0] - The buffer stride.\n     * @param {Number} [bufferOffset=0] - The buffer offset.\n     */\n    function BufferAttributeNode(value) {\n      var _this30;\n      var bufferType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var bufferStride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      (0, _classCallCheck2.default)(this, BufferAttributeNode);\n      _this30 = _callSuper(this, BufferAttributeNode, [value, bufferType]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this30.isBufferNode = true;\n\n      /**\n       * The buffer type (e.g. `'vec3'`).\n       *\n       * @type {String}\n       * @default null\n       */\n      _this30.bufferType = bufferType;\n\n      /**\n       * The buffer stride.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this30.bufferStride = bufferStride;\n\n      /**\n       * The buffer offset.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this30.bufferOffset = bufferOffset;\n\n      /**\n       * The usage property. Set this to `THREE.DynamicDrawUsage` via `.setUsage()`,\n       * if you are planning to update the attribute data per frame.\n       *\n       * @type {Number}\n       * @default StaticDrawUsage\n       */\n      _this30.usage = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").StaticDrawUsage;\n\n      /**\n       * Whether the attribute is instanced or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this30.instanced = false;\n\n      /**\n       * A reference to the buffer attribute.\n       *\n       * @type {BufferAttribute?}\n       * @default null\n       */\n      _this30.attribute = null;\n\n      /**\n       * `BufferAttributeNode` sets this property to `true` by default.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this30.global = true;\n      if (value && value.isBufferAttribute === true) {\n        _this30.attribute = value;\n        _this30.usage = value.usage;\n        _this30.instanced = value.isInstancedBufferAttribute;\n      }\n      return _this30;\n    }\n\n    /**\n     * This method is overwritten since the attribute data might be shared\n     * and thus the hash should be shared as well.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The hash.\n     */\n    (0, _inherits2.default)(BufferAttributeNode, _InputNode3);\n    return (0, _createClass2.default)(BufferAttributeNode, [{\n      key: \"getHash\",\n      value: function getHash(builder) {\n        if (this.bufferStride === 0 && this.bufferOffset === 0) {\n          var bufferData = builder.globalCache.getData(this.value);\n          if (bufferData === undefined) {\n            bufferData = {\n              node: this\n            };\n            builder.globalCache.setData(this.value, bufferData);\n          }\n          return bufferData.node.uuid;\n        }\n        return this.uuid;\n      }\n\n      /**\n       * This method is overwritten since the node type is inferred from\n       * the buffer attribute.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        if (this.bufferType === null) {\n          this.bufferType = builder.getTypeFromAttribute(this.attribute);\n        }\n        return this.bufferType;\n      }\n\n      /**\n       * Depending on which value was passed to the node, `setup()` behaves\n       * differently. If no instance of `BufferAttribute` was passed, the method\n       * creates an internal attribute and configures it respectively.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        if (this.attribute !== null) return;\n        var type = this.getNodeType(builder);\n        var array = this.value;\n        var itemSize = builder.getTypeLength(type);\n        var stride = this.bufferStride || itemSize;\n        var offset = this.bufferOffset;\n        var buffer = array.isInterleavedBuffer === true ? array : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterleavedBuffer)(array, stride);\n        var bufferAttribute = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InterleavedBufferAttribute)(buffer, itemSize, offset);\n        buffer.setUsage(this.usage);\n        this.attribute = bufferAttribute;\n        this.attribute.isInstancedBufferAttribute = this.instanced; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\n      }\n\n      /**\n       * Generates the code snippet of the buffer attribute node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var nodeType = this.getNodeType(builder);\n        var nodeAttribute = builder.getBufferAttributeFromNode(this, nodeType);\n        var propertyName = builder.getPropertyName(nodeAttribute);\n        var output = null;\n        if (builder.shaderStage === 'vertex' || builder.shaderStage === 'compute') {\n          this.name = propertyName;\n          output = propertyName;\n        } else {\n          var nodeVarying = varying(this);\n          output = nodeVarying.build(builder, nodeType);\n        }\n        return output;\n      }\n\n      /**\n       * Overwrites the default implementation to return a fixed value `'bufferAttribute'`.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The input type.\n       */\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return 'bufferAttribute';\n      }\n\n      /**\n       * Sets the `usage` property to the given value.\n       *\n       * @param {Number} value - The usage to set.\n       * @return {BufferAttributeNode} A reference to this node.\n       */\n    }, {\n      key: \"setUsage\",\n      value: function setUsage(value) {\n        this.usage = value;\n        if (this.attribute && this.attribute.isBufferAttribute === true) {\n          this.attribute.usage = value;\n        }\n        return this;\n      }\n\n      /**\n       * Sets the `instanced` property to the given value.\n       *\n       * @param {Number} value - The value to set.\n       * @return {BufferAttributeNode} A reference to this node.\n       */\n    }, {\n      key: \"setInstanced\",\n      value: function setInstanced(value) {\n        this.instanced = value;\n        return this;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BufferAttributeNode';\n      }\n    }]);\n  }(InputNode);\n  /**\n   * TSL function for creating a buffer attribute node.\n   *\n   * @function\n   * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n   * @param {String?} [type=null] - The buffer type (e.g. `'vec3'`).\n   * @param {Number} [stride=0] - The buffer stride.\n   * @param {Number} [offset=0] - The buffer offset.\n   * @returns {BufferAttributeNode}\n   */\n  var bufferAttribute = function bufferAttribute(array) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return nodeObject(new BufferAttributeNode(array, type, stride, offset));\n  };\n\n  /**\n   * TSL function for creating a buffer attribute node but with dynamic draw usage.\n   * Use this function if attribute data are updated per frame.\n   *\n   * @function\n   * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n   * @param {String?} [type=null] - The buffer type (e.g. `'vec3'`).\n   * @param {Number} [stride=0] - The buffer stride.\n   * @param {Number} [offset=0] - The buffer offset.\n   * @returns {BufferAttributeNode}\n   */\n  var dynamicBufferAttribute = function dynamicBufferAttribute(array) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return bufferAttribute(array, type, stride, offset).setUsage(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage);\n  };\n\n  /**\n   * TSL function for creating a buffer attribute node but with enabled instancing\n   *\n   * @function\n   * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n   * @param {String?} [type=null] - The buffer type (e.g. `'vec3'`).\n   * @param {Number} [stride=0] - The buffer stride.\n   * @param {Number} [offset=0] - The buffer offset.\n   * @returns {BufferAttributeNode}\n   */\n  var instancedBufferAttribute = function instancedBufferAttribute(array) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return bufferAttribute(array, type, stride, offset).setInstanced(true);\n  };\n\n  /**\n   * TSL function for creating a buffer attribute node but with dynamic draw usage and enabled instancing\n   *\n   * @function\n   * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n   * @param {String?} [type=null] - The buffer type (e.g. `'vec3'`).\n   * @param {Number} [stride=0] - The buffer stride.\n   * @param {Number} [offset=0] - The buffer offset.\n   * @returns {BufferAttributeNode}\n   */\n  var instancedDynamicBufferAttribute = function instancedDynamicBufferAttribute(array) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return dynamicBufferAttribute(array, type, stride, offset).setInstanced(true);\n  };\n  addMethodChaining('toAttribute', function (bufferNode) {\n    return bufferAttribute(bufferNode.value);\n  });\n\n  /** @module ComputeNode **/\n\n  /**\n   * TODO\n   *\n   * @augments Node\n   */\n  var ComputeNode = exports.ComputeNode = /*#__PURE__*/function (_Node15) {\n    /**\n     * Constructs a new compute node.\n     *\n     * @param {Node} computeNode - TODO\n     * @param {Number} count - TODO.\n     * @param {Array<Number>} [workgroupSize=[64]] - TODO.\n     */\n    function ComputeNode(computeNode, count) {\n      var _this31;\n      var workgroupSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [64];\n      (0, _classCallCheck2.default)(this, ComputeNode);\n      _this31 = _callSuper(this, ComputeNode, ['void']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this31.isComputeNode = true;\n\n      /**\n       * TODO\n       *\n       * @type {Node}\n       */\n      _this31.computeNode = computeNode;\n\n      /**\n       * TODO\n       *\n       * @type {Number}\n       */\n      _this31.count = count;\n\n      /**\n       * TODO\n       *\n       * @type {Array<Number>}\n       * @default [64]\n       */\n      _this31.workgroupSize = workgroupSize;\n\n      /**\n       * TODO\n       *\n       * @type {Number}\n       */\n      _this31.dispatchCount = 0;\n\n      /**\n       * TODO\n       *\n       * @type {Number}\n       */\n      _this31.version = 1;\n\n      /**\n       * The name or label of the uniform.\n       *\n       * @type {String}\n       * @default ''\n       */\n      _this31.name = '';\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.OBJECT` since {@link ComputeNode#updateBefore}\n       * is executed once per object by default.\n       *\n       * @type {String}\n       * @default 'object'\n       */\n      _this31.updateBeforeType = NodeUpdateType.OBJECT;\n\n      /**\n       * TODO\n       *\n       * @type {Function}\n       */\n      _this31.onInitFunction = null;\n      _this31.updateDispatchCount();\n      return _this31;\n    }\n\n    /**\n     * Executes the `dispose` event for this node.\n     */\n    (0, _inherits2.default)(ComputeNode, _Node15);\n    return (0, _createClass2.default)(ComputeNode, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n      }\n\n      /**\n       * Sets the {@link ComputeNode#name} property.\n       *\n       * @param {String} name - The name of the uniform.\n       * @return {ComputeNode} A reference to this node.\n       */\n    }, {\n      key: \"label\",\n      value: function label(name) {\n        this.name = name;\n        return this;\n      }\n\n      /**\n       * TODO\n       */\n    }, {\n      key: \"updateDispatchCount\",\n      value: function updateDispatchCount() {\n        var count = this.count,\n          workgroupSize = this.workgroupSize;\n        var size = workgroupSize[0];\n        for (var i = 1; i < workgroupSize.length; i++) size *= workgroupSize[i];\n        this.dispatchCount = Math.ceil(count / size);\n      }\n\n      /**\n       * TODO\n       *\n       * @param {Function} callback - TODO.\n       * @return {ComputeNode} A reference to this node.\n       */\n    }, {\n      key: \"onInit\",\n      value: function onInit(callback) {\n        this.onInitFunction = callback;\n        return this;\n      }\n\n      /**\n       * The method execute the compute for this node.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(_ref11) {\n        var renderer = _ref11.renderer;\n        renderer.compute(this);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var shaderStage = builder.shaderStage;\n        if (shaderStage === 'compute') {\n          var snippet = this.computeNode.build(builder, 'void');\n          if (snippet !== '') {\n            builder.addLineFlowCode(snippet, this);\n          }\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ComputeNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a compute node.\n   *\n   * @function\n   * @param {Node} node - TODO\n   * @param {Number} count - TODO.\n   * @param {Array<Number>} [workgroupSize=[64]] - TODO.\n   * @returns {AtomicFunctionNode}\n   */\n  var compute = function compute(node, count, workgroupSize) {\n    return nodeObject(new ComputeNode(nodeObject(node), count, workgroupSize));\n  };\n  addMethodChaining('compute', compute);\n\n  /** @module CacheNode **/\n\n  /**\n   * This node can be used as a cache management component for another node.\n   * Caching is in general used by default in {@link NodeBuilder} but this node\n   * allows the usage of a shared parent cache during the build process.\n   *\n   * @augments Node\n   */\n  var CacheNode = exports.CacheNode = /*#__PURE__*/function (_Node16) {\n    /**\n     * Constructs a new cache node.\n     *\n     * @param {Node} node - The node that should be cached.\n     * @param {Boolean} [parent=true] - Whether this node refers to a shared parent cache or not.\n     */\n    function CacheNode(node) {\n      var _this32;\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      (0, _classCallCheck2.default)(this, CacheNode);\n      _this32 = _callSuper(this, CacheNode);\n\n      /**\n       * The node that should be cached.\n       *\n       * @type {Node}\n       */\n      _this32.node = node;\n\n      /**\n       * Whether this node refers to a shared parent cache or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this32.parent = parent;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this32.isCacheNode = true;\n      return _this32;\n    }\n    (0, _inherits2.default)(CacheNode, _Node16);\n    return (0, _createClass2.default)(CacheNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var previousCache = builder.getCache();\n        var cache = builder.getCacheFromNode(this, this.parent);\n        builder.setCache(cache);\n        var nodeType = this.node.getNodeType(builder);\n        builder.setCache(previousCache);\n        return nodeType;\n      }\n    }, {\n      key: \"build\",\n      value: function build(builder) {\n        var _this$node;\n        var previousCache = builder.getCache();\n        var cache = builder.getCacheFromNode(this, this.parent);\n        builder.setCache(cache);\n        for (var _len15 = arguments.length, params = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n          params[_key15 - 1] = arguments[_key15];\n        }\n        var data = (_this$node = this.node).build.apply(_this$node, [builder].concat(params));\n        builder.setCache(previousCache);\n        return data;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'CacheNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a cache node.\n   *\n   * @function\n   * @param {Node} node - The node that should be cached.\n   * @param {Boolean} parent - Whether this node refers to a shared parent cache or not.\n   * @returns {CacheNode}\n   */\n  var cache = function cache(node, parent) {\n    return nodeObject(new CacheNode(nodeObject(node), parent));\n  };\n  addMethodChaining('cache', cache);\n\n  /** @module BypassNode **/\n\n  /**\n   * The class generates the code of a given node but returns another node in the output.\n   * This can be used to call a method or node that does not return a value, i.e.\n   * type `void` on an input where returning a value is required. Example:\n   *\n   * ```js\n   * material.colorNode = myColor.bypass( runVoidFn() )\n   *```\n   *\n   * @augments Node\n   */\n  var BypassNode = exports.BypassNode = /*#__PURE__*/function (_Node17) {\n    /**\n     * Constructs a new bypass node.\n     *\n     * @param {Node} outputNode - The output node.\n     * @param {Node} callNode - The call node.\n     */\n    function BypassNode(outputNode, callNode) {\n      var _this33;\n      (0, _classCallCheck2.default)(this, BypassNode);\n      _this33 = _callSuper(this, BypassNode);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this33.isBypassNode = true;\n\n      /**\n       * The output node.\n       *\n       * @type {Node}\n       */\n      _this33.outputNode = outputNode;\n\n      /**\n       * The call node.\n       *\n       * @type {Node}\n       */\n      _this33.callNode = callNode;\n      return _this33;\n    }\n    (0, _inherits2.default)(BypassNode, _Node17);\n    return (0, _createClass2.default)(BypassNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.outputNode.getNodeType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var snippet = this.callNode.build(builder, 'void');\n        if (snippet !== '') {\n          builder.addLineFlowCode(snippet, this);\n        }\n        return this.outputNode.build(builder);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BypassNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a bypass node.\n   *\n   * @function\n   * @param {Node} outputNode - The output node.\n   * @param {Node} callNode - The call node.\n   * @returns {BypassNode}\n   */\n  var bypass = /*@__PURE__*/nodeProxy(BypassNode);\n  addMethodChaining('bypass', bypass);\n\n  /** @module RemapNode **/\n\n  /**\n   * This node allows to remap a node value from one range into another. E.g a value of\n   * `0.4` in the range `[ 0.3, 0.5 ]` should be remapped into the normalized range `[ 0, 1 ]`.\n   * `RemapNode` takes care of that and converts the original value of `0.4` to `0.5`.\n   *\n   * @augments Node\n   */\n  var RemapNode = exports.RemapNode = /*#__PURE__*/function (_Node18) {\n    /**\n     * Constructs a new remap node.\n     *\n     * @param {Node} node - The node that should be remapped.\n     * @param {Node} inLowNode - The source or current lower bound of the range.\n     * @param {Node} inHighNode - The source or current upper bound of the range.\n     * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.\n     * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.\n     */\n    function RemapNode(node, inLowNode, inHighNode) {\n      var _this34;\n      var outLowNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : float(0);\n      var outHighNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : float(1);\n      (0, _classCallCheck2.default)(this, RemapNode);\n      _this34 = _callSuper(this, RemapNode);\n\n      /**\n       * The node that should be remapped.\n       *\n       * @type {Node}\n       */\n      _this34.node = node;\n\n      /**\n       * The source or current lower bound of the range.\n       *\n       * @type {Node}\n       */\n      _this34.inLowNode = inLowNode;\n\n      /**\n       * The source or current upper bound of the range.\n       *\n       * @type {Node}\n       */\n      _this34.inHighNode = inHighNode;\n\n      /**\n       * The target lower bound of the range.\n       *\n       * @type {Node}\n       * @default float(0)\n       */\n      _this34.outLowNode = outLowNode;\n\n      /**\n       * The target upper bound of the range.\n       *\n       * @type {Node}\n       * @default float(1)\n       */\n      _this34.outHighNode = outHighNode;\n\n      /**\n       * Whether the node value should be clamped before\n       * remapping it to the target range.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this34.doClamp = true;\n      return _this34;\n    }\n    (0, _inherits2.default)(RemapNode, _Node18);\n    return (0, _createClass2.default)(RemapNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var node = this.node,\n          inLowNode = this.inLowNode,\n          inHighNode = this.inHighNode,\n          outLowNode = this.outLowNode,\n          outHighNode = this.outHighNode,\n          doClamp = this.doClamp;\n        var t = node.sub(inLowNode).div(inHighNode.sub(inLowNode));\n        if (doClamp === true) t = t.clamp();\n        return t.mul(outHighNode.sub(outLowNode)).add(outLowNode);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RemapNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a remap node.\n   *\n   * @function\n   * @param {Node} node - The node that should be remapped.\n   * @param {Node} inLowNode - The source or current lower bound of the range.\n   * @param {Node} inHighNode - The source or current upper bound of the range.\n   * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.\n   * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.\n   * @returns {RemapNode}\n   */\n  var remap = /*@__PURE__*/nodeProxy(RemapNode, null, null, {\n    doClamp: false\n  });\n\n  /**\n   * TSL function for creating a remap node, but with enabled clamping.\n   *\n   * @function\n   * @param {Node} node - The node that should be remapped.\n   * @param {Node} inLowNode - The source or current lower bound of the range.\n   * @param {Node} inHighNode - The source or current upper bound of the range.\n   * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.\n   * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.\n   * @returns {RemapNode}\n   */\n  var remapClamp = /*@__PURE__*/nodeProxy(RemapNode);\n  addMethodChaining('remap', remap);\n  addMethodChaining('remapClamp', remapClamp);\n\n  /** @module ExpressionNode **/\n\n  /**\n   * This class can be used to implement basic expressions in shader code.\n   * Basic examples for that are `return`, `continue` or `discard` statements.\n   *\n   * @augments Node\n   */\n  var ExpressionNode = exports.ExpressionNode = /*#__PURE__*/function (_Node19) {\n    /**\n     * Constructs a new expression node.\n     *\n     * @param {String} [snippet=''] - The native code snippet.\n     * @param {String} [nodeType='void'] - The node type.\n     */\n    function ExpressionNode() {\n      var _this35;\n      var snippet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'void';\n      (0, _classCallCheck2.default)(this, ExpressionNode);\n      _this35 = _callSuper(this, ExpressionNode, [nodeType]);\n\n      /**\n       * The native code snippet.\n       *\n       * @type {String}\n       * @default ''\n       */\n      _this35.snippet = snippet;\n      return _this35;\n    }\n    (0, _inherits2.default)(ExpressionNode, _Node19);\n    return (0, _createClass2.default)(ExpressionNode, [{\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var type = this.getNodeType(builder);\n        var snippet = this.snippet;\n        if (type === 'void') {\n          builder.addLineFlowCode(snippet, this);\n        } else {\n          return builder.format(`( ${snippet} )`, type, output);\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ExpressionNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating an expression node.\n   *\n   * @function\n   * @param {String} [snippet=''] - The native code snippet.\n   * @param {String} [nodeType='void'] - The node type.\n   * @returns {ExpressionNode}\n   */\n  var expression = /*@__PURE__*/nodeProxy(ExpressionNode);\n\n  /** @module Discard **/\n\n  /**\n   * Represents a `discard` shader operation in TSL.\n   *\n   * @method\n   * @param {ConditionalNode?} conditional - An optional conditional node. It allows to decide whether the discard should be executed or not.\n   * @return {Node} The `discard` expression.\n   */\n  var Discard = function Discard(conditional) {\n    return (conditional ? select(conditional, expression('discard')) : expression('discard')).append();\n  };\n\n  /**\n   * Represents a `return` shader operation in TSL.\n   *\n   * @method\n   * @return {ExpressionNode} The `return` expression.\n   */\n  var Return = function Return() {\n    return expression('return').append();\n  };\n  addMethodChaining('discard', Discard);\n\n  /** @module RenderOutputNode **/\n\n  /**\n   * Normally, tone mapping and color conversion happens automatically\n   * before outputting pixel too the default (screen) framebuffer. In certain\n   * post processing setups this happens to late because certain effects\n   * require e.g. sRGB input. For such scenarios, `RenderOutputNode` can be used\n   * to apply tone mapping and color space conversion at an arbitrary point\n   * in the effect chain.\n   *\n   * When applying tone mapping and color space conversion manually with this node,\n   * you have to set {@link PostProcessing#outputColorTransform} to `false`.\n   *\n   * ```js\n   * const postProcessing = new PostProcessing( renderer );\n   * postProcessing.outputColorTransform = false;\n   *\n   * const scenePass = pass( scene, camera );\n   * const outputPass = renderOutput( scenePass );\n   *\n   * postProcessing.outputNode = outputPass;\n   * ```\n   *\n   * @augments TempNode\n   */\n  var RenderOutputNode = exports.RenderOutputNode = /*#__PURE__*/function (_TempNode10) {\n    /**\n     * Constructs a new render output node.\n     *\n     * @param {Node} colorNode - The color node to process.\n     * @param {Number} toneMapping - The tone mapping type.\n     * @param {String} outputColorSpace - The output color space.\n     */\n    function RenderOutputNode(colorNode, toneMapping, outputColorSpace) {\n      var _this36;\n      (0, _classCallCheck2.default)(this, RenderOutputNode);\n      _this36 = _callSuper(this, RenderOutputNode, ['vec4']);\n\n      /**\n       * The color node to process.\n       *\n       * @type {Node}\n       */\n      _this36.colorNode = colorNode;\n\n      /**\n       * The tone mapping type.\n       *\n       * @type {Number?}\n       */\n      _this36.toneMapping = toneMapping;\n\n      /**\n       * The output color space.\n       *\n       * @type {String?}\n       */\n      _this36.outputColorSpace = outputColorSpace;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this36.isRenderOutputNode = true;\n      return _this36;\n    }\n    (0, _inherits2.default)(RenderOutputNode, _TempNode10);\n    return (0, _createClass2.default)(RenderOutputNode, [{\n      key: \"setup\",\n      value: function setup(_ref12) {\n        var context = _ref12.context;\n        var outputNode = this.colorNode || context.color;\n\n        // tone mapping\n\n        var toneMapping = (this.toneMapping !== null ? this.toneMapping : context.toneMapping) || _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping;\n        var outputColorSpace = (this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace) || _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoColorSpace;\n        if (toneMapping !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping) {\n          outputNode = outputNode.toneMapping(toneMapping);\n        }\n\n        // working to output color space\n\n        if (outputColorSpace !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoColorSpace && outputColorSpace !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.workingColorSpace) {\n          outputNode = outputNode.workingToColorSpace(outputColorSpace);\n        }\n        return outputNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RenderOutputNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a posterize node.\n   *\n   * @function\n   * @param {Node} color - The color node to process.\n   * @param {Number?} [toneMapping=null] - The tone mapping type.\n   * @param {String?} [outputColorSpace=null] - The output color space.\n   * @returns {RenderOutputNode}\n   */\n  var renderOutput = function renderOutput(color) {\n    var toneMapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var outputColorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return nodeObject(new RenderOutputNode(nodeObject(color), toneMapping, outputColorSpace));\n  };\n  addMethodChaining('renderOutput', renderOutput);\n\n  // Non-PURE exports list, side-effects are required here.\n  // TSL Base Syntax\n\n  function addNodeElement(name /*, nodeElement*/) {\n    console.warn('THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add', name);\n  }\n\n  /** @module AttributeNode **/\n\n  /**\n   * Base class for representing shader attributes as nodes.\n   *\n   * @augments Node\n   */\n  var AttributeNode = exports.AttributeNode = /*#__PURE__*/function (_Node20) {\n    /**\n     * Constructs a new attribute node.\n     *\n     * @param {String} attributeName - The name of the attribute.\n     * @param {String?} nodeType - The node type.\n     */\n    function AttributeNode(attributeName) {\n      var _this37;\n      var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, AttributeNode);\n      _this37 = _callSuper(this, AttributeNode, [nodeType]);\n\n      /**\n       * `AttributeNode` sets this property to `true` by default.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this37.global = true;\n      _this37._attributeName = attributeName;\n      return _this37;\n    }\n    (0, _inherits2.default)(AttributeNode, _Node20);\n    return (0, _createClass2.default)(AttributeNode, [{\n      key: \"getHash\",\n      value: function getHash(builder) {\n        return this.getAttributeName(builder);\n      }\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var nodeType = this.nodeType;\n        if (nodeType === null) {\n          var attributeName = this.getAttributeName(builder);\n          if (builder.hasGeometryAttribute(attributeName)) {\n            var _attribute3 = builder.geometry.getAttribute(attributeName);\n            nodeType = builder.getTypeFromAttribute(_attribute3);\n          } else {\n            nodeType = 'float';\n          }\n        }\n        return nodeType;\n      }\n\n      /**\n       * Sets the attribute name to the given value. The method can be\n       * overwritten in derived classes if the final name must be computed\n       * analytically.\n       *\n       * @param {String} attributeName - The name of the attribute.\n       * @return {AttributeNode} A reference to this node.\n       */\n    }, {\n      key: \"setAttributeName\",\n      value: function setAttributeName(attributeName) {\n        this._attributeName = attributeName;\n        return this;\n      }\n\n      /**\n       * Returns the attribute name of this node. The method can be\n       * overwritten in derived classes if the final name must be computed\n       * analytically.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The attribute name.\n       */\n    }, {\n      key: \"getAttributeName\",\n      value: function getAttributeName(/*builder*/\n      ) {\n        return this._attributeName;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var attributeName = this.getAttributeName(builder);\n        var nodeType = this.getNodeType(builder);\n        var geometryAttribute = builder.hasGeometryAttribute(attributeName);\n        if (geometryAttribute === true) {\n          var _attribute4 = builder.geometry.getAttribute(attributeName);\n          var attributeType = builder.getTypeFromAttribute(_attribute4);\n          var nodeAttribute = builder.getAttribute(attributeName, attributeType);\n          if (builder.shaderStage === 'vertex') {\n            return builder.format(nodeAttribute.name, attributeType, nodeType);\n          } else {\n            var nodeVarying = varying(this);\n            return nodeVarying.build(builder, nodeType);\n          }\n        } else {\n          console.warn(`AttributeNode: Vertex attribute \"${attributeName}\" not found on geometry.`);\n          return builder.generateConst(nodeType);\n        }\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(AttributeNode, \"serialize\", this, 3)([data]);\n        data.global = this.global;\n        data._attributeName = this._attributeName;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(AttributeNode, \"deserialize\", this, 3)([data]);\n        this.global = data.global;\n        this._attributeName = data._attributeName;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'AttributeNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating an attribute node.\n   *\n   * @function\n   * @param {String} name - The name of the attribute.\n   * @param {String?} nodeType - The node type.\n   * @returns {AttributeNode}\n   */\n  var attribute = function attribute(name, nodeType) {\n    return nodeObject(new AttributeNode(name, nodeType));\n  };\n\n  /** @module UV **/\n\n  /**\n   * TSL function for creating an uv attribute node with the given index.\n   *\n   * @function\n   * @param {Number} [index=0] - The uv index.\n   * @return {AttributeNode<vec2>} The uv attribute node.\n   */\n  var uv = function uv() {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return attribute('uv' + (index > 0 ? index : ''), 'vec2');\n  };\n\n  /** @module TextureSizeNode **/\n\n  /**\n   * A node that represents the dimensions of a texture. The texture size is\n   * retrieved in the shader via built-in shader functions like `textureDimensions()`\n   * or `textureSize()`.\n   *\n   * @augments Node\n   */\n  var TextureSizeNode = exports.TextureSizeNode = /*#__PURE__*/function (_Node21) {\n    /**\n     * Constructs a new texture size node.\n     *\n     * @param {TextureNode} textureNode - A texture node which size should be retrieved.\n     * @param {Node<int>?} [levelNode=null] - A level node which defines the requested mip.\n     */\n    function TextureSizeNode(textureNode) {\n      var _this38;\n      var levelNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, TextureSizeNode);\n      _this38 = _callSuper(this, TextureSizeNode, ['uvec2']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this38.isTextureSizeNode = true;\n\n      /**\n       * A texture node which size should be retrieved.\n       *\n       * @type {TextureNode}\n       */\n      _this38.textureNode = textureNode;\n\n      /**\n       * A level node which defines the requested mip.\n       *\n       * @type {Node<int>}\n       * @default null\n       */\n      _this38.levelNode = levelNode;\n      return _this38;\n    }\n    (0, _inherits2.default)(TextureSizeNode, _Node21);\n    return (0, _createClass2.default)(TextureSizeNode, [{\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var textureProperty = this.textureNode.build(builder, 'property');\n        var level = this.levelNode === null ? '0' : this.levelNode.build(builder, 'int');\n        return builder.format(`${builder.getMethod('textureDimensions')}( ${textureProperty}, ${level} )`, this.getNodeType(builder), output);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'TextureSizeNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a texture size node.\n   *\n   * @function\n   * @param {TextureNode} textureNode - A texture node which size should be retrieved.\n   * @param {Node<int>?} [levelNode=null] - A level node which defines the requested mip.\n   * @returns {TextureSizeNode}\n   */\n  var textureSize = /*@__PURE__*/nodeProxy(TextureSizeNode);\n\n  /** @module MatcapUVNode **/\n\n  /**\n   * A special type of uniform node that computes the\n   * maximum mipmap level for a given texture node.\n   *\n   * ```js\n   * const level = maxMipLevel( textureNode );\n   * ```\n   *\n   * @augments module:UniformNode~UniformNode\n   */\n  var MaxMipLevelNode = exports.MaxMipLevelNode = /*#__PURE__*/function (_UniformNode) {\n    /**\n     * Constructs a new max mip level node.\n     *\n     * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\n     */\n    function MaxMipLevelNode(textureNode) {\n      var _this39;\n      (0, _classCallCheck2.default)(this, MaxMipLevelNode);\n      _this39 = _callSuper(this, MaxMipLevelNode, [0]);\n\n      /**\n       * The texture node to compute the max mip level for.\n       *\n       * @private\n       * @type {TextureNode}\n       */\n      _this39._textureNode = textureNode;\n\n      /**\n       * The `updateType` is set to `NodeUpdateType.FRAME` since the node updates\n       * the texture once per frame in its {@link MaxMipLevelNode#update} method.\n       *\n       * @type {String}\n       * @default 'frame'\n       */\n      _this39.updateType = NodeUpdateType.FRAME;\n      return _this39;\n    }\n\n    /**\n     * The texture node to compute the max mip level for.\n     *\n     * @readonly\n     * @type {TextureNode}\n     */\n    (0, _inherits2.default)(MaxMipLevelNode, _UniformNode);\n    return (0, _createClass2.default)(MaxMipLevelNode, [{\n      key: \"textureNode\",\n      get: function get() {\n        return this._textureNode;\n      }\n\n      /**\n       * The texture.\n       *\n       * @readonly\n       * @type {Texture}\n       */\n    }, {\n      key: \"texture\",\n      get: function get() {\n        return this._textureNode.value;\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var texture = this.texture;\n        var images = texture.images;\n        var image = images && images.length > 0 ? images[0] && images[0].image || images[0] : texture.image;\n        if (image && image.width !== undefined) {\n          var width = image.width,\n            height = image.height;\n          this.value = Math.log2(Math.max(width, height));\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MaxMipLevelNode';\n      }\n    }]);\n  }(UniformNode);\n  /**\n   * TSL function for creating a max mip level node.\n   *\n   * @function\n   * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\n   * @returns {MaxMipLevelNode}\n   */\n  var maxMipLevel = /*@__PURE__*/nodeProxy(MaxMipLevelNode);\n\n  /** @module TextureNode **/\n\n  /**\n   * This type of uniform node represents a 2D texture.\n   *\n   * @augments module:UniformNode~UniformNode\n   */\n  var TextureNode = exports.TextureNode = /*#__PURE__*/function (_UniformNode2) {\n    /**\n     * Constructs a new texture node.\n     *\n     * @param {Texture} value - The texture.\n     * @param {Node<vec2|vec3>?} [uvNode=null] - The uv node.\n     * @param {Node<int>?} [levelNode=null] - The level node.\n     * @param {Node<float>?} [biasNode=null] - The bias node.\n     */\n    function TextureNode(value) {\n      var _this40;\n      var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var biasNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, TextureNode);\n      _this40 = _callSuper(this, TextureNode, [value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this40.isTextureNode = true;\n\n      /**\n       * Represents the texture coordinates.\n       *\n       * @type {Node<vec2|vec3>?}\n       * @default null\n       */\n      _this40.uvNode = uvNode;\n\n      /**\n       * Represents the mip level that should be selected.\n       *\n       * @type {Node<int>?}\n       * @default null\n       */\n      _this40.levelNode = levelNode;\n\n      /**\n       * Represents the bias to be applied during level-of-detail computation.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this40.biasNode = biasNode;\n\n      /**\n       * Represents a reference value a texture sample is compared to.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this40.compareNode = null;\n\n      /**\n       * When using texture arrays, the depth node defines the layer to select.\n       *\n       * @type {Node<int>?}\n       * @default null\n       */\n      _this40.depthNode = null;\n\n      /**\n       * When defined, a texture is sampled using explicit gradients.\n       *\n       * @type {Array<Node<vec2>>?}\n       * @default null\n       */\n      _this40.gradNode = null;\n\n      /**\n       * Whether texture values should be sampled or fetched.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this40.sampler = true;\n\n      /**\n       * Whether the uv transformation matrix should be\n       * automatically updated or not. Use `setUpdateMatrix()`\n       * if you want to change the value of the property.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this40.updateMatrix = false;\n\n      /**\n       * By default the `update()` method is not executed. `setUpdateMatrix()`\n       * sets the value to `frame` when the uv transformation matrix should\n       * automatically be updated.\n       *\n       * @type {String}\n       * @default 'none'\n       */\n      _this40.updateType = NodeUpdateType.NONE;\n\n      /**\n       * The reference node.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this40.referenceNode = null;\n\n      /**\n       * The texture value is stored in a private property.\n       *\n       * @private\n       * @type {Texture}\n       */\n      _this40._value = value;\n\n      /**\n       * The uniform node that represents the uv transformation matrix.\n       *\n       * @private\n       * @type {UniformNode<mat3>?}\n       */\n      _this40._matrixUniform = null;\n      _this40.setUpdateMatrix(uvNode === null);\n      return _this40;\n    }\n    (0, _inherits2.default)(TextureNode, _UniformNode2);\n    return (0, _createClass2.default)(TextureNode, [{\n      key: \"value\",\n      get:\n      /**\n       * The texture value.\n       *\n       * @type {Texture}\n       */\n      function get() {\n        return this.referenceNode ? this.referenceNode.value : this._value;\n      }\n\n      /**\n       * Overwritten since the uniform hash is defined by the texture's UUID.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The uniform hash.\n       */,\n      set: function set(value) {\n        if (this.referenceNode) {\n          this.referenceNode.value = value;\n        } else {\n          this._value = value;\n        }\n      }\n    }, {\n      key: \"getUniformHash\",\n      value: function getUniformHash(/*builder*/\n      ) {\n        return this.value.uuid;\n      }\n\n      /**\n       * Overwritten since the node type is inferred from the texture type.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(/*builder*/\n      ) {\n        if (this.value.isDepthTexture === true) return 'float';\n        if (this.value.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType) {\n          return 'uvec4';\n        } else if (this.value.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) {\n          return 'ivec4';\n        }\n        return 'vec4';\n      }\n\n      /**\n       * Overwrites the default implementation to return a fixed value `'texture'`.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The input type.\n       */\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return 'texture';\n      }\n\n      /**\n       * Returns a default uvs based on the current texture's channel.\n       *\n       * @return {AttributeNode<vec2>} The default uvs.\n       */\n    }, {\n      key: \"getDefaultUV\",\n      value: function getDefaultUV() {\n        return uv(this.value.channel);\n      }\n\n      /**\n       * Overwritten to always return the texture reference of the node.\n       *\n       * @param {Any} state - This method can be invocated in different contexts so `state` can refer to any object type.\n       * @return {Texture} The texture reference.\n       */\n    }, {\n      key: \"updateReference\",\n      value: function updateReference(/*state*/\n      ) {\n        return this.value;\n      }\n\n      /**\n       * Transforms the given uv node with the texture transformation matrix.\n       *\n       * @param {Node} uvNode - The uv node to transform.\n       * @return {Node} The transformed uv node.\n       */\n    }, {\n      key: \"getTransformedUV\",\n      value: function getTransformedUV(uvNode) {\n        if (this._matrixUniform === null) this._matrixUniform = uniform(this.value.matrix);\n        return this._matrixUniform.mul(vec3(uvNode, 1)).xy;\n      }\n\n      /**\n       * Defines whether the uv transformation matrix should automatically be updated or not.\n       *\n       * @param {Boolean} value - The update toggle.\n       * @return {TextureNode} A reference to this node.\n       */\n    }, {\n      key: \"setUpdateMatrix\",\n      value: function setUpdateMatrix(value) {\n        this.updateMatrix = value;\n        this.updateType = value ? NodeUpdateType.RENDER : NodeUpdateType.NONE;\n        return this;\n      }\n\n      /**\n       * Setups the uv node. Depending on the backend as well as texture's image and type, it might be necessary\n       * to modify the uv node for correct sampling.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node} uvNode - The uv node to setup.\n       * @return {Node} The updated uv node.\n       */\n    }, {\n      key: \"setupUV\",\n      value: function setupUV(builder, uvNode) {\n        var texture = this.value;\n        if (builder.isFlipY() && (texture.image instanceof ImageBitmap && texture.flipY === true || texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true || texture.isDepthTexture === true)) {\n          if (this.sampler) {\n            uvNode = uvNode.flipY();\n          } else {\n            uvNode = uvNode.setY(int(textureSize(this, this.levelNode).y).sub(uvNode.y).sub(1));\n          }\n        }\n        return uvNode;\n      }\n\n      /**\n       * Setups texture node by preparing the internal nodes for code generation.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var properties = builder.getNodeProperties(this);\n        properties.referenceNode = this.referenceNode;\n\n        //\n\n        var texture = this.value;\n        if (!texture || texture.isTexture !== true) {\n          throw new Error('THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().');\n        }\n\n        //\n\n        var uvNode = this.uvNode;\n        if ((uvNode === null || builder.context.forceUVContext === true) && builder.context.getUV) {\n          uvNode = builder.context.getUV(this);\n        }\n        if (!uvNode) uvNode = this.getDefaultUV();\n        if (this.updateMatrix === true) {\n          uvNode = this.getTransformedUV(uvNode);\n        }\n        uvNode = this.setupUV(builder, uvNode);\n\n        //\n\n        var levelNode = this.levelNode;\n        if (levelNode === null && builder.context.getTextureLevel) {\n          levelNode = builder.context.getTextureLevel(this);\n        }\n\n        //\n\n        properties.uvNode = uvNode;\n        properties.levelNode = levelNode;\n        properties.biasNode = this.biasNode;\n        properties.compareNode = this.compareNode;\n        properties.gradNode = this.gradNode;\n        properties.depthNode = this.depthNode;\n      }\n\n      /**\n       * Generates the uv code snippet.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node} uvNode - The uv node to generate code for.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generateUV\",\n      value: function generateUV(builder, uvNode) {\n        return uvNode.build(builder, this.sampler === true ? 'vec2' : 'ivec2');\n      }\n\n      /**\n       * Generates the snippet for the texture sampling.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {String} textureProperty - The texture property.\n       * @param {String} uvSnippet - The uv snippet.\n       * @param {String} levelSnippet - The level snippet.\n       * @param {String} biasSnippet - The bias snippet.\n       * @param {String} depthSnippet - The depth snippet.\n       * @param {String} compareSnippet - The compare snippet.\n       * @param {String} gradSnippet - The grad snippet.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generateSnippet\",\n      value: function generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet) {\n        var texture = this.value;\n        var snippet;\n        if (levelSnippet) {\n          snippet = builder.generateTextureLevel(texture, textureProperty, uvSnippet, levelSnippet, depthSnippet);\n        } else if (biasSnippet) {\n          snippet = builder.generateTextureBias(texture, textureProperty, uvSnippet, biasSnippet, depthSnippet);\n        } else if (gradSnippet) {\n          snippet = builder.generateTextureGrad(texture, textureProperty, uvSnippet, gradSnippet, depthSnippet);\n        } else if (compareSnippet) {\n          snippet = builder.generateTextureCompare(texture, textureProperty, uvSnippet, compareSnippet, depthSnippet);\n        } else if (this.sampler === false) {\n          snippet = builder.generateTextureLoad(texture, textureProperty, uvSnippet, depthSnippet);\n        } else {\n          snippet = builder.generateTexture(texture, textureProperty, uvSnippet, depthSnippet);\n        }\n        return snippet;\n      }\n\n      /**\n       * Generates the code snippet of the texture node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {String} output - The current output.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var texture = this.value;\n        var properties = builder.getNodeProperties(this);\n        var textureProperty = _superPropGet(TextureNode, \"generate\", this, 3)([builder, 'property']);\n        if (output === 'sampler') {\n          return textureProperty + '_sampler';\n        } else if (builder.isReference(output)) {\n          return textureProperty;\n        } else {\n          var nodeData = builder.getDataFromNode(this);\n          var propertyName = nodeData.propertyName;\n          if (propertyName === undefined) {\n            var uvNode = properties.uvNode,\n              levelNode = properties.levelNode,\n              biasNode = properties.biasNode,\n              compareNode = properties.compareNode,\n              depthNode = properties.depthNode,\n              gradNode = properties.gradNode;\n            var uvSnippet = this.generateUV(builder, uvNode);\n            var levelSnippet = levelNode ? levelNode.build(builder, 'float') : null;\n            var biasSnippet = biasNode ? biasNode.build(builder, 'float') : null;\n            var depthSnippet = depthNode ? depthNode.build(builder, 'int') : null;\n            var compareSnippet = compareNode ? compareNode.build(builder, 'float') : null;\n            var gradSnippet = gradNode ? [gradNode[0].build(builder, 'vec2'), gradNode[1].build(builder, 'vec2')] : null;\n            var nodeVar = builder.getVarFromNode(this);\n            propertyName = builder.getPropertyName(nodeVar);\n            var _snippet = this.generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet);\n            builder.addLineFlowCode(`${propertyName} = ${_snippet}`, this);\n            nodeData.snippet = _snippet;\n            nodeData.propertyName = propertyName;\n          }\n          var snippet = propertyName;\n          var nodeType = this.getNodeType(builder);\n          if (builder.needsToWorkingColorSpace(texture)) {\n            snippet = colorSpaceToWorking(expression(snippet, nodeType), texture.colorSpace).setup(builder).build(builder, nodeType);\n          }\n          return builder.format(snippet, nodeType, output);\n        }\n      }\n\n      /**\n       * Sets the sampler value.\n       *\n       * @param {Boolean} value - The sampler value to set.\n       * @return {TextureNode} A reference to this texture node.\n       */\n    }, {\n      key: \"setSampler\",\n      value: function setSampler(value) {\n        this.sampler = value;\n        return this;\n      }\n\n      /**\n       * Returns the sampler value.\n       *\n       * @return {Boolean} The sampler value.\n       */\n    }, {\n      key: \"getSampler\",\n      value: function getSampler() {\n        return this.sampler;\n      }\n\n      // @TODO: Move to TSL\n    }, {\n      key: \"uv\",\n      value: function uv(uvNode) {\n        // @deprecated, r172\n\n        console.warn('THREE.TextureNode: .uv() has been renamed. Use .sample() instead.');\n        return this.sample(uvNode);\n      }\n\n      /**\n       * Samples the texture with the given uv node.\n       *\n       * @param {Node} uvNode - The uv node.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"sample\",\n      value: function sample(uvNode) {\n        var textureNode = this.clone();\n        textureNode.uvNode = nodeObject(uvNode);\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      /**\n       * Samples a blurred version of the texture by defining an internal bias.\n       *\n       * @param {Node<float>} amountNode - How blurred the texture should be.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"blur\",\n      value: function blur(amountNode) {\n        var textureNode = this.clone();\n        textureNode.biasNode = nodeObject(amountNode).mul(maxMipLevel(textureNode));\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      /**\n       * Samples a specific mip of the texture.\n       *\n       * @param {Node<int>} levelNode - The mip level to sample.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"level\",\n      value: function level(levelNode) {\n        var textureNode = this.clone();\n        textureNode.levelNode = nodeObject(levelNode);\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      /**\n       * Returns the texture size of the requested level.\n       *\n       * @param {Node<int>} levelNode - The level to compute the size for.\n       * @return {TextureSizeNode} The texture size.\n       */\n    }, {\n      key: \"size\",\n      value: function size(levelNode) {\n        return textureSize(this, levelNode);\n      }\n\n      /**\n       * Samples the texture with the given bias.\n       *\n       * @param {Node<float>} biasNode - The bias node.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"bias\",\n      value: function bias(biasNode) {\n        var textureNode = this.clone();\n        textureNode.biasNode = nodeObject(biasNode);\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      /**\n       * Samples the texture by executing a compare operation.\n       *\n       * @param {Node<float>} compareNode - The node that defines the compare value.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"compare\",\n      value: function compare(compareNode) {\n        var textureNode = this.clone();\n        textureNode.compareNode = nodeObject(compareNode);\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      /**\n       * Samples the texture using an explicit gradient.\n       *\n       * @param {Node<vec2>} gradNodeX - The gradX node.\n       * @param {Node<vec2>} gradNodeY - The gradY node.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"grad\",\n      value: function grad(gradNodeX, gradNodeY) {\n        var textureNode = this.clone();\n        textureNode.gradNode = [nodeObject(gradNodeX), nodeObject(gradNodeY)];\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      /**\n       * Samples the texture by defining a depth node.\n       *\n       * @param {Node<int>} depthNode - The depth node.\n       * @return {TextureNode} A texture node representing the texture sample.\n       */\n    }, {\n      key: \"depth\",\n      value: function depth(depthNode) {\n        var textureNode = this.clone();\n        textureNode.depthNode = nodeObject(depthNode);\n        textureNode.referenceNode = this.getSelf();\n        return nodeObject(textureNode);\n      }\n\n      // --\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(TextureNode, \"serialize\", this, 3)([data]);\n        data.value = this.value.toJSON(data.meta).uuid;\n        data.sampler = this.sampler;\n        data.updateMatrix = this.updateMatrix;\n        data.updateType = this.updateType;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(TextureNode, \"deserialize\", this, 3)([data]);\n        this.value = data.meta.textures[data.value];\n        this.sampler = data.sampler;\n        this.updateMatrix = data.updateMatrix;\n        this.updateType = data.updateType;\n      }\n\n      /**\n       * The update is used to implement the update of the uv transformation matrix.\n       */\n    }, {\n      key: \"update\",\n      value: function update() {\n        var texture = this.value;\n        var matrixUniform = this._matrixUniform;\n        if (matrixUniform !== null) matrixUniform.value = texture.matrix;\n        if (texture.matrixAutoUpdate === true) {\n          texture.updateMatrix();\n        }\n      }\n\n      /**\n       * Clones the texture node.\n       *\n       * @return {TextureNode} The cloned texture node.\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var newNode = new this.constructor(this.value, this.uvNode, this.levelNode, this.biasNode);\n        newNode.sampler = this.sampler;\n        return newNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'TextureNode';\n      }\n    }]);\n  }(UniformNode);\n  /**\n   * TSL function for creating a texture node.\n   *\n   * @function\n   * @param {Texture} value - The texture.\n   * @param {Node<vec2|vec3>?} [uvNode=null] - The uv node.\n   * @param {Node<int>?} [levelNode=null] - The level node.\n   * @param {Node<float>?} [biasNode=null] - The bias node.\n   * @returns {TextureNode}\n   */\n  var texture = /*@__PURE__*/nodeProxy(TextureNode);\n\n  /**\n   * TSL function for creating a texture node that fetches/loads texels without interpolation.\n   *\n   * @function\n   * @param {Texture} value - The texture.\n   * @param {Node<vec2|vec3>?} [uvNode=null] - The uv node.\n   * @param {Node<int>?} [levelNode=null] - The level node.\n   * @param {Node<float>?} [biasNode=null] - The bias node.\n   * @returns {TextureNode}\n   */\n  var textureLoad = function textureLoad() {\n    return texture.apply(void 0, arguments).setSampler(false);\n  };\n\n  //export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\n\n  /**\n   * Converts a texture or texture node to a sampler.\n   *\n   * @function\n   * @param {TextureNode|Texture} aTexture - The texture or texture node to convert.\n   * @returns {Node}\n   */\n  var sampler = function sampler(aTexture) {\n    return (aTexture.isNode === true ? aTexture : texture(aTexture)).convert('sampler');\n  };\n\n  /** @module Camera **/\n\n  /**\n   * TSL object that represents the `near` value of the camera used for the current render.\n   *\n   * @type {UniformNode<float>}\n   */\n  var cameraNear = /*@__PURE__*/uniform('float').label('cameraNear').setGroup(renderGroup).onRenderUpdate(function (_ref13) {\n    var camera = _ref13.camera;\n    return camera.near;\n  });\n\n  /**\n   * TSL object that represents the `far` value of the camera used for the current render.\n   *\n   * @type {UniformNode<float>}\n   */\n  var cameraFar = /*@__PURE__*/uniform('float').label('cameraFar').setGroup(renderGroup).onRenderUpdate(function (_ref14) {\n    var camera = _ref14.camera;\n    return camera.far;\n  });\n\n  /**\n   * TSL object that represents the projection matrix of the camera used for the current render.\n   *\n   * @type {UniformNode<mat4>}\n   */\n  var cameraProjectionMatrix = /*@__PURE__*/uniform('mat4').label('cameraProjectionMatrix').setGroup(renderGroup).onRenderUpdate(function (_ref15) {\n    var camera = _ref15.camera;\n    return camera.projectionMatrix;\n  });\n\n  /**\n   * TSL object that represents the inverse projection matrix of the camera used for the current render.\n   *\n   * @type {UniformNode<mat4>}\n   */\n  var cameraProjectionMatrixInverse = /*@__PURE__*/uniform('mat4').label('cameraProjectionMatrixInverse').setGroup(renderGroup).onRenderUpdate(function (_ref16) {\n    var camera = _ref16.camera;\n    return camera.projectionMatrixInverse;\n  });\n\n  /**\n   * TSL object that represents the view matrix of the camera used for the current render.\n   *\n   * @type {UniformNode<mat4>}\n   */\n  var cameraViewMatrix = /*@__PURE__*/uniform('mat4').label('cameraViewMatrix').setGroup(renderGroup).onRenderUpdate(function (_ref17) {\n    var camera = _ref17.camera;\n    return camera.matrixWorldInverse;\n  });\n\n  /**\n   * TSL object that represents the world matrix of the camera used for the current render.\n   *\n   * @type {UniformNode<mat4>}\n   */\n  var cameraWorldMatrix = /*@__PURE__*/uniform('mat4').label('cameraWorldMatrix').setGroup(renderGroup).onRenderUpdate(function (_ref18) {\n    var camera = _ref18.camera;\n    return camera.matrixWorld;\n  });\n\n  /**\n   * TSL object that represents the normal matrix of the camera used for the current render.\n   *\n   * @type {UniformNode<mat3>}\n   */\n  var cameraNormalMatrix = /*@__PURE__*/uniform('mat3').label('cameraNormalMatrix').setGroup(renderGroup).onRenderUpdate(function (_ref19) {\n    var camera = _ref19.camera;\n    return camera.normalMatrix;\n  });\n\n  /**\n   * TSL object that represents the position in world space of the camera used for the current render.\n   *\n   * @type {UniformNode<vec3>}\n   */\n  var cameraPosition = /*@__PURE__*/uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()).label('cameraPosition').setGroup(renderGroup).onRenderUpdate(function (_ref20, self) {\n    var camera = _ref20.camera;\n    return self.value.setFromMatrixPosition(camera.matrixWorld);\n  });\n\n  /** @module Object3DNode **/\n\n  /**\n   * This node can be used to access transformation related metrics of 3D objects.\n   * Depending on the selected scope, a different metric is represented as a uniform\n   * in the shader. The following scopes are supported:\n   *\n   * - `POSITION`: The object's position in world space.\n   * - `VIEW_POSITION`: The object's position in view/camera space.\n   * - `DIRECTION`: The object's direction in world space.\n   * - `SCALE`: The object's scale in world space.\n   * - `WORLD_MATRIX`: The object's matrix in world space.\n   *\n   * @augments Node\n   */\n  var Object3DNode = exports.Object3DNode = /*#__PURE__*/function (_Node22) {\n    /**\n     * Constructs a new object 3D node.\n     *\n     * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\n     * @param {Object3D?} [object3d=null] - The 3D object.\n     */\n    function Object3DNode(scope) {\n      var _this41;\n      var object3d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, Object3DNode);\n      _this41 = _callSuper(this, Object3DNode);\n\n      /**\n       * The node reports a different type of transformation depending on the scope.\n       *\n       * @type {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')}\n       */\n      _this41.scope = scope;\n\n      /**\n       * The 3D object.\n       *\n       * @type {Object3D?}\n       * @default null\n       */\n      _this41.object3d = object3d;\n\n      /**\n       * Overwritten since this type of node is updated per object.\n       *\n       * @type {String}\n       * @default 'object'\n       */\n      _this41.updateType = NodeUpdateType.OBJECT;\n\n      /**\n       * Holds the value of the node as a uniform.\n       *\n       * @private\n       * @type {UniformNode}\n       */\n      _this41._uniformNode = new UniformNode(null);\n      return _this41;\n    }\n\n    /**\n     * Overwritten since the node type is inferred from the scope.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(Object3DNode, _Node22);\n    return (0, _createClass2.default)(Object3DNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType() {\n        var scope = this.scope;\n        if (scope === Object3DNode.WORLD_MATRIX) {\n          return 'mat4';\n        } else if (scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE) {\n          return 'vec3';\n        }\n      }\n\n      /**\n       * Updates the uniform value depending on the scope.\n       *\n       * @param {NodeFrame} frame - The current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(frame) {\n        var object = this.object3d;\n        var uniformNode = this._uniformNode;\n        var scope = this.scope;\n        if (scope === Object3DNode.WORLD_MATRIX) {\n          uniformNode.value = object.matrixWorld;\n        } else if (scope === Object3DNode.POSITION) {\n          uniformNode.value = uniformNode.value || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n          uniformNode.value.setFromMatrixPosition(object.matrixWorld);\n        } else if (scope === Object3DNode.SCALE) {\n          uniformNode.value = uniformNode.value || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n          uniformNode.value.setFromMatrixScale(object.matrixWorld);\n        } else if (scope === Object3DNode.DIRECTION) {\n          uniformNode.value = uniformNode.value || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n          object.getWorldDirection(uniformNode.value);\n        } else if (scope === Object3DNode.VIEW_POSITION) {\n          var camera = frame.camera;\n          uniformNode.value = uniformNode.value || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n          uniformNode.value.setFromMatrixPosition(object.matrixWorld);\n          uniformNode.value.applyMatrix4(camera.matrixWorldInverse);\n        }\n      }\n\n      /**\n       * Generates the code snippet of the uniform node. The node type of the uniform\n       * node also depends on the selected scope.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var scope = this.scope;\n        if (scope === Object3DNode.WORLD_MATRIX) {\n          this._uniformNode.nodeType = 'mat4';\n        } else if (scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE) {\n          this._uniformNode.nodeType = 'vec3';\n        }\n        return this._uniformNode.build(builder);\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(Object3DNode, \"serialize\", this, 3)([data]);\n        data.scope = this.scope;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(Object3DNode, \"deserialize\", this, 3)([data]);\n        this.scope = data.scope;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'Object3DNode';\n      }\n    }]);\n  }(Node);\n  Object3DNode.WORLD_MATRIX = 'worldMatrix';\n  Object3DNode.POSITION = 'position';\n  Object3DNode.SCALE = 'scale';\n  Object3DNode.VIEW_POSITION = 'viewPosition';\n  Object3DNode.DIRECTION = 'direction';\n\n  /**\n   * TSL function for creating an object 3D node that represents the object's direction in world space.\n   *\n   * @function\n   * @param {Object3D?} [object3d=null] - The 3D object.\n   * @returns {Object3DNode<vec3>}\n   */\n  var objectDirection = /*@__PURE__*/nodeProxy(Object3DNode, Object3DNode.DIRECTION);\n\n  /**\n   * TSL function for creating an object 3D node that represents the object's world matrix.\n   *\n   * @function\n   * @param {Object3D?} [object3d=null] - The 3D object.\n   * @returns {Object3DNode<mat4>}\n   */\n  var objectWorldMatrix = /*@__PURE__*/nodeProxy(Object3DNode, Object3DNode.WORLD_MATRIX);\n\n  /**\n   * TSL function for creating an object 3D node that represents the object's position in world space.\n   *\n   * @function\n   * @param {Object3D?} [object3d=null] - The 3D object.\n   * @returns {Object3DNode<vec3>}\n   */\n  var objectPosition = /*@__PURE__*/nodeProxy(Object3DNode, Object3DNode.POSITION);\n\n  /**\n   * TSL function for creating an object 3D node that represents the object's scale in world space.\n   *\n   * @function\n   * @param {Object3D?} [object3d=null] - The 3D object.\n   * @returns {Object3DNode<vec3>}\n   */\n  var objectScale = /*@__PURE__*/nodeProxy(Object3DNode, Object3DNode.SCALE);\n\n  /**\n   * TSL function for creating an object 3D node that represents the object's position in view/camera space.\n   *\n   * @function\n   * @param {Object3D?} [object3d=null] - The 3D object.\n   * @returns {Object3DNode<vec3>}\n   */\n  var objectViewPosition = /*@__PURE__*/nodeProxy(Object3DNode, Object3DNode.VIEW_POSITION);\n\n  /** @module ModelNode **/\n\n  /**\n   * This type of node is a specialized version of `Object3DNode`\n   * with larger set of model related metrics. Unlike `Object3DNode`,\n   * `ModelNode` extracts the reference to the 3D object from the\n   * current node frame state.\n   *\n   * @augments module:Object3DNode~Object3DNode\n   */\n  var ModelNode = exports.ModelNode = /*#__PURE__*/function (_Object3DNode) {\n    /**\n     * Constructs a new object model node.\n     *\n     * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\n     */\n    function ModelNode(scope) {\n      (0, _classCallCheck2.default)(this, ModelNode);\n      return _callSuper(this, ModelNode, [scope]);\n    }\n\n    /**\n     * Extracts the model reference from the frame state and then\n     * updates the uniform value depending on the scope.\n     *\n     * @param {NodeFrame} frame - The current node frame.\n     */\n    (0, _inherits2.default)(ModelNode, _Object3DNode);\n    return (0, _createClass2.default)(ModelNode, [{\n      key: \"update\",\n      value: function update(frame) {\n        this.object3d = frame.object;\n        _superPropGet(ModelNode, \"update\", this, 3)([frame]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ModelNode';\n      }\n    }]);\n  }(Object3DNode);\n  /**\n   * TSL object that represents the object's direction in world space.\n   *\n   * @type {ModelNode<vec3>}\n   */\n  var modelDirection = /*@__PURE__*/nodeImmutable(ModelNode, ModelNode.DIRECTION);\n\n  /**\n   * TSL object that represents the object's world matrix.\n   *\n   * @type {ModelNode<mat4>}\n   */\n  var modelWorldMatrix = /*@__PURE__*/nodeImmutable(ModelNode, ModelNode.WORLD_MATRIX);\n\n  /**\n   * TSL object that represents the object's position in world space.\n   *\n   * @type {ModelNode<vec3>}\n   */\n  var modelPosition = /*@__PURE__*/nodeImmutable(ModelNode, ModelNode.POSITION);\n\n  /**\n   * TSL object that represents the object's scale in world space.\n   *\n   * @type {ModelNode<vec3>}\n   */\n  var modelScale = /*@__PURE__*/nodeImmutable(ModelNode, ModelNode.SCALE);\n\n  /**\n   * TSL object that represents the object's position in view/camera space.\n   *\n   * @type {ModelNode<vec3>}\n   */\n  var modelViewPosition = /*@__PURE__*/nodeImmutable(ModelNode, ModelNode.VIEW_POSITION);\n\n  /**\n   * TSL object that represents the object's normal matrix.\n   *\n   * @type {UniformNode<mat3>}\n   */\n  var modelNormalMatrix = /*@__PURE__*/uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix3)()).onObjectUpdate(function (_ref21, self) {\n    var object = _ref21.object;\n    return self.value.getNormalMatrix(object.matrixWorld);\n  });\n\n  /**\n   * TSL object that represents the object's inverse world matrix.\n   *\n   * @type {UniformNode<mat4>}\n   */\n  var modelWorldMatrixInverse = /*@__PURE__*/uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)()).onObjectUpdate(function (_ref22, self) {\n    var object = _ref22.object;\n    return self.value.copy(object.matrixWorld).invert();\n  });\n\n  /**\n   * TSL object that represents the object's model view matrix.\n   *\n   * @type {Node<mat4>}\n   */\n  var modelViewMatrix = /*@__PURE__*/Fn(function (builder) {\n    return builder.renderer.nodes.modelViewMatrix || mediumpModelViewMatrix;\n  }).once()().toVar('modelViewMatrix');\n\n  // GPU Precision\n\n  /**\n   * TSL object that represents the object's model view in `mediump` precision.\n   *\n   * @type {Node<mat4>}\n   */\n  var mediumpModelViewMatrix = /*@__PURE__*/cameraViewMatrix.mul(modelWorldMatrix);\n\n  // CPU Precision\n\n  /**\n   * TSL object that represents the object's model view in `highp` precision\n   * which is achieved by computing the matrix in JS and not in the shader.\n   *\n   * @type {Node<mat4>}\n   */\n  var highpModelViewMatrix = /*@__PURE__*/Fn(function (builder) {\n    builder.context.isHighPrecisionModelViewMatrix = true;\n    return uniform('mat4').onObjectUpdate(function (_ref23) {\n      var object = _ref23.object,\n        camera = _ref23.camera;\n      return object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n    });\n  }).once()().toVar('highpModelViewMatrix');\n\n  /**\n   * TSL object that represents the object's model normal view in `highp` precision\n   * which is achieved by computing the matrix in JS and not in the shader.\n   *\n   * @type {Node<mat3>}\n   */\n  var highpModelNormalViewMatrix = /*@__PURE__*/Fn(function (builder) {\n    var isHighPrecisionModelViewMatrix = builder.context.isHighPrecisionModelViewMatrix;\n    return uniform('mat3').onObjectUpdate(function (_ref24) {\n      var object = _ref24.object,\n        camera = _ref24.camera;\n      if (isHighPrecisionModelViewMatrix !== true) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n      }\n      return object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n    });\n  }).once()().toVar('highpModelNormalViewMatrix');\n\n  /** @module Position **/\n\n  /**\n   * TSL object that represents the position attribute of the current rendered object.\n   *\n   * @type {AttributeNode<vec3>}\n   */\n  var positionGeometry = /*@__PURE__*/attribute('position', 'vec3');\n\n  /**\n   * TSL object that represents the vertex position in local space of the current rendered object.\n   *\n   * @type {AttributeNode<vec3>}\n   */\n  var positionLocal = /*@__PURE__*/positionGeometry.varying('positionLocal');\n\n  /**\n   * TSL object that represents the previous vertex position in local space of the current rendered object.\n   * Used in context of {@link module:VelocityNode~VelocityNode} for rendering motion vectors.\n   *\n   * @type {AttributeNode<vec3>}\n   */\n  var positionPrevious = /*@__PURE__*/positionGeometry.varying('positionPrevious');\n\n  /**\n   * TSL object that represents the vertex position in world space of the current rendered object.\n   *\n   * @type {VaryingNode<vec3>}\n   */\n  var positionWorld = /*@__PURE__*/modelWorldMatrix.mul(positionLocal).xyz.varying('v_positionWorld').context({\n    needsPositionReassign: true\n  });\n\n  /**\n   * TSL object that represents the position world direction of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var positionWorldDirection = /*@__PURE__*/positionLocal.transformDirection(modelWorldMatrix).varying('v_positionWorldDirection').normalize().toVar('positionWorldDirection').context({\n    needsPositionReassign: true\n  });\n\n  /**\n   * TSL object that represents the vertex position in view space of the current rendered object.\n   *\n   * @type {VaryingNode<vec3>}\n   */\n  var positionView = /*@__PURE__*/Fn(function (builder) {\n    return builder.context.setupPositionView();\n  }, 'vec3').once()().varying('v_positionView').context({\n    needsPositionReassign: true\n  });\n\n  /**\n   * TSL object that represents the position view direction of the current rendered object.\n   *\n   * @type {VaryingNode<vec3>}\n   */\n  var positionViewDirection = /*@__PURE__*/positionView.negate().varying('v_positionViewDirection').normalize().toVar('positionViewDirection');\n\n  /** @module FrontFacingNode **/\n\n  /**\n   * This node can be used to evaluate whether a primitive is front or back facing.\n   *\n   * @augments Node\n   */\n  var FrontFacingNode = exports.FrontFacingNode = /*#__PURE__*/function (_Node23) {\n    /**\n     * Constructs a new front facing node.\n     */\n    function FrontFacingNode() {\n      var _this42;\n      (0, _classCallCheck2.default)(this, FrontFacingNode);\n      _this42 = _callSuper(this, FrontFacingNode, ['bool']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this42.isFrontFacingNode = true;\n      return _this42;\n    }\n    (0, _inherits2.default)(FrontFacingNode, _Node23);\n    return (0, _createClass2.default)(FrontFacingNode, [{\n      key: \"generate\",\n      value: function generate(builder) {\n        var renderer = builder.renderer,\n          material = builder.material;\n        if (renderer.coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCoordinateSystem) {\n          if (material.side === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide) {\n            return 'false';\n          }\n        }\n        return builder.getFrontFacing();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'FrontFacingNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL object that represents whether a primitive is front or back facing\n   *\n   * @type {FrontFacingNode<bool>}\n   */\n  var frontFacing = /*@__PURE__*/nodeImmutable(FrontFacingNode);\n\n  /**\n   * TSL object that represents the front facing status as a number instead of a bool.\n   * `1` means front facing, `-1` means back facing.\n   *\n   * @type {Node<float>}\n   */\n  var faceDirection = /*@__PURE__*/float(frontFacing).mul(2.0).sub(1.0);\n\n  /** @module Normal **/\n\n  /**\n   * TSL object that represents the normal attribute of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var normalGeometry = /*@__PURE__*/attribute('normal', 'vec3');\n\n  /**\n   * TSL object that represents the vertex normal in local space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var normalLocal = /*@__PURE__*/Fn(function (builder) {\n    if (builder.geometry.hasAttribute('normal') === false) {\n      console.warn('TSL.NormalNode: Vertex attribute \"normal\" not found on geometry.');\n      return vec3(0, 1, 0);\n    }\n    return normalGeometry;\n  }, 'vec3').once()().toVar('normalLocal');\n\n  /**\n   * TSL object that represents the flat vertex normal in view space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var normalFlat = /*@__PURE__*/positionView.dFdx().cross(positionView.dFdy()).normalize().toVar('normalFlat');\n\n  /**\n   * TSL object that represents the vertex normal in view space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var normalView = /*@__PURE__*/Fn(function (builder) {\n    var node;\n    if (builder.material.flatShading === true) {\n      node = normalFlat;\n    } else {\n      node = varying(transformNormalToView(normalLocal), 'v_normalView').normalize();\n    }\n    return node;\n  }, 'vec3').once()().toVar('normalView');\n\n  /**\n   * TSL object that represents the vertex normal in world space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var normalWorld = /*@__PURE__*/varying(normalView.transformDirection(cameraViewMatrix), 'v_normalWorld').normalize().toVar('normalWorld');\n\n  /**\n   * TSL object that represents the transformed vertex normal in view space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var transformedNormalView = /*@__PURE__*/Fn(function (builder) {\n    return builder.context.setupNormal();\n  }, 'vec3').once()().mul(faceDirection).toVar('transformedNormalView');\n\n  /**\n   * TSL object that represents the transformed vertex normal in world space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var transformedNormalWorld = /*@__PURE__*/transformedNormalView.transformDirection(cameraViewMatrix).toVar('transformedNormalWorld');\n\n  /**\n   * TSL object that represents the transformed clearcoat vertex normal in view space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var transformedClearcoatNormalView = /*@__PURE__*/Fn(function (builder) {\n    return builder.context.setupClearcoatNormal();\n  }, 'vec3').once()().mul(faceDirection).toVar('transformedClearcoatNormalView');\n\n  /**\n   * Transforms the normal with the given matrix.\n   *\n   * @function\n   * @param {Node<vec3>} normal - The normal.\n   * @param {Node<mat3>} [matrix=modelWorldMatrix] - The matrix.\n   * @return {Node<vec3>} The transformed normal.\n   */\n  var transformNormal = /*@__PURE__*/Fn(function (_ref25) {\n    var _ref26 = (0, _slicedToArray2.default)(_ref25, 2),\n      normal = _ref26[0],\n      _ref26$ = _ref26[1],\n      matrix = _ref26$ === void 0 ? modelWorldMatrix : _ref26$;\n    var m = mat3(matrix);\n    var transformedNormal = normal.div(vec3(m[0].dot(m[0]), m[1].dot(m[1]), m[2].dot(m[2])));\n    return m.mul(transformedNormal).xyz;\n  });\n\n  /**\n   * Transforms the given normal from local to view space.\n   *\n   * @function\n   * @param {Node<vec3>} normal - The normal.\n   * @param {NodeBuilder} builder - The current node builder.\n   * @return {Node<vec3>} The transformed normal.\n   */\n  var transformNormalToView = /*@__PURE__*/Fn(function (_ref27, builder) {\n    var _ref28 = (0, _slicedToArray2.default)(_ref27, 1),\n      normal = _ref28[0];\n    var modelNormalViewMatrix = builder.renderer.nodes.modelNormalViewMatrix;\n    if (modelNormalViewMatrix !== null) {\n      return modelNormalViewMatrix.transformDirection(normal);\n    }\n\n    //\n\n    var transformedNormal = modelNormalMatrix.mul(normal);\n    return cameraViewMatrix.transformDirection(transformedNormal);\n  });\n\n  /** @module MaterialProperties **/\n\n  /**\n   * TSL object that represents the refraction ratio of the material used for rendering the current object.\n   *\n   * @type {UniformNode<float>}\n   */\n  var materialRefractionRatio = /*@__PURE__*/uniform(0).onReference(function (_ref29) {\n    var material = _ref29.material;\n    return material;\n  }).onRenderUpdate(function (_ref30) {\n    var material = _ref30.material;\n    return material.refractionRatio;\n  });\n\n  /** @module ReflectVector **/\n\n  /**\n   * The reflect vector in view space.\n   *\n   * @type {Node<vec3>}\n   */\n  var reflectView = /*@__PURE__*/positionViewDirection.negate().reflect(transformedNormalView);\n\n  /**\n   * The refract vector in view space.\n   *\n   * @type {Node<vec3>}\n   */\n  var refractView = /*@__PURE__*/positionViewDirection.negate().refract(transformedNormalView, materialRefractionRatio);\n\n  /**\n   * Used for sampling cube maps when using cube reflection mapping.\n   *\n   * @type {Node<vec3>}\n   */\n  var reflectVector = /*@__PURE__*/reflectView.transformDirection(cameraViewMatrix).toVar('reflectVector');\n\n  /**\n   * Used for sampling cube maps when using cube refraction mapping.\n   *\n   * @type {Node<vec3>}\n   */\n  var refractVector = /*@__PURE__*/refractView.transformDirection(cameraViewMatrix).toVar('reflectVector');\n\n  /** @module CubeTextureNode **/\n\n  /**\n   * This type of uniform node represents a cube texture.\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var CubeTextureNode = exports.CubeTextureNode = /*#__PURE__*/function (_TextureNode) {\n    /**\n     * Constructs a new cube texture node.\n     *\n     * @param {CubeTexture} value - The cube texture.\n     * @param {Node<vec3>?} [uvNode=null] - The uv node.\n     * @param {Node<int>?} [levelNode=null] - The level node.\n     * @param {Node<float>?} [biasNode=null] - The bias node.\n     */\n    function CubeTextureNode(value) {\n      var _this43;\n      var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var biasNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, CubeTextureNode);\n      _this43 = _callSuper(this, CubeTextureNode, [value, uvNode, levelNode, biasNode]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this43.isCubeTextureNode = true;\n      return _this43;\n    }\n\n    /**\n     * Overwrites the default implementation to return a fixed value `'cubeTexture'`.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The input type.\n     */\n    (0, _inherits2.default)(CubeTextureNode, _TextureNode);\n    return (0, _createClass2.default)(CubeTextureNode, [{\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return 'cubeTexture';\n      }\n\n      /**\n       * Returns a default uvs based on the mapping type of the cube texture.\n       *\n       * @return {Node<vec3>} The default uv attribute.\n       */\n    }, {\n      key: \"getDefaultUV\",\n      value: function getDefaultUV() {\n        var texture = this.value;\n        if (texture.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping) {\n          return reflectVector;\n        } else if (texture.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping) {\n          return refractVector;\n        } else {\n          console.error('THREE.CubeTextureNode: Mapping \"%s\" not supported.', texture.mapping);\n          return vec3(0, 0, 0);\n        }\n      }\n\n      /**\n       * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\n       * for cube textures. The uv transformation matrix is not applied to cube textures.\n       *\n       * @param {Boolean} value - The update toggle.\n       */\n    }, {\n      key: \"setUpdateMatrix\",\n      value: function setUpdateMatrix(/*updateMatrix*/) {} // Ignore .updateMatrix for CubeTextureNode\n\n      /**\n       * Setups the uv node. Depending on the backend as well as the texture type, it might be necessary\n       * to modify the uv node for correct sampling.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node} uvNode - The uv node to setup.\n       * @return {Node} The updated uv node.\n       */\n    }, {\n      key: \"setupUV\",\n      value: function setupUV(builder, uvNode) {\n        var texture = this.value;\n        if (builder.renderer.coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem || !texture.isRenderTargetTexture) {\n          return vec3(uvNode.x.negate(), uvNode.yz);\n        } else {\n          return uvNode;\n        }\n      }\n\n      /**\n       * Generates the uv code snippet.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node} cubeUV - The uv node to generate code for.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generateUV\",\n      value: function generateUV(builder, cubeUV) {\n        return cubeUV.build(builder, 'vec3');\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'CubeTextureNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * TSL function for creating a cube texture node.\n   *\n   * @function\n   * @param {CubeTexture} value - The cube texture.\n   * @param {Node<vec3>?} [uvNode=null] - The uv node.\n   * @param {Node<int>?} [levelNode=null] - The level node.\n   * @param {Node<float>?} [biasNode=null] - The bias node.\n   * @returns {CubeTextureNode}\n   */\n  var cubeTexture = /*@__PURE__*/nodeProxy(CubeTextureNode);\n\n  /** @module BufferNode **/\n\n  /**\n   * A special type of uniform node which represents array-like data\n   * as uniform buffers. The access usually happens via `element()`\n   * which returns an instance of {@link ArrayElementNode}. For example:\n   *\n   * ```js\n   * const bufferNode = buffer( array, 'mat4', count );\n   * const matrixNode = bufferNode.element( index ); // access a matrix from the buffer\n   * ```\n   * In general, it is recommended to use the more managed {@link UniformArrayNode}\n   * since it handles more input types and automatically cares about buffer paddings.\n   *\n   * @augments module:UniformNode~UniformNode\n   */\n  var BufferNode = exports.BufferNode = /*#__PURE__*/function (_UniformNode3) {\n    /**\n     * Constructs a new buffer node.\n     *\n     * @param {Array<Number>} value - Array-like buffer data.\n     * @param {String} bufferType - The data type of the buffer.\n     * @param {Number} [bufferCount=0] - The count of buffer elements.\n     */\n    function BufferNode(value, bufferType) {\n      var _this44;\n      var bufferCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      (0, _classCallCheck2.default)(this, BufferNode);\n      _this44 = _callSuper(this, BufferNode, [value, bufferType]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this44.isBufferNode = true;\n\n      /**\n       * The data type of the buffer.\n       *\n       * @type {String}\n       */\n      _this44.bufferType = bufferType;\n\n      /**\n       * The uniform node that holds the value of the reference node.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this44.bufferCount = bufferCount;\n      return _this44;\n    }\n\n    /**\n     * The data type of the buffer elements.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The element type.\n     */\n    (0, _inherits2.default)(BufferNode, _UniformNode3);\n    return (0, _createClass2.default)(BufferNode, [{\n      key: \"getElementType\",\n      value: function getElementType(builder) {\n        return this.getNodeType(builder);\n      }\n\n      /**\n       * Overwrites the default implementation to return a fixed value `'buffer'`.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The input type.\n       */\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return 'buffer';\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BufferNode';\n      }\n    }]);\n  }(UniformNode);\n  /**\n   * TSL function for creating a buffer node.\n   *\n   * @function\n   * @param {Array} value - Array-like buffer data.\n   * @param {String} type - The data type of a buffer element.\n   * @param {Number} count - The count of buffer elements.\n   * @returns {BufferNode}\n   */\n  var buffer = function buffer(value, type, count) {\n    return nodeObject(new BufferNode(value, type, count));\n  };\n\n  /** @module UniformArrayNode **/\n\n  /**\n   * Represents the element access on uniform array nodes.\n   *\n   * @augments ArrayElementNode\n   */\n  var UniformArrayElementNode = /*#__PURE__*/function (_ArrayElementNode2) {\n    /**\n     * Constructs a new buffer node.\n     *\n     * @param {UniformArrayNode} uniformArrayNode - The uniform array node to access.\n     * @param {IndexNode} indexNode - The index data that define the position of the accessed element in the array.\n     */\n    function UniformArrayElementNode(uniformArrayNode, indexNode) {\n      var _this45;\n      (0, _classCallCheck2.default)(this, UniformArrayElementNode);\n      _this45 = _callSuper(this, UniformArrayElementNode, [uniformArrayNode, indexNode]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this45.isArrayBufferElementNode = true;\n      return _this45;\n    }\n    (0, _inherits2.default)(UniformArrayElementNode, _ArrayElementNode2);\n    return (0, _createClass2.default)(UniformArrayElementNode, [{\n      key: \"generate\",\n      value: function generate(builder) {\n        var snippet = _superPropGet(UniformArrayElementNode, \"generate\", this, 3)([builder]);\n        var type = this.getNodeType();\n        var paddedType = this.node.getPaddedType();\n        return builder.format(snippet, paddedType, type);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'UniformArrayElementNode';\n      }\n    }]);\n  }(ArrayElementNode);\n  /**\n   * Similar to {@link module:BufferNode~BufferNode} this module represents array-like data as\n   * uniform buffers. Unlike {@link module:BufferNode~BufferNode}, it can handle more common\n   * data types in the array (e.g `three.js` primitives) and automatically\n   * manage buffer padding. It should be the first choice when working with\n   * uniforms buffers.\n   * ```js\n   * const tintColors = uniformArray( [\n   * \tnew Color( 1, 0, 0 ),\n   * \tnew Color( 0, 1, 0 ),\n   * \tnew Color( 0, 0, 1 )\n   * ], 'color' );\n   *\n   * const redColor = tintColors.element( 0 );\n   *\n   * @augments module:BufferNode~BufferNode\n   */\n  var UniformArrayNode = exports.UniformArrayNode = /*#__PURE__*/function (_BufferNode) {\n    /**\n     * Constructs a new uniform array node.\n     *\n     * @param {Array<Any>} value - Array holding the buffer data.\n     * @param {String?} [elementType=null] - The data type of a buffer element.\n     */\n    function UniformArrayNode(value) {\n      var _this46;\n      var elementType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, UniformArrayNode);\n      _this46 = _callSuper(this, UniformArrayNode, [null]);\n\n      /**\n       * Array holding the buffer data. Unlike {@link module:BufferNode~BufferNode}, the array can\n       * hold number primitives as well as three.js objects like vectors, matrices\n       * or colors.\n       *\n       * @type {Array<Any>}\n       */\n      _this46.array = value;\n\n      /**\n       * The data type of an array element.\n       *\n       * @type {String}\n       */\n      _this46.elementType = elementType === null ? getValueType(value[0]) : elementType;\n\n      /**\n       * The padded type. Uniform buffers must conform to a certain buffer layout\n       * so a separate type is computed to ensure correct buffer size.\n       *\n       * @type {String}\n       */\n      _this46.paddedType = _this46.getPaddedType();\n\n      /**\n       * Overwritten since uniform array nodes are updated per render.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this46.updateType = NodeUpdateType.RENDER;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this46.isArrayBufferNode = true;\n      return _this46;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from the\n     * {@link module:UniformArrayNode~UniformArrayNode#paddedType}.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(UniformArrayNode, _BufferNode);\n    return (0, _createClass2.default)(UniformArrayNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(/*builder*/\n      ) {\n        return this.paddedType;\n      }\n\n      /**\n       * The data type of the array elements.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The element type.\n       */\n    }, {\n      key: \"getElementType\",\n      value: function getElementType() {\n        return this.elementType;\n      }\n\n      /**\n       * Returns the padded type based on the element type.\n       *\n       * @return {String} The padded type.\n       */\n    }, {\n      key: \"getPaddedType\",\n      value: function getPaddedType() {\n        var elementType = this.elementType;\n        var paddedType = 'vec4';\n        if (elementType === 'mat2') {\n          paddedType = 'mat2';\n        } else if (/mat/.test(elementType) === true) {\n          paddedType = 'mat4';\n        } else if (elementType.charAt(0) === 'i') {\n          paddedType = 'ivec4';\n        } else if (elementType.charAt(0) === 'u') {\n          paddedType = 'uvec4';\n        }\n        return paddedType;\n      }\n\n      /**\n       * The update makes sure to correctly transfer the data from the (complex) objects\n       * in the array to the internal, correctly padded value buffer.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        var array = this.array,\n          value = this.value;\n        var elementType = this.elementType;\n        if (elementType === 'float' || elementType === 'int' || elementType === 'uint') {\n          for (var i = 0; i < array.length; i++) {\n            var index = i * 4;\n            value[index] = array[i];\n          }\n        } else if (elementType === 'color') {\n          for (var _i2 = 0; _i2 < array.length; _i2++) {\n            var _index = _i2 * 4;\n            var vector = array[_i2];\n            value[_index] = vector.r;\n            value[_index + 1] = vector.g;\n            value[_index + 2] = vector.b || 0;\n            //value[ index + 3 ] = vector.a || 0;\n          }\n        } else if (elementType === 'mat2') {\n          for (var _i3 = 0; _i3 < array.length; _i3++) {\n            var _index2 = _i3 * 4;\n            var matrix = array[_i3];\n            value[_index2] = matrix.elements[0];\n            value[_index2 + 1] = matrix.elements[1];\n            value[_index2 + 2] = matrix.elements[2];\n            value[_index2 + 3] = matrix.elements[3];\n          }\n        } else if (elementType === 'mat3') {\n          for (var _i4 = 0; _i4 < array.length; _i4++) {\n            var _index3 = _i4 * 16;\n            var _matrix = array[_i4];\n            value[_index3] = _matrix.elements[0];\n            value[_index3 + 1] = _matrix.elements[1];\n            value[_index3 + 2] = _matrix.elements[2];\n            value[_index3 + 4] = _matrix.elements[3];\n            value[_index3 + 5] = _matrix.elements[4];\n            value[_index3 + 6] = _matrix.elements[5];\n            value[_index3 + 8] = _matrix.elements[6];\n            value[_index3 + 9] = _matrix.elements[7];\n            value[_index3 + 10] = _matrix.elements[8];\n            value[_index3 + 15] = 1;\n          }\n        } else if (elementType === 'mat4') {\n          for (var _i5 = 0; _i5 < array.length; _i5++) {\n            var _index4 = _i5 * 16;\n            var _matrix2 = array[_i5];\n            for (var _i6 = 0; _i6 < _matrix2.elements.length; _i6++) {\n              value[_index4 + _i6] = _matrix2.elements[_i6];\n            }\n          }\n        } else {\n          for (var _i7 = 0; _i7 < array.length; _i7++) {\n            var _index5 = _i7 * 4;\n            var _vector = array[_i7];\n            value[_index5] = _vector.x;\n            value[_index5 + 1] = _vector.y;\n            value[_index5 + 2] = _vector.z || 0;\n            value[_index5 + 3] = _vector.w || 0;\n          }\n        }\n      }\n\n      /**\n       * Implement the value buffer creation based on the array data.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @return {null}\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var length = this.array.length;\n        var elementType = this.elementType;\n        var arrayType = Float32Array;\n        var paddedType = this.paddedType;\n        var paddedElementLength = builder.getTypeLength(paddedType);\n        if (elementType.charAt(0) === 'i') arrayType = Int32Array;\n        if (elementType.charAt(0) === 'u') arrayType = Uint32Array;\n        this.value = new arrayType(length * paddedElementLength);\n        this.bufferCount = length;\n        this.bufferType = paddedType;\n        return _superPropGet(UniformArrayNode, \"setup\", this, 3)([builder]);\n      }\n\n      /**\n       * Overwrites the default `element()` method to provide element access\n       * based on {@link module:UniformArrayNode~UniformArrayNode}.\n       *\n       * @param {IndexNode} indexNode - The index node.\n       * @return {UniformArrayElementNode}\n       */\n    }, {\n      key: \"element\",\n      value: function element(indexNode) {\n        return nodeObject(new UniformArrayElementNode(this, nodeObject(indexNode)));\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'UniformArrayNode';\n      }\n    }]);\n  }(BufferNode);\n  /**\n   * TSL function for creating an uniform array node.\n   *\n   * @function\n   * @param {Array<Any>} values - Array-like data.\n   * @param {String} nodeType - The data type of the array elements.\n   * @returns {UniformArrayNode}\n   */\n  var uniformArray = function uniformArray(values, nodeType) {\n    return nodeObject(new UniformArrayNode(values, nodeType));\n  };\n\n  //\n\n  var uniforms = function uniforms(values, nodeType) {\n    // @deprecated, r168\n\n    console.warn('TSL.UniformArrayNode: uniforms() has been renamed to uniformArray().');\n    return nodeObject(new UniformArrayNode(values, nodeType));\n  };\n\n  // TODO: Avoid duplicated code and ues only ReferenceBaseNode or ReferenceNode\n\n  /** @module ReferenceNode **/\n\n  /**\n   * This class is only relevant if the referenced property is array-like.\n   * In this case, `ReferenceElementNode` allows to refer to a specific\n   * element inside the data structure via an index.\n   *\n   * @augments ArrayElementNode\n   */\n  var ReferenceElementNode = /*#__PURE__*/function (_ArrayElementNode3) {\n    /**\n     * Constructs a new reference element node.\n     *\n     * @param {Node?} referenceNode - The reference node.\n     * @param {Node} indexNode - The index node that defines the element access.\n     */\n    function ReferenceElementNode(referenceNode, indexNode) {\n      var _this47;\n      (0, _classCallCheck2.default)(this, ReferenceElementNode);\n      _this47 = _callSuper(this, ReferenceElementNode, [referenceNode, indexNode]);\n\n      /**\n       * Similar to {@link module:ReferenceNode~ReferenceNode#reference}, an additional\n       * property references to the current node.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this47.referenceNode = referenceNode;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this47.isReferenceElementNode = true;\n      return _this47;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from\n     * the uniform type of the reference node.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(ReferenceElementNode, _ArrayElementNode3);\n    return (0, _createClass2.default)(ReferenceElementNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType() {\n        return this.referenceNode.uniformType;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var snippet = _superPropGet(ReferenceElementNode, \"generate\", this, 3)([builder]);\n        var arrayType = this.referenceNode.getNodeType();\n        var elementType = this.getNodeType();\n        return builder.format(snippet, arrayType, elementType);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ReferenceElementNode';\n      }\n    }]);\n  }(ArrayElementNode);\n  /**\n   * This type of node establishes a reference to a property of another object.\n   * In this way, the value of the node is automatically linked to the value of\n   * referenced object. Reference nodes internally represent the linked value\n   * as a uniform.\n   *\n   * @augments Node\n   */\n  var ReferenceNode = exports.ReferenceNode = /*#__PURE__*/function (_Node24) {\n    /**\n     * Constructs a new reference node.\n     *\n     * @param {String} property - The name of the property the node refers to.\n     * @param {String} uniformType - The uniform type that should be used to represent the property value.\n     * @param {Object?} [object=null] - The object the property belongs to.\n     * @param {Number?} [count=null] - When the linked property is an array-like, this parameter defines its length.\n     */\n    function ReferenceNode(property, uniformType) {\n      var _this48;\n      var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, ReferenceNode);\n      _this48 = _callSuper(this, ReferenceNode);\n\n      /**\n       * The name of the property the node refers to.\n       *\n       * @type {String}\n       */\n      _this48.property = property;\n\n      /**\n       * The uniform type that should be used to represent the property value.\n       *\n       * @type {String}\n       */\n      _this48.uniformType = uniformType;\n\n      /**\n       * The object the property belongs to.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      _this48.object = object;\n\n      /**\n       * When the linked property is an array, this parameter defines its length.\n       *\n       * @type {Number?}\n       * @default null\n       */\n      _this48.count = count;\n\n      /**\n       * The property name might have dots so nested properties can be referred.\n       * The hierarchy of the names is stored inside this array.\n       *\n       * @type {Array<String>}\n       */\n      _this48.properties = property.split('.');\n\n      /**\n       * Points to the current referred object. This property exists next to {@link module:ReferenceNode~ReferenceNode#object}\n       * since the final reference might be updated from calling code.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      _this48.reference = object;\n\n      /**\n       * The uniform node that holds the value of the reference node.\n       *\n       * @type {UniformNode}\n       * @default null\n       */\n      _this48.node = null;\n\n      /**\n       * The uniform group of the internal uniform.\n       *\n       * @type {UniformGroupNode}\n       * @default null\n       */\n      _this48.group = null;\n\n      /**\n       * An optional label of the internal uniform node.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this48.name = null;\n\n      /**\n       * Overwritten since reference nodes are updated per object.\n       *\n       * @type {String}\n       * @default 'object'\n       */\n      _this48.updateType = NodeUpdateType.OBJECT;\n      return _this48;\n    }\n\n    /**\n     * When the referred property is array-like, this method can be used\n     * to access elements via an index node.\n     *\n     * @param {IndexNode} indexNode - indexNode.\n     * @return {ReferenceElementNode} A reference to an element.\n     */\n    (0, _inherits2.default)(ReferenceNode, _Node24);\n    return (0, _createClass2.default)(ReferenceNode, [{\n      key: \"element\",\n      value: function element(indexNode) {\n        return nodeObject(new ReferenceElementNode(this, nodeObject(indexNode)));\n      }\n\n      /**\n       * Sets the uniform group for this reference node.\n       *\n       * @param {UniformGroupNode} group - The uniform group to set.\n       * @return {ReferenceNode} A reference to this node.\n       */\n    }, {\n      key: \"setGroup\",\n      value: function setGroup(group) {\n        this.group = group;\n        return this;\n      }\n\n      /**\n       * Sets the label for the internal uniform.\n       *\n       * @param {String} name - The label to set.\n       * @return {ReferenceNode} A reference to this node.\n       */\n    }, {\n      key: \"label\",\n      value: function label(name) {\n        this.name = name;\n        return this;\n      }\n\n      /**\n       * Sets the node type which automatically defines the internal\n       * uniform type.\n       *\n       * @param {String} uniformType - The type to set.\n       */\n    }, {\n      key: \"setNodeType\",\n      value: function setNodeType(uniformType) {\n        var node = null;\n        if (this.count !== null) {\n          node = buffer(null, uniformType, this.count);\n        } else if (Array.isArray(this.getValueFromReference())) {\n          node = uniformArray(null, uniformType);\n        } else if (uniformType === 'texture') {\n          node = texture(null);\n        } else if (uniformType === 'cubeTexture') {\n          node = cubeTexture(null);\n        } else {\n          node = uniform(null, uniformType);\n        }\n        if (this.group !== null) {\n          node.setGroup(this.group);\n        }\n        if (this.name !== null) node.label(this.name);\n        this.node = node.getSelf();\n      }\n\n      /**\n       * This method is overwritten since the node type is inferred from\n       * the type of the reference node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        if (this.node === null) {\n          this.updateReference(builder);\n          this.updateValue();\n        }\n        return this.node.getNodeType(builder);\n      }\n\n      /**\n       * Returns the property value from the given referred object.\n       *\n       * @param {Object} [object=this.reference] - The object to retrieve the property value from.\n       * @return {Any} The value.\n       */\n    }, {\n      key: \"getValueFromReference\",\n      value: function getValueFromReference() {\n        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.reference;\n        var properties = this.properties;\n        var value = object[properties[0]];\n        for (var i = 1; i < properties.length; i++) {\n          value = value[properties[i]];\n        }\n        return value;\n      }\n\n      /**\n       * Allows to update the reference based on the given state. The state is only\n       * evaluated {@link module:ReferenceNode~ReferenceNode#object} is not set.\n       *\n       * @param {(NodeFrame|NodeBuilder)} state - The current state.\n       * @return {Object} The updated reference.\n       */\n    }, {\n      key: \"updateReference\",\n      value: function updateReference(state) {\n        this.reference = this.object !== null ? this.object : state.object;\n        return this.reference;\n      }\n\n      /**\n       * The output of the reference node is the internal uniform node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {UniformNode} The output node.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(/* builder */\n      ) {\n        this.updateValue();\n        return this.node;\n      }\n\n      /**\n       * Overwritten to to update the internal uniform value.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        this.updateValue();\n      }\n\n      /**\n       * Retrieves the value from the referred object property and uses it\n       * to updated the internal uniform.\n       */\n    }, {\n      key: \"updateValue\",\n      value: function updateValue() {\n        if (this.node === null) this.setNodeType(this.uniformType);\n        var value = this.getValueFromReference();\n        if (Array.isArray(value)) {\n          this.node.array = value;\n        } else {\n          this.node.value = value;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ReferenceNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a reference node.\n   *\n   * @function\n   * @param {String} name - The name of the property the node refers to.\n   * @param {String} type - The uniform type that should be used to represent the property value.\n   * @param {Object} object - The object the property belongs to.\n   * @returns {ReferenceNode}\n   */\n  var reference = function reference(name, type, object) {\n    return nodeObject(new ReferenceNode(name, type, object));\n  };\n\n  /**\n   * TSL function for creating a reference node. Use this function if you want need a reference\n   * to an array-like property that should be represented as a uniform buffer.\n   *\n   * @function\n   * @param {String} name - The name of the property the node refers to.\n   * @param {String} type - The uniform type that should be used to represent the property value.\n   * @param {Number} count - The number of value inside the array-like object.\n   * @param {Object} object - An array-like object the property belongs to.\n   * @returns {ReferenceNode}\n   */\n  var referenceBuffer = function referenceBuffer(name, type, count, object) {\n    return nodeObject(new ReferenceNode(name, type, object, count));\n  };\n\n  /** @module MaterialReferenceNode **/\n\n  /**\n   * This node is a special type of reference node which is intended\n   * for linking material properties with node values.\n   * ```js\n   * const opacityNode = materialReference( 'opacity', 'float', material );\n   * ```\n   * When changing `material.opacity`, the node value of `opacityNode` will\n   * automatically be updated.\n   *\n   * @augments module:ReferenceNode~ReferenceNode\n   */\n  var MaterialReferenceNode = exports.MaterialReferenceNode = /*#__PURE__*/function (_ReferenceNode) {\n    /**\n     * Constructs a new material reference node.\n     *\n     * @param {String} property - The name of the property the node refers to.\n     * @param {String} inputType - The uniform type that should be used to represent the property value.\n     * @param {Material?} [material=null] - The material the property belongs to. When no material is set,\n     * the node refers to the material of the current rendered object.\n     */\n    function MaterialReferenceNode(property, inputType) {\n      var _this49;\n      var material = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, MaterialReferenceNode);\n      _this49 = _callSuper(this, MaterialReferenceNode, [property, inputType, material]);\n\n      /**\n       * The material the property belongs to. When no material is set,\n       * the node refers to the material of the current rendered object.\n       *\n       * @type {Material?}\n       * @default null\n       */\n      _this49.material = material;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this49.isMaterialReferenceNode = true;\n      return _this49;\n    }\n\n    /**\n     * Updates the reference based on the given state. The state is only evaluated\n     * {@link module:MaterialReferenceNode~MaterialReferenceNode#material} is not set.\n     *\n     * @param {(NodeFrame|NodeBuilder)} state - The current state.\n     * @return {Object} The updated reference.\n     */\n    (0, _inherits2.default)(MaterialReferenceNode, _ReferenceNode);\n    return (0, _createClass2.default)(MaterialReferenceNode, [{\n      key: \"updateReference\",\n      value: function updateReference(state) {\n        this.reference = this.material !== null ? this.material : state.material;\n        return this.reference;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MaterialReferenceNode';\n      }\n    }]);\n  }(ReferenceNode);\n  /**\n   * TSL function for creating a material reference node.\n   *\n   * @function\n   * @param {String} name - The name of the property the node refers to.\n   * @param {String} type - The uniform type that should be used to represent the property value.\n   * @param {Material?} [material=null] - The material the property belongs to.\n   * When no material is set, the node refers to the material of the current rendered object.\n   * @returns {MaterialReferenceNode}\n   */\n  var materialReference = function materialReference(name, type) {\n    var material = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return nodeObject(new MaterialReferenceNode(name, type, material));\n  };\n\n  /** @module Tangent **/\n\n  /**\n   * TSL object that represents the tangent attribute of the current rendered object.\n   *\n   * @type {Node<vec4>}\n   */\n  var tangentGeometry = /*@__PURE__*/Fn(function (builder) {\n    if (builder.geometry.hasAttribute('tangent') === false) {\n      builder.geometry.computeTangents();\n    }\n    return attribute('tangent', 'vec4');\n  })();\n\n  /**\n   * TSL object that represents the vertex tangent in local space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var tangentLocal = /*@__PURE__*/tangentGeometry.xyz.toVar('tangentLocal');\n\n  /**\n   * TSL object that represents the vertex tangent in view space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var tangentView = /*@__PURE__*/modelViewMatrix.mul(vec4(tangentLocal, 0)).xyz.varying('v_tangentView').normalize().toVar('tangentView');\n\n  /**\n   * TSL object that represents the vertex tangent in world space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var tangentWorld = /*@__PURE__*/tangentView.transformDirection(cameraViewMatrix).varying('v_tangentWorld').normalize().toVar('tangentWorld');\n\n  /**\n   * TSL object that represents the transformed vertex tangent in view space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var transformedTangentView = /*@__PURE__*/tangentView.toVar('transformedTangentView');\n\n  /**\n   * TSL object that represents the transformed vertex tangent in world space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var transformedTangentWorld = /*@__PURE__*/transformedTangentView.transformDirection(cameraViewMatrix).normalize().toVar('transformedTangentWorld');\n\n  /** @module Bitangent **/\n\n  var getBitangent = function getBitangent(crossNormalTangent) {\n    return crossNormalTangent.mul(tangentGeometry.w).xyz;\n  };\n\n  /**\n   * TSL object that represents the bitangent attribute of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var bitangentGeometry = /*@__PURE__*/varying(getBitangent(normalGeometry.cross(tangentGeometry)), 'v_bitangentGeometry').normalize().toVar('bitangentGeometry');\n\n  /**\n   * TSL object that represents the vertex bitangent in local space of the current rendered object.\n   *\n   * @type {Node<vec3>}\n   */\n  var bitangentLocal = /*@__PURE__*/varying(getBitangent(normalLocal.cross(tangentLocal)), 'v_bitangentLocal').normalize().toVar('bitangentLocal');\n\n  /**\n   * TSL object that represents the vertex bitangent in view space of the current rendered object.\n   *\n   * @type {Node<vec4>}\n   */\n  var bitangentView = /*@__PURE__*/varying(getBitangent(normalView.cross(tangentView)), 'v_bitangentView').normalize().toVar('bitangentView');\n\n  /**\n   * TSL object that represents the vertex bitangent in world space of the current rendered object.\n   *\n   * @type {Node<vec4>}\n   */\n  var bitangentWorld = /*@__PURE__*/varying(getBitangent(normalWorld.cross(tangentWorld)), 'v_bitangentWorld').normalize().toVar('bitangentWorld');\n\n  /**\n   * TSL object that represents the transformed vertex bitangent in view space of the current rendered object.\n   *\n   * @type {Node<vec4>}\n   */\n  var transformedBitangentView = /*@__PURE__*/getBitangent(transformedNormalView.cross(transformedTangentView)).normalize().toVar('transformedBitangentView');\n\n  /**\n   * TSL object that represents the transformed vertex bitangent in world space of the current rendered object.\n   *\n   * @type {Node<vec4>}\n   */\n  var transformedBitangentWorld = /*@__PURE__*/transformedBitangentView.transformDirection(cameraViewMatrix).normalize().toVar('transformedBitangentWorld');\n\n  /** @module AccessorsUtils **/\n\n  /**\n   * TSL object that represents the TBN matrix in view space.\n   *\n   * @type {Node<mat3>}\n   */\n  var TBNViewMatrix = /*@__PURE__*/mat3(tangentView, bitangentView, normalView);\n\n  /**\n   * TSL object that represents the parallax direction.\n   *\n   * @type {Node<mat3>}\n   */\n  var parallaxDirection = /*@__PURE__*/positionViewDirection.mul(TBNViewMatrix) /*.normalize()*/;\n\n  /**\n   * TSL function for computing parallax uv coordinates.\n   *\n   * @function\n   * @param {Node<vec2>} uv - A uv node.\n   * @param {Node<vec2>} scale - A scale node.\n   * @returns {Node<vec2>} Parallax uv coordinates.\n   */\n  var parallaxUV = function parallaxUV(uv, scale) {\n    return uv.sub(parallaxDirection.mul(scale));\n  };\n\n  /**\n   * TSL function for computing bent normals.\n   *\n   * @function\n   * @returns {Node<vec3>} Bent normals.\n   */\n  var transformedBentNormalView = /*@__PURE__*/function () {\n    // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\n\n    var bentNormal = anisotropyB.cross(positionViewDirection);\n    bentNormal = bentNormal.cross(anisotropyB).normalize();\n    bentNormal = mix(bentNormal, transformedNormalView, anisotropy.mul(roughness.oneMinus()).oneMinus().pow2().pow2()).normalize();\n    return bentNormal;\n  }();\n\n  /** @module NormalMapNode **/\n\n  // Normal Mapping Without Precomputed Tangents\n  // http://www.thetenthplanet.de/archives/1180\n\n  var perturbNormal2Arb = /*@__PURE__*/Fn(function (inputs) {\n    var eye_pos = inputs.eye_pos,\n      surf_norm = inputs.surf_norm,\n      mapN = inputs.mapN,\n      uv = inputs.uv;\n    var q0 = eye_pos.dFdx();\n    var q1 = eye_pos.dFdy();\n    var st0 = uv.dFdx();\n    var st1 = uv.dFdy();\n    var N = surf_norm; // normalized\n\n    var q1perp = q1.cross(N);\n    var q0perp = N.cross(q0);\n    var T = q1perp.mul(st0.x).add(q0perp.mul(st1.x));\n    var B = q1perp.mul(st0.y).add(q0perp.mul(st1.y));\n    var det = T.dot(T).max(B.dot(B));\n    var scale = faceDirection.mul(det.inverseSqrt());\n    return add(T.mul(mapN.x, scale), B.mul(mapN.y, scale), N.mul(mapN.z)).normalize();\n  });\n\n  /**\n   * This class can be used for applying normals maps to materials.\n   *\n   * ```js\n   * material.normalNode = normalMap( texture( normalTex ) );\n   * ```\n   *\n   * @augments TempNode\n   */\n  var NormalMapNode = exports.NormalMapNode = /*#__PURE__*/function (_TempNode11) {\n    /**\n     * Constructs a new normal map node.\n     *\n     * @param {Node} node - Represents the normal map data.\n     * @param {Node?} [scaleNode=null] - Controls the intensity of the effect.\n     */\n    function NormalMapNode(node) {\n      var _this50;\n      var scaleNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, NormalMapNode);\n      _this50 = _callSuper(this, NormalMapNode, ['vec3']);\n\n      /**\n       * Represents the normal map data.\n       *\n       * @type {Node}\n       */\n      _this50.node = node;\n\n      /**\n       * Controls the intensity of the effect.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this50.scaleNode = scaleNode;\n\n      /**\n       * The normal map type.\n       *\n       * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n       * @default TangentSpaceNormalMap\n       */\n      _this50.normalMapType = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TangentSpaceNormalMap;\n      return _this50;\n    }\n    (0, _inherits2.default)(NormalMapNode, _TempNode11);\n    return (0, _createClass2.default)(NormalMapNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var normalMapType = this.normalMapType,\n          scaleNode = this.scaleNode;\n        var normalMap = this.node.mul(2.0).sub(1.0);\n        if (scaleNode !== null) {\n          normalMap = vec3(normalMap.xy.mul(scaleNode), normalMap.z);\n        }\n        var outputNode = null;\n        if (normalMapType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ObjectSpaceNormalMap) {\n          outputNode = transformNormalToView(normalMap);\n        } else if (normalMapType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").TangentSpaceNormalMap) {\n          var tangent = builder.hasGeometryAttribute('tangent');\n          if (tangent === true) {\n            outputNode = TBNViewMatrix.mul(normalMap).normalize();\n          } else {\n            outputNode = perturbNormal2Arb({\n              eye_pos: positionView,\n              surf_norm: normalView,\n              mapN: normalMap,\n              uv: uv()\n            });\n          }\n        }\n        return outputNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'NormalMapNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a normal map node.\n   *\n   * @function\n   * @param {Node} node - Represents the normal map data.\n   * @param {Node?} [scaleNode=null] - Controls the intensity of the effect.\n   * @returns {NormalMapNode}\n   */\n  var normalMap = /*@__PURE__*/nodeProxy(NormalMapNode);\n\n  /** @module BumpMapNode **/\n\n  // Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n  // https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\n  var dHdxy_fwd = Fn(function (_ref31) {\n    var textureNode = _ref31.textureNode,\n      bumpScale = _ref31.bumpScale;\n    // It's used to preserve the same TextureNode instance\n    var sampleTexture = function sampleTexture(callback) {\n      return textureNode.cache().context({\n        getUV: function getUV(texNode) {\n          return callback(texNode.uvNode || uv());\n        },\n        forceUVContext: true\n      });\n    };\n    var Hll = float(sampleTexture(function (uvNode) {\n      return uvNode;\n    }));\n    return vec2(float(sampleTexture(function (uvNode) {\n      return uvNode.add(uvNode.dFdx());\n    })).sub(Hll), float(sampleTexture(function (uvNode) {\n      return uvNode.add(uvNode.dFdy());\n    })).sub(Hll)).mul(bumpScale);\n  });\n\n  // Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n  var perturbNormalArb = Fn(function (inputs) {\n    var surf_pos = inputs.surf_pos,\n      surf_norm = inputs.surf_norm,\n      dHdxy = inputs.dHdxy;\n\n    // normalize is done to ensure that the bump map looks the same regardless of the texture's scale\n    var vSigmaX = surf_pos.dFdx().normalize();\n    var vSigmaY = surf_pos.dFdy().normalize();\n    var vN = surf_norm; // normalized\n\n    var R1 = vSigmaY.cross(vN);\n    var R2 = vN.cross(vSigmaX);\n    var fDet = vSigmaX.dot(R1).mul(faceDirection);\n    var vGrad = fDet.sign().mul(dHdxy.x.mul(R1).add(dHdxy.y.mul(R2)));\n    return fDet.abs().mul(surf_norm).sub(vGrad).normalize();\n  });\n\n  /**\n   * This class can be used for applying bump maps to materials.\n   *\n   * ```js\n   * material.normalNode = bumpMap( texture( bumpTex ) );\n   * ```\n   *\n   * @augments TempNode\n   */\n  var BumpMapNode = exports.BumpMapNode = /*#__PURE__*/function (_TempNode12) {\n    /**\n     * Constructs a new bump map node.\n     *\n     * @param {Node} textureNode - Represents the bump map data.\n     * @param {Node?} [scaleNode=null] - Controls the intensity of the bump effect.\n     */\n    function BumpMapNode(textureNode) {\n      var _this51;\n      var scaleNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, BumpMapNode);\n      _this51 = _callSuper(this, BumpMapNode, ['vec3']);\n\n      /**\n       * Represents the bump map data.\n       *\n       * @type {Node}\n       */\n      _this51.textureNode = textureNode;\n\n      /**\n       * Controls the intensity of the bump effect.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this51.scaleNode = scaleNode;\n      return _this51;\n    }\n    (0, _inherits2.default)(BumpMapNode, _TempNode12);\n    return (0, _createClass2.default)(BumpMapNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\n        var dHdxy = dHdxy_fwd({\n          textureNode: this.textureNode,\n          bumpScale: bumpScale\n        });\n        return perturbNormalArb({\n          surf_pos: positionView,\n          surf_norm: normalView,\n          dHdxy: dHdxy\n        });\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BumpMapNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a bump map node.\n   *\n   * @function\n   * @param {Node} textureNode - Represents the bump map data.\n   * @param {Node?} [scaleNode=null] - Controls the intensity of the bump effect.\n   * @returns {BumpMapNode}\n   */\n  var bumpMap = /*@__PURE__*/nodeProxy(BumpMapNode);\n\n  /** @module MaterialNode **/\n\n  var _propertyCache = new Map();\n\n  /**\n   * This class should simplify the node access to material properties.\n   * It internal uses reference nodes to make sure  changes to material\n   * properties are automatically reflected to predefined TSL objects\n   * like e.g. `materialColor`.\n   *\n   * @augments Node\n   */\n  var MaterialNode = exports.MaterialNode = /*#__PURE__*/function (_Node25) {\n    /**\n     * Constructs a new material node.\n     *\n     * @param {String} scope - The scope defines what kind of material property is referred by the node.\n     */\n    function MaterialNode(scope) {\n      var _this52;\n      (0, _classCallCheck2.default)(this, MaterialNode);\n      _this52 = _callSuper(this, MaterialNode);\n\n      /**\n       * The scope defines what material property is referred by the node.\n       *\n       * @type {String}\n       */\n      _this52.scope = scope;\n      return _this52;\n    }\n\n    /**\n     * Returns a cached reference node for the given property and type.\n     *\n     * @param {String} property - The name of the material property.\n     * @param {String} type - The uniform type of the property.\n     * @return {MaterialReferenceNode} A material reference node representing the property access.\n     */\n    (0, _inherits2.default)(MaterialNode, _Node25);\n    return (0, _createClass2.default)(MaterialNode, [{\n      key: \"getCache\",\n      value: function getCache(property, type) {\n        var node = _propertyCache.get(property);\n        if (node === undefined) {\n          node = materialReference(property, type);\n          _propertyCache.set(property, node);\n        }\n        return node;\n      }\n\n      /**\n       * Returns a float-typed material reference node for the given property name.\n       *\n       * @param {String} property - The name of the material property.\n       * @return {MaterialReferenceNode<float>} A material reference node representing the property access.\n       */\n    }, {\n      key: \"getFloat\",\n      value: function getFloat(property) {\n        return this.getCache(property, 'float');\n      }\n\n      /**\n       * Returns a color-typed material reference node for the given property name.\n       *\n       * @param {String} property - The name of the material property.\n       * @return {MaterialReferenceNode<color>} A material reference node representing the property access.\n       */\n    }, {\n      key: \"getColor\",\n      value: function getColor(property) {\n        return this.getCache(property, 'color');\n      }\n\n      /**\n       * Returns a texture-typed material reference node for the given property name.\n       *\n       * @param {String} property - The name of the material property.\n       * @return {MaterialReferenceNode} A material reference node representing the property access.\n       */\n    }, {\n      key: \"getTexture\",\n      value: function getTexture(property) {\n        return this.getCache(property === 'map' ? 'map' : property + 'Map', 'texture');\n      }\n\n      /**\n       * The node setup is done depending on the selected scope. Multiple material properties\n       * might be grouped into a single node composition if they logically belong together.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node} The node representing the selected scope.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var material = builder.context.material;\n        var scope = this.scope;\n        var node = null;\n        if (scope === MaterialNode.COLOR) {\n          var colorNode = material.color !== undefined ? this.getColor(scope) : vec3();\n          if (material.map && material.map.isTexture === true) {\n            node = colorNode.mul(this.getTexture('map'));\n          } else {\n            node = colorNode;\n          }\n        } else if (scope === MaterialNode.OPACITY) {\n          var opacityNode = this.getFloat(scope);\n          if (material.alphaMap && material.alphaMap.isTexture === true) {\n            node = opacityNode.mul(this.getTexture('alpha'));\n          } else {\n            node = opacityNode;\n          }\n        } else if (scope === MaterialNode.SPECULAR_STRENGTH) {\n          if (material.specularMap && material.specularMap.isTexture === true) {\n            node = this.getTexture('specular').r;\n          } else {\n            node = float(1);\n          }\n        } else if (scope === MaterialNode.SPECULAR_INTENSITY) {\n          var specularIntensityNode = this.getFloat(scope);\n          if (material.specularIntensityMap && material.specularIntensityMap.isTexture === true) {\n            node = specularIntensityNode.mul(this.getTexture(scope).a);\n          } else {\n            node = specularIntensityNode;\n          }\n        } else if (scope === MaterialNode.SPECULAR_COLOR) {\n          var specularColorNode = this.getColor(scope);\n          if (material.specularColorMap && material.specularColorMap.isTexture === true) {\n            node = specularColorNode.mul(this.getTexture(scope).rgb);\n          } else {\n            node = specularColorNode;\n          }\n        } else if (scope === MaterialNode.ROUGHNESS) {\n          // TODO: cleanup similar branches\n\n          var roughnessNode = this.getFloat(scope);\n          if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n            node = roughnessNode.mul(this.getTexture(scope).g);\n          } else {\n            node = roughnessNode;\n          }\n        } else if (scope === MaterialNode.METALNESS) {\n          var metalnessNode = this.getFloat(scope);\n          if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n            node = metalnessNode.mul(this.getTexture(scope).b);\n          } else {\n            node = metalnessNode;\n          }\n        } else if (scope === MaterialNode.EMISSIVE) {\n          var emissiveIntensityNode = this.getFloat('emissiveIntensity');\n          var emissiveNode = this.getColor(scope).mul(emissiveIntensityNode);\n          if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n            node = emissiveNode.mul(this.getTexture(scope));\n          } else {\n            node = emissiveNode;\n          }\n        } else if (scope === MaterialNode.NORMAL) {\n          if (material.normalMap) {\n            node = normalMap(this.getTexture('normal'), this.getCache('normalScale', 'vec2'));\n            node.normalMapType = material.normalMapType;\n          } else if (material.bumpMap) {\n            node = bumpMap(this.getTexture('bump').r, this.getFloat('bumpScale'));\n          } else {\n            node = normalView;\n          }\n        } else if (scope === MaterialNode.CLEARCOAT) {\n          var clearcoatNode = this.getFloat(scope);\n          if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {\n            node = clearcoatNode.mul(this.getTexture(scope).r);\n          } else {\n            node = clearcoatNode;\n          }\n        } else if (scope === MaterialNode.CLEARCOAT_ROUGHNESS) {\n          var clearcoatRoughnessNode = this.getFloat(scope);\n          if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {\n            node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);\n          } else {\n            node = clearcoatRoughnessNode;\n          }\n        } else if (scope === MaterialNode.CLEARCOAT_NORMAL) {\n          if (material.clearcoatNormalMap) {\n            node = normalMap(this.getTexture(scope), this.getCache(scope + 'Scale', 'vec2'));\n          } else {\n            node = normalView;\n          }\n        } else if (scope === MaterialNode.SHEEN) {\n          var sheenNode = this.getColor('sheenColor').mul(this.getFloat('sheen')); // Move this mul() to CPU\n\n          if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {\n            node = sheenNode.mul(this.getTexture('sheenColor').rgb);\n          } else {\n            node = sheenNode;\n          }\n        } else if (scope === MaterialNode.SHEEN_ROUGHNESS) {\n          var sheenRoughnessNode = this.getFloat(scope);\n          if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {\n            node = sheenRoughnessNode.mul(this.getTexture(scope).a);\n          } else {\n            node = sheenRoughnessNode;\n          }\n          node = node.clamp(0.07, 1.0);\n        } else if (scope === MaterialNode.ANISOTROPY) {\n          if (material.anisotropyMap && material.anisotropyMap.isTexture === true) {\n            var anisotropyPolar = this.getTexture(scope);\n            var anisotropyMat = mat2(materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x);\n            node = anisotropyMat.mul(anisotropyPolar.rg.mul(2.0).sub(vec2(1.0)).normalize().mul(anisotropyPolar.b));\n          } else {\n            node = materialAnisotropyVector;\n          }\n        } else if (scope === MaterialNode.IRIDESCENCE_THICKNESS) {\n          var iridescenceThicknessMaximum = reference('1', 'float', material.iridescenceThicknessRange);\n          if (material.iridescenceThicknessMap) {\n            var iridescenceThicknessMinimum = reference('0', 'float', material.iridescenceThicknessRange);\n            node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);\n          } else {\n            node = iridescenceThicknessMaximum;\n          }\n        } else if (scope === MaterialNode.TRANSMISSION) {\n          var transmissionNode = this.getFloat(scope);\n          if (material.transmissionMap) {\n            node = transmissionNode.mul(this.getTexture(scope).r);\n          } else {\n            node = transmissionNode;\n          }\n        } else if (scope === MaterialNode.THICKNESS) {\n          var thicknessNode = this.getFloat(scope);\n          if (material.thicknessMap) {\n            node = thicknessNode.mul(this.getTexture(scope).g);\n          } else {\n            node = thicknessNode;\n          }\n        } else if (scope === MaterialNode.IOR) {\n          node = this.getFloat(scope);\n        } else if (scope === MaterialNode.LIGHT_MAP) {\n          node = this.getTexture(scope).rgb.mul(this.getFloat('lightMapIntensity'));\n        } else if (scope === MaterialNode.AO) {\n          node = this.getTexture(scope).r.sub(1.0).mul(this.getFloat('aoMapIntensity')).add(1.0);\n        } else {\n          var outputType = this.getNodeType(builder);\n          node = this.getCache(scope, outputType);\n        }\n        return node;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MaterialNode';\n      }\n    }]);\n  }(Node);\n  MaterialNode.ALPHA_TEST = 'alphaTest';\n  MaterialNode.COLOR = 'color';\n  MaterialNode.OPACITY = 'opacity';\n  MaterialNode.SHININESS = 'shininess';\n  MaterialNode.SPECULAR = 'specular';\n  MaterialNode.SPECULAR_STRENGTH = 'specularStrength';\n  MaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\n  MaterialNode.SPECULAR_COLOR = 'specularColor';\n  MaterialNode.REFLECTIVITY = 'reflectivity';\n  MaterialNode.ROUGHNESS = 'roughness';\n  MaterialNode.METALNESS = 'metalness';\n  MaterialNode.NORMAL = 'normal';\n  MaterialNode.CLEARCOAT = 'clearcoat';\n  MaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\n  MaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\n  MaterialNode.EMISSIVE = 'emissive';\n  MaterialNode.ROTATION = 'rotation';\n  MaterialNode.SHEEN = 'sheen';\n  MaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\n  MaterialNode.ANISOTROPY = 'anisotropy';\n  MaterialNode.IRIDESCENCE = 'iridescence';\n  MaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\n  MaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\n  MaterialNode.IOR = 'ior';\n  MaterialNode.TRANSMISSION = 'transmission';\n  MaterialNode.THICKNESS = 'thickness';\n  MaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\n  MaterialNode.ATTENUATION_COLOR = 'attenuationColor';\n  MaterialNode.LINE_SCALE = 'scale';\n  MaterialNode.LINE_DASH_SIZE = 'dashSize';\n  MaterialNode.LINE_GAP_SIZE = 'gapSize';\n  MaterialNode.LINE_WIDTH = 'linewidth';\n  MaterialNode.LINE_DASH_OFFSET = 'dashOffset';\n  MaterialNode.POINT_WIDTH = 'pointWidth';\n  MaterialNode.DISPERSION = 'dispersion';\n  MaterialNode.LIGHT_MAP = 'light';\n  MaterialNode.AO = 'ao';\n\n  /**\n   * TSL object that represents alpha test of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialAlphaTest = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\n\n  /**\n   * TSL object that represents the diffuse color of the current material.\n   * The value is composed via `color` * `map`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialColor = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.COLOR);\n\n  /**\n   * TSL object that represents the shininess of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialShininess = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SHININESS);\n\n  /**\n   * TSL object that represents the emissive color of the current material.\n   * The value is composed via `emissive` * `emissiveIntensity` * `emissiveMap`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialEmissive = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\n\n  /**\n   * TSL object that represents the opacity of the current material.\n   * The value is composed via `opacity` * `alphaMap`.\n   *\n   * @type {Node<float>}\n   */\n  var materialOpacity = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.OPACITY);\n\n  /**\n   * TSL object that represents the specular of the current material.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialSpecular = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SPECULAR);\n\n  /**\n   * TSL object that represents the specular intensity of the current material.\n   * The value is composed via `specularIntensity` * `specularMap.a`.\n   *\n   * @type {Node<float>}\n   */\n  var materialSpecularIntensity = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SPECULAR_INTENSITY);\n\n  /**\n   * TSL object that represents the specular color of the current material.\n   * The value is composed via `specularColor` * `specularMap.rgb`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialSpecularColor = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\n\n  /**\n   * TSL object that represents the specular strength of the current material.\n   * The value is composed via `specularMap.r`.\n   *\n   * @type {Node<float>}\n   */\n  var materialSpecularStrength = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);\n\n  /**\n   * TSL object that represents the reflectivity of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialReflectivity = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\n\n  /**\n   * TSL object that represents the roughness of the current material.\n   * The value is composed via `roughness` * `roughnessMap.g`\n   *\n   * @type {Node<float>}\n   */\n  var materialRoughness = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\n\n  /**\n   * TSL object that represents the metalness of the current material.\n   * The value is composed via `metalness` * `metalnessMap.b`\n   *\n   * @type {Node<float>}\n   */\n  var materialMetalness = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.METALNESS);\n\n  /**\n   * TSL object that represents the normal of the current material.\n   * The value will be either `normalMap` * `normalScale`, `bumpMap` * `bumpScale` or `normalView`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialNormal = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.NORMAL).context({\n    getUV: null\n  });\n\n  /**\n   * TSL object that represents the clearcoat of the current material.\n   * The value is composed via `clearcoat` * `clearcoatMap.r`\n   *\n   * @type {Node<float>}\n   */\n  var materialClearcoat = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);\n\n  /**\n   * TSL object that represents the clearcoat roughness of the current material.\n   * The value is composed via `clearcoatRoughness` * `clearcoatRoughnessMap.r`\n   *\n   * @type {Node<float>}\n   */\n  var materialClearcoatRoughness = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);\n\n  /**\n   * TSL object that represents the clearcoat normal of the current material.\n   * The value will be either `clearcoatNormalMap` or `normalView`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialClearcoatNormal = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL).context({\n    getUV: null\n  });\n\n  /**\n   * TSL object that represents the rotation of the current sprite material.\n   *\n   * @type {Node<float>}\n   */\n  var materialRotation = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.ROTATION);\n\n  /**\n   * TSL object that represents the sheen color of the current material.\n   * The value is composed via `sheen` * `sheenColor` * `sheenColorMap`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialSheen = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SHEEN);\n\n  /**\n   * TSL object that represents the sheen roughness of the current material.\n   * The value is composed via `sheenRoughness` * `sheenRoughnessMap.a` .\n   *\n   * @type {Node<float>}\n   */\n  var materialSheenRoughness = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);\n\n  /**\n   * TSL object that represents the anisotropy of the current material.\n   *\n   * @type {Node<vec2>}\n   */\n  var materialAnisotropy = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.ANISOTROPY);\n\n  /**\n   * TSL object that represents the iridescence of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialIridescence = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);\n\n  /**\n   * TSL object that represents the iridescence IOR of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialIridescenceIOR = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);\n\n  /**\n   * TSL object that represents the iridescence thickness of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialIridescenceThickness = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);\n\n  /**\n   * TSL object that represents the transmission of the current material.\n   * The value is composed via `transmission` * `transmissionMap.r`.\n   *\n   * @type {Node<float>}\n   */\n  var materialTransmission = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.TRANSMISSION);\n\n  /**\n   * TSL object that represents the thickness of the current material.\n   * The value is composed via `thickness` * `thicknessMap.g`.\n   *\n   * @type {Node<float>}\n   */\n  var materialThickness = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.THICKNESS);\n\n  /**\n   * TSL object that represents the IOR of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialIOR = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.IOR);\n\n  /**\n   * TSL object that represents the attenuation distance of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialAttenuationDistance = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_DISTANCE);\n\n  /**\n   * TSL object that represents the attenuation color of the current material.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialAttenuationColor = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_COLOR);\n\n  /**\n   * TSL object that represents the scale of the current dashed line material.\n   *\n   * @type {Node<float>}\n   */\n  var materialLineScale = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);\n\n  /**\n   * TSL object that represents the dash size of the current dashed line material.\n   *\n   * @type {Node<float>}\n   */\n  var materialLineDashSize = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);\n\n  /**\n   * TSL object that represents the gap size of the current dashed line material.\n   *\n   * @type {Node<float>}\n   */\n  var materialLineGapSize = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);\n\n  /**\n   * TSL object that represents the line width of the current line material.\n   *\n   * @type {Node<float>}\n   */\n  var materialLineWidth = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);\n\n  /**\n   * TSL object that represents the dash offset of the current line material.\n   *\n   * @type {Node<float>}\n   */\n  var materialLineDashOffset = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);\n\n  /**\n   * TSL object that represents the point width of the current points material.\n   *\n   * @type {Node<float>}\n   */\n  var materialPointWidth = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.POINT_WIDTH);\n\n  /**\n   * TSL object that represents the dispersion of the current material.\n   *\n   * @type {Node<float>}\n   */\n  var materialDispersion = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.DISPERSION);\n\n  /**\n   * TSL object that represents the light map of the current material.\n   * The value is composed via `lightMapIntensity` * `lightMap.rgb`.\n   *\n   * @type {Node<vec3>}\n   */\n  var materialLightMap = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.LIGHT_MAP);\n\n  /**\n   * TSL object that represents the ambient occlusion map of the current material.\n   * The value is composed via `aoMap.r` - 1 * `aoMapIntensity` + 1.\n   *\n   * @type {Node<float>}\n   */\n  var materialAO = /*@__PURE__*/nodeImmutable(MaterialNode, MaterialNode.AO);\n\n  /**\n   * TSL object that represents the anisotropy vector of the current material.\n   *\n   * @type {Node<vec2>}\n   */\n  var materialAnisotropyVector = /*@__PURE__*/uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)()).onReference(function (frame) {\n    return frame.material;\n  }).onRenderUpdate(function (_ref32) {\n    var material = _ref32.material;\n    this.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));\n  });\n\n  /** @module ModelViewProjectionNode **/\n\n  /**\n   * TSL object that represents the position in clip space after the model-view-projection transform of the current rendered object.\n   *\n   * @type {VaryingNode<vec4>}\n   */\n  var modelViewProjection = /*@__PURE__*/Fn(function (builder) {\n    return builder.context.setupModelViewProjection();\n  }, 'vec4').once()().varying('v_modelViewProjection');\n\n  /** @module IndexNode **/\n\n  /**\n   * This class represents shader indices of different types. The following predefined node\n   * objects cover frequent use cases:\n   *\n   * - `vertexIndex`: The index of a vertex within a mesh.\n   * - `instanceIndex`: The index of either a mesh instance or an invocation of a compute shader.\n   * - `drawIndex`: The index of a draw call.\n   * - `invocationLocalIndex`: The index of a compute invocation within the scope of a workgroup load.\n   * - `invocationSubgroupIndex`: The index of a compute invocation within the scope of a subgroup.\n   * - `subgroupIndex`: The index of the subgroup the current compute invocation belongs to.\n   *\n   * @augments Node\n   */\n  var IndexNode = exports.IndexNode = /*#__PURE__*/function (_Node26) {\n    /**\n     * Constructs a new index node.\n     *\n     * @param {('vertex'|'instance'|'subgroup'|'invocationLocal'|'invocationSubgroup'|'draw')} scope - The scope of the index node.\n     */\n    function IndexNode(scope) {\n      var _this53;\n      (0, _classCallCheck2.default)(this, IndexNode);\n      _this53 = _callSuper(this, IndexNode, ['uint']);\n\n      /**\n       * The scope of the index node.\n       *\n       * @type {String}\n       */\n      _this53.scope = scope;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this53.isIndexNode = true;\n      return _this53;\n    }\n    (0, _inherits2.default)(IndexNode, _Node26);\n    return (0, _createClass2.default)(IndexNode, [{\n      key: \"generate\",\n      value: function generate(builder) {\n        var nodeType = this.getNodeType(builder);\n        var scope = this.scope;\n        var propertyName;\n        if (scope === IndexNode.VERTEX) {\n          propertyName = builder.getVertexIndex();\n        } else if (scope === IndexNode.INSTANCE) {\n          propertyName = builder.getInstanceIndex();\n        } else if (scope === IndexNode.DRAW) {\n          propertyName = builder.getDrawIndex();\n        } else if (scope === IndexNode.INVOCATION_LOCAL) {\n          propertyName = builder.getInvocationLocalIndex();\n        } else if (scope === IndexNode.INVOCATION_SUBGROUP) {\n          propertyName = builder.getInvocationSubgroupIndex();\n        } else if (scope === IndexNode.SUBGROUP) {\n          propertyName = builder.getSubgroupIndex();\n        } else {\n          throw new Error('THREE.IndexNode: Unknown scope: ' + scope);\n        }\n        var output;\n        if (builder.shaderStage === 'vertex' || builder.shaderStage === 'compute') {\n          output = propertyName;\n        } else {\n          var nodeVarying = varying(this);\n          output = nodeVarying.build(builder, nodeType);\n        }\n        return output;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'IndexNode';\n      }\n    }]);\n  }(Node);\n  IndexNode.VERTEX = 'vertex';\n  IndexNode.INSTANCE = 'instance';\n  IndexNode.SUBGROUP = 'subgroup';\n  IndexNode.INVOCATION_LOCAL = 'invocationLocal';\n  IndexNode.INVOCATION_SUBGROUP = 'invocationSubgroup';\n  IndexNode.DRAW = 'draw';\n\n  /**\n   * TSL object that represents the index of a vertex within a mesh.\n   *\n   * @type {IndexNode}\n   */\n  var vertexIndex = /*@__PURE__*/nodeImmutable(IndexNode, IndexNode.VERTEX);\n\n  /**\n   * TSL object that represents the index of either a mesh instance or an invocation of a compute shader.\n   *\n   * @type {IndexNode}\n   */\n  var instanceIndex = /*@__PURE__*/nodeImmutable(IndexNode, IndexNode.INSTANCE);\n\n  /**\n   * TSL object that represents the index of the subgroup the current compute invocation belongs to.\n   *\n   * @type {IndexNode}\n   */\n  var subgroupIndex = /*@__PURE__*/nodeImmutable(IndexNode, IndexNode.SUBGROUP);\n\n  /**\n   * TSL object that represents the index of a compute invocation within the scope of a subgroup.\n   *\n   * @type {IndexNode}\n   */\n  var invocationSubgroupIndex = /*@__PURE__*/nodeImmutable(IndexNode, IndexNode.INVOCATION_SUBGROUP);\n\n  /**\n   * TSL object that represents the index of a compute invocation within the scope of a workgroup load.\n   *\n   * @type {IndexNode}\n   */\n  var invocationLocalIndex = /*@__PURE__*/nodeImmutable(IndexNode, IndexNode.INVOCATION_LOCAL);\n\n  /**\n   * TSL object that represents the index of a draw call.\n   *\n   * @type {IndexNode}\n   */\n  var drawIndex = /*@__PURE__*/nodeImmutable(IndexNode, IndexNode.DRAW);\n\n  /** @module InstanceNode **/\n\n  /**\n   * This node implements the vertex shader logic which is required\n   * when rendering 3D objects via instancing. The code makes sure\n   * vertex positions, normals and colors can be modified via instanced\n   * data.\n   *\n   * @augments Node\n   */\n  var InstanceNode = exports.InstanceNode = /*#__PURE__*/function (_Node27) {\n    /**\n     * Constructs a new instance node.\n     *\n     * @param {Number} count - The number of instances.\n     * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.\n     * @param {InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.\n     */\n    function InstanceNode(count, instanceMatrix, instanceColor) {\n      var _this54;\n      (0, _classCallCheck2.default)(this, InstanceNode);\n      _this54 = _callSuper(this, InstanceNode, ['void']);\n\n      /**\n       * The number of instances.\n       *\n       * @type {Number}\n       */\n      _this54.count = count;\n\n      /**\n       * Instanced buffer attribute representing the transformation of instances.\n       *\n       * @type {InstancedBufferAttribute}\n       */\n      _this54.instanceMatrix = instanceMatrix;\n\n      /**\n       * Instanced buffer attribute representing the color of instances.\n       *\n       * @type {InstancedBufferAttribute}\n       */\n      _this54.instanceColor = instanceColor;\n\n      /**\n       * The node that represents the instance matrix data.\n       *\n       * @type {Node}\n       */\n      _this54.instanceMatrixNode = null;\n\n      /**\n       * The node that represents the instance color data.\n       *\n       * @type {Node}\n       */\n      _this54.instanceColorNode = null;\n\n      /**\n       * The update type is set to `frame` since an update\n       * of instanced buffer data must be checked per frame.\n       *\n       * @type {String}\n       * @default 'frame'\n       */\n      _this54.updateType = NodeUpdateType.FRAME;\n\n      /**\n       * A reference to a buffer that is used by `instanceMatrixNode`.\n       *\n       * @type {InstancedInterleavedBuffer}\n       */\n      _this54.buffer = null;\n\n      /**\n       * A reference to a buffer that is used by `instanceColorNode`.\n       *\n       * @type {InstancedInterleavedBuffer}\n       */\n      _this54.bufferColor = null;\n      return _this54;\n    }\n\n    /**\n     * Setups the internal buffers and nodes and assigns the transformed vertex data\n     * to predefined node variables for accumulation. That follows the same patterns\n     * like with morph and skinning nodes.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(InstanceNode, _Node27);\n    return (0, _createClass2.default)(InstanceNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var count = this.count,\n          instanceMatrix = this.instanceMatrix,\n          instanceColor = this.instanceColor;\n        var instanceMatrixNode = this.instanceMatrixNode,\n          instanceColorNode = this.instanceColorNode;\n        if (instanceMatrixNode === null) {\n          // Both WebGPU and WebGL backends have UBO max limited to 64kb. Matrix count number bigger than 1000 ( 16 * 4 * 1000 = 64kb ) will fallback to attribute.\n\n          if (count <= 1000) {\n            instanceMatrixNode = buffer(instanceMatrix.array, 'mat4', Math.max(count, 1)).element(instanceIndex);\n          } else {\n            var _buffer = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedInterleavedBuffer)(instanceMatrix.array, 16, 1);\n            this.buffer = _buffer;\n            var bufferFn = instanceMatrix.usage === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\n            var instanceBuffers = [\n            // F.Signature -> bufferAttribute( array, type, stride, offset )\n            bufferFn(_buffer, 'vec4', 16, 0), bufferFn(_buffer, 'vec4', 16, 4), bufferFn(_buffer, 'vec4', 16, 8), bufferFn(_buffer, 'vec4', 16, 12)];\n            instanceMatrixNode = mat4.apply(void 0, instanceBuffers);\n          }\n          this.instanceMatrixNode = instanceMatrixNode;\n        }\n        if (instanceColor && instanceColorNode === null) {\n          var _buffer2 = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedBufferAttribute)(instanceColor.array, 3);\n          var _bufferFn = instanceColor.usage === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\n          this.bufferColor = _buffer2;\n          instanceColorNode = vec3(_bufferFn(_buffer2, 'vec3', 3, 0));\n          this.instanceColorNode = instanceColorNode;\n        }\n\n        // POSITION\n\n        var instancePosition = instanceMatrixNode.mul(positionLocal).xyz;\n        positionLocal.assign(instancePosition);\n\n        // NORMAL\n\n        if (builder.hasGeometryAttribute('normal')) {\n          var instanceNormal = transformNormal(normalLocal, instanceMatrixNode);\n\n          // ASSIGNS\n\n          normalLocal.assign(instanceNormal);\n        }\n\n        // COLOR\n\n        if (this.instanceColorNode !== null) {\n          varyingProperty('vec3', 'vInstanceColor').assign(this.instanceColorNode);\n        }\n      }\n\n      /**\n       * Checks if the internal buffers required an update.\n       *\n       * @param {NodeFrame} frame - The current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        if (this.instanceMatrix.usage !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage && this.buffer !== null && this.instanceMatrix.version !== this.buffer.version) {\n          this.buffer.version = this.instanceMatrix.version;\n        }\n        if (this.instanceColor && this.instanceColor.usage !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage && this.bufferColor !== null && this.instanceColor.version !== this.bufferColor.version) {\n          this.bufferColor.version = this.instanceColor.version;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'InstanceNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating an instance node.\n   *\n   * @function\n   * @param {Number} count - The number of instances.\n   * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.\n   * @param {InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.\n   * @returns {InstanceNode}\n   */\n  var instance = /*@__PURE__*/nodeProxy(InstanceNode);\n\n  /** @module InstancedMeshNode **/\n\n  /**\n   * This is a special version of `InstanceNode` which requires the usage of {@link InstancedMesh}.\n   * It allows an easier setup of the instance node.\n   *\n   * @augments module:InstanceNode~InstanceNode\n   */\n  var InstancedMeshNode = exports.InstancedMeshNode = /*#__PURE__*/function (_InstanceNode) {\n    /**\n     * Constructs a new instanced mesh node.\n     *\n     * @param {InstancedMesh} instancedMesh - The instanced mesh.\n     */\n    function InstancedMeshNode(instancedMesh) {\n      var _this55;\n      (0, _classCallCheck2.default)(this, InstancedMeshNode);\n      var count = instancedMesh.count,\n        instanceMatrix = instancedMesh.instanceMatrix,\n        instanceColor = instancedMesh.instanceColor;\n      _this55 = _callSuper(this, InstancedMeshNode, [count, instanceMatrix, instanceColor]);\n\n      /**\n       * A reference to the instanced mesh.\n       *\n       * @type {InstancedMesh}\n       */\n      _this55.instancedMesh = instancedMesh;\n      return _this55;\n    }\n    (0, _inherits2.default)(InstancedMeshNode, _InstanceNode);\n    return (0, _createClass2.default)(InstancedMeshNode, null, [{\n      key: \"type\",\n      get: function get() {\n        return 'InstancedMeshNode';\n      }\n    }]);\n  }(InstanceNode);\n  /**\n   * TSL function for creating an instanced mesh node.\n   *\n   * @function\n   * @param {InstancedMesh} instancedMesh - The instancedMesh.\n   * @returns {InstancedMeshNode}\n   */\n  var instancedMesh = /*@__PURE__*/nodeProxy(InstancedMeshNode);\n\n  /** @module BatchNode **/\n\n  /**\n   * This node implements the vertex shader logic which is required\n   * when rendering 3D objects via batching. `BatchNode` must be used\n   * with instances of {@link BatchedMesh}.\n   *\n   * @augments Node\n   */\n  var BatchNode = exports.BatchNode = /*#__PURE__*/function (_Node28) {\n    /**\n     * Constructs a new batch node.\n     *\n     * @param {BatchedMesh} batchMesh - A reference to batched mesh.\n     */\n    function BatchNode(batchMesh) {\n      var _this56;\n      (0, _classCallCheck2.default)(this, BatchNode);\n      _this56 = _callSuper(this, BatchNode, ['void']);\n\n      /**\n       * A reference to batched mesh.\n       *\n       * @type {BatchedMesh}\n       */\n      _this56.batchMesh = batchMesh;\n\n      /**\n       * The batching index node.\n       *\n       * @type {IndexNode?}\n       * @default null\n       */\n      _this56.batchingIdNode = null;\n      return _this56;\n    }\n\n    /**\n     * Setups the internal buffers and nodes and assigns the transformed vertex data\n     * to predefined node variables for accumulation. That follows the same patterns\n     * like with morph and skinning nodes.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(BatchNode, _Node28);\n    return (0, _createClass2.default)(BatchNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this57 = this;\n        if (this.batchingIdNode === null) {\n          if (builder.getDrawIndex() === null) {\n            this.batchingIdNode = instanceIndex;\n          } else {\n            this.batchingIdNode = drawIndex;\n          }\n        }\n        var getIndirectIndex = Fn(function (_ref33) {\n          var _ref34 = (0, _slicedToArray2.default)(_ref33, 1),\n            id = _ref34[0];\n          var size = textureSize(textureLoad(_this57.batchMesh._indirectTexture), 0);\n          var x = int(id).modInt(int(size));\n          var y = int(id).div(int(size));\n          return textureLoad(_this57.batchMesh._indirectTexture, ivec2(x, y)).x;\n        }).setLayout({\n          name: 'getIndirectIndex',\n          type: 'uint',\n          inputs: [{\n            name: 'id',\n            type: 'int'\n          }]\n        });\n        var indirectId = getIndirectIndex(int(this.batchingIdNode));\n        var matricesTexture = this.batchMesh._matricesTexture;\n        var size = textureSize(textureLoad(matricesTexture), 0);\n        var j = float(indirectId).mul(4).toInt().toVar();\n        var x = j.modInt(size);\n        var y = j.div(int(size));\n        var batchingMatrix = mat4(textureLoad(matricesTexture, ivec2(x, y)), textureLoad(matricesTexture, ivec2(x.add(1), y)), textureLoad(matricesTexture, ivec2(x.add(2), y)), textureLoad(matricesTexture, ivec2(x.add(3), y)));\n        var colorsTexture = this.batchMesh._colorsTexture;\n        if (colorsTexture !== null) {\n          var getBatchingColor = Fn(function (_ref35) {\n            var _ref36 = (0, _slicedToArray2.default)(_ref35, 1),\n              id = _ref36[0];\n            var size = textureSize(textureLoad(colorsTexture), 0).x;\n            var j = id;\n            var x = j.modInt(size);\n            var y = j.div(size);\n            return textureLoad(colorsTexture, ivec2(x, y)).rgb;\n          }).setLayout({\n            name: 'getBatchingColor',\n            type: 'vec3',\n            inputs: [{\n              name: 'id',\n              type: 'int'\n            }]\n          });\n          var _color = getBatchingColor(indirectId);\n          varyingProperty('vec3', 'vBatchColor').assign(_color);\n        }\n        var bm = mat3(batchingMatrix);\n        positionLocal.assign(batchingMatrix.mul(positionLocal));\n        var transformedNormal = normalLocal.div(vec3(bm[0].dot(bm[0]), bm[1].dot(bm[1]), bm[2].dot(bm[2])));\n        var batchingNormal = bm.mul(transformedNormal).xyz;\n        normalLocal.assign(batchingNormal);\n        if (builder.hasGeometryAttribute('tangent')) {\n          tangentLocal.mulAssign(bm);\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BatchNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a batch node.\n   *\n   * @function\n   * @param {BatchedMesh} batchMesh - A reference to batched mesh.\n   * @returns {BatchNode}\n   */\n  var batch = /*@__PURE__*/nodeProxy(BatchNode);\n\n  /** @module SkinningNode **/\n\n  var _frameId = new WeakMap();\n\n  /**\n   * This node implements the vertex transformation shader logic which is required\n   * for skinning/skeletal animation.\n   *\n   * @augments Node\n   */\n  var SkinningNode = exports.SkinningNode = /*#__PURE__*/function (_Node29) {\n    /**\n     * Constructs a new skinning node.\n     *\n     * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\n     * @param {Boolean} [useReference=false] - Whether to use reference nodes for internal skinned mesh related data or not.\n     */\n    function SkinningNode(skinnedMesh) {\n      var _this58;\n      var useReference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      (0, _classCallCheck2.default)(this, SkinningNode);\n      _this58 = _callSuper(this, SkinningNode, ['void']);\n\n      /**\n       * The skinned mesh.\n       *\n       * @type {SkinnedMesh}\n       */\n      _this58.skinnedMesh = skinnedMesh;\n\n      /**\n       * Whether to use reference nodes for internal skinned mesh related data or not.\n       * TODO: Explain the purpose of the property.\n       *\n       * @type {Boolean}\n       */\n      _this58.useReference = useReference;\n\n      /**\n       * The update type overwritten since skinning nodes are updated per object.\n       *\n       * @type {String}\n       */\n      _this58.updateType = NodeUpdateType.OBJECT;\n\n      //\n\n      /**\n       * The skin index attribute.\n       *\n       * @type {AttributeNode}\n       */\n      _this58.skinIndexNode = attribute('skinIndex', 'uvec4');\n\n      /**\n       * The skin weight attribute.\n       *\n       * @type {AttributeNode}\n       */\n      _this58.skinWeightNode = attribute('skinWeight', 'vec4');\n      var bindMatrixNode, bindMatrixInverseNode, boneMatricesNode;\n      if (useReference) {\n        bindMatrixNode = reference('bindMatrix', 'mat4');\n        bindMatrixInverseNode = reference('bindMatrixInverse', 'mat4');\n        boneMatricesNode = referenceBuffer('skeleton.boneMatrices', 'mat4', skinnedMesh.skeleton.bones.length);\n      } else {\n        bindMatrixNode = uniform(skinnedMesh.bindMatrix, 'mat4');\n        bindMatrixInverseNode = uniform(skinnedMesh.bindMatrixInverse, 'mat4');\n        boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n      }\n\n      /**\n       * The bind matrix node.\n       *\n       * @type {Node<mat4>}\n       */\n      _this58.bindMatrixNode = bindMatrixNode;\n\n      /**\n       * The bind matrix inverse node.\n       *\n       * @type {Node<mat4>}\n       */\n      _this58.bindMatrixInverseNode = bindMatrixInverseNode;\n\n      /**\n       * The bind matrices as a uniform buffer node.\n       *\n       * @type {Node}\n       */\n      _this58.boneMatricesNode = boneMatricesNode;\n\n      /**\n       * The previous bind matrices as a uniform buffer node.\n       * Required for computing motion vectors.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this58.previousBoneMatricesNode = null;\n      return _this58;\n    }\n\n    /**\n     * Transforms the given vertex position via skinning.\n     *\n     * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices\n     * @param {Node<vec3>} [position=positionLocal] - The vertex position in local space.\n     * @return {Node<vec3>} The transformed vertex position.\n     */\n    (0, _inherits2.default)(SkinningNode, _Node29);\n    return (0, _createClass2.default)(SkinningNode, [{\n      key: \"getSkinnedPosition\",\n      value: function getSkinnedPosition() {\n        var boneMatrices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.boneMatricesNode;\n        var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : positionLocal;\n        var skinIndexNode = this.skinIndexNode,\n          skinWeightNode = this.skinWeightNode,\n          bindMatrixNode = this.bindMatrixNode,\n          bindMatrixInverseNode = this.bindMatrixInverseNode;\n        var boneMatX = boneMatrices.element(skinIndexNode.x);\n        var boneMatY = boneMatrices.element(skinIndexNode.y);\n        var boneMatZ = boneMatrices.element(skinIndexNode.z);\n        var boneMatW = boneMatrices.element(skinIndexNode.w);\n\n        // POSITION\n\n        var skinVertex = bindMatrixNode.mul(position);\n        var skinned = add(boneMatX.mul(skinWeightNode.x).mul(skinVertex), boneMatY.mul(skinWeightNode.y).mul(skinVertex), boneMatZ.mul(skinWeightNode.z).mul(skinVertex), boneMatW.mul(skinWeightNode.w).mul(skinVertex));\n        return bindMatrixInverseNode.mul(skinned).xyz;\n      }\n\n      /**\n       * Transforms the given vertex normal via skinning.\n       *\n       * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices\n       * @param {Node<vec3>} [normal=normalLocal] - The vertex normal in local space.\n       * @return {Node<vec3>} The transformed vertex normal.\n       */\n    }, {\n      key: \"getSkinnedNormal\",\n      value: function getSkinnedNormal() {\n        var boneMatrices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.boneMatricesNode;\n        var normal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : normalLocal;\n        var skinIndexNode = this.skinIndexNode,\n          skinWeightNode = this.skinWeightNode,\n          bindMatrixNode = this.bindMatrixNode,\n          bindMatrixInverseNode = this.bindMatrixInverseNode;\n        var boneMatX = boneMatrices.element(skinIndexNode.x);\n        var boneMatY = boneMatrices.element(skinIndexNode.y);\n        var boneMatZ = boneMatrices.element(skinIndexNode.z);\n        var boneMatW = boneMatrices.element(skinIndexNode.w);\n\n        // NORMAL\n\n        var skinMatrix = add(skinWeightNode.x.mul(boneMatX), skinWeightNode.y.mul(boneMatY), skinWeightNode.z.mul(boneMatZ), skinWeightNode.w.mul(boneMatW));\n        skinMatrix = bindMatrixInverseNode.mul(skinMatrix).mul(bindMatrixNode);\n        return skinMatrix.transformDirection(normal).xyz;\n      }\n\n      /**\n       * Transforms the given vertex normal via skinning.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec3>} The skinned position from the previous frame.\n       */\n    }, {\n      key: \"getPreviousSkinnedPosition\",\n      value: function getPreviousSkinnedPosition(builder) {\n        var skinnedMesh = builder.object;\n        if (this.previousBoneMatricesNode === null) {\n          skinnedMesh.skeleton.previousBoneMatrices = new Float32Array(skinnedMesh.skeleton.boneMatrices);\n          this.previousBoneMatricesNode = referenceBuffer('skeleton.previousBoneMatrices', 'mat4', skinnedMesh.skeleton.bones.length);\n        }\n        return this.getSkinnedPosition(this.previousBoneMatricesNode, positionPrevious);\n      }\n\n      /**\n       * Returns `true` if bone matrices from the previous frame are required.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Boolean} Whether bone matrices from the previous frame are required or not.\n       */\n    }, {\n      key: \"needsPreviousBoneMatrices\",\n      value: function needsPreviousBoneMatrices(builder) {\n        var mrt = builder.renderer.getMRT();\n        return mrt && mrt.has('velocity') || getDataFromObject(builder.object).useVelocity === true;\n      }\n\n      /**\n       * Setups the skinning node by assigning the transformed vertex data to predefined node variables.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        if (this.needsPreviousBoneMatrices(builder)) {\n          positionPrevious.assign(this.getPreviousSkinnedPosition(builder));\n        }\n        var skinPosition = this.getSkinnedPosition();\n        positionLocal.assign(skinPosition);\n        if (builder.hasGeometryAttribute('normal')) {\n          var skinNormal = this.getSkinnedNormal();\n          normalLocal.assign(skinNormal);\n          if (builder.hasGeometryAttribute('tangent')) {\n            tangentLocal.assign(skinNormal);\n          }\n        }\n      }\n\n      /**\n       * Generates the code snippet of the skinning node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {String} output - The current output.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        if (output !== 'void') {\n          return positionLocal.build(builder, output);\n        }\n      }\n\n      /**\n       * Updates the state of the skinned mesh by updating the skeleton once per frame.\n       *\n       * @param {NodeFrame} frame - The current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(frame) {\n        var object = this.useReference ? frame.object : this.skinnedMesh;\n        var skeleton = object.skeleton;\n        if (_frameId.get(skeleton) === frame.frameId) return;\n        _frameId.set(skeleton, frame.frameId);\n        if (this.previousBoneMatricesNode !== null) skeleton.previousBoneMatrices.set(skeleton.boneMatrices);\n        skeleton.update();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SkinningNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a skinning node.\n   *\n   * @function\n   * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\n   * @returns {SkinningNode}\n   */\n  var skinning = function skinning(skinnedMesh) {\n    return nodeObject(new SkinningNode(skinnedMesh));\n  };\n\n  /**\n   * TSL function for creating a skinning node with reference usage.\n   *\n   * @function\n   * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\n   * @returns {SkinningNode}\n   */\n  var skinningReference = function skinningReference(skinnedMesh) {\n    return nodeObject(new SkinningNode(skinnedMesh, true));\n  };\n\n  /** @module LoopNode **/\n\n  /**\n   * This module offers a variety of ways to implement loops in TSL. In it's basic form it's:\n   * ```js\n   * Loop( count, ( { i } ) => {\n   *\n   * } );\n   * ```\n   * However, it is also possible to define a start and end ranges, data types and loop conditions:\n   * ```js\n   * Loop( { start: int( 0 ), end: int( 10 ), type: 'int', condition: '<' }, ( { i } ) => {\n   *\n   * } );\n   *```\n   * Nested loops can be defined in a compacted form:\n   * ```js\n   * Loop( 10, 5, ( { i, j } ) => {\n   *\n   * } );\n   * ```\n   * Loops that should run backwards can be defined like so:\n   * ```js\n   * Loop( { start: 10 }, () => {} );\n   * ```\n   * The module also provides `Break()` and `Continue()` TSL expression for loop control.\n   * @augments Node\n   */\n  var LoopNode = exports.LoopNode = /*#__PURE__*/function (_Node30) {\n    /**\n     * Constructs a new loop node.\n     *\n     * @param {Array<Any>} params - Depending on the loop type, array holds different parameterization values for the loop.\n     */\n    function LoopNode() {\n      var _this59;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      (0, _classCallCheck2.default)(this, LoopNode);\n      _this59 = _callSuper(this, LoopNode);\n      _this59.params = params;\n      return _this59;\n    }\n\n    /**\n     * Returns a loop variable name based on an index. The pattern is\n     * `0` = `i`, `1`= `j`, `2`= `k` and so on.\n     *\n     * @param {Number} index - The index.\n     * @return {String} The loop variable name.\n     */\n    (0, _inherits2.default)(LoopNode, _Node30);\n    return (0, _createClass2.default)(LoopNode, [{\n      key: \"getVarName\",\n      value: function getVarName(index) {\n        return String.fromCharCode('i'.charCodeAt(0) + index);\n      }\n\n      /**\n       * Returns properties about this node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Object} The node properties.\n       */\n    }, {\n      key: \"getProperties\",\n      value: function getProperties(builder) {\n        var properties = builder.getNodeProperties(this);\n        if (properties.stackNode !== undefined) return properties;\n\n        //\n\n        var inputs = {};\n        for (var i = 0, l = this.params.length - 1; i < l; i++) {\n          var param = this.params[i];\n          var name = param.isNode !== true && param.name || this.getVarName(i);\n          var type = param.isNode !== true && param.type || 'int';\n          inputs[name] = expression(name, type);\n        }\n        var stack = builder.addStack(); // TODO: cache() it\n\n        properties.returnsNode = this.params[this.params.length - 1](inputs, stack, builder);\n        properties.stackNode = stack;\n        builder.removeStack();\n        return properties;\n      }\n\n      /**\n       * This method is overwritten since the node type is inferred based on the loop configuration.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        var _this$getProperties = this.getProperties(builder),\n          returnsNode = _this$getProperties.returnsNode;\n        return returnsNode ? returnsNode.getNodeType(builder) : 'void';\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        // setup properties\n\n        this.getProperties(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var properties = this.getProperties(builder);\n        var params = this.params;\n        var stackNode = properties.stackNode;\n        for (var i = 0, l = params.length - 1; i < l; i++) {\n          var param = params[i];\n          var start = null,\n            end = null,\n            name = null,\n            type = null,\n            condition = null,\n            update = null;\n          if (param.isNode) {\n            type = 'int';\n            name = this.getVarName(i);\n            start = '0';\n            end = param.build(builder, type);\n            condition = '<';\n          } else {\n            type = param.type || 'int';\n            name = param.name || this.getVarName(i);\n            start = param.start;\n            end = param.end;\n            condition = param.condition;\n            update = param.update;\n            if (typeof start === 'number') start = builder.generateConst(type, start);else if (start && start.isNode) start = start.build(builder, type);\n            if (typeof end === 'number') end = builder.generateConst(type, end);else if (end && end.isNode) end = end.build(builder, type);\n            if (start !== undefined && end === undefined) {\n              start = start + ' - 1';\n              end = '0';\n              condition = '>=';\n            } else if (end !== undefined && start === undefined) {\n              start = '0';\n              condition = '<';\n            }\n            if (condition === undefined) {\n              if (Number(start) > Number(end)) {\n                condition = '>=';\n              } else {\n                condition = '<';\n              }\n            }\n          }\n          var internalParam = {\n            start: start,\n            end: end,\n            condition: condition\n          };\n\n          //\n\n          var startSnippet = internalParam.start;\n          var endSnippet = internalParam.end;\n          var declarationSnippet = '';\n          var conditionalSnippet = '';\n          var updateSnippet = '';\n          if (!update) {\n            if (type === 'int' || type === 'uint') {\n              if (condition.includes('<')) update = '++';else update = '--';\n            } else {\n              if (condition.includes('<')) update = '+= 1.';else update = '-= 1.';\n            }\n          }\n          declarationSnippet += builder.getVar(type, name) + ' = ' + startSnippet;\n          conditionalSnippet += name + ' ' + condition + ' ' + endSnippet;\n          updateSnippet += name + ' ' + update;\n          var forSnippet = `for ( ${declarationSnippet}; ${conditionalSnippet}; ${updateSnippet} )`;\n          builder.addFlowCode((i === 0 ? '\\n' : '') + builder.tab + forSnippet + ' {\\n\\n').addFlowTab();\n        }\n        var stackSnippet = stackNode.build(builder, 'void');\n        var returnsSnippet = properties.returnsNode ? properties.returnsNode.build(builder) : '';\n        builder.removeFlowTab().addFlowCode('\\n' + builder.tab + stackSnippet);\n        for (var _i8 = 0, _l = this.params.length - 1; _i8 < _l; _i8++) {\n          builder.addFlowCode((_i8 === 0 ? '' : builder.tab) + '}\\n\\n').removeFlowTab();\n        }\n        builder.addFlowTab();\n        return returnsSnippet;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'LoopNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a loop node.\n   *\n   * @function\n   * @param {...Any} params - A list of parameters.\n   * @returns {LoopNode}\n   */\n  var Loop = function Loop() {\n    for (var _len16 = arguments.length, params = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n      params[_key16] = arguments[_key16];\n    }\n    return nodeObject(new LoopNode(nodeArray(params, 'int'))).append();\n  };\n\n  /**\n   * TSL function for creating a `Continue()` expression.\n   *\n   * @function\n   * @returns {ExpressionNode}\n   */\n  var Continue = function Continue() {\n    return expression('continue').append();\n  };\n\n  /**\n   * TSL function for creating a `Break()` expression.\n   *\n   * @function\n   * @returns {ExpressionNode}\n   */\n  var Break = function Break() {\n    return expression('break').append();\n  };\n\n  //\n\n  var loop = function loop() {\n    // @deprecated, r168\n\n    console.warn('TSL.LoopNode: loop() has been renamed to Loop().');\n    return Loop.apply(void 0, arguments);\n  };\n\n  /** @module MorphNode **/\n\n  var _morphTextures = /*@__PURE__*/new WeakMap();\n  var _morphVec4 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n  var getMorph = /*@__PURE__*/Fn(function (_ref37) {\n    var bufferMap = _ref37.bufferMap,\n      influence = _ref37.influence,\n      stride = _ref37.stride,\n      width = _ref37.width,\n      depth = _ref37.depth,\n      offset = _ref37.offset;\n    var texelIndex = int(vertexIndex).mul(stride).add(offset);\n    var y = texelIndex.div(width);\n    var x = texelIndex.sub(y.mul(width));\n    var bufferAttrib = textureLoad(bufferMap, ivec2(x, y)).depth(depth);\n    return bufferAttrib.mul(influence);\n  });\n  function getEntry(geometry) {\n    var hasMorphPosition = geometry.morphAttributes.position !== undefined;\n    var hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n    var hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n    // instead of using attributes, the WebGL 2 code path encodes morph targets\n    // into an array of data textures. Each layer represents a single morph target.\n\n    var morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n    var morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n    var entry = _morphTextures.get(geometry);\n    if (entry === undefined || entry.count !== morphTargetsCount) {\n      if (entry !== undefined) entry.texture.dispose();\n      var morphTargets = geometry.morphAttributes.position || [];\n      var morphNormals = geometry.morphAttributes.normal || [];\n      var morphColors = geometry.morphAttributes.color || [];\n      var vertexDataCount = 0;\n      if (hasMorphPosition === true) vertexDataCount = 1;\n      if (hasMorphNormals === true) vertexDataCount = 2;\n      if (hasMorphColors === true) vertexDataCount = 3;\n      var width = geometry.attributes.position.count * vertexDataCount;\n      var height = 1;\n      var maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\n\n      if (width > maxTextureSize) {\n        height = Math.ceil(width / maxTextureSize);\n        width = maxTextureSize;\n      }\n      var _buffer3 = new Float32Array(width * height * 4 * morphTargetsCount);\n      var bufferTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DataArrayTexture)(_buffer3, width, height, morphTargetsCount);\n      bufferTexture.type = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType;\n      bufferTexture.needsUpdate = true;\n\n      // fill buffer\n\n      var vertexDataStride = vertexDataCount * 4;\n      for (var i = 0; i < morphTargetsCount; i++) {\n        var morphTarget = morphTargets[i];\n        var morphNormal = morphNormals[i];\n        var morphColor = morphColors[i];\n        var offset = width * height * 4 * i;\n        for (var j = 0; j < morphTarget.count; j++) {\n          var stride = j * vertexDataStride;\n          if (hasMorphPosition === true) {\n            _morphVec4.fromBufferAttribute(morphTarget, j);\n            _buffer3[offset + stride + 0] = _morphVec4.x;\n            _buffer3[offset + stride + 1] = _morphVec4.y;\n            _buffer3[offset + stride + 2] = _morphVec4.z;\n            _buffer3[offset + stride + 3] = 0;\n          }\n          if (hasMorphNormals === true) {\n            _morphVec4.fromBufferAttribute(morphNormal, j);\n            _buffer3[offset + stride + 4] = _morphVec4.x;\n            _buffer3[offset + stride + 5] = _morphVec4.y;\n            _buffer3[offset + stride + 6] = _morphVec4.z;\n            _buffer3[offset + stride + 7] = 0;\n          }\n          if (hasMorphColors === true) {\n            _morphVec4.fromBufferAttribute(morphColor, j);\n            _buffer3[offset + stride + 8] = _morphVec4.x;\n            _buffer3[offset + stride + 9] = _morphVec4.y;\n            _buffer3[offset + stride + 10] = _morphVec4.z;\n            _buffer3[offset + stride + 11] = morphColor.itemSize === 4 ? _morphVec4.w : 1;\n          }\n        }\n      }\n      entry = {\n        count: morphTargetsCount,\n        texture: bufferTexture,\n        stride: vertexDataCount,\n        size: new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)(width, height)\n      };\n      _morphTextures.set(geometry, entry);\n      function disposeTexture() {\n        bufferTexture.dispose();\n        _morphTextures.delete(geometry);\n        geometry.removeEventListener('dispose', disposeTexture);\n      }\n      geometry.addEventListener('dispose', disposeTexture);\n    }\n    return entry;\n  }\n\n  /**\n   * This node implements the vertex transformation shader logic which is required\n   * for morph target animation.\n   *\n   * @augments Node\n   */\n  var MorphNode = exports.MorphNode = /*#__PURE__*/function (_Node31) {\n    /**\n     * Constructs a new morph node.\n     *\n     * @param {Mesh} mesh - The mesh holding the morph targets.\n     */\n    function MorphNode(mesh) {\n      var _this60;\n      (0, _classCallCheck2.default)(this, MorphNode);\n      _this60 = _callSuper(this, MorphNode, ['void']);\n\n      /**\n       * The mesh holding the morph targets.\n       *\n       * @type {Mesh}\n       */\n      _this60.mesh = mesh;\n\n      /**\n       * A uniform node which represents the morph base influence value.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this60.morphBaseInfluence = uniform(1);\n\n      /**\n       * The update type overwritten since morph nodes are updated per object.\n       *\n       * @type {String}\n       */\n      _this60.updateType = NodeUpdateType.OBJECT;\n      return _this60;\n    }\n\n    /**\n     * Setups the morph node by assigning the transformed vertex data to predefined node variables.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(MorphNode, _Node31);\n    return (0, _createClass2.default)(MorphNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this61 = this;\n        var geometry = builder.geometry;\n        var hasMorphPosition = geometry.morphAttributes.position !== undefined;\n        var hasMorphNormals = geometry.hasAttribute('normal') && geometry.morphAttributes.normal !== undefined;\n        var morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n        var morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n\n        // nodes\n\n        var _getEntry = getEntry(geometry),\n          bufferMap = _getEntry.texture,\n          stride = _getEntry.stride,\n          size = _getEntry.size;\n        if (hasMorphPosition === true) positionLocal.mulAssign(this.morphBaseInfluence);\n        if (hasMorphNormals === true) normalLocal.mulAssign(this.morphBaseInfluence);\n        var width = int(size.width);\n        Loop(morphTargetsCount, function (_ref38) {\n          var i = _ref38.i;\n          var influence = float(0).toVar();\n          if (_this61.mesh.count > 1 && _this61.mesh.morphTexture !== null && _this61.mesh.morphTexture !== undefined) {\n            influence.assign(textureLoad(_this61.mesh.morphTexture, ivec2(int(i).add(1), int(instanceIndex))).r);\n          } else {\n            influence.assign(reference('morphTargetInfluences', 'float').element(i).toVar());\n          }\n          if (hasMorphPosition === true) {\n            positionLocal.addAssign(getMorph({\n              bufferMap: bufferMap,\n              influence: influence,\n              stride: stride,\n              width: width,\n              depth: i,\n              offset: int(0)\n            }));\n          }\n          if (hasMorphNormals === true) {\n            normalLocal.addAssign(getMorph({\n              bufferMap: bufferMap,\n              influence: influence,\n              stride: stride,\n              width: width,\n              depth: i,\n              offset: int(1)\n            }));\n          }\n        });\n      }\n\n      /**\n       * Updates the state of the morphed mesh by updating the base influence.\n       *\n       * @param {NodeFrame} frame - The current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        var morphBaseInfluence = this.morphBaseInfluence;\n        if (this.mesh.geometry.morphTargetsRelative) {\n          morphBaseInfluence.value = 1;\n        } else {\n          morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce(function (a, b) {\n            return a + b;\n          }, 0);\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MorphNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a morph node.\n   *\n   * @function\n   * @param {Mesh} mesh - The mesh holding the morph targets.\n   * @returns {MorphNode}\n   */\n  var morphReference = /*@__PURE__*/nodeProxy(MorphNode);\n\n  /**\n   * Base class for lighting nodes.\n   *\n   * @augments Node\n   */\n  var LightingNode = exports.LightingNode = /*#__PURE__*/function (_Node32) {\n    /**\n     * Constructs a new lighting node.\n     */\n    function LightingNode() {\n      var _this62;\n      (0, _classCallCheck2.default)(this, LightingNode);\n      _this62 = _callSuper(this, LightingNode, ['vec3']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this62.isLightingNode = true;\n      return _this62;\n    }\n    (0, _inherits2.default)(LightingNode, _Node32);\n    return (0, _createClass2.default)(LightingNode, null, [{\n      key: \"type\",\n      get: function get() {\n        return 'LightingNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * A generic class that can be used by nodes which contribute\n   * ambient occlusion to the scene. E.g. an ambient occlusion map\n   * node can be used as input for this module. Used in {@link NodeMaterial}.\n   *\n   * @augments LightingNode\n   */\n  var AONode = exports.AONode = /*#__PURE__*/function (_LightingNode) {\n    /**\n     * Constructs a new AO node.\n     *\n     * @param {Node<float>?} [aoNode=null] - The ambient occlusion node.\n     */\n    function AONode() {\n      var _this63;\n      var aoNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, AONode);\n      _this63 = _callSuper(this, AONode);\n\n      /**\n       * The ambient occlusion node.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this63.aoNode = aoNode;\n      return _this63;\n    }\n    (0, _inherits2.default)(AONode, _LightingNode);\n    return (0, _createClass2.default)(AONode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        builder.context.ambientOcclusion.mulAssign(this.aoNode);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'AONode';\n      }\n    }]);\n  }(LightingNode);\n  /**\n   * `LightingContextNode` represents an extension of the {@link module:ContextNode~ContextNode} module\n   * by adding lighting specific context data. It represents the runtime context of\n   * {@link LightsNode}.\n   *\n   * @augments ContextNode\n   */\n  var LightingContextNode = exports.LightingContextNode = /*#__PURE__*/function (_ContextNode) {\n    /**\n     * Constructs a new lighting context node.\n     *\n     * @param {LightsNode} node - The lights node.\n     * @param {LightingModel?} [lightingModel=null] - The current lighting model.\n     * @param {Node<vec3>?} [backdropNode=null] - A backdrop node.\n     * @param {Node<float>?} [backdropAlphaNode=null] - A backdrop alpha node.\n     */\n    function LightingContextNode(node) {\n      var _this64;\n      var lightingModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var backdropNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var backdropAlphaNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, LightingContextNode);\n      _this64 = _callSuper(this, LightingContextNode, [node]);\n\n      /**\n       * The current lighting model.\n       *\n       * @type {LightingModel?}\n       * @default null\n       */\n      _this64.lightingModel = lightingModel;\n\n      /**\n       * A backdrop node.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this64.backdropNode = backdropNode;\n\n      /**\n       * A backdrop alpha node.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this64.backdropAlphaNode = backdropAlphaNode;\n      _this64._value = null;\n      return _this64;\n    }\n\n    /**\n     * Returns a lighting context object.\n     *\n     * @return {{\n     * radiance: Node<vec3>,\n     * irradiance: Node<vec3>,\n     * iblIrradiance: Node<vec3>,\n     * ambientOcclusion: Node<float>,\n     * reflectedLight: {directDiffuse: Node<vec3>, directSpecular: Node<vec3>, indirectDiffuse: Node<vec3>, indirectSpecular: Node<vec3>},\n     * backdrop: Node<vec3>,\n     * backdropAlpha: Node<float>\n     * }} The lighting context object.\n     */\n    (0, _inherits2.default)(LightingContextNode, _ContextNode);\n    return (0, _createClass2.default)(LightingContextNode, [{\n      key: \"getContext\",\n      value: function getContext() {\n        var backdropNode = this.backdropNode,\n          backdropAlphaNode = this.backdropAlphaNode;\n        var directDiffuse = vec3().toVar('directDiffuse'),\n          directSpecular = vec3().toVar('directSpecular'),\n          indirectDiffuse = vec3().toVar('indirectDiffuse'),\n          indirectSpecular = vec3().toVar('indirectSpecular');\n        var reflectedLight = {\n          directDiffuse: directDiffuse,\n          directSpecular: directSpecular,\n          indirectDiffuse: indirectDiffuse,\n          indirectSpecular: indirectSpecular\n        };\n        var context = {\n          radiance: vec3().toVar('radiance'),\n          irradiance: vec3().toVar('irradiance'),\n          iblIrradiance: vec3().toVar('iblIrradiance'),\n          ambientOcclusion: float(1).toVar('ambientOcclusion'),\n          reflectedLight: reflectedLight,\n          backdrop: backdropNode,\n          backdropAlpha: backdropAlphaNode\n        };\n        return context;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this.value = this._value || (this._value = this.getContext());\n        this.value.lightingModel = this.lightingModel || builder.context.lightingModel;\n        return _superPropGet(LightingContextNode, \"setup\", this, 3)([builder]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'LightingContextNode';\n      }\n    }]);\n  }(ContextNode);\n  var lightingContext = /*@__PURE__*/nodeProxy(LightingContextNode);\n\n  /**\n   * A generic class that can be used by nodes which contribute\n   * irradiance to the scene. E.g. a light map node can be used\n   * as input for this module. Used in {@link NodeMaterial}.\n   *\n   * @augments LightingNode\n   */\n  var IrradianceNode = exports.IrradianceNode = /*#__PURE__*/function (_LightingNode2) {\n    /**\n     * Constructs a new irradiance node.\n     *\n     * @param {Node<vec3>} node - A node contributing irradiance.\n     */\n    function IrradianceNode(node) {\n      var _this65;\n      (0, _classCallCheck2.default)(this, IrradianceNode);\n      _this65 = _callSuper(this, IrradianceNode);\n\n      /**\n       * A node contributing irradiance.\n       *\n       * @type {Node<vec3>}\n       */\n      _this65.node = node;\n      return _this65;\n    }\n    (0, _inherits2.default)(IrradianceNode, _LightingNode2);\n    return (0, _createClass2.default)(IrradianceNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        builder.context.irradiance.addAssign(this.node);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'IrradianceNode';\n      }\n    }]);\n  }(LightingNode);\n  /** @module ScreenNode **/\n  var screenSizeVec, viewportVec;\n\n  /**\n   * This node provides a collection of screen related metrics.\n   * Depending on {@link module:ScreenNode~ScreenNode#scope}, the nodes can represent\n   * resolution or viewport data as well as fragment or uv coordinates.\n   *\n   * @augments Node\n   */\n  var ScreenNode = exports.ScreenNode = /*#__PURE__*/function (_Node33) {\n    /**\n     * Constructs a new screen node.\n     *\n     * @param {('coordinate'|'viewport'|'size'|'uv')} scope - The node's scope.\n     */\n    function ScreenNode(scope) {\n      var _this66;\n      (0, _classCallCheck2.default)(this, ScreenNode);\n      _this66 = _callSuper(this, ScreenNode);\n\n      /**\n       * The node represents different metric depending on which scope is selected.\n       *\n       * - `ScreenNode.COORDINATE`: Window-relative coordinates of the current fragment according to WebGPU standards.\n       * - `ScreenNode.VIEWPORT`: The current viewport defined as a four-dimensional vector.\n       * - `ScreenNode.SIZE`: The dimensions of the current bound framebuffer.\n       * - `ScreenNode.UV`: Normalized coordinates.\n       *\n       * @type {('coordinate'|'viewport'|'size'|'uv')}\n       */\n      _this66.scope = scope;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this66.isViewportNode = true;\n      return _this66;\n    }\n\n    /**\n     * This method is overwritten since the node type depends on the selected scope.\n     *\n     * @return {('vec2'|'vec4')} The node type.\n     */\n    (0, _inherits2.default)(ScreenNode, _Node33);\n    return (0, _createClass2.default)(ScreenNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType() {\n        if (this.scope === ScreenNode.VIEWPORT) return 'vec4';else return 'vec2';\n      }\n\n      /**\n       * This method is overwritten since the node's update type depends on the selected scope.\n       *\n       * @return {NodeUpdateType} The update type.\n       */\n    }, {\n      key: \"getUpdateType\",\n      value: function getUpdateType() {\n        var updateType = NodeUpdateType.NONE;\n        if (this.scope === ScreenNode.SIZE || this.scope === ScreenNode.VIEWPORT) {\n          updateType = NodeUpdateType.RENDER;\n        }\n        this.updateType = updateType;\n        return updateType;\n      }\n\n      /**\n       * `ScreenNode` implements {@link Node#update} to retrieve viewport and size information\n       * from the current renderer.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(_ref39) {\n        var renderer = _ref39.renderer;\n        var renderTarget = renderer.getRenderTarget();\n        if (this.scope === ScreenNode.VIEWPORT) {\n          if (renderTarget !== null) {\n            viewportVec.copy(renderTarget.viewport);\n          } else {\n            renderer.getViewport(viewportVec);\n            viewportVec.multiplyScalar(renderer.getPixelRatio());\n          }\n        } else {\n          if (renderTarget !== null) {\n            screenSizeVec.width = renderTarget.width;\n            screenSizeVec.height = renderTarget.height;\n          } else {\n            renderer.getDrawingBufferSize(screenSizeVec);\n          }\n        }\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(/*builder*/\n      ) {\n        var scope = this.scope;\n        var output = null;\n        if (scope === ScreenNode.SIZE) {\n          output = uniform(screenSizeVec || (screenSizeVec = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)()));\n        } else if (scope === ScreenNode.VIEWPORT) {\n          output = uniform(viewportVec || (viewportVec = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)()));\n        } else {\n          output = vec2(screenCoordinate.div(screenSize));\n        }\n        return output;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        if (this.scope === ScreenNode.COORDINATE) {\n          var coord = builder.getFragCoord();\n          if (builder.isFlipY()) {\n            // follow webgpu standards\n\n            var size = builder.getNodeProperties(screenSize).outputNode.build(builder);\n            coord = `${builder.getType('vec2')}( ${coord}.x, ${size}.y - ${coord}.y )`;\n          }\n          return coord;\n        }\n        return _superPropGet(ScreenNode, \"generate\", this, 3)([builder]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ScreenNode';\n      }\n    }]);\n  }(Node);\n  ScreenNode.COORDINATE = 'coordinate';\n  ScreenNode.VIEWPORT = 'viewport';\n  ScreenNode.SIZE = 'size';\n  ScreenNode.UV = 'uv';\n\n  // Screen\n\n  /**\n   * TSL object that represents normalized screen coordinates, unitless in `[0, 1]`.\n   *\n   * @type {ScreenNode<vec2>}\n   */\n  var screenUV = /*@__PURE__*/nodeImmutable(ScreenNode, ScreenNode.UV);\n\n  /**\n   * TSL object that represents the screen resolution in physical pixel units.\n   *\n   * @type {ScreenNode<vec2>}\n   */\n  var screenSize = /*@__PURE__*/nodeImmutable(ScreenNode, ScreenNode.SIZE);\n\n  /**\n   * TSL object that represents the current `x`/`y` pixel position on the screen in physical pixel units.\n   *\n   * @type {ScreenNode<vec2>}\n   */\n  var screenCoordinate = /*@__PURE__*/nodeImmutable(ScreenNode, ScreenNode.COORDINATE);\n\n  // Viewport\n\n  /**\n   * TSL object that represents the viewport rectangle as `x`, `y`, `width` and `height` in physical pixel units.\n   *\n   * @type {ScreenNode<vec4>}\n   */\n  var viewport = /*@__PURE__*/nodeImmutable(ScreenNode, ScreenNode.VIEWPORT);\n\n  /**\n   * TSL object that represents the viewport resolution in physical pixel units.\n   *\n   * @type {ScreenNode<vec2>}\n   */\n  var viewportSize = viewport.zw;\n\n  /**\n   * TSL object that represents the current `x`/`y` pixel position on the viewport in physical pixel units.\n   *\n   * @type {ScreenNode<vec2>}\n   */\n  var viewportCoordinate = /*@__PURE__*/screenCoordinate.sub(viewport.xy);\n\n  /**\n   * TSL object that represents normalized viewport coordinates, unitless in `[0, 1]`.\n   *\n   * @type {ScreenNode<vec2>}\n   */\n  var viewportUV = /*@__PURE__*/viewportCoordinate.div(viewportSize);\n\n  // Deprecated\n\n  var viewportResolution = /*@__PURE__*/Fn(function () {\n    // @deprecated, r169\n\n    console.warn('TSL.ViewportNode: \"viewportResolution\" is deprecated. Use \"screenSize\" instead.');\n    return screenSize;\n  }, 'vec2').once()();\n  var viewportTopLeft = /*@__PURE__*/Fn(function () {\n    // @deprecated, r168\n\n    console.warn('TSL.ViewportNode: \"viewportTopLeft\" is deprecated. Use \"screenUV\" instead.');\n    return screenUV;\n  }, 'vec2').once()();\n  var viewportBottomLeft = /*@__PURE__*/Fn(function () {\n    // @deprecated, r168\n\n    console.warn('TSL.ViewportNode: \"viewportBottomLeft\" is deprecated. Use \"screenUV.flipY()\" instead.');\n    return screenUV.flipY();\n  }, 'vec2').once()();\n\n  /** @module ViewportTextureNode **/\n\n  var _size$4 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n\n  /**\n   * A special type of texture node which represents the data of the current viewport\n   * as a texture. The module extracts data from the current bound framebuffer with\n   * a copy operation so no extra render pass is required to produce the texture data\n   * (which is good for performance). `ViewportTextureNode` can be used as an input for a\n   * variety of effects like refractive or transmissive materials.\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var ViewportTextureNode = exports.ViewportTextureNode = /*#__PURE__*/function (_TextureNode2) {\n    /**\n     * Constructs a new viewport texture node.\n     *\n     * @param {Node} [uvNode=screenUV] - The uv node.\n     * @param {Node?} [levelNode=null] - The level node.\n     * @param {Texture?} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\n     */\n    function ViewportTextureNode() {\n      var _this67;\n      var uvNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenUV;\n      var levelNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var framebufferTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, ViewportTextureNode);\n      if (framebufferTexture === null) {\n        framebufferTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FramebufferTexture)();\n        framebufferTexture.minFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter;\n      }\n      _this67 = _callSuper(this, ViewportTextureNode, [framebufferTexture, uvNode, levelNode]);\n\n      /**\n       * Whether to generate mipmaps or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this67.generateMipmaps = false;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this67.isOutputTextureNode = true;\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders the\n       * scene once per frame in its {@link ViewportTextureNode#updateBefore} method.\n       *\n       * @type {String}\n       * @default 'frame'\n       */\n      _this67.updateBeforeType = NodeUpdateType.FRAME;\n      return _this67;\n    }\n    (0, _inherits2.default)(ViewportTextureNode, _TextureNode2);\n    return (0, _createClass2.default)(ViewportTextureNode, [{\n      key: \"updateBefore\",\n      value: function updateBefore(frame) {\n        var renderer = frame.renderer;\n        renderer.getDrawingBufferSize(_size$4);\n\n        //\n\n        var framebufferTexture = this.value;\n        if (framebufferTexture.image.width !== _size$4.width || framebufferTexture.image.height !== _size$4.height) {\n          framebufferTexture.image.width = _size$4.width;\n          framebufferTexture.image.height = _size$4.height;\n          framebufferTexture.needsUpdate = true;\n        }\n\n        //\n\n        var currentGenerateMipmaps = framebufferTexture.generateMipmaps;\n        framebufferTexture.generateMipmaps = this.generateMipmaps;\n        renderer.copyFramebufferToTexture(framebufferTexture);\n        framebufferTexture.generateMipmaps = currentGenerateMipmaps;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var viewportTextureNode = new this.constructor(this.uvNode, this.levelNode, this.value);\n        viewportTextureNode.generateMipmaps = this.generateMipmaps;\n        return viewportTextureNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ViewportTextureNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * TSL function for creating a viewport texture node.\n   *\n   * @function\n   * @param {Node} [uvNode=screenUV] - The uv node.\n   * @param {Node?} [levelNode=null] - The level node.\n   * @param {Texture?} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\n   * @returns {ViewportTextureNode}\n   */\n  var viewportTexture = /*@__PURE__*/nodeProxy(ViewportTextureNode);\n\n  /**\n   * TSL function for creating a viewport texture node with enabled mipmap generation.\n   *\n   * @function\n   * @param {Node} [uvNode=screenUV] - The uv node.\n   * @param {Node?} [levelNode=null] - The level node.\n   * @param {Texture?} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\n   * @returns {ViewportTextureNode}\n   */\n  var viewportMipTexture = /*@__PURE__*/nodeProxy(ViewportTextureNode, null, null, {\n    generateMipmaps: true\n  });\n\n  /** @module ViewportDepthTextureNode **/\n\n  var sharedDepthbuffer = null;\n\n  /**\n   * Represents the depth of the current viewport as a texture. This module\n   * can be used in combination with viewport texture to achieve effects\n   * that require depth evaluation.\n   *\n   * @augments module:ViewportTextureNode~ViewportTextureNode\n   */\n  var ViewportDepthTextureNode = exports.ViewportDepthTextureNode = /*#__PURE__*/function (_ViewportTextureNode) {\n    /**\n     * Constructs a new viewport depth texture node.\n     *\n     * @param {Node} [uvNode=screenUV] - The uv node.\n     * @param {Node?} [levelNode=null] - The level node.\n     */\n    function ViewportDepthTextureNode() {\n      var uvNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenUV;\n      var levelNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, ViewportDepthTextureNode);\n      if (sharedDepthbuffer === null) {\n        sharedDepthbuffer = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)();\n      }\n      return _callSuper(this, ViewportDepthTextureNode, [uvNode, levelNode, sharedDepthbuffer]);\n    }\n    (0, _inherits2.default)(ViewportDepthTextureNode, _ViewportTextureNode);\n    return (0, _createClass2.default)(ViewportDepthTextureNode, null, [{\n      key: \"type\",\n      get: function get() {\n        return 'ViewportDepthTextureNode';\n      }\n    }]);\n  }(ViewportTextureNode);\n  /**\n   * TSL function for a viewport depth texture node.\n   *\n   * @function\n   * @param {Node} [uvNode=screenUV] - The uv node.\n   * @param {Node?} [levelNode=null] - The level node.\n   * @returns {ViewportDepthTextureNode}\n   */\n  var viewportDepthTexture = /*@__PURE__*/nodeProxy(ViewportDepthTextureNode);\n\n  /** @module ViewportDepthNode **/\n\n  /**\n   * This node offers a collection of features in context of the depth logic in the fragment shader.\n   * Depending on {@link ViewportDepthNode#scope}, it can be used to define a depth value for the current\n   * fragment or for depth evaluation purposes.\n   *\n   * @augments Node\n   */\n  var ViewportDepthNode = exports.ViewportDepthNode = /*#__PURE__*/function (_Node34) {\n    /**\n     * Constructs a new viewport depth node.\n     *\n     * @param {('depth'|'depthBase'|'linearDepth')} scope - The node's scope.\n     * @param {Node?} [valueNode=null] - The value node.\n     */\n    function ViewportDepthNode(scope) {\n      var _this68;\n      var valueNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, ViewportDepthNode);\n      _this68 = _callSuper(this, ViewportDepthNode, ['float']);\n\n      /**\n       * The node behaves differently depending on which scope is selected.\n       *\n       * - `ViewportDepthNode.DEPTH_BASE`: Allows to define a value for the current fragment's depth.\n       * - `ViewportDepthNode.DEPTH`: Represents the depth value for the current fragment (`valueNode` is ignored).\n       * - `ViewportDepthNode.LINEAR_DEPTH`: Represents the linear (orthographic) depth value of the current fragment.\n       * If a `valueNode` is set, the scope can be used to convert perspective depth data to linear data.\n       *\n       * @type {('depth'|'depthBase'|'linearDepth')}\n       */\n      _this68.scope = scope;\n\n      /**\n       * Can be used to define a custom depth value.\n       * The property is ignored in the `ViewportDepthNode.DEPTH` scope.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this68.valueNode = valueNode;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this68.isViewportDepthNode = true;\n      return _this68;\n    }\n    (0, _inherits2.default)(ViewportDepthNode, _Node34);\n    return (0, _createClass2.default)(ViewportDepthNode, [{\n      key: \"generate\",\n      value: function generate(builder) {\n        var scope = this.scope;\n        if (scope === ViewportDepthNode.DEPTH_BASE) {\n          return builder.getFragDepth();\n        }\n        return _superPropGet(ViewportDepthNode, \"generate\", this, 3)([builder]);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(_ref40) {\n        var camera = _ref40.camera;\n        var scope = this.scope;\n        var value = this.valueNode;\n        var node = null;\n        if (scope === ViewportDepthNode.DEPTH_BASE) {\n          if (value !== null) {\n            node = depthBase().assign(value);\n          }\n        } else if (scope === ViewportDepthNode.DEPTH) {\n          if (camera.isPerspectiveCamera) {\n            node = viewZToPerspectiveDepth(positionView.z, cameraNear, cameraFar);\n          } else {\n            node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);\n          }\n        } else if (scope === ViewportDepthNode.LINEAR_DEPTH) {\n          if (value !== null) {\n            if (camera.isPerspectiveCamera) {\n              var viewZ = perspectiveDepthToViewZ(value, cameraNear, cameraFar);\n              node = viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\n            } else {\n              node = value;\n            }\n          } else {\n            node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);\n          }\n        }\n        return node;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ViewportDepthNode';\n      }\n    }]);\n  }(Node);\n  ViewportDepthNode.DEPTH_BASE = 'depthBase';\n  ViewportDepthNode.DEPTH = 'depth';\n  ViewportDepthNode.LINEAR_DEPTH = 'linearDepth';\n\n  // NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\n\n  /**\n   * TSL function for converting a viewZ value to an orthographic depth value.\n   *\n   * @function\n   * @param {Node<float>} viewZ - The viewZ node.\n   * @param {Node<float>} near - The camera's near value.\n   * @param {Node<float>} far - The camera's far value.\n   * @returns {Node<float>}\n   */\n  var viewZToOrthographicDepth = function viewZToOrthographicDepth(viewZ, near, far) {\n    return viewZ.add(near).div(near.sub(far));\n  };\n\n  /**\n   * TSL function for converting an orthographic depth value to a viewZ value.\n   *\n   * @function\n   * @param {Node<float>} depth - The orthographic depth.\n   * @param {Node<float>} near - The camera's near value.\n   * @param {Node<float>} far - The camera's far value.\n   * @returns {Node<float>}\n   */\n  var orthographicDepthToViewZ = function orthographicDepthToViewZ(depth, near, far) {\n    return near.sub(far).mul(depth).sub(near);\n  };\n\n  /**\n   * TSL function for converting a viewZ value to a perspective depth value.\n   *\n   * Note: {link https://twitter.com/gonnavis/status/1377183786949959682}.\n   *\n   * @function\n   * @param {Node<float>} viewZ - The viewZ node.\n   * @param {Node<float>} near - The camera's near value.\n   * @param {Node<float>} far - The camera's far value.\n   * @returns {Node<float>}\n   */\n  var viewZToPerspectiveDepth = function viewZToPerspectiveDepth(viewZ, near, far) {\n    return near.add(viewZ).mul(far).div(far.sub(near).mul(viewZ));\n  };\n\n  /**\n   * TSL function for converting a perspective depth value to a viewZ value.\n   *\n   * @function\n   * @param {Node<float>} depth - The perspective depth.\n   * @param {Node<float>} near - The camera's near value.\n   * @param {Node<float>} far - The camera's far value.\n   * @returns {Node<float>}\n   */\n  var perspectiveDepthToViewZ = function perspectiveDepthToViewZ(depth, near, far) {\n    return near.mul(far).div(far.sub(near).mul(depth).sub(far));\n  };\n\n  /**\n   * TSL function for converting a viewZ value to a logarithmic depth value.\n   *\n   * @function\n   * @param {Node<float>} viewZ - The viewZ node.\n   * @param {Node<float>} near - The camera's near value.\n   * @param {Node<float>} far - The camera's far value.\n   * @returns {Node<float>}\n   */\n  var viewZToLogarithmicDepth = function viewZToLogarithmicDepth(viewZ, near, far) {\n    // NOTE: viewZ must be negative--see explanation at the end of this comment block.\n    // The final logarithmic depth formula used here is adapted from one described in an\n    // article by Thatcher Ulrich (see http://tulrich.com/geekstuff/log_depth_buffer.txt),\n    // which was an improvement upon an earlier formula one described in an\n    // Outerra article (https://outerra.blogspot.com/2009/08/logarithmic-z-buffer.html).\n    // Ulrich's formula is the following:\n    //     z = K * log( w / cameraNear ) / log( cameraFar / cameraNear )\n    //     where K = 2^k - 1, and k is the number of bits in the depth buffer.\n    // The Outerra variant ignored the camera near plane (it assumed it was 0) and instead\n    // opted for a \"C-constant\" for resolution adjustment of objects near the camera.\n    // Outerra states: \"Notice that the 'C' variant doesn’t use a near plane distance, it has it\n    // set at 0\" (quote from https://outerra.blogspot.com/2012/11/maximizing-depth-buffer-range-and.html).\n    // Ulrich's variant has the benefit of constant relative precision over the whole near-far range.\n    // It was debated here whether Outerra's \"C-constant\" or Ulrich's \"near plane\" variant should\n    // be used, and ultimately Ulrich's \"near plane\" version was chosen.\n    // Outerra eventually made another improvement to their original \"C-constant\" variant,\n    // but it still does not incorporate the camera near plane (for this version,\n    // see https://outerra.blogspot.com/2013/07/logarithmic-depth-buffer-optimizations.html).\n    // Here we make 4 changes to Ulrich's formula:\n    // 1. Clamp the camera near plane so we don't divide by 0.\n    // 2. Use log2 instead of log to avoid an extra multiply (shaders implement log using log2).\n    // 3. Assume K is 1 (K = maximum value in depth buffer; see Ulrich's formula above).\n    // 4. To maintain consistency with the functions \"viewZToOrthographicDepth\" and \"viewZToPerspectiveDepth\",\n    //    we modify the formula here to use 'viewZ' instead of 'w'. The other functions expect a negative viewZ,\n    //    so we do the same here, hence the 'viewZ.negate()' call.\n    // For visual representation of this depth curve, see https://www.desmos.com/calculator/uyqk0vex1u\n    near = near.max(1e-6).toVar();\n    var numerator = log2(viewZ.negate().div(near));\n    var denominator = log2(far.div(near));\n    return numerator.div(denominator);\n  };\n\n  /**\n   * TSL function for converting a logarithmic depth value to a viewZ value.\n   *\n   * @function\n   * @param {Node<float>} depth - The logarithmic depth.\n   * @param {Node<float>} near - The camera's near value.\n   * @param {Node<float>} far - The camera's far value.\n   * @returns {Node<float>}\n   */\n  var logarithmicDepthToViewZ = function logarithmicDepthToViewZ(depth, near, far) {\n    // NOTE: we add a 'negate()' call to the return value here to maintain consistency with\n    // the functions \"orthographicDepthToViewZ\" and \"perspectiveDepthToViewZ\" (they return\n    // a negative viewZ).\n    var exponent = depth.mul(log(far.div(near)));\n    return float(Math.E).pow(exponent).mul(near).negate();\n  };\n\n  /**\n   * TSL function for defining a value for the current fragment's depth.\n   *\n   * @function\n   * @param {Node<float>} value - The depth value to set.\n   * @returns {ViewportDepthNode<float>}\n   */\n  var depthBase = /*@__PURE__*/nodeProxy(ViewportDepthNode, ViewportDepthNode.DEPTH_BASE);\n\n  /**\n   * TSL object that represents the depth value for the current fragment.\n   *\n   * @type {ViewportDepthNode}\n   */\n  var depth = /*@__PURE__*/nodeImmutable(ViewportDepthNode, ViewportDepthNode.DEPTH);\n\n  /**\n   * TSL function for converting a perspective depth value to linear depth.\n   *\n   * @function\n   * @param {Node<float>} value - The perspective depth.\n   * @returns {ViewportDepthNode<float>}\n   */\n  var linearDepth = /*@__PURE__*/nodeProxy(ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH);\n\n  /**\n   * TSL object that represents the linear (orthographic) depth value of the current fragment\n   *\n   * @type {ViewportDepthNode}\n   */\n  var viewportLinearDepth = /*@__PURE__*/linearDepth(viewportDepthTexture());\n  depth.assign = function (value) {\n    return depthBase(value);\n  };\n\n  /** @module BuiltinNode **/\n\n  /**\n   * The node allows to set values for built-in shader variables. That is\n   * required for features like hardware-accelerated vertex clipping.\n   *\n   * @augments Node\n   */\n  var BuiltinNode = /*#__PURE__*/function (_Node35) {\n    /**\n     * Constructs a new builtin node.\n     *\n     * @param {String} name - The name of the built-in shader variable.\n     */\n    function BuiltinNode(name) {\n      var _this69;\n      (0, _classCallCheck2.default)(this, BuiltinNode);\n      _this69 = _callSuper(this, BuiltinNode, ['float']);\n\n      /**\n       * The name of the built-in shader variable.\n       *\n       * @type {String}\n       */\n      _this69.name = name;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this69.isBuiltinNode = true;\n      return _this69;\n    }\n\n    /**\n     * Generates the code snippet of the builtin node.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The generated code snippet.\n     */\n    (0, _inherits2.default)(BuiltinNode, _Node35);\n    return (0, _createClass2.default)(BuiltinNode, [{\n      key: \"generate\",\n      value: function generate(/* builder */\n      ) {\n        return this.name;\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a builtin node.\n   *\n   * @function\n   * @param {String} name - The name of the built-in shader variable.\n   * @returns {BuiltinNode}\n   */\n  var builtin = nodeProxy(BuiltinNode);\n\n  /** @module ClippingNode **/\n\n  /**\n   * ```\n   * This node is used in {@link NodeMaterial} to setup the clipping\n   * which can happen hardware-accelerated (if supported) and optionally\n   * use alpha-to-coverage for anti-aliasing clipped edges.\n   * ```\n   * @augments Node\n   */\n  var ClippingNode = /*#__PURE__*/function (_Node36) {\n    /**\n     * Constructs a new clipping node.\n     *\n     * @param {('default'|'hardware'|'alphaToCoverage')} [scope='default'] - The node's scope. Similar to other nodes,\n     * the selected scope influences the behavior of the node and what type of code is generated.\n     */\n    function ClippingNode() {\n      var _this70;\n      var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ClippingNode.DEFAULT;\n      (0, _classCallCheck2.default)(this, ClippingNode);\n      _this70 = _callSuper(this, ClippingNode);\n\n      /**\n       * The node's scope. Similar to other nodes, the selected scope influences\n       * the behavior of the node and what type of code is generated.\n       *\n       * @type {('default'|'hardware'|'alphaToCoverage')}\n       */\n      _this70.scope = scope;\n      return _this70;\n    }\n\n    /**\n     * Setups the node depending on the selected scope.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {Node} The result node.\n     */\n    (0, _inherits2.default)(ClippingNode, _Node36);\n    return (0, _createClass2.default)(ClippingNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(ClippingNode, \"setup\", this, 3)([builder]);\n        var clippingContext = builder.clippingContext;\n        var intersectionPlanes = clippingContext.intersectionPlanes,\n          unionPlanes = clippingContext.unionPlanes;\n        this.hardwareClipping = builder.material.hardwareClipping;\n        if (this.scope === ClippingNode.ALPHA_TO_COVERAGE) {\n          return this.setupAlphaToCoverage(intersectionPlanes, unionPlanes);\n        } else if (this.scope === ClippingNode.HARDWARE) {\n          return this.setupHardwareClipping(unionPlanes, builder);\n        } else {\n          return this.setupDefault(intersectionPlanes, unionPlanes);\n        }\n      }\n\n      /**\n       * Setups alpha to coverage.\n       *\n       * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\n       * @param {Array<Vector4>} unionPlanes - The union planes.\n       * @return {Node} The result node.\n       */\n    }, {\n      key: \"setupAlphaToCoverage\",\n      value: function setupAlphaToCoverage(intersectionPlanes, unionPlanes) {\n        var _this71 = this;\n        return Fn(function () {\n          var distanceToPlane = float().toVar('distanceToPlane');\n          var distanceGradient = float().toVar('distanceToGradient');\n          var clipOpacity = float(1).toVar('clipOpacity');\n          var numUnionPlanes = unionPlanes.length;\n          if (_this71.hardwareClipping === false && numUnionPlanes > 0) {\n            var clippingPlanes = uniformArray(unionPlanes);\n            Loop(numUnionPlanes, function (_ref41) {\n              var i = _ref41.i;\n              var plane = clippingPlanes.element(i);\n              distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));\n              distanceGradient.assign(distanceToPlane.fwidth().div(2.0));\n              clipOpacity.mulAssign(smoothstep(distanceGradient.negate(), distanceGradient, distanceToPlane));\n            });\n          }\n          var numIntersectionPlanes = intersectionPlanes.length;\n          if (numIntersectionPlanes > 0) {\n            var _clippingPlanes = uniformArray(intersectionPlanes);\n            var intersectionClipOpacity = float(1).toVar('intersectionClipOpacity');\n            Loop(numIntersectionPlanes, function (_ref42) {\n              var i = _ref42.i;\n              var plane = _clippingPlanes.element(i);\n              distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));\n              distanceGradient.assign(distanceToPlane.fwidth().div(2.0));\n              intersectionClipOpacity.mulAssign(smoothstep(distanceGradient.negate(), distanceGradient, distanceToPlane).oneMinus());\n            });\n            clipOpacity.mulAssign(intersectionClipOpacity.oneMinus());\n          }\n          diffuseColor.a.mulAssign(clipOpacity);\n          diffuseColor.a.equal(0.0).discard();\n        })();\n      }\n\n      /**\n       * Setups the default clipping.\n       *\n       * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\n       * @param {Array<Vector4>} unionPlanes - The union planes.\n       * @return {Node} The result node.\n       */\n    }, {\n      key: \"setupDefault\",\n      value: function setupDefault(intersectionPlanes, unionPlanes) {\n        var _this72 = this;\n        return Fn(function () {\n          var numUnionPlanes = unionPlanes.length;\n          if (_this72.hardwareClipping === false && numUnionPlanes > 0) {\n            var clippingPlanes = uniformArray(unionPlanes);\n            Loop(numUnionPlanes, function (_ref43) {\n              var i = _ref43.i;\n              var plane = clippingPlanes.element(i);\n              positionView.dot(plane.xyz).greaterThan(plane.w).discard();\n            });\n          }\n          var numIntersectionPlanes = intersectionPlanes.length;\n          if (numIntersectionPlanes > 0) {\n            var _clippingPlanes2 = uniformArray(intersectionPlanes);\n            var clipped = bool(true).toVar('clipped');\n            Loop(numIntersectionPlanes, function (_ref44) {\n              var i = _ref44.i;\n              var plane = _clippingPlanes2.element(i);\n              clipped.assign(positionView.dot(plane.xyz).greaterThan(plane.w).and(clipped));\n            });\n            clipped.discard();\n          }\n        })();\n      }\n\n      /**\n       * Setups hardware clipping.\n       *\n       * @param {Array<Vector4>} unionPlanes - The union planes.\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node} The result node.\n       */\n    }, {\n      key: \"setupHardwareClipping\",\n      value: function setupHardwareClipping(unionPlanes, builder) {\n        var numUnionPlanes = unionPlanes.length;\n        builder.enableHardwareClipping(numUnionPlanes);\n        return Fn(function () {\n          var clippingPlanes = uniformArray(unionPlanes);\n          var hw_clip_distances = builtin(builder.getClipDistance());\n          Loop(numUnionPlanes, function (_ref45) {\n            var i = _ref45.i;\n            var plane = clippingPlanes.element(i);\n            var distance = positionView.dot(plane.xyz).sub(plane.w).negate();\n            hw_clip_distances.element(i).assign(distance);\n          });\n        })();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ClippingNode';\n      }\n    }]);\n  }(Node);\n  ClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';\n  ClippingNode.DEFAULT = 'default';\n  ClippingNode.HARDWARE = 'hardware';\n\n  /**\n   * TSL function for setting up the default clipping logic.\n   *\n   * @function\n   * @returns {ClippingNode}\n   */\n  var clipping = function clipping() {\n    return nodeObject(new ClippingNode());\n  };\n\n  /**\n   * TSL function for setting up alpha to coverage.\n   *\n   * @function\n   * @returns {ClippingNode}\n   */\n  var clippingAlpha = function clippingAlpha() {\n    return nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE));\n  };\n\n  /**\n   * TSL function for setting up hardware-based clipping.\n   *\n   * @function\n   * @returns {ClippingNode}\n   */\n  var hardwareClipping = function hardwareClipping() {\n    return nodeObject(new ClippingNode(ClippingNode.HARDWARE));\n  };\n\n  // See: https://casual-effects.com/research/Wyman2017Hashed/index.html\n\n  var ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.\n\n  var hash2D = /*@__PURE__*/Fn(function (_ref46) {\n    var _ref47 = (0, _slicedToArray2.default)(_ref46, 1),\n      value = _ref47[0];\n    return fract(mul(1.0e4, sin(mul(17.0, value.x).add(mul(0.1, value.y)))).mul(add(0.1, abs(sin(mul(13.0, value.y).add(value.x))))));\n  });\n  var hash3D = /*@__PURE__*/Fn(function (_ref48) {\n    var _ref49 = (0, _slicedToArray2.default)(_ref48, 1),\n      value = _ref49[0];\n    return hash2D(vec2(hash2D(value.xy), value.z));\n  });\n  var getAlphaHashThreshold = /*@__PURE__*/Fn(function (_ref50) {\n    var _ref51 = (0, _slicedToArray2.default)(_ref50, 1),\n      position = _ref51[0];\n    // Find the discretized derivatives of our coordinates\n    var maxDeriv = max$1(length(dFdx(position.xyz)), length(dFdy(position.xyz)));\n    var pixScale = float(1).div(float(ALPHA_HASH_SCALE).mul(maxDeriv)).toVar('pixScale');\n\n    // Find two nearest log-discretized noise scales\n    var pixScales = vec2(exp2(floor(log2(pixScale))), exp2(ceil(log2(pixScale))));\n\n    // Compute alpha thresholds at our two noise scales\n    var alpha = vec2(hash3D(floor(pixScales.x.mul(position.xyz))), hash3D(floor(pixScales.y.mul(position.xyz))));\n\n    // Factor to interpolate lerp with\n    var lerpFactor = fract(log2(pixScale));\n\n    // Interpolate alpha threshold from noise at two scales\n    var x = add(mul(lerpFactor.oneMinus(), alpha.x), mul(lerpFactor, alpha.y));\n\n    // Pass into CDF to compute uniformly distrib threshold\n    var a = min$1(lerpFactor, lerpFactor.oneMinus());\n    var cases = vec3(x.mul(x).div(mul(2.0, a).mul(sub(1.0, a))), x.sub(mul(0.5, a)).div(sub(1.0, a)), sub(1.0, sub(1.0, x).mul(sub(1.0, x)).div(mul(2.0, a).mul(sub(1.0, a)))));\n\n    // Find our final, uniformly distributed alpha threshold (ατ)\n    var threshold = x.lessThan(a.oneMinus()).select(x.lessThan(a).select(cases.x, cases.y), cases.z);\n\n    // Avoids ατ == 0. Could also do ατ =1-ατ\n    return clamp(threshold, 1.0e-6, 1.0);\n  }).setLayout({\n    name: 'getAlphaHashThreshold',\n    type: 'float',\n    inputs: [{\n      name: 'position',\n      type: 'vec3'\n    }]\n  });\n\n  /**\n   * Base class for all node materials.\n   *\n   * @augments Material\n   */\n  var NodeMaterial = exports.NodeMaterial = /*#__PURE__*/function (_Material) {\n    /**\n     * Constructs a new node material.\n     */\n    function NodeMaterial() {\n      var _this73;\n      (0, _classCallCheck2.default)(this, NodeMaterial);\n      _this73 = _callSuper(this, NodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this73.isNodeMaterial = true;\n\n      /**\n       * Whether this material is affected by fog or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this73.fog = true;\n\n      /**\n       * Whether this material is affected by lights or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this73.lights = false;\n\n      /**\n       * Whether this material uses hardware clipping or not.\n       * This property is managed by the engine and should not be\n       * modified by apps.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this73.hardwareClipping = false;\n\n      /**\n       * Node materials which set their `lights` property to `true`\n       * are affected by all lights of the scene. Sometimes selective\n       * lighting is wanted which means only _some_ lights in the scene\n       * affect a material. This can be achieved by creating an instance\n       * of {@link module:LightsNode~LightsNode} with a list of selective\n       * lights and assign the node to this property.\n       *\n       * ```js\n       * const customLightsNode = lights( [ light1, light2 ] );\n       * material.lightsNode = customLightsNode;\n       * ```\n       *\n       * @type {LightsNode?}\n       * @default null\n       */\n      _this73.lightsNode = null;\n\n      /**\n       * The environment of node materials can be defined by an environment\n       * map assigned to the `envMap` property or by `Scene.environment`\n       * if the node material is a PBR material. This node property allows to overwrite\n       * the default behavior and define the environment with a custom node.\n       *\n       * ```js\n       * material.envNode = pmremTexture( renderTarget.texture );\n       * ```\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this73.envNode = null;\n\n      /**\n       * The lighting of node materials might be influenced by ambient occlusion.\n       * The default AO is inferred from an ambient occlusion map assigned to `aoMap`\n       * and the respective `aoMapIntensity`. This node property allows to overwrite\n       * the default and define the ambient occlusion with a custom node instead.\n       *\n       * If you don't want to overwrite the diffuse color but modify the existing\n       * values instead, use {@link module:MaterialNode.materialAO}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this73.aoNode = null;\n\n      /**\n       * The diffuse color of node materials is by default inferred from the\n       * `color` and `map` properties. This node property allows to overwrite the default\n       * and define the diffuse color with a node instead.\n       *\n       * ```js\n       * material.colorNode = color( 0xff0000 ); // define red color\n       * ```\n       *\n       * If you don't want to overwrite the diffuse color but modify the existing\n       * values instead, use {@link module:MaterialNode.materialColor}.\n       *\n       * ```js\n       * material.colorNode = materialColor.mul( color( 0xff0000 ) ); // give diffuse colors a red tint\n       * ```\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this73.colorNode = null;\n\n      /**\n       * The normals of node materials are by default inferred from the `normalMap`/`normalScale`\n       * or `bumpMap`/`bumpScale` properties. This node property allows to overwrite the default\n       * and define the normals with a node instead.\n       *\n       * If you don't want to overwrite the normals but modify the existing values instead,\n       * use {@link module:MaterialNode.materialNormal}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this73.normalNode = null;\n\n      /**\n       * The opacity of node materials is by default inferred from the `opacity`\n       * and `alphaMap` properties. This node property allows to overwrite the default\n       * and define the opacity with a node instead.\n       *\n       * If you don't want to overwrite the normals but modify the existing\n       * value instead, use {@link module:MaterialNode.materialOpacity}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this73.opacityNode = null;\n\n      /**\n       * This node can be used to to implement a variety of filter-like effects. The idea is\n       * to store the current rendering into a texture e.g. via `viewportSharedTexture()`, use it\n       * to create an arbitrary effect and then assign the node composition to this property.\n       * Everything behind the object using this material will now be affected by a filter.\n       *\n       * ```js\n       * const material = new NodeMaterial()\n       * material.transparent = true;\n       *\n       * // everything behind the object will be monochromatic\n       * material.backdropNode = viewportSharedTexture().rgb.saturation( 0 );\n       * ```\n       *\n       * Backdrop computations are part of the lighting so only lit materials can use this property.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this73.backdropNode = null;\n\n      /**\n       * This node allows to modulate the influence of `backdropNode` to the outgoing light.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this73.backdropAlphaNode = null;\n\n      /**\n       * The alpha test of node materials is by default inferred from the `alphaTest`\n       * property. This node property allows to overwrite the default and define the\n       * alpha test with a node instead.\n       *\n       * If you don't want to overwrite the alpha test but modify the existing\n       * value instead, use {@link module:MaterialNode.materialAlphaTest}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this73.alphaTestNode = null;\n\n      /**\n       * The local vertex positions are computed based on multiple factors like the\n       * attribute data, morphing or skinning. This node property allows to overwrite\n       * the default and define local vertex positions with nodes instead.\n       *\n       * If you don't want to overwrite the vertex positions but modify the existing\n       * values instead, use {@link module:Position.positionLocal}.\n       *\n       *```js\n       * material.positionNode = positionLocal.add( displace );\n       * ```\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this73.positionNode = null;\n\n      /**\n       * This node property is intended for logic which modifies geometry data once or per animation step.\n       * Apps usually place such logic randomly in initialization routines or in the animation loop.\n       * `geometryNode` is intended as a dedicated API so there is an intended spot where goemetry modiciations\n       * can be implemented.\n       *\n       * The idea is to assign a `Fn` definition that holds the geometry modification logic. A typical example\n       * would be a GPU based particle system that provides a node material for usage on app level. The particle\n       * simulation would be implemented as compute shaders and managed inside a `Fn` function. This function is\n       * eventually assigned to `geometryNode`.\n       *\n       * @type {Function}\n       * @default null\n       */\n      _this73.geometryNode = null;\n\n      /**\n       * Allows to overwrite depth values in the fragment shader.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this73.depthNode = null;\n\n      /**\n       * Allows to overwrite the position used for shadow map rendering which\n       * is by default {@link module:Position.positionWorld}, the vertex position\n       * in world space.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this73.shadowPositionNode = null;\n\n      /**\n       * This node can be used to influence how an object using this node material\n       * receive shadows.\n       *\n       * ```js\n       * const totalShadows = float( 1 ).toVar();\n       * material.receivedShadowNode = Fn( ( [ shadow ] ) => {\n       * \ttotalShadows.mulAssign( shadow );\n       * \t//return float( 1 ); // bypass received shadows\n       * \treturn shadow.mix( color( 0xff0000 ), 1 ); // modify shadow color\n       * } );\n       *\n       * @type {Node<vec4>?}\n       * @default null\n       */\n      _this73.receivedShadowNode = null;\n\n      /**\n       * This node can be used to influence how an object using this node material\n       * casts shadows. To apply a color to shadows, you can simply do:\n       *\n       * ```js\n       * material.castShadowNode = vec4( 1, 0, 0, 1 );\n       * ```\n       *\n       * Which can be nice to fake colored shadows of semi-transparent objects. It\n       * is also common to use the property with `Fn` function so checks are performed\n       * per fragment.\n       *\n       * ```js\n       * materialCustomShadow.castShadowNode = Fn( () => {\n       * \thash( vertexIndex ).greaterThan( 0.5 ).discard();\n       * \treturn materialColor;\n       * } )();\n       *  ```\n       *\n       * @type {Node<vec4>?}\n       * @default null\n       */\n      _this73.castShadowNode = null;\n\n      /**\n       * This node can be used to define the final output of the material.\n       *\n       * TODO: Explain the differences to `fragmentNode`.\n       *\n       * @type {Node<vec4>?}\n       * @default null\n       */\n      _this73.outputNode = null;\n\n      /**\n       * MRT configuration is done on renderer or pass level. This node allows to\n       * overwrite what values are written into MRT targets on material level. This\n       * can be useful for implementing selective FX features that should only affect\n       * specific objects.\n       *\n       * @type {MRTNode?}\n       * @default null\n       */\n      _this73.mrtNode = null;\n\n      /**\n       * This node property can be used if you need complete freedom in implementing\n       * the fragment shader. Assigning a node will replace the built-in material\n       * logic used in the fragment stage.\n       *\n       * @type {Node<vec4>?}\n       * @default null\n       */\n      _this73.fragmentNode = null;\n\n      /**\n       * This node property can be used if you need complete freedom in implementing\n       * the vertex shader. Assigning a node will replace the built-in material logic\n       * used in the vertex stage.\n       *\n       * @type {Node<vec4>?}\n       * @default null\n       */\n      _this73.vertexNode = null;\n      return _this73;\n    }\n\n    /**\n     * Allows to define a custom cache key that influence the material key computation\n     * for render objects.\n     *\n     * @return {String} The custom cache key.\n     */\n    (0, _inherits2.default)(NodeMaterial, _Material);\n    return (0, _createClass2.default)(NodeMaterial, [{\n      key: \"type\",\n      get:\n      /**\n       * Represents the type of the node material.\n       *\n       * @type {String}\n       */\n      function get() {\n        return this.constructor.type;\n      },\n      set: function set(_value) {/* */}\n    }, {\n      key: \"customProgramCacheKey\",\n      value: function customProgramCacheKey() {\n        return this.type + getCacheKey$1(this);\n      }\n\n      /**\n       * Builds this material with the given node builder.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"build\",\n      value: function build(builder) {\n        this.setup(builder);\n      }\n\n      /**\n       * Setups a node material observer with the given builder.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {NodeMaterialObserver} The node material observer.\n       */\n    }, {\n      key: \"setupObserver\",\n      value: function setupObserver(builder) {\n        return new NodeMaterialObserver(builder);\n      }\n\n      /**\n       * Setups the vertex and fragment stage of this node material.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this74 = this;\n        builder.context.setupNormal = function () {\n          return _this74.setupNormal(builder);\n        };\n        builder.context.setupPositionView = function () {\n          return _this74.setupPositionView(builder);\n        };\n        builder.context.setupModelViewProjection = function () {\n          return _this74.setupModelViewProjection(builder);\n        };\n        var renderer = builder.renderer;\n        var renderTarget = renderer.getRenderTarget();\n\n        // < VERTEX STAGE >\n\n        builder.addStack();\n        var vertexNode = this.vertexNode || this.setupVertex(builder);\n        builder.stack.outputNode = vertexNode;\n        this.setupHardwareClipping(builder);\n        if (this.geometryNode !== null) {\n          builder.stack.outputNode = builder.stack.outputNode.bypass(this.geometryNode);\n        }\n        builder.addFlow('vertex', builder.removeStack());\n\n        // < FRAGMENT STAGE >\n\n        builder.addStack();\n        var resultNode;\n        var clippingNode = this.setupClipping(builder);\n        if (this.depthWrite === true || this.depthTest === true) {\n          // only write depth if depth buffer is configured\n\n          if (renderTarget !== null) {\n            if (renderTarget.depthBuffer === true) this.setupDepth(builder);\n          } else {\n            if (renderer.depth === true) this.setupDepth(builder);\n          }\n        }\n        if (this.fragmentNode === null) {\n          this.setupDiffuseColor(builder);\n          this.setupVariants(builder);\n          var outgoingLightNode = this.setupLighting(builder);\n          if (clippingNode !== null) builder.stack.add(clippingNode);\n\n          // force unsigned floats - useful for RenderTargets\n\n          var basicOutput = vec4(outgoingLightNode, diffuseColor.a).max(0);\n          resultNode = this.setupOutput(builder, basicOutput);\n\n          // OUTPUT NODE\n\n          output.assign(resultNode);\n\n          //\n\n          if (this.outputNode !== null) resultNode = this.outputNode;\n\n          // MRT\n\n          if (renderTarget !== null) {\n            var _mrt = renderer.getMRT();\n            var materialMRT = this.mrtNode;\n            if (_mrt !== null) {\n              resultNode = _mrt;\n              if (materialMRT !== null) {\n                resultNode = _mrt.merge(materialMRT);\n              }\n            } else if (materialMRT !== null) {\n              resultNode = materialMRT;\n            }\n          }\n        } else {\n          var fragmentNode = this.fragmentNode;\n          if (fragmentNode.isOutputStructNode !== true) {\n            fragmentNode = vec4(fragmentNode);\n          }\n          resultNode = this.setupOutput(builder, fragmentNode);\n        }\n        builder.stack.outputNode = resultNode;\n        builder.addFlow('fragment', builder.removeStack());\n\n        // < MONITOR >\n\n        builder.monitor = this.setupObserver(builder);\n      }\n\n      /**\n       * Setups the clipping node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {ClippingNode} The clipping node.\n       */\n    }, {\n      key: \"setupClipping\",\n      value: function setupClipping(builder) {\n        if (builder.clippingContext === null) return null;\n        var _builder$clippingCont = builder.clippingContext,\n          unionPlanes = _builder$clippingCont.unionPlanes,\n          intersectionPlanes = _builder$clippingCont.intersectionPlanes;\n        var result = null;\n        if (unionPlanes.length > 0 || intersectionPlanes.length > 0) {\n          var samples = builder.renderer.samples;\n          if (this.alphaToCoverage && samples > 1) {\n            // to be added to flow when the color/alpha value has been determined\n            result = clippingAlpha();\n          } else {\n            builder.stack.add(clipping());\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Setups the hardware clipping if available on the current device.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupHardwareClipping\",\n      value: function setupHardwareClipping(builder) {\n        this.hardwareClipping = false;\n        if (builder.clippingContext === null) return;\n        var candidateCount = builder.clippingContext.unionPlanes.length;\n\n        // 8 planes supported by WebGL ANGLE_clip_cull_distance and WebGPU clip-distances\n\n        if (candidateCount > 0 && candidateCount <= 8 && builder.isAvailable('clipDistance')) {\n          builder.stack.add(hardwareClipping());\n          this.hardwareClipping = true;\n        }\n        return;\n      }\n\n      /**\n       * Setups the depth of this material.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupDepth\",\n      value: function setupDepth(builder) {\n        var renderer = builder.renderer,\n          camera = builder.camera;\n\n        // Depth\n\n        var depthNode = this.depthNode;\n        if (depthNode === null) {\n          var _mrt2 = renderer.getMRT();\n          if (_mrt2 && _mrt2.has('depth')) {\n            depthNode = _mrt2.get('depth');\n          } else if (renderer.logarithmicDepthBuffer === true) {\n            if (camera.isPerspectiveCamera) {\n              depthNode = viewZToLogarithmicDepth(positionView.z, cameraNear, cameraFar);\n            } else {\n              depthNode = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);\n            }\n          }\n        }\n        if (depthNode !== null) {\n          depth.assign(depthNode).append();\n        }\n      }\n\n      /**\n       * Setups the position node in view space. This method exists\n       * so derived node materials can modifiy the implementation e.g. sprite materials.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec3>} The position in view space.\n       */\n    }, {\n      key: \"setupPositionView\",\n      value: function setupPositionView(/*builder*/\n      ) {\n        return modelViewMatrix.mul(positionLocal).xyz;\n      }\n\n      /**\n       * Setups the position in clip space.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec4>} The position in view space.\n       */\n    }, {\n      key: \"setupModelViewProjection\",\n      value: function setupModelViewProjection(/*builder*/\n      ) {\n        return cameraProjectionMatrix.mul(positionView);\n      }\n\n      /**\n       * Setups the logic for the vertex stage.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec4>} The position in clip space.\n       */\n    }, {\n      key: \"setupVertex\",\n      value: function setupVertex(builder) {\n        builder.addStack();\n        this.setupPosition(builder);\n        builder.context.vertex = builder.removeStack();\n        return modelViewProjection;\n      }\n\n      /**\n       * Setups the computation of the position in local space.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec3>} The position in local space.\n       */\n    }, {\n      key: \"setupPosition\",\n      value: function setupPosition(builder) {\n        var object = builder.object,\n          geometry = builder.geometry;\n        if (geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color) {\n          morphReference(object).append();\n        }\n        if (object.isSkinnedMesh === true) {\n          skinningReference(object).append();\n        }\n        if (this.displacementMap) {\n          var displacementMap = materialReference('displacementMap', 'texture');\n          var displacementScale = materialReference('displacementScale', 'float');\n          var displacementBias = materialReference('displacementBias', 'float');\n          positionLocal.addAssign(normalLocal.normalize().mul(displacementMap.x.mul(displacementScale).add(displacementBias)));\n        }\n        if (object.isBatchedMesh) {\n          batch(object).append();\n        }\n        if (object.isInstancedMesh && object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true) {\n          instancedMesh(object).append();\n        }\n        if (this.positionNode !== null) {\n          positionLocal.assign(this.positionNode.context({\n            isPositionNodeInput: true\n          }));\n        }\n        return positionLocal;\n      }\n\n      /**\n       * Setups the computation of the material's diffuse color.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {BufferGeometry} geometry - The geometry.\n       */\n    }, {\n      key: \"setupDiffuseColor\",\n      value: function setupDiffuseColor(_ref52) {\n        var object = _ref52.object,\n          geometry = _ref52.geometry;\n        var colorNode = this.colorNode ? vec4(this.colorNode) : materialColor;\n\n        // VERTEX COLORS\n\n        if (this.vertexColors === true && geometry.hasAttribute('color')) {\n          colorNode = vec4(colorNode.xyz.mul(attribute('color', 'vec3')), colorNode.a);\n        }\n\n        // Instanced colors\n\n        if (object.instanceColor) {\n          var instanceColor = varyingProperty('vec3', 'vInstanceColor');\n          colorNode = instanceColor.mul(colorNode);\n        }\n        if (object.isBatchedMesh && object._colorsTexture) {\n          var batchColor = varyingProperty('vec3', 'vBatchColor');\n          colorNode = batchColor.mul(colorNode);\n        }\n\n        // COLOR\n\n        diffuseColor.assign(colorNode);\n\n        // OPACITY\n\n        var opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;\n        diffuseColor.a.assign(diffuseColor.a.mul(opacityNode));\n\n        // ALPHA TEST\n\n        if (this.alphaTestNode !== null || this.alphaTest > 0) {\n          var alphaTestNode = this.alphaTestNode !== null ? float(this.alphaTestNode) : materialAlphaTest;\n          diffuseColor.a.lessThanEqual(alphaTestNode).discard();\n        }\n\n        // ALPHA HASH\n\n        if (this.alphaHash === true) {\n          diffuseColor.a.lessThan(getAlphaHashThreshold(positionLocal)).discard();\n        }\n        if (this.transparent === false && this.blending === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending && this.alphaToCoverage === false) {\n          diffuseColor.a.assign(1.0);\n        }\n      }\n\n      /**\n       * Abstract interface method that can be implemented by derived materials\n       * to setup material-specific node variables.\n       *\n       * @abstract\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupVariants\",\n      value: function setupVariants(/*builder*/\n      ) {\n\n        // Interface function.\n      }\n\n      /**\n       * Setups the outgoing light node variable\n       *\n       * @return {Node<vec3>} The outgoing light node.\n       */\n    }, {\n      key: \"setupOutgoingLight\",\n      value: function setupOutgoingLight() {\n        return this.lights === true ? vec3(0) : diffuseColor.rgb;\n      }\n\n      /**\n       * Setups the normal node from the material.\n       *\n       * @return {Node<vec3>} The normal node.\n       */\n    }, {\n      key: \"setupNormal\",\n      value: function setupNormal() {\n        return this.normalNode ? vec3(this.normalNode) : materialNormal;\n      }\n\n      /**\n       * Setups the environment node from the material.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec4>} The environment node.\n       */\n    }, {\n      key: \"setupEnvironment\",\n      value: function setupEnvironment(/*builder*/\n      ) {\n        var node = null;\n        if (this.envNode) {\n          node = this.envNode;\n        } else if (this.envMap) {\n          node = this.envMap.isCubeTexture ? materialReference('envMap', 'cubeTexture') : materialReference('envMap', 'texture');\n        }\n        return node;\n      }\n\n      /**\n       * Setups the light map node from the material.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec3>} The light map node.\n       */\n    }, {\n      key: \"setupLightMap\",\n      value: function setupLightMap(builder) {\n        var node = null;\n        if (builder.material.lightMap) {\n          node = new IrradianceNode(materialLightMap);\n        }\n        return node;\n      }\n\n      /**\n       * Setups the lights node based on the scene, environment and material.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {LightsNode} The lights node.\n       */\n    }, {\n      key: \"setupLights\",\n      value: function setupLights(builder) {\n        var materialLightsNode = [];\n\n        //\n\n        var envNode = this.setupEnvironment(builder);\n        if (envNode && envNode.isLightingNode) {\n          materialLightsNode.push(envNode);\n        }\n        var lightMapNode = this.setupLightMap(builder);\n        if (lightMapNode && lightMapNode.isLightingNode) {\n          materialLightsNode.push(lightMapNode);\n        }\n        if (this.aoNode !== null || builder.material.aoMap) {\n          var aoNode = this.aoNode !== null ? this.aoNode : materialAO;\n          materialLightsNode.push(new AONode(aoNode));\n        }\n        var lightsN = this.lightsNode || builder.lightsNode;\n        if (materialLightsNode.length > 0) {\n          lightsN = builder.renderer.lighting.createNode([].concat((0, _toConsumableArray2.default)(lightsN.getLights()), materialLightsNode));\n        }\n        return lightsN;\n      }\n\n      /**\n       * This method should be implemented by most derived materials\n       * since it defines the material's lighting model.\n       *\n       * @abstract\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {LightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n\n        // Interface function.\n      }\n\n      /**\n       * Setups the outgoing light node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Node<vec3>} The outgoing light node.\n       */\n    }, {\n      key: \"setupLighting\",\n      value: function setupLighting(builder) {\n        var material = builder.material;\n        var backdropNode = this.backdropNode,\n          backdropAlphaNode = this.backdropAlphaNode,\n          emissiveNode = this.emissiveNode;\n\n        // OUTGOING LIGHT\n\n        var lights = this.lights === true || this.lightsNode !== null;\n        var lightsNode = lights ? this.setupLights(builder) : null;\n        var outgoingLightNode = this.setupOutgoingLight(builder);\n        if (lightsNode && lightsNode.getScope().hasLights) {\n          var lightingModel = this.setupLightingModel(builder);\n          outgoingLightNode = lightingContext(lightsNode, lightingModel, backdropNode, backdropAlphaNode);\n        } else if (backdropNode !== null) {\n          outgoingLightNode = vec3(backdropAlphaNode !== null ? mix(outgoingLightNode, backdropNode, backdropAlphaNode) : backdropNode);\n        }\n\n        // EMISSIVE\n\n        if (emissiveNode && emissiveNode.isNode === true || material.emissive && material.emissive.isColor === true) {\n          emissive.assign(vec3(emissiveNode ? emissiveNode : materialEmissive));\n          outgoingLightNode = outgoingLightNode.add(emissive);\n        }\n        return outgoingLightNode;\n      }\n\n      /**\n       * Setups the output node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node<vec4>} outputNode - The existing output node.\n       * @return {Node<vec4>} The output node.\n       */\n    }, {\n      key: \"setupOutput\",\n      value: function setupOutput(builder, outputNode) {\n        // FOG\n\n        if (this.fog === true) {\n          var fogNode = builder.fogNode;\n          if (fogNode) {\n            output.assign(outputNode);\n            outputNode = vec4(fogNode);\n          }\n        }\n        return outputNode;\n      }\n\n      /**\n       * Most classic material types have a node pendant e.g. for `MeshBasicMaterial`\n       * there is `MeshBasicNodeMaterial`. This utility method is intended for\n       * defining all material properties of the classic type in the node type.\n       *\n       * @param {Material} material - The material to copy properties with their values to this node material.\n       */\n    }, {\n      key: \"setDefaultValues\",\n      value: function setDefaultValues(material) {\n        // This approach is to reuse the native refreshUniforms*\n        // and turn available the use of features like transmission and environment in core\n\n        for (var _property8 in material) {\n          var value = material[_property8];\n          if (this[_property8] === undefined) {\n            this[_property8] = value;\n            if (value && value.clone) this[_property8] = value.clone();\n          }\n        }\n        var descriptors = Object.getOwnPropertyDescriptors(material.constructor.prototype);\n        for (var key in descriptors) {\n          if (Object.getOwnPropertyDescriptor(this.constructor.prototype, key) === undefined && descriptors[key].get !== undefined) {\n            Object.defineProperty(this.constructor.prototype, key, descriptors[key]);\n          }\n        }\n      }\n\n      /**\n       * Serializes this material to JSON.\n       *\n       * @param {(Object|String)?} meta - The meta information for serialization.\n       * @return {Object} The serialized node.\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var isRoot = meta === undefined || typeof meta === 'string';\n        if (isRoot) {\n          meta = {\n            textures: {},\n            images: {},\n            nodes: {}\n          };\n        }\n        var data = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Material.prototype.toJSON.call(this, meta);\n        var nodeChildren = getNodeChildren(this);\n        data.inputNodes = {};\n        for (var _ref53 of nodeChildren) {\n          var _property9 = _ref53.property;\n          var childNode = _ref53.childNode;\n          data.inputNodes[_property9] = childNode.toJSON(meta).uuid;\n        }\n\n        // TODO: Copied from Object3D.toJSON\n\n        function extractFromCache(cache) {\n          var values = [];\n          for (var key in cache) {\n            var _data2 = cache[key];\n            delete _data2.metadata;\n            values.push(_data2);\n          }\n          return values;\n        }\n        if (isRoot) {\n          var textures = extractFromCache(meta.textures);\n          var images = extractFromCache(meta.images);\n          var nodes = extractFromCache(meta.nodes);\n          if (textures.length > 0) data.textures = textures;\n          if (images.length > 0) data.images = images;\n          if (nodes.length > 0) data.nodes = nodes;\n        }\n        return data;\n      }\n\n      /**\n       * Copies the properties of the given node material to this instance.\n       *\n       * @param {NodeMaterial} source - The material to copy.\n       * @return {NodeMaterial} A reference to this node material.\n       */\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.lightsNode = source.lightsNode;\n        this.envNode = source.envNode;\n        this.colorNode = source.colorNode;\n        this.normalNode = source.normalNode;\n        this.opacityNode = source.opacityNode;\n        this.backdropNode = source.backdropNode;\n        this.backdropAlphaNode = source.backdropAlphaNode;\n        this.alphaTestNode = source.alphaTestNode;\n        this.positionNode = source.positionNode;\n        this.geometryNode = source.geometryNode;\n        this.depthNode = source.depthNode;\n        this.shadowPositionNode = source.shadowPositionNode;\n        this.receivedShadowNode = source.receivedShadowNode;\n        this.castShadowNode = source.castShadowNode;\n        this.outputNode = source.outputNode;\n        this.mrtNode = source.mrtNode;\n        this.fragmentNode = source.fragmentNode;\n        this.vertexNode = source.vertexNode;\n        return _superPropGet(NodeMaterial, \"copy\", this, 3)([source]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'NodeMaterial';\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Material);\n  var _defaultValues$e = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PointsMaterial)();\n\n  /**\n   * Unlike WebGL, WebGPU can render point primitives only with a size\n   * of one pixel. This type node material can be used to mimic the WebGL\n   * points rendering by rendering small planes via instancing.\n   *\n   * This material should be used with {@link InstancedPointsGeometry}.\n   *\n   * @augments NodeMaterial\n   */\n  var InstancedPointsNodeMaterial = exports.InstancedPointsNodeMaterial = /*#__PURE__*/function (_NodeMaterial) {\n    /**\n     * Constructs a new instanced points node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function InstancedPointsNodeMaterial() {\n      var _this75;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, InstancedPointsNodeMaterial);\n      _this75 = _callSuper(this, InstancedPointsNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this75.isInstancedPointsNodeMaterial = true;\n\n      /**\n       * Whether vertex colors should be used or not. If set to `true`,\n       * each point instance can receive a custom color value.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this75.useColor = parameters.vertexColors;\n\n      /**\n       * The points width in pixels.\n       *\n       * @type {Number}\n       * @default 1\n       */\n      _this75.pointWidth = 1;\n\n      /**\n       * This node can be used to define the colors for each instance.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this75.pointColorNode = null;\n\n      /**\n       * This node can be used to define the width for each point instance.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this75.pointWidthNode = null;\n      _this75._useAlphaToCoverage = true;\n      _this75.setDefaultValues(_defaultValues$e);\n      _this75.setValues(parameters);\n      return _this75;\n    }\n\n    /**\n     * Setups the vertex and fragment stage of this node material.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(InstancedPointsNodeMaterial, _NodeMaterial);\n    return (0, _createClass2.default)(InstancedPointsNodeMaterial, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this76 = this;\n        var renderer = builder.renderer;\n        var useAlphaToCoverage = this._useAlphaToCoverage;\n        var useColor = this.useColor;\n        this.vertexNode = Fn(function () {\n          var instancePosition = attribute('instancePosition').xyz;\n\n          // camera space\n          var mvPos = vec4(modelViewMatrix.mul(vec4(instancePosition, 1.0)));\n          var aspect = viewport.z.div(viewport.w);\n\n          // clip space\n          var clipPos = cameraProjectionMatrix.mul(mvPos);\n\n          // offset in ndc space\n          var offset = positionGeometry.xy.toVar();\n          offset.mulAssign(_this76.pointWidthNode ? _this76.pointWidthNode : materialPointWidth);\n          offset.assign(offset.div(viewport.z));\n          offset.y.assign(offset.y.mul(aspect));\n\n          // back to clip space\n          offset.assign(offset.mul(clipPos.w));\n\n          //clipPos.xy += offset;\n          clipPos.addAssign(vec4(offset, 0, 0));\n          return clipPos;\n        })();\n        this.fragmentNode = Fn(function () {\n          var alpha = float(1).toVar();\n          var len2 = lengthSq(uv().mul(2).sub(1));\n          if (useAlphaToCoverage && renderer.samples > 1) {\n            var dlen = float(len2.fwidth()).toVar();\n            alpha.assign(smoothstep(dlen.oneMinus(), dlen.add(1), len2).oneMinus());\n          } else {\n            len2.greaterThan(1.0).discard();\n          }\n          var pointColorNode;\n          if (_this76.pointColorNode) {\n            pointColorNode = _this76.pointColorNode;\n          } else {\n            if (useColor) {\n              var instanceColor = attribute('instanceColor');\n              pointColorNode = instanceColor.mul(materialColor);\n            } else {\n              pointColorNode = materialColor;\n            }\n          }\n          alpha.mulAssign(materialOpacity);\n          return vec4(pointColorNode, alpha);\n        })();\n        _superPropGet(InstancedPointsNodeMaterial, \"setup\", this, 3)([builder]);\n      }\n\n      /**\n       * Whether alpha to coverage should be used or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"alphaToCoverage\",\n      get: function get() {\n        return this._useAlphaToCoverage;\n      },\n      set: function set(value) {\n        if (this._useAlphaToCoverage !== value) {\n          this._useAlphaToCoverage = value;\n          this.needsUpdate = true;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'InstancedPointsNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var _defaultValues$d = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineBasicMaterial)();\n\n  /**\n   * Node material version of `LineBasicMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var LineBasicNodeMaterial = exports.LineBasicNodeMaterial = /*#__PURE__*/function (_NodeMaterial2) {\n    /**\n     * Constructs a new line basic node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function LineBasicNodeMaterial(parameters) {\n      var _this77;\n      (0, _classCallCheck2.default)(this, LineBasicNodeMaterial);\n      _this77 = _callSuper(this, LineBasicNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this77.isLineBasicNodeMaterial = true;\n      _this77.setDefaultValues(_defaultValues$d);\n      _this77.setValues(parameters);\n      return _this77;\n    }\n    (0, _inherits2.default)(LineBasicNodeMaterial, _NodeMaterial2);\n    return (0, _createClass2.default)(LineBasicNodeMaterial, null, [{\n      key: \"type\",\n      get: function get() {\n        return 'LineBasicNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var _defaultValues$c = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineDashedMaterial)();\n\n  /**\n   * Node material version of `LineDashedMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var LineDashedNodeMaterial = exports.LineDashedNodeMaterial = /*#__PURE__*/function (_NodeMaterial3) {\n    /**\n     * Constructs a new line dashed node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function LineDashedNodeMaterial(parameters) {\n      var _this78;\n      (0, _classCallCheck2.default)(this, LineDashedNodeMaterial);\n      _this78 = _callSuper(this, LineDashedNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this78.isLineDashedNodeMaterial = true;\n      _this78.setDefaultValues(_defaultValues$c);\n\n      /**\n       * The dash offset.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this78.dashOffset = 0;\n\n      /**\n       * The offset of dash materials is by default inferred from the `dashOffset`\n       * property. This node property allows to overwrite the default\n       * and define the offset with a node instead.\n       *\n       * If you don't want to overwrite the offset but modify the existing\n       * value instead, use {@link module:MaterialNode.materialLineDashOffset}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this78.offsetNode = null;\n\n      /**\n       * The scale of dash materials is by default inferred from the `scale`\n       * property. This node property allows to overwrite the default\n       * and define the scale with a node instead.\n       *\n       * If you don't want to overwrite the scale but modify the existing\n       * value instead, use {@link module:MaterialNode.materialLineScale}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this78.dashScaleNode = null;\n\n      /**\n       * The dash size of dash materials is by default inferred from the `dashSize`\n       * property. This node property allows to overwrite the default\n       * and define the dash size with a node instead.\n       *\n       * If you don't want to overwrite the dash size but modify the existing\n       * value instead, use {@link module:MaterialNode.materialLineDashSize}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this78.dashSizeNode = null;\n\n      /**\n       * The gap size of dash materials is by default inferred from the `gapSize`\n       * property. This node property allows to overwrite the default\n       * and define the gap size with a node instead.\n       *\n       * If you don't want to overwrite the gap size but modify the existing\n       * value instead, use {@link module:MaterialNode.materialLineGapSize}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this78.gapSizeNode = null;\n      _this78.setValues(parameters);\n      return _this78;\n    }\n\n    /**\n     * Setups the dash specific node variables.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(LineDashedNodeMaterial, _NodeMaterial3);\n    return (0, _createClass2.default)(LineDashedNodeMaterial, [{\n      key: \"setupVariants\",\n      value: function setupVariants(/* builder */\n      ) {\n        var offsetNode = this.offsetNode ? float(this.offsetNode) : materialLineDashOffset;\n        var dashScaleNode = this.dashScaleNode ? float(this.dashScaleNode) : materialLineScale;\n        var dashSizeNode = this.dashSizeNode ? float(this.dashSizeNode) : materialLineDashSize;\n        var gapSizeNode = this.gapSizeNode ? float(this.gapSizeNode) : materialLineGapSize;\n        dashSize.assign(dashSizeNode);\n        gapSize.assign(gapSizeNode);\n        var vLineDistance = varying(attribute('lineDistance').mul(dashScaleNode));\n        var vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;\n        vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'LineDashedNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /** @module ViewportSharedTextureNode **/\n  var _sharedFramebuffer = null;\n\n  /**\n   * `ViewportTextureNode` creates an internal texture for each node instance. This module\n   * shares a texture across all instances of `ViewportSharedTextureNode`. It should\n   * be the first choice when using data of the default/screen framebuffer for performance reasons.\n   *\n   * @augments module:ViewportTextureNode~ViewportTextureNode\n   */\n  var ViewportSharedTextureNode = exports.ViewportSharedTextureNode = /*#__PURE__*/function (_ViewportTextureNode2) {\n    /**\n     * Constructs a new viewport shared texture node.\n     *\n     * @param {Node} [uvNode=screenUV] - The uv node.\n     * @param {Node?} [levelNode=null] - The level node.\n     */\n    function ViewportSharedTextureNode() {\n      var uvNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenUV;\n      var levelNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, ViewportSharedTextureNode);\n      if (_sharedFramebuffer === null) {\n        _sharedFramebuffer = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FramebufferTexture)();\n      }\n      return _callSuper(this, ViewportSharedTextureNode, [uvNode, levelNode, _sharedFramebuffer]);\n    }\n    (0, _inherits2.default)(ViewportSharedTextureNode, _ViewportTextureNode2);\n    return (0, _createClass2.default)(ViewportSharedTextureNode, [{\n      key: \"updateReference\",\n      value: function updateReference() {\n        return this;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ViewportSharedTextureNode';\n      }\n    }]);\n  }(ViewportTextureNode);\n  /**\n   * TSL function for creating a shared viewport texture node.\n   *\n   * @function\n   * @param {Node} [uvNode=screenUV] - The uv node.\n   * @param {Node?} [levelNode=null] - The level node.\n   * @returns {ViewportSharedTextureNode}\n   */\n  var viewportSharedTexture = /*@__PURE__*/nodeProxy(ViewportSharedTextureNode);\n  var _defaultValues$b = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LineDashedMaterial)();\n\n  /**\n   * This node material can be used to render lines with a size larger than one\n   * by representing them as instanced meshes.\n   *\n   * @augments NodeMaterial\n   */\n  var Line2NodeMaterial = exports.Line2NodeMaterial = /*#__PURE__*/function (_NodeMaterial4) {\n    /**\n     * Constructs a new node material for wide line rendering.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function Line2NodeMaterial() {\n      var _this79;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, Line2NodeMaterial);\n      _this79 = _callSuper(this, Line2NodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this79.isLine2NodeMaterial = true;\n      _this79.setDefaultValues(_defaultValues$b);\n\n      /**\n       * Whether vertex colors should be used or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this79.useColor = parameters.vertexColors;\n\n      /**\n       * The dash offset.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this79.dashOffset = 0;\n\n      /**\n       * The line width.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this79.lineWidth = 1;\n\n      /**\n       * Defines the lines color.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this79.lineColorNode = null;\n\n      /**\n       * Defines the offset.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this79.offsetNode = null;\n\n      /**\n       * Defines the dash scale.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this79.dashScaleNode = null;\n\n      /**\n       * Defines the dash size.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this79.dashSizeNode = null;\n\n      /**\n       * Defines the gap size.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this79.gapSizeNode = null;\n\n      /**\n       * Blending is set to `NoBlending` since transparency\n       * is not supported, yet.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this79.blending = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending;\n      _this79._useDash = parameters.dashed;\n      _this79._useAlphaToCoverage = true;\n      _this79._useWorldUnits = false;\n      _this79.setValues(parameters);\n      return _this79;\n    }\n\n    /**\n     * Setups the vertex and fragment stage of this node material.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(Line2NodeMaterial, _NodeMaterial4);\n    return (0, _createClass2.default)(Line2NodeMaterial, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this80 = this;\n        var renderer = builder.renderer;\n        var useAlphaToCoverage = this._useAlphaToCoverage;\n        var useColor = this.useColor;\n        var useDash = this._useDash;\n        var useWorldUnits = this._useWorldUnits;\n        var trimSegment = Fn(function (_ref54) {\n          var start = _ref54.start,\n            end = _ref54.end;\n          var a = cameraProjectionMatrix.element(2).element(2); // 3nd entry in 3th column\n          var b = cameraProjectionMatrix.element(3).element(2); // 3nd entry in 4th column\n          var nearEstimate = b.mul(-0.5).div(a);\n          var alpha = nearEstimate.sub(start.z).div(end.z.sub(start.z));\n          return vec4(mix(start.xyz, end.xyz, alpha), end.w);\n        }).setLayout({\n          name: 'trimSegment',\n          type: 'vec4',\n          inputs: [{\n            name: 'start',\n            type: 'vec4'\n          }, {\n            name: 'end',\n            type: 'vec4'\n          }]\n        });\n        this.vertexNode = Fn(function () {\n          var instanceStart = attribute('instanceStart');\n          var instanceEnd = attribute('instanceEnd');\n\n          // camera space\n\n          var start = vec4(modelViewMatrix.mul(vec4(instanceStart, 1.0))).toVar('start');\n          var end = vec4(modelViewMatrix.mul(vec4(instanceEnd, 1.0))).toVar('end');\n          if (useDash) {\n            var dashScaleNode = _this80.dashScaleNode ? float(_this80.dashScaleNode) : materialLineScale;\n            var offsetNode = _this80.offsetNode ? float(_this80.offsetNode) : materialLineDashOffset;\n            var instanceDistanceStart = attribute('instanceDistanceStart');\n            var instanceDistanceEnd = attribute('instanceDistanceEnd');\n            var lineDistance = positionGeometry.y.lessThan(0.5).select(dashScaleNode.mul(instanceDistanceStart), dashScaleNode.mul(instanceDistanceEnd));\n            lineDistance = lineDistance.add(offsetNode);\n            varyingProperty('float', 'lineDistance').assign(lineDistance);\n          }\n          if (useWorldUnits) {\n            varyingProperty('vec3', 'worldStart').assign(start.xyz);\n            varyingProperty('vec3', 'worldEnd').assign(end.xyz);\n          }\n          var aspect = viewport.z.div(viewport.w);\n\n          // special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n          // clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n          // but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n          // perhaps there is a more elegant solution -- WestLangley\n\n          var perspective = cameraProjectionMatrix.element(2).element(3).equal(-1.0); // 4th entry in the 3rd column\n\n          If(perspective, function () {\n            If(start.z.lessThan(0.0).and(end.z.greaterThan(0.0)), function () {\n              end.assign(trimSegment({\n                start: start,\n                end: end\n              }));\n            }).ElseIf(end.z.lessThan(0.0).and(start.z.greaterThanEqual(0.0)), function () {\n              start.assign(trimSegment({\n                start: end,\n                end: start\n              }));\n            });\n          });\n\n          // clip space\n          var clipStart = cameraProjectionMatrix.mul(start);\n          var clipEnd = cameraProjectionMatrix.mul(end);\n\n          // ndc space\n          var ndcStart = clipStart.xyz.div(clipStart.w);\n          var ndcEnd = clipEnd.xyz.div(clipEnd.w);\n\n          // direction\n          var dir = ndcEnd.xy.sub(ndcStart.xy).toVar();\n\n          // account for clip-space aspect ratio\n          dir.x.assign(dir.x.mul(aspect));\n          dir.assign(dir.normalize());\n          var clip = vec4().toVar();\n          if (useWorldUnits) {\n            // get the offset direction as perpendicular to the view vector\n\n            var worldDir = end.xyz.sub(start.xyz).normalize();\n            var tmpFwd = mix(start.xyz, end.xyz, 0.5).normalize();\n            var worldUp = worldDir.cross(tmpFwd).normalize();\n            var worldFwd = worldDir.cross(worldUp);\n            var worldPos = varyingProperty('vec4', 'worldPos');\n            worldPos.assign(positionGeometry.y.lessThan(0.5).select(start, end));\n\n            // height offset\n            var hw = materialLineWidth.mul(0.5);\n            worldPos.addAssign(vec4(positionGeometry.x.lessThan(0.0).select(worldUp.mul(hw), worldUp.mul(hw).negate()), 0));\n\n            // don't extend the line if we're rendering dashes because we\n            // won't be rendering the endcaps\n            if (!useDash) {\n              // cap extension\n              worldPos.addAssign(vec4(positionGeometry.y.lessThan(0.5).select(worldDir.mul(hw).negate(), worldDir.mul(hw)), 0));\n\n              // add width to the box\n              worldPos.addAssign(vec4(worldFwd.mul(hw), 0));\n\n              // endcaps\n              If(positionGeometry.y.greaterThan(1.0).or(positionGeometry.y.lessThan(0.0)), function () {\n                worldPos.subAssign(vec4(worldFwd.mul(2.0).mul(hw), 0));\n              });\n            }\n\n            // project the worldpos\n            clip.assign(cameraProjectionMatrix.mul(worldPos));\n\n            // shift the depth of the projected points so the line\n            // segments overlap neatly\n            var clipPose = vec3().toVar();\n            clipPose.assign(positionGeometry.y.lessThan(0.5).select(ndcStart, ndcEnd));\n            clip.z.assign(clipPose.z.mul(clip.w));\n          } else {\n            var offset = vec2(dir.y, dir.x.negate()).toVar('offset');\n\n            // undo aspect ratio adjustment\n            dir.x.assign(dir.x.div(aspect));\n            offset.x.assign(offset.x.div(aspect));\n\n            // sign flip\n            offset.assign(positionGeometry.x.lessThan(0.0).select(offset.negate(), offset));\n\n            // endcaps\n            If(positionGeometry.y.lessThan(0.0), function () {\n              offset.assign(offset.sub(dir));\n            }).ElseIf(positionGeometry.y.greaterThan(1.0), function () {\n              offset.assign(offset.add(dir));\n            });\n\n            // adjust for linewidth\n            offset.assign(offset.mul(materialLineWidth));\n\n            // adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n            offset.assign(offset.div(viewport.w));\n\n            // select end\n            clip.assign(positionGeometry.y.lessThan(0.5).select(clipStart, clipEnd));\n\n            // back to clip space\n            offset.assign(offset.mul(clip.w));\n            clip.assign(clip.add(vec4(offset, 0, 0)));\n          }\n          return clip;\n        })();\n        var closestLineToLine = Fn(function (_ref55) {\n          var p1 = _ref55.p1,\n            p2 = _ref55.p2,\n            p3 = _ref55.p3,\n            p4 = _ref55.p4;\n          var p13 = p1.sub(p3);\n          var p43 = p4.sub(p3);\n          var p21 = p2.sub(p1);\n          var d1343 = p13.dot(p43);\n          var d4321 = p43.dot(p21);\n          var d1321 = p13.dot(p21);\n          var d4343 = p43.dot(p43);\n          var d2121 = p21.dot(p21);\n          var denom = d2121.mul(d4343).sub(d4321.mul(d4321));\n          var numer = d1343.mul(d4321).sub(d1321.mul(d4343));\n          var mua = numer.div(denom).clamp();\n          var mub = d1343.add(d4321.mul(mua)).div(d4343).clamp();\n          return vec2(mua, mub);\n        });\n        this.colorNode = Fn(function () {\n          var vUv = uv();\n          if (useDash) {\n            var dashSizeNode = _this80.dashSizeNode ? float(_this80.dashSizeNode) : materialLineDashSize;\n            var gapSizeNode = _this80.gapSizeNode ? float(_this80.gapSizeNode) : materialLineGapSize;\n            dashSize.assign(dashSizeNode);\n            gapSize.assign(gapSizeNode);\n            var vLineDistance = varyingProperty('float', 'lineDistance');\n            vUv.y.lessThan(-1.0).or(vUv.y.greaterThan(1.0)).discard(); // discard endcaps\n            vLineDistance.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard(); // todo - FIX\n          }\n          var alpha = float(1).toVar('alpha');\n          if (useWorldUnits) {\n            var worldStart = varyingProperty('vec3', 'worldStart');\n            var worldEnd = varyingProperty('vec3', 'worldEnd');\n\n            // Find the closest points on the view ray and the line segment\n            var rayEnd = varyingProperty('vec4', 'worldPos').xyz.normalize().mul(1e5);\n            var lineDir = worldEnd.sub(worldStart);\n            var params = closestLineToLine({\n              p1: worldStart,\n              p2: worldEnd,\n              p3: vec3(0.0, 0.0, 0.0),\n              p4: rayEnd\n            });\n            var p1 = worldStart.add(lineDir.mul(params.x));\n            var p2 = rayEnd.mul(params.y);\n            var delta = p1.sub(p2);\n            var len = delta.length();\n            var norm = len.div(materialLineWidth);\n            if (!useDash) {\n              if (useAlphaToCoverage && renderer.samples > 1) {\n                var dnorm = norm.fwidth();\n                alpha.assign(smoothstep(dnorm.negate().add(0.5), dnorm.add(0.5), norm).oneMinus());\n              } else {\n                norm.greaterThan(0.5).discard();\n              }\n            }\n          } else {\n            // round endcaps\n\n            if (useAlphaToCoverage && renderer.samples > 1) {\n              var a = vUv.x;\n              var b = vUv.y.greaterThan(0.0).select(vUv.y.sub(1.0), vUv.y.add(1.0));\n              var len2 = a.mul(a).add(b.mul(b));\n              var dlen = float(len2.fwidth()).toVar('dlen');\n              If(vUv.y.abs().greaterThan(1.0), function () {\n                alpha.assign(smoothstep(dlen.oneMinus(), dlen.add(1), len2).oneMinus());\n              });\n            } else {\n              If(vUv.y.abs().greaterThan(1.0), function () {\n                var a = vUv.x;\n                var b = vUv.y.greaterThan(0.0).select(vUv.y.sub(1.0), vUv.y.add(1.0));\n                var len2 = a.mul(a).add(b.mul(b));\n                len2.greaterThan(1.0).discard();\n              });\n            }\n          }\n          var lineColorNode;\n          if (_this80.lineColorNode) {\n            lineColorNode = _this80.lineColorNode;\n          } else {\n            if (useColor) {\n              var instanceColorStart = attribute('instanceColorStart');\n              var instanceColorEnd = attribute('instanceColorEnd');\n              var instanceColor = positionGeometry.y.lessThan(0.5).select(instanceColorStart, instanceColorEnd);\n              lineColorNode = instanceColor.mul(materialColor);\n            } else {\n              lineColorNode = materialColor;\n            }\n          }\n          return vec4(lineColorNode, alpha);\n        })();\n        if (this.transparent) {\n          var opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;\n          this.outputNode = vec4(this.colorNode.rgb.mul(opacityNode).add(viewportSharedTexture().rgb.mul(opacityNode.oneMinus())), this.colorNode.a);\n        }\n        _superPropGet(Line2NodeMaterial, \"setup\", this, 3)([builder]);\n      }\n\n      /**\n       * Whether the lines should sized in world units or not.\n       * When set to `false` the unit is pixel.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n    }, {\n      key: \"worldUnits\",\n      get: function get() {\n        return this._useWorldUnits;\n      },\n      set: function set(value) {\n        if (this._useWorldUnits !== value) {\n          this._useWorldUnits = value;\n          this.needsUpdate = true;\n        }\n      }\n\n      /**\n       * Whether the lines should be dashed or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n    }, {\n      key: \"dashed\",\n      get: function get() {\n        return this._useDash;\n      },\n      set: function set(value) {\n        if (this._useDash !== value) {\n          this._useDash = value;\n          this.needsUpdate = true;\n        }\n      }\n\n      /**\n       * Whether alpha to coverage should be used or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"alphaToCoverage\",\n      get: function get() {\n        return this._useAlphaToCoverage;\n      },\n      set: function set(value) {\n        if (this._useAlphaToCoverage !== value) {\n          this._useAlphaToCoverage = value;\n          this.needsUpdate = true;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'Line2NodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /** @module Packing **/\n  /**\n   * Packs a direction vector into a color value.\n   *\n   * @method\n   * @param {Node<vec3>} node - The direction to pack.\n   * @return {Node<vec3>} The color.\n   */\n  var directionToColor = function directionToColor(node) {\n    return nodeObject(node).mul(0.5).add(0.5);\n  };\n\n  /**\n   * Unpacks a color value into a direction vector.\n   *\n   * @method\n   * @param {Node<vec3>} node - The color to unpack.\n   * @return {Node<vec3>} The direction.\n   */\n  var colorToDirection = function colorToDirection(node) {\n    return nodeObject(node).mul(2.0).sub(1);\n  };\n  var _defaultValues$a = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshNormalMaterial)();\n\n  /**\n   * Node material version of `MeshNormalMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshNormalNodeMaterial = exports.MeshNormalNodeMaterial = /*#__PURE__*/function (_NodeMaterial5) {\n    /**\n     * Constructs a new mesh normal node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshNormalNodeMaterial(parameters) {\n      var _this81;\n      (0, _classCallCheck2.default)(this, MeshNormalNodeMaterial);\n      _this81 = _callSuper(this, MeshNormalNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this81.isMeshNormalNodeMaterial = true;\n      _this81.setDefaultValues(_defaultValues$a);\n      _this81.setValues(parameters);\n      return _this81;\n    }\n\n    /**\n     * Overwrites the default implementation by computing the diffuse color\n     * based on the normal data.\n     */\n    (0, _inherits2.default)(MeshNormalNodeMaterial, _NodeMaterial5);\n    return (0, _createClass2.default)(MeshNormalNodeMaterial, [{\n      key: \"setupDiffuseColor\",\n      value: function setupDiffuseColor() {\n        var opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;\n        diffuseColor.assign(vec4(directionToColor(transformedNormalView), opacityNode));\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshNormalNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /** @module EquirectUVNode **/\n  /**\n   * Can be used to compute texture coordinates for projecting an\n   * equirectangular texture onto a mesh for using it as the scene's\n   * background.\n   *\n   * ```js\n   * scene.backgroundNode = texture( equirectTexture, equirectUV() );\n   * ```\n   *\n   * @augments TempNode\n   */\n  var EquirectUVNode = exports.EquirectUVNode = /*#__PURE__*/function (_TempNode13) {\n    /**\n     * Constructs a new equirect uv node.\n     *\n     * @param {Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.\n     */\n    function EquirectUVNode() {\n      var _this82;\n      var dirNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : positionWorldDirection;\n      (0, _classCallCheck2.default)(this, EquirectUVNode);\n      _this82 = _callSuper(this, EquirectUVNode, ['vec2']);\n\n      /**\n       * A direction vector for sampling why is by default `positionWorldDirection`.\n       *\n       * @type {Node<vec3>}\n       */\n      _this82.dirNode = dirNode;\n      return _this82;\n    }\n    (0, _inherits2.default)(EquirectUVNode, _TempNode13);\n    return (0, _createClass2.default)(EquirectUVNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var dir = this.dirNode;\n        var u = dir.z.atan(dir.x).mul(1 / (Math.PI * 2)).add(0.5);\n        var v = dir.y.clamp(-1.0, 1.0).asin().mul(1 / Math.PI).add(0.5);\n        return vec2(u, v);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'EquirectUVNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating an equirect uv node.\n   *\n   * @function\n   * @param {Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.\n   * @returns {EquirectUVNode}\n   */\n  var equirectUV = /*@__PURE__*/nodeProxy(EquirectUVNode);\n\n  // @TODO: Consider rename WebGLCubeRenderTarget to just CubeRenderTarget\n\n  /**\n   * This class represents a cube render target. It is a special version\n   * of `WebGLCubeRenderTarget` which is compatible with `WebGPURenderer`.\n   *\n   * @augments WebGLCubeRenderTarget\n   */\n  var CubeRenderTarget = /*#__PURE__*/function (_WebGLCubeRenderTarge) {\n    function CubeRenderTarget() {\n      var _this83;\n      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, CubeRenderTarget);\n      _this83 = _callSuper(this, CubeRenderTarget, [size, options]);\n      _this83.isCubeRenderTarget = true;\n      return _this83;\n    }\n\n    /**\n     * Converts the given equirectangular texture to a cube map.\n     *\n     * @param {Renderer} renderer - The renderer.\n     * @param {Texture} texture - The equirectangular texture.\n     * @return {CubeRenderTarget} A reference to this cube render target.\n     */\n    (0, _inherits2.default)(CubeRenderTarget, _WebGLCubeRenderTarge);\n    return (0, _createClass2.default)(CubeRenderTarget, [{\n      key: \"fromEquirectangularTexture\",\n      value: function fromEquirectangularTexture(renderer, texture$1) {\n        var currentMinFilter = texture$1.minFilter;\n        var currentGenerateMipmaps = texture$1.generateMipmaps;\n        texture$1.generateMipmaps = true;\n        this.texture.type = texture$1.type;\n        this.texture.colorSpace = texture$1.colorSpace;\n        this.texture.generateMipmaps = texture$1.generateMipmaps;\n        this.texture.minFilter = texture$1.minFilter;\n        this.texture.magFilter = texture$1.magFilter;\n        var geometry = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BoxGeometry)(5, 5, 5);\n        var uvNode = equirectUV(positionWorldDirection);\n        var material = new NodeMaterial();\n        material.colorNode = texture(texture$1, uvNode, 0);\n        material.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n        material.blending = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending;\n        var mesh = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh)(geometry, material);\n        var scene = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Scene)();\n        scene.add(mesh);\n\n        // Avoid blurred poles\n        if (texture$1.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter) texture$1.minFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter;\n        var camera = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeCamera)(1, 10, this);\n        var currentMRT = renderer.getMRT();\n        renderer.setMRT(null);\n        camera.update(renderer, scene);\n        renderer.setMRT(currentMRT);\n        texture$1.minFilter = currentMinFilter;\n        texture$1.currentGenerateMipmaps = currentGenerateMipmaps;\n        mesh.geometry.dispose();\n        mesh.material.dispose();\n        return this;\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCubeRenderTarget);\n  /** @module CubeMapNode **/\n  var _cache$1 = new WeakMap();\n\n  /**\n   * This node can be used to automatically convert environment maps in the\n   * equirectangular format into the cube map format.\n   *\n   * @augments TempNode\n   */\n  var CubeMapNode = /*#__PURE__*/function (_TempNode14) {\n    /**\n     * Constructs a new cube map node.\n     *\n     * @param {Node} envNode - The node representing the environment map.\n     */\n    function CubeMapNode(envNode) {\n      var _this84;\n      (0, _classCallCheck2.default)(this, CubeMapNode);\n      _this84 = _callSuper(this, CubeMapNode, ['vec3']);\n\n      /**\n       * The node representing the environment map.\n       *\n       * @type {Node}\n       */\n      _this84.envNode = envNode;\n\n      /**\n       * A reference to the internal cube texture.\n       *\n       * @private\n       * @type {CubeTexture}\n       * @default null\n       */\n      _this84._cubeTexture = null;\n\n      /**\n       * A reference to the internal cube texture node.\n       *\n       * @private\n       * @type {CubeTextureNode}\n       */\n      _this84._cubeTextureNode = cubeTexture();\n      var defaultTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeTexture)();\n      defaultTexture.isRenderTargetTexture = true;\n\n      /**\n       * A default cube texture that acts as a placeholder.\n       * It is used when the conversion from equirectangular to cube\n       * map has not finished yet for a given texture.\n       *\n       * @private\n       * @type {CubeTexture}\n       */\n      _this84._defaultTexture = defaultTexture;\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.RENDER` since the node updates\n       * the texture once per render in its {@link CubeMapNode#updateBefore} method.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this84.updateBeforeType = NodeUpdateType.RENDER;\n      return _this84;\n    }\n    (0, _inherits2.default)(CubeMapNode, _TempNode14);\n    return (0, _createClass2.default)(CubeMapNode, [{\n      key: \"updateBefore\",\n      value: function updateBefore(frame) {\n        var renderer = frame.renderer,\n          material = frame.material;\n        var envNode = this.envNode;\n        if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {\n          var _texture = envNode.isTextureNode ? envNode.value : material[envNode.property];\n          if (_texture && _texture.isTexture) {\n            var mapping = _texture.mapping;\n            if (mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularReflectionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularRefractionMapping) {\n              // check for converted cubemap map\n\n              if (_cache$1.has(_texture)) {\n                var cubeMap = _cache$1.get(_texture);\n                mapTextureMapping(cubeMap, _texture.mapping);\n                this._cubeTexture = cubeMap;\n              } else {\n                // create cube map from equirectangular map\n\n                var image = _texture.image;\n                if (isEquirectangularMapReady$1(image)) {\n                  var renderTarget = new CubeRenderTarget(image.height);\n                  renderTarget.fromEquirectangularTexture(renderer, _texture);\n                  mapTextureMapping(renderTarget.texture, _texture.mapping);\n                  this._cubeTexture = renderTarget.texture;\n                  _cache$1.set(_texture, renderTarget.texture);\n                  _texture.addEventListener('dispose', onTextureDispose);\n                } else {\n                  // default cube texture as fallback when equirectangular texture is not yet loaded\n\n                  this._cubeTexture = this._defaultTexture;\n                }\n              }\n\n              //\n\n              this._cubeTextureNode.value = this._cubeTexture;\n            } else {\n              // envNode already refers to a cube map\n\n              this._cubeTextureNode = this.envNode;\n            }\n          }\n        }\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this.updateBefore(builder);\n        return this._cubeTextureNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'CubeMapNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * Returns true if the given equirectangular image has been fully loaded\n   * and is ready for further processing.\n   *\n   * @private\n   * @param {Image} image - The equirectangular image to check.\n   * @return {Boolean} Whether the image is ready or not.\n   */\n  function isEquirectangularMapReady$1(image) {\n    if (image === null || image === undefined) return false;\n    return image.height > 0;\n  }\n\n  /**\n   * This function is executed when `dispose()` is called on the equirectangular\n   * texture. In this case, the generated cube map with its render target\n   * is deleted as well.\n   *\n   * @private\n   * @param {Object} event - The event object.\n   */\n  function onTextureDispose(event) {\n    var texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    var renderTarget = _cache$1.get(texture);\n    if (renderTarget !== undefined) {\n      _cache$1.delete(texture);\n      renderTarget.dispose();\n    }\n  }\n\n  /**\n   * This function makes sure the generated cube map uses the correct\n   * texture mapping that corresponds to the equirectangular original.\n   *\n   * @private\n   * @param {Texture} texture - The cube texture.\n   * @param {Number} mapping - The original texture mapping.\n   */\n  function mapTextureMapping(texture, mapping) {\n    if (mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularReflectionMapping) {\n      texture.mapping = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping;\n    } else if (mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularRefractionMapping) {\n      texture.mapping = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping;\n    }\n  }\n\n  /**\n   * TSL function for creating a cube map node.\n   *\n   * @function\n   * @param {Node} envNode - The node representing the environment map.\n   * @returns {CubeMapNode}\n   */\n  var cubeMapNode = /*@__PURE__*/nodeProxy(CubeMapNode);\n\n  /**\n   * Represents a basic model for Image-based lighting (IBL). The environment\n   * is defined via environment maps in the equirectangular or cube map format.\n   * `BasicEnvironmentNode` is intended for non-PBR materials like {@link MeshBasicNodeMaterial}\n   * or {@link MeshPhongNodeMaterial}.\n   *\n   * @augments LightingNode\n   */\n  var BasicEnvironmentNode = exports.BasicEnvironmentNode = /*#__PURE__*/function (_LightingNode3) {\n    /**\n     * Constructs a new basic environment node.\n     *\n     * @param {Node} [envNode=null] - A node representing the environment.\n     */\n    function BasicEnvironmentNode() {\n      var _this85;\n      var envNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, BasicEnvironmentNode);\n      _this85 = _callSuper(this, BasicEnvironmentNode);\n\n      /**\n       * A node representing the environment.\n       *\n       * @type {Node}\n       * @default null\n       */\n      _this85.envNode = envNode;\n      return _this85;\n    }\n    (0, _inherits2.default)(BasicEnvironmentNode, _LightingNode3);\n    return (0, _createClass2.default)(BasicEnvironmentNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        // environment property is used in the finish() method of BasicLightingModel\n\n        builder.context.environment = cubeMapNode(this.envNode);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BasicEnvironmentNode';\n      }\n    }]);\n  }(LightingNode);\n  /**\n   * A specific version of {@link IrradianceNode} that is only relevant\n   * for {@link MeshBasicNodeMaterial}. Since the material is unlit, it\n   * requires a special scaling factor for the light map.\n   *\n   * @augments LightingNode\n   */\n  var BasicLightMapNode = /*#__PURE__*/function (_LightingNode4) {\n    /**\n     * Constructs a new basic light map node.\n     *\n     * @param {Node<vec3>?} [lightMapNode=null] - The light map node.\n     */\n    function BasicLightMapNode() {\n      var _this86;\n      var lightMapNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, BasicLightMapNode);\n      _this86 = _callSuper(this, BasicLightMapNode);\n\n      /**\n       * The light map node.\n       *\n       * @type {Node<vec3>?}\n       */\n      _this86.lightMapNode = lightMapNode;\n      return _this86;\n    }\n    (0, _inherits2.default)(BasicLightMapNode, _LightingNode4);\n    return (0, _createClass2.default)(BasicLightMapNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        // irradianceLightMap property is used in the indirectDiffuse() method of BasicLightingModel\n\n        var RECIPROCAL_PI = float(1 / Math.PI);\n        builder.context.irradianceLightMap = this.lightMapNode.mul(RECIPROCAL_PI);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'BasicLightMapNode';\n      }\n    }]);\n  }(LightingNode);\n  /**\n   * Abstract class for implementing lighting models. The module defines\n   * multiple methods that concrete lighting models can implement. These\n   * methods are executed at different points during the light evaluation\n   * process.\n   */\n  var LightingModel = exports.LightingModel = /*#__PURE__*/function () {\n    function LightingModel() {\n      (0, _classCallCheck2.default)(this, LightingModel);\n    }\n    return (0, _createClass2.default)(LightingModel, [{\n      key: \"start\",\n      value:\n      /**\n       * This method is intended for setting up lighting model and context data\n       * which are later used in the evaluation process.\n       *\n       * @abstract\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n      function start(/*input, stack, builder*/) {}\n\n      /**\n       * This method is intended for executing final tasks like final updates\n       * to the outgoing light.\n       *\n       * @abstract\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"finish\",\n      value: function finish(/*input, stack, builder*/) {}\n\n      /**\n       * This method is intended for implementing the direct light term and\n       * executed during the build process of directional, point and spot light nodes.\n       *\n       * @abstract\n       * @param {Object} input - The input data.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"direct\",\n      value: function direct(/*input, stack, builder*/) {}\n\n      /**\n       * This method is intended for implementing the direct light term for\n       * rect area light nodes.\n       *\n       * @abstract\n       * @param {Object} input - The input data.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"directRectArea\",\n      value: function directRectArea(/*input, stack, builder*/) {}\n\n      /**\n       * This method is intended for implementing the indirect light term.\n       *\n       * @abstract\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"indirect\",\n      value: function indirect(/*input, stack, builder*/) {}\n\n      /**\n       * This method is intended for implementing the ambient occlusion term.\n       * Unlike other methods, this method must be called manually by the lighting\n       * model in its indirect term.\n       *\n       * @abstract\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"ambientOcclusion\",\n      value: function ambientOcclusion(/*input, stack, builder*/) {}\n    }]);\n  }();\n  /**\n   * Represents the lighting model for unlit materials. The only light contribution\n   * is baked indirect lighting modulated with ambient occlusion and the material's\n   * diffuse color. Environment mapping is supported. Used in {@link MeshBasicNodeMaterial}.\n   *\n   * @augments LightingModel\n   */\n  var BasicLightingModel = /*#__PURE__*/function (_LightingModel) {\n    /**\n     * Constructs a new basic lighting model.\n     */\n    function BasicLightingModel() {\n      (0, _classCallCheck2.default)(this, BasicLightingModel);\n      return _callSuper(this, BasicLightingModel);\n    }\n\n    /**\n     * Implements the baked indirect lighting with its modulation.\n     *\n     * @param {ContextNode} context - The current node context.\n     * @param {StackNode} stack - The current stack.\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(BasicLightingModel, _LightingModel);\n    return (0, _createClass2.default)(BasicLightingModel, [{\n      key: \"indirect\",\n      value: function indirect(context, stack, builder) {\n        var ambientOcclusion = context.ambientOcclusion;\n        var reflectedLight = context.reflectedLight;\n        var irradianceLightMap = builder.context.irradianceLightMap;\n        reflectedLight.indirectDiffuse.assign(vec4(0.0));\n\n        // accumulation (baked indirect lighting only)\n\n        if (irradianceLightMap) {\n          reflectedLight.indirectDiffuse.addAssign(irradianceLightMap);\n        } else {\n          reflectedLight.indirectDiffuse.addAssign(vec4(1.0, 1.0, 1.0, 0.0));\n        }\n\n        // modulation\n\n        reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);\n        reflectedLight.indirectDiffuse.mulAssign(diffuseColor.rgb);\n      }\n\n      /**\n       * Implements the environment mapping.\n       *\n       * @param {ContextNode} context - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"finish\",\n      value: function finish(context, stack, builder) {\n        var material = builder.material;\n        var outgoingLight = context.outgoingLight;\n        var envNode = builder.context.environment;\n        if (envNode) {\n          switch (material.combine) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyOperation:\n              outgoingLight.rgb.assign(mix(outgoingLight.rgb, outgoingLight.rgb.mul(envNode.rgb), materialSpecularStrength.mul(materialReflectivity)));\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MixOperation:\n              outgoingLight.rgb.assign(mix(outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul(materialReflectivity)));\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddOperation:\n              outgoingLight.rgb.addAssign(envNode.rgb.mul(materialSpecularStrength.mul(materialReflectivity)));\n              break;\n            default:\n              console.warn('THREE.BasicLightingModel: Unsupported .combine value:', material.combine);\n              break;\n          }\n        }\n      }\n    }]);\n  }(LightingModel);\n  var _defaultValues$9 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshBasicMaterial)();\n\n  /**\n   * Node material version of `MeshBasicMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshBasicNodeMaterial = exports.MeshBasicNodeMaterial = /*#__PURE__*/function (_NodeMaterial6) {\n    /**\n     * Constructs a new mesh basic node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshBasicNodeMaterial(parameters) {\n      var _this87;\n      (0, _classCallCheck2.default)(this, MeshBasicNodeMaterial);\n      _this87 = _callSuper(this, MeshBasicNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this87.isMeshBasicNodeMaterial = true;\n\n      /**\n       * Although the basic material is by definition unlit, we set\n       * this property to `true` since we use a lighting model to compute\n       * the outgoing light of the fragment shader.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this87.lights = true;\n      _this87.setDefaultValues(_defaultValues$9);\n      _this87.setValues(parameters);\n      return _this87;\n    }\n\n    /**\n     * Basic materials are not affected by normal and bump maps so we\n     * return by default {@link module:Normal.normalView}.\n     *\n     * @return {Node<vec3>} The normal node.\n     */\n    (0, _inherits2.default)(MeshBasicNodeMaterial, _NodeMaterial6);\n    return (0, _createClass2.default)(MeshBasicNodeMaterial, [{\n      key: \"setupNormal\",\n      value: function setupNormal() {\n        return normalView; // see #28839\n      }\n\n      /**\n       * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n       * to implement the default environment mapping.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {BasicEnvironmentNode<vec3>?} The environment node.\n       */\n    }, {\n      key: \"setupEnvironment\",\n      value: function setupEnvironment(builder) {\n        var envNode = _superPropGet(MeshBasicNodeMaterial, \"setupEnvironment\", this, 3)([builder]);\n        return envNode ? new BasicEnvironmentNode(envNode) : null;\n      }\n\n      /**\n       * This method must be overwriten since light maps are evaluated\n       * with a special scaling factor for basic materials.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {BasicLightMapNode<vec3>?} The light map node.\n       */\n    }, {\n      key: \"setupLightMap\",\n      value: function setupLightMap(builder) {\n        var node = null;\n        if (builder.material.lightMap) {\n          node = new BasicLightMapNode(materialLightMap);\n        }\n        return node;\n      }\n\n      /**\n       * The material overwrites this method because `lights` is set to `true` but\n       * we still want to return the diffuse color as the outgoing light.\n       *\n       * @return {Node<vec3>} The outgoing light node.\n       */\n    }, {\n      key: \"setupOutgoingLight\",\n      value: function setupOutgoingLight() {\n        return diffuseColor.rgb;\n      }\n\n      /**\n       * Setups the lighting model.\n       *\n       * @return {BasicLightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel() {\n        return new BasicLightingModel();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshBasicNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var F_Schlick = /*@__PURE__*/Fn(function (_ref56) {\n    var f0 = _ref56.f0,\n      f90 = _ref56.f90,\n      dotVH = _ref56.dotVH;\n    // Original approximation by Christophe Schlick '94\n    // float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n    // Optimized variant (presented by Epic at SIGGRAPH '13)\n    // https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n    var fresnel = dotVH.mul(-5.55473).sub(6.98316).mul(dotVH).exp2();\n    return f0.mul(fresnel.oneMinus()).add(f90.mul(fresnel));\n  }); // validated\n\n  var BRDF_Lambert = /*@__PURE__*/Fn(function (inputs) {\n    return inputs.diffuseColor.mul(1 / Math.PI); // punctual light\n  }); // validated\n\n  var G_BlinnPhong_Implicit = function G_BlinnPhong_Implicit() {\n    return float(0.25);\n  };\n  var D_BlinnPhong = /*@__PURE__*/Fn(function (_ref57) {\n    var dotNH = _ref57.dotNH;\n    return shininess.mul(float(0.5)).add(1.0).mul(float(1 / Math.PI)).mul(dotNH.pow(shininess));\n  });\n  var BRDF_BlinnPhong = /*@__PURE__*/Fn(function (_ref58) {\n    var lightDirection = _ref58.lightDirection;\n    var halfDir = lightDirection.add(positionViewDirection).normalize();\n    var dotNH = transformedNormalView.dot(halfDir).clamp();\n    var dotVH = positionViewDirection.dot(halfDir).clamp();\n    var F = F_Schlick({\n      f0: specularColor,\n      f90: 1.0,\n      dotVH: dotVH\n    });\n    var G = G_BlinnPhong_Implicit();\n    var D = D_BlinnPhong({\n      dotNH: dotNH\n    });\n    return F.mul(G).mul(D);\n  });\n\n  /**\n   * Represents the lighting model for a phong material. Used in {@link MeshPhongNodeMaterial}.\n   *\n   * @augments BasicLightingModel\n   */\n  var PhongLightingModel = exports.PhongLightingModel = /*#__PURE__*/function (_BasicLightingModel) {\n    /**\n     * Constructs a new phong lighting model.\n     *\n     * @param {Boolean} [specular=true] - Whether specular is supported or not.\n     */\n    function PhongLightingModel() {\n      var _this88;\n      var specular = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      (0, _classCallCheck2.default)(this, PhongLightingModel);\n      _this88 = _callSuper(this, PhongLightingModel);\n\n      /**\n       * Whether specular is supported or not. Set this to `false` if you are\n       * looking for a Lambert-like material meaning a material for non-shiny\n       * surfaces, without specular highlights.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this88.specular = specular;\n      return _this88;\n    }\n\n    /**\n     * Implements the direct lighting. The specular portion is optional an can be controlled\n     * with the {@link PhongLightingModel#specular} flag.\n     *\n     * @param {Object} input - The input data.\n     * @param {StackNode} stack - The current stack.\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(PhongLightingModel, _BasicLightingModel);\n    return (0, _createClass2.default)(PhongLightingModel, [{\n      key: \"direct\",\n      value: function direct(_ref59) {\n        var lightDirection = _ref59.lightDirection,\n          lightColor = _ref59.lightColor,\n          reflectedLight = _ref59.reflectedLight;\n        var dotNL = transformedNormalView.dot(lightDirection).clamp();\n        var irradiance = dotNL.mul(lightColor);\n        reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n          diffuseColor: diffuseColor.rgb\n        })));\n        if (this.specular === true) {\n          reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_BlinnPhong({\n            lightDirection: lightDirection\n          })).mul(materialSpecularStrength));\n        }\n      }\n\n      /**\n       * Implements the indirect lighting.\n       *\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"indirect\",\n      value: function indirect(_ref60) {\n        var ambientOcclusion = _ref60.ambientOcclusion,\n          irradiance = _ref60.irradiance,\n          reflectedLight = _ref60.reflectedLight;\n        reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n          diffuseColor: diffuseColor\n        })));\n        reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);\n      }\n    }]);\n  }(BasicLightingModel);\n  var _defaultValues$8 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshLambertMaterial)();\n\n  /**\n   * Node material version of `MeshLambertMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshLambertNodeMaterial = exports.MeshLambertNodeMaterial = /*#__PURE__*/function (_NodeMaterial7) {\n    /**\n     * Constructs a new mesh lambert node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshLambertNodeMaterial(parameters) {\n      var _this89;\n      (0, _classCallCheck2.default)(this, MeshLambertNodeMaterial);\n      _this89 = _callSuper(this, MeshLambertNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this89.isMeshLambertNodeMaterial = true;\n\n      /**\n       * Set to `true` because lambert materials react on lights.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this89.lights = true;\n      _this89.setDefaultValues(_defaultValues$8);\n      _this89.setValues(parameters);\n      return _this89;\n    }\n\n    /**\n     * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n     * to implement the default environment mapping.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {BasicEnvironmentNode<vec3>?} The environment node.\n     */\n    (0, _inherits2.default)(MeshLambertNodeMaterial, _NodeMaterial7);\n    return (0, _createClass2.default)(MeshLambertNodeMaterial, [{\n      key: \"setupEnvironment\",\n      value: function setupEnvironment(builder) {\n        var envNode = _superPropGet(MeshLambertNodeMaterial, \"setupEnvironment\", this, 3)([builder]);\n        return envNode ? new BasicEnvironmentNode(envNode) : null;\n      }\n\n      /**\n       * Setups the lighting model.\n       *\n       * @return {PhongLightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new PhongLightingModel(false); // ( specular ) -> force lambert\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshLambertNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var _defaultValues$7 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshPhongMaterial)();\n\n  /**\n   * Node material version of `MeshPhongMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshPhongNodeMaterial = exports.MeshPhongNodeMaterial = /*#__PURE__*/function (_NodeMaterial8) {\n    /**\n     * Constructs a new mesh lambert node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshPhongNodeMaterial(parameters) {\n      var _this90;\n      (0, _classCallCheck2.default)(this, MeshPhongNodeMaterial);\n      _this90 = _callSuper(this, MeshPhongNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this90.isMeshPhongNodeMaterial = true;\n\n      /**\n       * Set to `true` because phong materials react on lights.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this90.lights = true;\n\n      /**\n       * The shininess of phong materials is by default inferred from the `shininess`\n       * property. This node property allows to overwrite the default\n       * and define the shininess with a node instead.\n       *\n       * If you don't want to overwrite the shininess but modify the existing\n       * value instead, use {@link module:MaterialNode.materialShininess}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this90.shininessNode = null;\n\n      /**\n       * The specular color of phong materials is by default inferred from the\n       * `specular` property. This node property allows to overwrite the default\n       * and define the specular color with a node instead.\n       *\n       * If you don't want to overwrite the specular color but modify the existing\n       * value instead, use {@link module:MaterialNode.materialSpecular}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this90.specularNode = null;\n      _this90.setDefaultValues(_defaultValues$7);\n      _this90.setValues(parameters);\n      return _this90;\n    }\n\n    /**\n     * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n     * to implement the default environment mapping.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {BasicEnvironmentNode<vec3>?} The environment node.\n     */\n    (0, _inherits2.default)(MeshPhongNodeMaterial, _NodeMaterial8);\n    return (0, _createClass2.default)(MeshPhongNodeMaterial, [{\n      key: \"setupEnvironment\",\n      value: function setupEnvironment(builder) {\n        var envNode = _superPropGet(MeshPhongNodeMaterial, \"setupEnvironment\", this, 3)([builder]);\n        return envNode ? new BasicEnvironmentNode(envNode) : null;\n      }\n\n      /**\n       * Setups the lighting model.\n       *\n       * @return {PhongLightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new PhongLightingModel();\n      }\n\n      /**\n       * Setups the phong specific node variables.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupVariants\",\n      value: function setupVariants(/*builder*/\n      ) {\n        // SHININESS\n\n        var shininessNode = (this.shininessNode ? float(this.shininessNode) : materialShininess).max(1e-4); // to prevent pow( 0.0, 0.0 )\n\n        shininess.assign(shininessNode);\n\n        // SPECULAR COLOR\n\n        var specularNode = this.specularNode || materialSpecular;\n        specularColor.assign(specularNode);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.shininessNode = source.shininessNode;\n        this.specularNode = source.specularNode;\n        return _superPropGet(MeshPhongNodeMaterial, \"copy\", this, 3)([source]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshPhongNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var getGeometryRoughness = /*@__PURE__*/Fn(function (builder) {\n    if (builder.geometry.hasAttribute('normal') === false) {\n      return float(0);\n    }\n    var dxy = normalView.dFdx().abs().max(normalView.dFdy().abs());\n    var geometryRoughness = dxy.x.max(dxy.y).max(dxy.z);\n    return geometryRoughness;\n  });\n  var getRoughness = /*@__PURE__*/Fn(function (inputs) {\n    var roughness = inputs.roughness;\n    var geometryRoughness = getGeometryRoughness();\n    var roughnessFactor = roughness.max(0.0525); // 0.0525 corresponds to the base mip of a 256 cubemap.\n    roughnessFactor = roughnessFactor.add(geometryRoughness);\n    roughnessFactor = roughnessFactor.min(1.0);\n    return roughnessFactor;\n  });\n\n  // Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n  // https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n  var V_GGX_SmithCorrelated = /*@__PURE__*/Fn(function (_ref61) {\n    var alpha = _ref61.alpha,\n      dotNL = _ref61.dotNL,\n      dotNV = _ref61.dotNV;\n    var a2 = alpha.pow2();\n    var gv = dotNL.mul(a2.add(a2.oneMinus().mul(dotNV.pow2())).sqrt());\n    var gl = dotNV.mul(a2.add(a2.oneMinus().mul(dotNL.pow2())).sqrt());\n    return div(0.5, gv.add(gl).max(EPSILON));\n  }).setLayout({\n    name: 'V_GGX_SmithCorrelated',\n    type: 'float',\n    inputs: [{\n      name: 'alpha',\n      type: 'float'\n    }, {\n      name: 'dotNL',\n      type: 'float'\n    }, {\n      name: 'dotNV',\n      type: 'float'\n    }]\n  }); // validated\n\n  // https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n\n  var V_GGX_SmithCorrelated_Anisotropic = /*@__PURE__*/Fn(function (_ref62) {\n    var alphaT = _ref62.alphaT,\n      alphaB = _ref62.alphaB,\n      dotTV = _ref62.dotTV,\n      dotBV = _ref62.dotBV,\n      dotTL = _ref62.dotTL,\n      dotBL = _ref62.dotBL,\n      dotNV = _ref62.dotNV,\n      dotNL = _ref62.dotNL;\n    var gv = dotNL.mul(vec3(alphaT.mul(dotTV), alphaB.mul(dotBV), dotNV).length());\n    var gl = dotNV.mul(vec3(alphaT.mul(dotTL), alphaB.mul(dotBL), dotNL).length());\n    var v = div(0.5, gv.add(gl));\n    return v.saturate();\n  }).setLayout({\n    name: 'V_GGX_SmithCorrelated_Anisotropic',\n    type: 'float',\n    inputs: [{\n      name: 'alphaT',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'alphaB',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotTV',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotBV',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotTL',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotBL',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotNV',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotNL',\n      type: 'float',\n      qualifier: 'in'\n    }]\n  });\n\n  // Microfacet Models for Refraction through Rough Surfaces - equation (33)\n  // http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n  // alpha is \"roughness squared\" in Disney’s reparameterization\n  var D_GGX = /*@__PURE__*/Fn(function (_ref63) {\n    var alpha = _ref63.alpha,\n      dotNH = _ref63.dotNH;\n    var a2 = alpha.pow2();\n    var denom = dotNH.pow2().mul(a2.oneMinus()).oneMinus(); // avoid alpha = 0 with dotNH = 1\n\n    return a2.div(denom.pow2()).mul(1 / Math.PI);\n  }).setLayout({\n    name: 'D_GGX',\n    type: 'float',\n    inputs: [{\n      name: 'alpha',\n      type: 'float'\n    }, {\n      name: 'dotNH',\n      type: 'float'\n    }]\n  }); // validated\n\n  var RECIPROCAL_PI = /*@__PURE__*/float(1 / Math.PI);\n\n  // https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n\n  var D_GGX_Anisotropic = /*@__PURE__*/Fn(function (_ref64) {\n    var alphaT = _ref64.alphaT,\n      alphaB = _ref64.alphaB,\n      dotNH = _ref64.dotNH,\n      dotTH = _ref64.dotTH,\n      dotBH = _ref64.dotBH;\n    var a2 = alphaT.mul(alphaB);\n    var v = vec3(alphaB.mul(dotTH), alphaT.mul(dotBH), a2.mul(dotNH));\n    var v2 = v.dot(v);\n    var w2 = a2.div(v2);\n    return RECIPROCAL_PI.mul(a2.mul(w2.pow2()));\n  }).setLayout({\n    name: 'D_GGX_Anisotropic',\n    type: 'float',\n    inputs: [{\n      name: 'alphaT',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'alphaB',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotNH',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotTH',\n      type: 'float',\n      qualifier: 'in'\n    }, {\n      name: 'dotBH',\n      type: 'float',\n      qualifier: 'in'\n    }]\n  });\n\n  // GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\n  var BRDF_GGX = /*@__PURE__*/Fn(function (inputs) {\n    var lightDirection = inputs.lightDirection,\n      f0 = inputs.f0,\n      f90 = inputs.f90,\n      roughness = inputs.roughness,\n      f = inputs.f,\n      USE_IRIDESCENCE = inputs.USE_IRIDESCENCE,\n      USE_ANISOTROPY = inputs.USE_ANISOTROPY;\n    var normalView = inputs.normalView || transformedNormalView;\n    var alpha = roughness.pow2(); // UE4's roughness\n\n    var halfDir = lightDirection.add(positionViewDirection).normalize();\n    var dotNL = normalView.dot(lightDirection).clamp();\n    var dotNV = normalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n    var dotNH = normalView.dot(halfDir).clamp();\n    var dotVH = positionViewDirection.dot(halfDir).clamp();\n    var F = F_Schlick({\n      f0: f0,\n      f90: f90,\n      dotVH: dotVH\n    });\n    var V, D;\n    if (defined(USE_IRIDESCENCE)) {\n      F = iridescence.mix(F, f);\n    }\n    if (defined(USE_ANISOTROPY)) {\n      var dotTL = anisotropyT.dot(lightDirection);\n      var dotTV = anisotropyT.dot(positionViewDirection);\n      var dotTH = anisotropyT.dot(halfDir);\n      var dotBL = anisotropyB.dot(lightDirection);\n      var dotBV = anisotropyB.dot(positionViewDirection);\n      var dotBH = anisotropyB.dot(halfDir);\n      V = V_GGX_SmithCorrelated_Anisotropic({\n        alphaT: alphaT,\n        alphaB: alpha,\n        dotTV: dotTV,\n        dotBV: dotBV,\n        dotTL: dotTL,\n        dotBL: dotBL,\n        dotNV: dotNV,\n        dotNL: dotNL\n      });\n      D = D_GGX_Anisotropic({\n        alphaT: alphaT,\n        alphaB: alpha,\n        dotNH: dotNH,\n        dotTH: dotTH,\n        dotBH: dotBH\n      });\n    } else {\n      V = V_GGX_SmithCorrelated({\n        alpha: alpha,\n        dotNL: dotNL,\n        dotNV: dotNV\n      });\n      D = D_GGX({\n        alpha: alpha,\n        dotNH: dotNH\n      });\n    }\n    return F.mul(V).mul(D);\n  }); // validated\n\n  // Analytical approximation of the DFG LUT, one half of the\n  // split-sum approximation used in indirect specular lighting.\n  // via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\n  // https://www.unrealengine.com/blog/physically-based-shading-on-mobile\n  var DFGApprox = /*@__PURE__*/Fn(function (_ref65) {\n    var roughness = _ref65.roughness,\n      dotNV = _ref65.dotNV;\n    var c0 = vec4(-1, -0.0275, -0.572, 0.022);\n    var c1 = vec4(1, 0.0425, 1.04, -0.04);\n    var r = roughness.mul(c0).add(c1);\n    var a004 = r.x.mul(r.x).min(dotNV.mul(-9.28).exp2()).mul(r.x).add(r.y);\n    var fab = vec2(-1.04, 1.04).mul(a004).add(r.zw);\n    return fab;\n  }).setLayout({\n    name: 'DFGApprox',\n    type: 'vec2',\n    inputs: [{\n      name: 'roughness',\n      type: 'float'\n    }, {\n      name: 'dotNV',\n      type: 'vec3'\n    }]\n  });\n  var EnvironmentBRDF = /*@__PURE__*/Fn(function (inputs) {\n    var dotNV = inputs.dotNV,\n      specularColor = inputs.specularColor,\n      specularF90 = inputs.specularF90,\n      roughness = inputs.roughness;\n    var fab = DFGApprox({\n      dotNV: dotNV,\n      roughness: roughness\n    });\n    return specularColor.mul(fab.x).add(specularF90.mul(fab.y));\n  });\n  var Schlick_to_F0 = /*@__PURE__*/Fn(function (_ref66) {\n    var f = _ref66.f,\n      f90 = _ref66.f90,\n      dotVH = _ref66.dotVH;\n    var x = dotVH.oneMinus().saturate();\n    var x2 = x.mul(x);\n    var x5 = x.mul(x2, x2).clamp(0, .9999);\n    return f.sub(vec3(f90).mul(x5)).div(x5.oneMinus());\n  }).setLayout({\n    name: 'Schlick_to_F0',\n    type: 'vec3',\n    inputs: [{\n      name: 'f',\n      type: 'vec3'\n    }, {\n      name: 'f90',\n      type: 'float'\n    }, {\n      name: 'dotVH',\n      type: 'float'\n    }]\n  });\n\n  // https://github.com/google/filament/blob/master/shaders/src/brdf.fs\n  var D_Charlie = /*@__PURE__*/Fn(function (_ref67) {\n    var roughness = _ref67.roughness,\n      dotNH = _ref67.dotNH;\n    var alpha = roughness.pow2();\n\n    // Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\n    var invAlpha = float(1.0).div(alpha);\n    var cos2h = dotNH.pow2();\n    var sin2h = cos2h.oneMinus().max(0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n    return float(2.0).add(invAlpha).mul(sin2h.pow(invAlpha.mul(0.5))).div(2.0 * Math.PI);\n  }).setLayout({\n    name: 'D_Charlie',\n    type: 'float',\n    inputs: [{\n      name: 'roughness',\n      type: 'float'\n    }, {\n      name: 'dotNH',\n      type: 'float'\n    }]\n  });\n\n  // https://github.com/google/filament/blob/master/shaders/src/brdf.fs\n  var V_Neubelt = /*@__PURE__*/Fn(function (_ref68) {\n    var dotNV = _ref68.dotNV,\n      dotNL = _ref68.dotNL;\n    // Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n    return float(1.0).div(float(4.0).mul(dotNL.add(dotNV).sub(dotNL.mul(dotNV))));\n  }).setLayout({\n    name: 'V_Neubelt',\n    type: 'float',\n    inputs: [{\n      name: 'dotNV',\n      type: 'float'\n    }, {\n      name: 'dotNL',\n      type: 'float'\n    }]\n  });\n  var BRDF_Sheen = /*@__PURE__*/Fn(function (_ref69) {\n    var lightDirection = _ref69.lightDirection;\n    var halfDir = lightDirection.add(positionViewDirection).normalize();\n    var dotNL = transformedNormalView.dot(lightDirection).clamp();\n    var dotNV = transformedNormalView.dot(positionViewDirection).clamp();\n    var dotNH = transformedNormalView.dot(halfDir).clamp();\n    var D = D_Charlie({\n      roughness: sheenRoughness,\n      dotNH: dotNH\n    });\n    var V = V_Neubelt({\n      dotNV: dotNV,\n      dotNL: dotNL\n    });\n    return sheen.mul(D).mul(V);\n  });\n\n  // Rect Area Light\n\n  // Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n  // by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n  // code: https://github.com/selfshadow/ltc_code/\n\n  var LTC_Uv = /*@__PURE__*/Fn(function (_ref70) {\n    var N = _ref70.N,\n      V = _ref70.V,\n      roughness = _ref70.roughness;\n    var LUT_SIZE = 64.0;\n    var LUT_SCALE = (LUT_SIZE - 1.0) / LUT_SIZE;\n    var LUT_BIAS = 0.5 / LUT_SIZE;\n    var dotNV = N.dot(V).saturate();\n\n    // texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n    var uv = vec2(roughness, dotNV.oneMinus().sqrt());\n    uv.assign(uv.mul(LUT_SCALE).add(LUT_BIAS));\n    return uv;\n  }).setLayout({\n    name: 'LTC_Uv',\n    type: 'vec2',\n    inputs: [{\n      name: 'N',\n      type: 'vec3'\n    }, {\n      name: 'V',\n      type: 'vec3'\n    }, {\n      name: 'roughness',\n      type: 'float'\n    }]\n  });\n  var LTC_ClippedSphereFormFactor = /*@__PURE__*/Fn(function (_ref71) {\n    var f = _ref71.f;\n    // Real-Time Area Lighting: a Journey from Research to Production (p.102)\n    // An approximation of the form factor of a horizon-clipped rectangle.\n\n    var l = f.length();\n    return max$1(l.mul(l).add(f.z).div(l.add(1.0)), 0);\n  }).setLayout({\n    name: 'LTC_ClippedSphereFormFactor',\n    type: 'float',\n    inputs: [{\n      name: 'f',\n      type: 'vec3'\n    }]\n  });\n  var LTC_EdgeVectorFormFactor = /*@__PURE__*/Fn(function (_ref72) {\n    var v1 = _ref72.v1,\n      v2 = _ref72.v2;\n    var x = v1.dot(v2);\n    var y = x.abs().toVar();\n\n    // rational polynomial approximation to theta / sin( theta ) / 2PI\n    var a = y.mul(0.0145206).add(0.4965155).mul(y).add(0.8543985).toVar();\n    var b = y.add(4.1616724).mul(y).add(3.4175940).toVar();\n    var v = a.div(b);\n    var theta_sintheta = x.greaterThan(0.0).select(v, max$1(x.mul(x).oneMinus(), 1e-7).inverseSqrt().mul(0.5).sub(v));\n    return v1.cross(v2).mul(theta_sintheta);\n  }).setLayout({\n    name: 'LTC_EdgeVectorFormFactor',\n    type: 'vec3',\n    inputs: [{\n      name: 'v1',\n      type: 'vec3'\n    }, {\n      name: 'v2',\n      type: 'vec3'\n    }]\n  });\n  var LTC_Evaluate = /*@__PURE__*/Fn(function (_ref73) {\n    var N = _ref73.N,\n      V = _ref73.V,\n      P = _ref73.P,\n      mInv = _ref73.mInv,\n      p0 = _ref73.p0,\n      p1 = _ref73.p1,\n      p2 = _ref73.p2,\n      p3 = _ref73.p3;\n    // bail if point is on back side of plane of light\n    // assumes ccw winding order of light vertices\n    var v1 = p1.sub(p0).toVar();\n    var v2 = p3.sub(p0).toVar();\n    var lightNormal = v1.cross(v2);\n    var result = vec3().toVar();\n    If(lightNormal.dot(P.sub(p0)).greaterThanEqual(0.0), function () {\n      // construct orthonormal basis around N\n      var T1 = V.sub(N.mul(V.dot(N))).normalize();\n      var T2 = N.cross(T1).negate(); // negated from paper; possibly due to a different handedness of world coordinate system\n\n      // compute transform\n      var mat = mInv.mul(mat3(T1, T2, N).transpose()).toVar();\n\n      // transform rect\n      // & project rect onto sphere\n      var coords0 = mat.mul(p0.sub(P)).normalize().toVar();\n      var coords1 = mat.mul(p1.sub(P)).normalize().toVar();\n      var coords2 = mat.mul(p2.sub(P)).normalize().toVar();\n      var coords3 = mat.mul(p3.sub(P)).normalize().toVar();\n\n      // calculate vector form factor\n      var vectorFormFactor = vec3(0).toVar();\n      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({\n        v1: coords0,\n        v2: coords1\n      }));\n      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({\n        v1: coords1,\n        v2: coords2\n      }));\n      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({\n        v1: coords2,\n        v2: coords3\n      }));\n      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({\n        v1: coords3,\n        v2: coords0\n      }));\n\n      // adjust for horizon clipping\n      result.assign(vec3(LTC_ClippedSphereFormFactor({\n        f: vectorFormFactor\n      })));\n    });\n    return result;\n  }).setLayout({\n    name: 'LTC_Evaluate',\n    type: 'vec3',\n    inputs: [{\n      name: 'N',\n      type: 'vec3'\n    }, {\n      name: 'V',\n      type: 'vec3'\n    }, {\n      name: 'P',\n      type: 'vec3'\n    }, {\n      name: 'mInv',\n      type: 'mat3'\n    }, {\n      name: 'p0',\n      type: 'vec3'\n    }, {\n      name: 'p1',\n      type: 'vec3'\n    }, {\n      name: 'p2',\n      type: 'vec3'\n    }, {\n      name: 'p3',\n      type: 'vec3'\n    }]\n  });\n\n  /** @module TextureBicubic **/\n\n  // Mipped Bicubic Texture Filtering by N8\n  // https://www.shadertoy.com/view/Dl2SDW\n\n  var bC = 1.0 / 6.0;\n  var w0 = function w0(a) {\n    return mul(bC, mul(a, mul(a, a.negate().add(3.0)).sub(3.0)).add(1.0));\n  };\n  var w1 = function w1(a) {\n    return mul(bC, mul(a, mul(a, mul(3.0, a).sub(6.0))).add(4.0));\n  };\n  var w2 = function w2(a) {\n    return mul(bC, mul(a, mul(a, mul(-3.0, a).add(3.0)).add(3.0)).add(1.0));\n  };\n  var w3 = function w3(a) {\n    return mul(bC, pow(a, 3));\n  };\n  var g0 = function g0(a) {\n    return w0(a).add(w1(a));\n  };\n  var g1 = function g1(a) {\n    return w2(a).add(w3(a));\n  };\n\n  // h0 and h1 are the two offset functions\n  var h0 = function h0(a) {\n    return add(-1.0, w1(a).div(w0(a).add(w1(a))));\n  };\n  var h1 = function h1(a) {\n    return add(1.0, w3(a).div(w2(a).add(w3(a))));\n  };\n  var bicubic = function bicubic(textureNode, texelSize, lod) {\n    var uv = textureNode.uvNode;\n    var uvScaled = mul(uv, texelSize.zw).add(0.5);\n    var iuv = floor(uvScaled);\n    var fuv = fract(uvScaled);\n    var g0x = g0(fuv.x);\n    var g1x = g1(fuv.x);\n    var h0x = h0(fuv.x);\n    var h1x = h1(fuv.x);\n    var h0y = h0(fuv.y);\n    var h1y = h1(fuv.y);\n    var p0 = vec2(iuv.x.add(h0x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);\n    var p1 = vec2(iuv.x.add(h1x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);\n    var p2 = vec2(iuv.x.add(h0x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);\n    var p3 = vec2(iuv.x.add(h1x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);\n    var a = g0(fuv.y).mul(add(g0x.mul(textureNode.sample(p0).level(lod)), g1x.mul(textureNode.sample(p1).level(lod))));\n    var b = g1(fuv.y).mul(add(g0x.mul(textureNode.sample(p2).level(lod)), g1x.mul(textureNode.sample(p3).level(lod))));\n    return a.add(b);\n  };\n\n  /**\n   * Applies mipped bicubic texture filtering to the given texture node.\n   *\n   * @method\n   * @param {TextureNode} textureNode - The texture node that should be filtered.\n   * @param {Node<float>} [lodNode=float(3)] - Defines the LOD to sample from.\n   * @return {Node} The filtered texture sample.\n   */\n  var textureBicubic = /*@__PURE__*/Fn(function (_ref74) {\n    var _ref75 = (0, _slicedToArray2.default)(_ref74, 2),\n      textureNode = _ref75[0],\n      _ref75$ = _ref75[1],\n      lodNode = _ref75$ === void 0 ? float(3) : _ref75$;\n    var fLodSize = vec2(textureNode.size(int(lodNode)));\n    var cLodSize = vec2(textureNode.size(int(lodNode.add(1.0))));\n    var fLodSizeInv = div(1.0, fLodSize);\n    var cLodSizeInv = div(1.0, cLodSize);\n    var fSample = bicubic(textureNode, vec4(fLodSizeInv, fLodSize), floor(lodNode));\n    var cSample = bicubic(textureNode, vec4(cLodSizeInv, cLodSize), ceil(lodNode));\n    return fract(lodNode).mix(fSample, cSample);\n  });\n\n  //\n  // Transmission\n  //\n\n  var getVolumeTransmissionRay = /*@__PURE__*/Fn(function (_ref76) {\n    var _ref77 = (0, _slicedToArray2.default)(_ref76, 5),\n      n = _ref77[0],\n      v = _ref77[1],\n      thickness = _ref77[2],\n      ior = _ref77[3],\n      modelMatrix = _ref77[4];\n    // Direction of refracted light.\n    var refractionVector = vec3(refract(v.negate(), normalize(n), div(1.0, ior)));\n\n    // Compute rotation-independent scaling of the model matrix.\n    var modelScale = vec3(length(modelMatrix[0].xyz), length(modelMatrix[1].xyz), length(modelMatrix[2].xyz));\n\n    // The thickness is specified in local space.\n    return normalize(refractionVector).mul(thickness.mul(modelScale));\n  }).setLayout({\n    name: 'getVolumeTransmissionRay',\n    type: 'vec3',\n    inputs: [{\n      name: 'n',\n      type: 'vec3'\n    }, {\n      name: 'v',\n      type: 'vec3'\n    }, {\n      name: 'thickness',\n      type: 'float'\n    }, {\n      name: 'ior',\n      type: 'float'\n    }, {\n      name: 'modelMatrix',\n      type: 'mat4'\n    }]\n  });\n  var applyIorToRoughness = /*@__PURE__*/Fn(function (_ref78) {\n    var _ref79 = (0, _slicedToArray2.default)(_ref78, 2),\n      roughness = _ref79[0],\n      ior = _ref79[1];\n    // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n    // an IOR of 1.5 results in the default amount of microfacet refraction.\n    return roughness.mul(clamp(ior.mul(2.0).sub(2.0), 0.0, 1.0));\n  }).setLayout({\n    name: 'applyIorToRoughness',\n    type: 'float',\n    inputs: [{\n      name: 'roughness',\n      type: 'float'\n    }, {\n      name: 'ior',\n      type: 'float'\n    }]\n  });\n  var viewportBackSideTexture = /*@__PURE__*/viewportMipTexture();\n  var viewportFrontSideTexture = /*@__PURE__*/viewportMipTexture();\n  var getTransmissionSample = /*@__PURE__*/Fn(function (_ref80, _ref81) {\n    var _ref82 = (0, _slicedToArray2.default)(_ref80, 3),\n      fragCoord = _ref82[0],\n      roughness = _ref82[1],\n      ior = _ref82[2];\n    var material = _ref81.material;\n    var vTexture = material.side === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide ? viewportBackSideTexture : viewportFrontSideTexture;\n    var transmissionSample = vTexture.sample(fragCoord);\n    //const transmissionSample = viewportMipTexture( fragCoord );\n\n    var lod = log2(screenSize.x).mul(applyIorToRoughness(roughness, ior));\n    return textureBicubic(transmissionSample, lod);\n  });\n  var volumeAttenuation = /*@__PURE__*/Fn(function (_ref83) {\n    var _ref84 = (0, _slicedToArray2.default)(_ref83, 3),\n      transmissionDistance = _ref84[0],\n      attenuationColor = _ref84[1],\n      attenuationDistance = _ref84[2];\n    If(attenuationDistance.notEqual(0), function () {\n      // Compute light attenuation using Beer's law.\n      var attenuationCoefficient = log(attenuationColor).negate().div(attenuationDistance);\n      var transmittance = exp(attenuationCoefficient.negate().mul(transmissionDistance));\n      return transmittance;\n    });\n\n    // Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n    return vec3(1.0);\n  }).setLayout({\n    name: 'volumeAttenuation',\n    type: 'vec3',\n    inputs: [{\n      name: 'transmissionDistance',\n      type: 'float'\n    }, {\n      name: 'attenuationColor',\n      type: 'vec3'\n    }, {\n      name: 'attenuationDistance',\n      type: 'float'\n    }]\n  });\n  var getIBLVolumeRefraction = /*@__PURE__*/Fn(function (_ref85) {\n    var _ref86 = (0, _slicedToArray2.default)(_ref85, 15),\n      n = _ref86[0],\n      v = _ref86[1],\n      roughness = _ref86[2],\n      diffuseColor = _ref86[3],\n      specularColor = _ref86[4],\n      specularF90 = _ref86[5],\n      position = _ref86[6],\n      modelMatrix = _ref86[7],\n      viewMatrix = _ref86[8],\n      projMatrix = _ref86[9],\n      ior = _ref86[10],\n      thickness = _ref86[11],\n      attenuationColor = _ref86[12],\n      attenuationDistance = _ref86[13],\n      dispersion = _ref86[14];\n    var transmittedLight, transmittance;\n    if (dispersion) {\n      transmittedLight = vec4().toVar();\n      transmittance = vec3().toVar();\n      var halfSpread = ior.sub(1.0).mul(dispersion.mul(0.025));\n      var iors = vec3(ior.sub(halfSpread), ior, ior.add(halfSpread));\n      Loop({\n        start: 0,\n        end: 3\n      }, function (_ref87) {\n        var i = _ref87.i;\n        var ior = iors.element(i);\n        var transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n        var refractedRayExit = position.add(transmissionRay);\n\n        // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n        var ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1.0)));\n        var refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();\n        refractionCoords.addAssign(1.0);\n        refractionCoords.divAssign(2.0);\n        refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus())); // webgpu\n\n        // Sample framebuffer to get pixel the refracted ray hits.\n        var transmissionSample = getTransmissionSample(refractionCoords, roughness, ior);\n        transmittedLight.element(i).assign(transmissionSample.element(i));\n        transmittedLight.a.addAssign(transmissionSample.a);\n        transmittance.element(i).assign(diffuseColor.element(i).mul(volumeAttenuation(length(transmissionRay), attenuationColor, attenuationDistance).element(i)));\n      });\n      transmittedLight.a.divAssign(3.0);\n    } else {\n      var transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n      var refractedRayExit = position.add(transmissionRay);\n\n      // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n      var ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1.0)));\n      var refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();\n      refractionCoords.addAssign(1.0);\n      refractionCoords.divAssign(2.0);\n      refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus())); // webgpu\n\n      // Sample framebuffer to get pixel the refracted ray hits.\n      transmittedLight = getTransmissionSample(refractionCoords, roughness, ior);\n      transmittance = diffuseColor.mul(volumeAttenuation(length(transmissionRay), attenuationColor, attenuationDistance));\n    }\n    var attenuatedColor = transmittance.rgb.mul(transmittedLight.rgb);\n    var dotNV = n.dot(v).clamp();\n\n    // Get the specular component.\n    var F = vec3(EnvironmentBRDF({\n      // n, v, specularColor, specularF90, roughness\n      dotNV: dotNV,\n      specularColor: specularColor,\n      specularF90: specularF90,\n      roughness: roughness\n    }));\n\n    // As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\n    // of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n    var transmittanceFactor = transmittance.r.add(transmittance.g, transmittance.b).div(3.0);\n    return vec4(F.oneMinus().mul(attenuatedColor), transmittedLight.a.oneMinus().mul(transmittanceFactor).oneMinus());\n  });\n\n  //\n  // Iridescence\n  //\n\n  // XYZ to linear-sRGB color space\n  var XYZ_TO_REC709 = /*@__PURE__*/mat3(3.2404542, -0.9692660, 0.0556434, -1.5371385, 1.8760108, -0.2040259, -0.4985314, 0.0415560, 1.0572252);\n\n  // Assume air interface for top\n  // Note: We don't handle the case fresnel0 == 1\n  var Fresnel0ToIor = function Fresnel0ToIor(fresnel0) {\n    var sqrtF0 = fresnel0.sqrt();\n    return vec3(1.0).add(sqrtF0).div(vec3(1.0).sub(sqrtF0));\n  };\n\n  // ior is a value between 1.0 and 3.0. 1.0 is air interface\n  var IorToFresnel0 = function IorToFresnel0(transmittedIor, incidentIor) {\n    return transmittedIor.sub(incidentIor).div(transmittedIor.add(incidentIor)).pow2();\n  };\n\n  // Fresnel equations for dielectric/dielectric interfaces.\n  // Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n  // Evaluation XYZ sensitivity curves in Fourier space\n  var evalSensitivity = function evalSensitivity(OPD, shift) {\n    var phase = OPD.mul(2.0 * Math.PI * 1.0e-9);\n    var val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\n    var pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\n    var VAR = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\n    var x = float(9.7470e-14 * Math.sqrt(2.0 * Math.PI * 4.5282e+09)).mul(phase.mul(2.2399e+06).add(shift.x).cos()).mul(phase.pow2().mul(-4.5282e+09).exp());\n    var xyz = val.mul(VAR.mul(2.0 * Math.PI).sqrt()).mul(pos.mul(phase).add(shift).cos()).mul(phase.pow2().negate().mul(VAR).exp());\n    xyz = vec3(xyz.x.add(x), xyz.y, xyz.z).div(1.0685e-7);\n    var rgb = XYZ_TO_REC709.mul(xyz);\n    return rgb;\n  };\n  var evalIridescence = /*@__PURE__*/Fn(function (_ref88) {\n    var outsideIOR = _ref88.outsideIOR,\n      eta2 = _ref88.eta2,\n      cosTheta1 = _ref88.cosTheta1,\n      thinFilmThickness = _ref88.thinFilmThickness,\n      baseF0 = _ref88.baseF0;\n    // Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n    var iridescenceIOR = mix(outsideIOR, eta2, smoothstep(0.0, 0.03, thinFilmThickness));\n    // Evaluate the cosTheta on the base layer (Snell law)\n    var sinTheta2Sq = outsideIOR.div(iridescenceIOR).pow2().mul(cosTheta1.pow2().oneMinus());\n\n    // Handle TIR:\n    var cosTheta2Sq = sinTheta2Sq.oneMinus();\n    If(cosTheta2Sq.lessThan(0), function () {\n      return vec3(1.0);\n    });\n    var cosTheta2 = cosTheta2Sq.sqrt();\n\n    // First interface\n    var R0 = IorToFresnel0(iridescenceIOR, outsideIOR);\n    var R12 = F_Schlick({\n      f0: R0,\n      f90: 1.0,\n      dotVH: cosTheta1\n    });\n    //const R21 = R12;\n    var T121 = R12.oneMinus();\n    var phi12 = iridescenceIOR.lessThan(outsideIOR).select(Math.PI, 0.0);\n    var phi21 = float(Math.PI).sub(phi12);\n\n    // Second interface\n    var baseIOR = Fresnel0ToIor(baseF0.clamp(0.0, 0.9999)); // guard against 1.0\n    var R1 = IorToFresnel0(baseIOR, iridescenceIOR.toVec3());\n    var R23 = F_Schlick({\n      f0: R1,\n      f90: 1.0,\n      dotVH: cosTheta2\n    });\n    var phi23 = vec3(baseIOR.x.lessThan(iridescenceIOR).select(Math.PI, 0.0), baseIOR.y.lessThan(iridescenceIOR).select(Math.PI, 0.0), baseIOR.z.lessThan(iridescenceIOR).select(Math.PI, 0.0));\n\n    // Phase shift\n    var OPD = iridescenceIOR.mul(thinFilmThickness, cosTheta2, 2.0);\n    var phi = vec3(phi21).add(phi23);\n\n    // Compound terms\n    var R123 = R12.mul(R23).clamp(1e-5, 0.9999);\n    var r123 = R123.sqrt();\n    var Rs = T121.pow2().mul(R23).div(vec3(1.0).sub(R123));\n\n    // Reflectance term for m = 0 (DC term amplitude)\n    var C0 = R12.add(Rs);\n    var I = C0.toVar();\n\n    // Reflectance term for m > 0 (pairs of diracs)\n    var Cm = Rs.sub(T121).toVar();\n    Loop({\n      start: 1,\n      end: 2,\n      condition: '<=',\n      name: 'm'\n    }, function (_ref89) {\n      var m = _ref89.m;\n      Cm.mulAssign(r123);\n      var Sm = evalSensitivity(float(m).mul(OPD), float(m).mul(phi)).mul(2.0);\n      I.addAssign(Cm.mul(Sm));\n    });\n\n    // Since out of gamut colors might be produced, negative color values are clamped to 0.\n    return I.max(vec3(0.0));\n  }).setLayout({\n    name: 'evalIridescence',\n    type: 'vec3',\n    inputs: [{\n      name: 'outsideIOR',\n      type: 'float'\n    }, {\n      name: 'eta2',\n      type: 'float'\n    }, {\n      name: 'cosTheta1',\n      type: 'float'\n    }, {\n      name: 'thinFilmThickness',\n      type: 'float'\n    }, {\n      name: 'baseF0',\n      type: 'vec3'\n    }]\n  });\n\n  //\n  //\tSheen\n  //\n\n  // This is a curve-fit approximation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\n  // Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\n  // in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\n  var IBLSheenBRDF = /*@__PURE__*/Fn(function (_ref90) {\n    var normal = _ref90.normal,\n      viewDir = _ref90.viewDir,\n      roughness = _ref90.roughness;\n    var dotNV = normal.dot(viewDir).saturate();\n    var r2 = roughness.pow2();\n    var a = select(roughness.lessThan(0.25), float(-339.2).mul(r2).add(float(161.4).mul(roughness)).sub(25.9), float(-8.48).mul(r2).add(float(14.3).mul(roughness)).sub(9.95));\n    var b = select(roughness.lessThan(0.25), float(44.0).mul(r2).sub(float(23.7).mul(roughness)).add(3.26), float(1.97).mul(r2).sub(float(3.27).mul(roughness)).add(0.72));\n    var DG = select(roughness.lessThan(0.25), 0.0, float(0.1).mul(roughness).sub(0.025)).add(a.mul(dotNV).add(b).exp());\n    return DG.mul(1.0 / Math.PI).saturate();\n  });\n  var clearcoatF0 = vec3(0.04);\n  var clearcoatF90 = float(1);\n\n  /**\n   * Represents the lighting model for a PBR material.\n   *\n   * @augments LightingModel\n   */\n  var PhysicalLightingModel = exports.PhysicalLightingModel = /*#__PURE__*/function (_LightingModel2) {\n    /**\n     * Constructs a new physical lighting model.\n     *\n     * @param {Boolean} [clearcoat=false] - Whether clearcoat is supported or not.\n     * @param {Boolean} [sheen=false] - Whether sheen is supported or not.\n     * @param {Boolean} [iridescence=false] - Whether iridescence is supported or not.\n     * @param {Boolean} [anisotropy=false] - Whether anisotropy is supported or not.\n     * @param {Boolean} [transmission=false] - Whether transmission is supported or not.\n     * @param {Boolean} [dispersion=false] - Whether dispersion is supported or not.\n     */\n    function PhysicalLightingModel() {\n      var _this91;\n      var clearcoat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var sheen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var iridescence = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var anisotropy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var transmission = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var dispersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      (0, _classCallCheck2.default)(this, PhysicalLightingModel);\n      _this91 = _callSuper(this, PhysicalLightingModel);\n\n      /**\n       * Whether clearcoat is supported or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this91.clearcoat = clearcoat;\n\n      /**\n       * Whether sheen is supported or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this91.sheen = sheen;\n\n      /**\n       * Whether iridescence is supported or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this91.iridescence = iridescence;\n\n      /**\n       * Whether anisotropy is supported or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this91.anisotropy = anisotropy;\n\n      /**\n       * Whether transmission is supported or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this91.transmission = transmission;\n\n      /**\n       * Whether dispersion is supported or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this91.dispersion = dispersion;\n\n      /**\n       * The clear coat radiance.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.clearcoatRadiance = null;\n\n      /**\n       * The clear coat specular direct.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.clearcoatSpecularDirect = null;\n\n      /**\n       * The clear coat specular indirect.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.clearcoatSpecularIndirect = null;\n\n      /**\n       * The sheen specular direct.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.sheenSpecularDirect = null;\n\n      /**\n       * The sheen specular indirect.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.sheenSpecularIndirect = null;\n\n      /**\n       * The iridescence Fresnel.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.iridescenceFresnel = null;\n\n      /**\n       * The iridescence F0.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this91.iridescenceF0 = null;\n      return _this91;\n    }\n\n    /**\n     * Depending on what features are requested, the method prepares certain node variables\n     * which are later used for lighting computations.\n     *\n     * @param {ContextNode} context - The current node context.\n     */\n    (0, _inherits2.default)(PhysicalLightingModel, _LightingModel2);\n    return (0, _createClass2.default)(PhysicalLightingModel, [{\n      key: \"start\",\n      value: function start(context) {\n        if (this.clearcoat === true) {\n          this.clearcoatRadiance = vec3().toVar('clearcoatRadiance');\n          this.clearcoatSpecularDirect = vec3().toVar('clearcoatSpecularDirect');\n          this.clearcoatSpecularIndirect = vec3().toVar('clearcoatSpecularIndirect');\n        }\n        if (this.sheen === true) {\n          this.sheenSpecularDirect = vec3().toVar('sheenSpecularDirect');\n          this.sheenSpecularIndirect = vec3().toVar('sheenSpecularIndirect');\n        }\n        if (this.iridescence === true) {\n          var dotNVi = transformedNormalView.dot(positionViewDirection).clamp();\n          this.iridescenceFresnel = evalIridescence({\n            outsideIOR: float(1.0),\n            eta2: iridescenceIOR,\n            cosTheta1: dotNVi,\n            thinFilmThickness: iridescenceThickness,\n            baseF0: specularColor\n          });\n          this.iridescenceF0 = Schlick_to_F0({\n            f: this.iridescenceFresnel,\n            f90: 1.0,\n            dotVH: dotNVi\n          });\n        }\n        if (this.transmission === true) {\n          var position = positionWorld;\n          var v = cameraPosition.sub(positionWorld).normalize(); // TODO: Create Node for this, same issue in MaterialX\n          var n = transformedNormalWorld;\n          context.backdrop = getIBLVolumeRefraction(n, v, roughness, diffuseColor, specularColor, specularF90,\n          // specularF90\n          position,\n          // positionWorld\n          modelWorldMatrix,\n          // modelMatrix\n          cameraViewMatrix,\n          // viewMatrix\n          cameraProjectionMatrix,\n          // projMatrix\n          ior, thickness, attenuationColor, attenuationDistance, this.dispersion ? dispersion : null);\n          context.backdropAlpha = transmission;\n          diffuseColor.a.mulAssign(mix(1, context.backdrop.a, transmission));\n        }\n      }\n\n      // Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n      // Approximates multi-scattering in order to preserve energy.\n      // http://www.jcgt.org/published/0008/01/03/\n    }, {\n      key: \"computeMultiscattering\",\n      value: function computeMultiscattering(singleScatter, multiScatter, specularF90) {\n        var dotNV = transformedNormalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n\n        var fab = DFGApprox({\n          roughness: roughness,\n          dotNV: dotNV\n        });\n        var Fr = this.iridescenceF0 ? iridescence.mix(specularColor, this.iridescenceF0) : specularColor;\n        var FssEss = Fr.mul(fab.x).add(specularF90.mul(fab.y));\n        var Ess = fab.x.add(fab.y);\n        var Ems = Ess.oneMinus();\n        var Favg = specularColor.add(specularColor.oneMinus().mul(0.047619)); // 1/21\n        var Fms = FssEss.mul(Favg).div(Ems.mul(Favg).oneMinus());\n        singleScatter.addAssign(FssEss);\n        multiScatter.addAssign(Fms.mul(Ems));\n      }\n\n      /**\n       * Implements the direct light.\n       *\n       * @param {Object} input - The input data.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"direct\",\n      value: function direct(_ref91) {\n        var lightDirection = _ref91.lightDirection,\n          lightColor = _ref91.lightColor,\n          reflectedLight = _ref91.reflectedLight;\n        var dotNL = transformedNormalView.dot(lightDirection).clamp();\n        var irradiance = dotNL.mul(lightColor);\n        if (this.sheen === true) {\n          this.sheenSpecularDirect.addAssign(irradiance.mul(BRDF_Sheen({\n            lightDirection: lightDirection\n          })));\n        }\n        if (this.clearcoat === true) {\n          var dotNLcc = transformedClearcoatNormalView.dot(lightDirection).clamp();\n          var ccIrradiance = dotNLcc.mul(lightColor);\n          this.clearcoatSpecularDirect.addAssign(ccIrradiance.mul(BRDF_GGX({\n            lightDirection: lightDirection,\n            f0: clearcoatF0,\n            f90: clearcoatF90,\n            roughness: clearcoatRoughness,\n            normalView: transformedClearcoatNormalView\n          })));\n        }\n        reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n          diffuseColor: diffuseColor.rgb\n        })));\n        reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_GGX({\n          lightDirection: lightDirection,\n          f0: specularColor,\n          f90: 1,\n          roughness: roughness,\n          iridescence: this.iridescence,\n          f: this.iridescenceFresnel,\n          USE_IRIDESCENCE: this.iridescence,\n          USE_ANISOTROPY: this.anisotropy\n        })));\n      }\n\n      /**\n       * This method is intended for implementing the direct light term for\n       * rect area light nodes.\n       *\n       * @param {Object} input - The input data.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"directRectArea\",\n      value: function directRectArea(_ref92) {\n        var lightColor = _ref92.lightColor,\n          lightPosition = _ref92.lightPosition,\n          halfWidth = _ref92.halfWidth,\n          halfHeight = _ref92.halfHeight,\n          reflectedLight = _ref92.reflectedLight,\n          ltc_1 = _ref92.ltc_1,\n          ltc_2 = _ref92.ltc_2;\n        var p0 = lightPosition.add(halfWidth).sub(halfHeight); // counterclockwise; light shines in local neg z direction\n        var p1 = lightPosition.sub(halfWidth).sub(halfHeight);\n        var p2 = lightPosition.sub(halfWidth).add(halfHeight);\n        var p3 = lightPosition.add(halfWidth).add(halfHeight);\n        var N = transformedNormalView;\n        var V = positionViewDirection;\n        var P = positionView.toVar();\n        var uv = LTC_Uv({\n          N: N,\n          V: V,\n          roughness: roughness\n        });\n        var t1 = ltc_1.sample(uv).toVar();\n        var t2 = ltc_2.sample(uv).toVar();\n        var mInv = mat3(vec3(t1.x, 0, t1.y), vec3(0, 1, 0), vec3(t1.z, 0, t1.w)).toVar();\n\n        // LTC Fresnel Approximation by Stephen Hill\n        // http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n        var fresnel = specularColor.mul(t2.x).add(specularColor.oneMinus().mul(t2.y)).toVar();\n        reflectedLight.directSpecular.addAssign(lightColor.mul(fresnel).mul(LTC_Evaluate({\n          N: N,\n          V: V,\n          P: P,\n          mInv: mInv,\n          p0: p0,\n          p1: p1,\n          p2: p2,\n          p3: p3\n        })));\n        reflectedLight.directDiffuse.addAssign(lightColor.mul(diffuseColor).mul(LTC_Evaluate({\n          N: N,\n          V: V,\n          P: P,\n          mInv: mat3(1, 0, 0, 0, 1, 0, 0, 0, 1),\n          p0: p0,\n          p1: p1,\n          p2: p2,\n          p3: p3\n        })));\n      }\n\n      /**\n       * Implements the indirect lighting.\n       *\n       * @param {ContextNode} context - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"indirect\",\n      value: function indirect(context, stack, builder) {\n        this.indirectDiffuse(context, stack, builder);\n        this.indirectSpecular(context, stack, builder);\n        this.ambientOcclusion(context, stack, builder);\n      }\n\n      /**\n       * Implements the indirect diffuse term.\n       *\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"indirectDiffuse\",\n      value: function indirectDiffuse(_ref93) {\n        var irradiance = _ref93.irradiance,\n          reflectedLight = _ref93.reflectedLight;\n        reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n          diffuseColor: diffuseColor\n        })));\n      }\n\n      /**\n       * Implements the indirect specular term.\n       *\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"indirectSpecular\",\n      value: function indirectSpecular(_ref94) {\n        var radiance = _ref94.radiance,\n          iblIrradiance = _ref94.iblIrradiance,\n          reflectedLight = _ref94.reflectedLight;\n        if (this.sheen === true) {\n          this.sheenSpecularIndirect.addAssign(iblIrradiance.mul(sheen, IBLSheenBRDF({\n            normal: transformedNormalView,\n            viewDir: positionViewDirection,\n            roughness: sheenRoughness\n          })));\n        }\n        if (this.clearcoat === true) {\n          var dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();\n          var clearcoatEnv = EnvironmentBRDF({\n            dotNV: dotNVcc,\n            specularColor: clearcoatF0,\n            specularF90: clearcoatF90,\n            roughness: clearcoatRoughness\n          });\n          this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(clearcoatEnv));\n        }\n\n        // Both indirect specular and indirect diffuse light accumulate here\n\n        var singleScattering = vec3().toVar('singleScattering');\n        var multiScattering = vec3().toVar('multiScattering');\n        var cosineWeightedIrradiance = iblIrradiance.mul(1 / Math.PI);\n        this.computeMultiscattering(singleScattering, multiScattering, specularF90);\n        var totalScattering = singleScattering.add(multiScattering);\n        var diffuse = diffuseColor.mul(totalScattering.r.max(totalScattering.g).max(totalScattering.b).oneMinus());\n        reflectedLight.indirectSpecular.addAssign(radiance.mul(singleScattering));\n        reflectedLight.indirectSpecular.addAssign(multiScattering.mul(cosineWeightedIrradiance));\n        reflectedLight.indirectDiffuse.addAssign(diffuse.mul(cosineWeightedIrradiance));\n      }\n\n      /**\n       * Implements the ambient occlusion term.\n       *\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"ambientOcclusion\",\n      value: function ambientOcclusion(_ref95) {\n        var _ambientOcclusion = _ref95.ambientOcclusion,\n          reflectedLight = _ref95.reflectedLight;\n        var dotNV = transformedNormalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n\n        var aoNV = dotNV.add(_ambientOcclusion);\n        var aoExp = roughness.mul(-16.0).oneMinus().negate().exp2();\n        var aoNode = _ambientOcclusion.sub(aoNV.pow(aoExp).oneMinus()).clamp();\n        if (this.clearcoat === true) {\n          this.clearcoatSpecularIndirect.mulAssign(_ambientOcclusion);\n        }\n        if (this.sheen === true) {\n          this.sheenSpecularIndirect.mulAssign(_ambientOcclusion);\n        }\n        reflectedLight.indirectDiffuse.mulAssign(_ambientOcclusion);\n        reflectedLight.indirectSpecular.mulAssign(aoNode);\n      }\n\n      /**\n       * Used for final lighting accumulations depending on the requested features.\n       *\n       * @param {ContextNode} context - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"finish\",\n      value: function finish(context) {\n        var outgoingLight = context.outgoingLight;\n        if (this.clearcoat === true) {\n          var dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();\n          var Fcc = F_Schlick({\n            dotVH: dotNVcc,\n            f0: clearcoatF0,\n            f90: clearcoatF90\n          });\n          var clearcoatLight = outgoingLight.mul(clearcoat.mul(Fcc).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));\n          outgoingLight.assign(clearcoatLight);\n        }\n        if (this.sheen === true) {\n          var sheenEnergyComp = sheen.r.max(sheen.g).max(sheen.b).mul(0.157).oneMinus();\n          var sheenLight = outgoingLight.mul(sheenEnergyComp).add(this.sheenSpecularDirect, this.sheenSpecularIndirect);\n          outgoingLight.assign(sheenLight);\n        }\n      }\n    }]);\n  }(LightingModel); // These defines must match with PMREMGenerator\n  var cubeUV_r0 = /*@__PURE__*/float(1.0);\n  var cubeUV_m0 = /*@__PURE__*/float(-2.0);\n  var cubeUV_r1 = /*@__PURE__*/float(0.8);\n  var cubeUV_m1 = /*@__PURE__*/float(-1.0);\n  var cubeUV_r4 = /*@__PURE__*/float(0.4);\n  var cubeUV_m4 = /*@__PURE__*/float(2.0);\n  var cubeUV_r5 = /*@__PURE__*/float(0.305);\n  var cubeUV_m5 = /*@__PURE__*/float(3.0);\n  var cubeUV_r6 = /*@__PURE__*/float(0.21);\n  var cubeUV_m6 = /*@__PURE__*/float(4.0);\n  var cubeUV_minMipLevel = /*@__PURE__*/float(4.0);\n  var cubeUV_minTileSize = /*@__PURE__*/float(16.0);\n\n  // These shader functions convert between the UV coordinates of a single face of\n  // a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n  // sampling a textureCube (not generally normalized ).\n\n  var getFace = /*@__PURE__*/Fn(function (_ref96) {\n    var _ref97 = (0, _slicedToArray2.default)(_ref96, 1),\n      direction = _ref97[0];\n    var absDirection = vec3(abs(direction)).toVar();\n    var face = float(-1.0).toVar();\n    If(absDirection.x.greaterThan(absDirection.z), function () {\n      If(absDirection.x.greaterThan(absDirection.y), function () {\n        face.assign(select(direction.x.greaterThan(0.0), 0.0, 3.0));\n      }).Else(function () {\n        face.assign(select(direction.y.greaterThan(0.0), 1.0, 4.0));\n      });\n    }).Else(function () {\n      If(absDirection.z.greaterThan(absDirection.y), function () {\n        face.assign(select(direction.z.greaterThan(0.0), 2.0, 5.0));\n      }).Else(function () {\n        face.assign(select(direction.y.greaterThan(0.0), 1.0, 4.0));\n      });\n    });\n    return face;\n  }).setLayout({\n    name: 'getFace',\n    type: 'float',\n    inputs: [{\n      name: 'direction',\n      type: 'vec3'\n    }]\n  });\n\n  // RH coordinate system; PMREM face-indexing convention\n  var getUV = /*@__PURE__*/Fn(function (_ref98) {\n    var _ref99 = (0, _slicedToArray2.default)(_ref98, 2),\n      direction = _ref99[0],\n      face = _ref99[1];\n    var uv = vec2().toVar();\n    If(face.equal(0.0), function () {\n      uv.assign(vec2(direction.z, direction.y).div(abs(direction.x))); // pos x\n    }).ElseIf(face.equal(1.0), function () {\n      uv.assign(vec2(direction.x.negate(), direction.z.negate()).div(abs(direction.y))); // pos y\n    }).ElseIf(face.equal(2.0), function () {\n      uv.assign(vec2(direction.x.negate(), direction.y).div(abs(direction.z))); // pos z\n    }).ElseIf(face.equal(3.0), function () {\n      uv.assign(vec2(direction.z.negate(), direction.y).div(abs(direction.x))); // neg x\n    }).ElseIf(face.equal(4.0), function () {\n      uv.assign(vec2(direction.x.negate(), direction.z).div(abs(direction.y))); // neg y\n    }).Else(function () {\n      uv.assign(vec2(direction.x, direction.y).div(abs(direction.z))); // neg z\n    });\n    return mul(0.5, uv.add(1.0));\n  }).setLayout({\n    name: 'getUV',\n    type: 'vec2',\n    inputs: [{\n      name: 'direction',\n      type: 'vec3'\n    }, {\n      name: 'face',\n      type: 'float'\n    }]\n  });\n  var roughnessToMip = /*@__PURE__*/Fn(function (_ref100) {\n    var _ref101 = (0, _slicedToArray2.default)(_ref100, 1),\n      roughness = _ref101[0];\n    var mip = float(0.0).toVar();\n    If(roughness.greaterThanEqual(cubeUV_r1), function () {\n      mip.assign(cubeUV_r0.sub(roughness).mul(cubeUV_m1.sub(cubeUV_m0)).div(cubeUV_r0.sub(cubeUV_r1)).add(cubeUV_m0));\n    }).ElseIf(roughness.greaterThanEqual(cubeUV_r4), function () {\n      mip.assign(cubeUV_r1.sub(roughness).mul(cubeUV_m4.sub(cubeUV_m1)).div(cubeUV_r1.sub(cubeUV_r4)).add(cubeUV_m1));\n    }).ElseIf(roughness.greaterThanEqual(cubeUV_r5), function () {\n      mip.assign(cubeUV_r4.sub(roughness).mul(cubeUV_m5.sub(cubeUV_m4)).div(cubeUV_r4.sub(cubeUV_r5)).add(cubeUV_m4));\n    }).ElseIf(roughness.greaterThanEqual(cubeUV_r6), function () {\n      mip.assign(cubeUV_r5.sub(roughness).mul(cubeUV_m6.sub(cubeUV_m5)).div(cubeUV_r5.sub(cubeUV_r6)).add(cubeUV_m5));\n    }).Else(function () {\n      mip.assign(float(-2.0).mul(log2(mul(1.16, roughness)))); // 1.16 = 1.79^0.25\n    });\n    return mip;\n  }).setLayout({\n    name: 'roughnessToMip',\n    type: 'float',\n    inputs: [{\n      name: 'roughness',\n      type: 'float'\n    }]\n  });\n\n  // RH coordinate system; PMREM face-indexing convention\n  var getDirection = /*@__PURE__*/Fn(function (_ref102) {\n    var _ref103 = (0, _slicedToArray2.default)(_ref102, 2),\n      uv_immutable = _ref103[0],\n      face = _ref103[1];\n    var uv = uv_immutable.toVar();\n    uv.assign(mul(2.0, uv).sub(1.0));\n    var direction = vec3(uv, 1.0).toVar();\n    If(face.equal(0.0), function () {\n      direction.assign(direction.zyx); // ( 1, v, u ) pos x\n    }).ElseIf(face.equal(1.0), function () {\n      direction.assign(direction.xzy);\n      direction.xz.mulAssign(-1.0); // ( -u, 1, -v ) pos y\n    }).ElseIf(face.equal(2.0), function () {\n      direction.x.mulAssign(-1.0); // ( -u, v, 1 ) pos z\n    }).ElseIf(face.equal(3.0), function () {\n      direction.assign(direction.zyx);\n      direction.xz.mulAssign(-1.0); // ( -1, v, -u ) neg x\n    }).ElseIf(face.equal(4.0), function () {\n      direction.assign(direction.xzy);\n      direction.xy.mulAssign(-1.0); // ( -u, -1, v ) neg y\n    }).ElseIf(face.equal(5.0), function () {\n      direction.z.mulAssign(-1.0); // ( u, v, -1 ) neg zS\n    });\n    return direction;\n  }).setLayout({\n    name: 'getDirection',\n    type: 'vec3',\n    inputs: [{\n      name: 'uv',\n      type: 'vec2'\n    }, {\n      name: 'face',\n      type: 'float'\n    }]\n  });\n\n  //\n\n  var textureCubeUV = /*@__PURE__*/Fn(function (_ref104) {\n    var _ref105 = (0, _slicedToArray2.default)(_ref104, 6),\n      envMap = _ref105[0],\n      sampleDir_immutable = _ref105[1],\n      roughness_immutable = _ref105[2],\n      CUBEUV_TEXEL_WIDTH = _ref105[3],\n      CUBEUV_TEXEL_HEIGHT = _ref105[4],\n      CUBEUV_MAX_MIP = _ref105[5];\n    var roughness = float(roughness_immutable);\n    var sampleDir = vec3(sampleDir_immutable);\n    var mip = clamp(roughnessToMip(roughness), cubeUV_m0, CUBEUV_MAX_MIP);\n    var mipF = fract(mip);\n    var mipInt = floor(mip);\n    var color0 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();\n    If(mipF.notEqual(0.0), function () {\n      var color1 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt.add(1.0), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();\n      color0.assign(mix(color0, color1, mipF));\n    });\n    return color0;\n  });\n  var bilinearCubeUV = /*@__PURE__*/Fn(function (_ref106) {\n    var _ref107 = (0, _slicedToArray2.default)(_ref106, 6),\n      envMap = _ref107[0],\n      direction_immutable = _ref107[1],\n      mipInt_immutable = _ref107[2],\n      CUBEUV_TEXEL_WIDTH = _ref107[3],\n      CUBEUV_TEXEL_HEIGHT = _ref107[4],\n      CUBEUV_MAX_MIP = _ref107[5];\n    var mipInt = float(mipInt_immutable).toVar();\n    var direction = vec3(direction_immutable);\n    var face = float(getFace(direction)).toVar();\n    var filterInt = float(max$1(cubeUV_minMipLevel.sub(mipInt), 0.0)).toVar();\n    mipInt.assign(max$1(mipInt, cubeUV_minMipLevel));\n    var faceSize = float(exp2(mipInt)).toVar();\n    var uv = vec2(getUV(direction, face).mul(faceSize.sub(2.0)).add(1.0)).toVar();\n    If(face.greaterThan(2.0), function () {\n      uv.y.addAssign(faceSize);\n      face.subAssign(3.0);\n    });\n    uv.x.addAssign(face.mul(faceSize));\n    uv.x.addAssign(filterInt.mul(mul(3.0, cubeUV_minTileSize)));\n    uv.y.addAssign(mul(4.0, exp2(CUBEUV_MAX_MIP).sub(faceSize)));\n    uv.x.mulAssign(CUBEUV_TEXEL_WIDTH);\n    uv.y.mulAssign(CUBEUV_TEXEL_HEIGHT);\n    return envMap.sample(uv).grad(vec2(), vec2()); // disable anisotropic filtering\n  });\n  var getSample = /*@__PURE__*/Fn(function (_ref108) {\n    var envMap = _ref108.envMap,\n      mipInt = _ref108.mipInt,\n      outputDirection = _ref108.outputDirection,\n      theta = _ref108.theta,\n      axis = _ref108.axis,\n      CUBEUV_TEXEL_WIDTH = _ref108.CUBEUV_TEXEL_WIDTH,\n      CUBEUV_TEXEL_HEIGHT = _ref108.CUBEUV_TEXEL_HEIGHT,\n      CUBEUV_MAX_MIP = _ref108.CUBEUV_MAX_MIP;\n    var cosTheta = cos(theta);\n\n    // Rodrigues' axis-angle rotation\n    var sampleDirection = outputDirection.mul(cosTheta).add(axis.cross(outputDirection).mul(sin(theta))).add(axis.mul(axis.dot(outputDirection).mul(cosTheta.oneMinus())));\n    return bilinearCubeUV(envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP);\n  });\n  var blur = /*@__PURE__*/Fn(function (_ref109) {\n    var n = _ref109.n,\n      latitudinal = _ref109.latitudinal,\n      poleAxis = _ref109.poleAxis,\n      outputDirection = _ref109.outputDirection,\n      weights = _ref109.weights,\n      samples = _ref109.samples,\n      dTheta = _ref109.dTheta,\n      mipInt = _ref109.mipInt,\n      envMap = _ref109.envMap,\n      CUBEUV_TEXEL_WIDTH = _ref109.CUBEUV_TEXEL_WIDTH,\n      CUBEUV_TEXEL_HEIGHT = _ref109.CUBEUV_TEXEL_HEIGHT,\n      CUBEUV_MAX_MIP = _ref109.CUBEUV_MAX_MIP;\n    var axis = vec3(select(latitudinal, poleAxis, cross(poleAxis, outputDirection))).toVar();\n    If(all(axis.equals(vec3(0.0))), function () {\n      axis.assign(vec3(outputDirection.z, 0.0, outputDirection.x.negate()));\n    });\n    axis.assign(normalize(axis));\n    var gl_FragColor = vec3().toVar();\n    gl_FragColor.addAssign(weights.element(int(0)).mul(getSample({\n      theta: 0.0,\n      axis: axis,\n      outputDirection: outputDirection,\n      mipInt: mipInt,\n      envMap: envMap,\n      CUBEUV_TEXEL_WIDTH: CUBEUV_TEXEL_WIDTH,\n      CUBEUV_TEXEL_HEIGHT: CUBEUV_TEXEL_HEIGHT,\n      CUBEUV_MAX_MIP: CUBEUV_MAX_MIP\n    })));\n    Loop({\n      start: int(1),\n      end: n\n    }, function (_ref110) {\n      var i = _ref110.i;\n      If(i.greaterThanEqual(samples), function () {\n        Break();\n      });\n      var theta = float(dTheta.mul(float(i))).toVar();\n      gl_FragColor.addAssign(weights.element(i).mul(getSample({\n        theta: theta.mul(-1.0),\n        axis: axis,\n        outputDirection: outputDirection,\n        mipInt: mipInt,\n        envMap: envMap,\n        CUBEUV_TEXEL_WIDTH: CUBEUV_TEXEL_WIDTH,\n        CUBEUV_TEXEL_HEIGHT: CUBEUV_TEXEL_HEIGHT,\n        CUBEUV_MAX_MIP: CUBEUV_MAX_MIP\n      })));\n      gl_FragColor.addAssign(weights.element(i).mul(getSample({\n        theta: theta,\n        axis: axis,\n        outputDirection: outputDirection,\n        mipInt: mipInt,\n        envMap: envMap,\n        CUBEUV_TEXEL_WIDTH: CUBEUV_TEXEL_WIDTH,\n        CUBEUV_TEXEL_HEIGHT: CUBEUV_TEXEL_HEIGHT,\n        CUBEUV_MAX_MIP: CUBEUV_MAX_MIP\n      })));\n    });\n    return vec4(gl_FragColor, 1);\n  });\n\n  /** @module PMREMNode **/\n\n  var _generator = null;\n  var _cache = new WeakMap();\n\n  /**\n   * Generates the cubeUV size based on the given image height.\n   *\n   * @private\n   * @param {Number} imageHeight - The image height.\n   * @return {{texelWidth: Number,texelHeight: Number, maxMip: Number}} The result object.\n   */\n  function _generateCubeUVSize(imageHeight) {\n    var maxMip = Math.log2(imageHeight) - 2;\n    var texelHeight = 1.0 / imageHeight;\n    var texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));\n    return {\n      texelWidth: texelWidth,\n      texelHeight: texelHeight,\n      maxMip: maxMip\n    };\n  }\n\n  /**\n   * Generates a PMREM from the given texture .\n   *\n   * @private\n   * @param {Texture} texture - The texture to create the PMREM for.\n   * @return {Texture} The PMREM.\n   */\n  function _getPMREMFromTexture(texture) {\n    var cacheTexture = _cache.get(texture);\n    var pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : -1;\n    if (pmremVersion !== texture.pmremVersion) {\n      var image = texture.image;\n      if (texture.isCubeTexture) {\n        if (isCubeMapReady(image)) {\n          cacheTexture = _generator.fromCubemap(texture, cacheTexture);\n        } else {\n          return null;\n        }\n      } else {\n        if (isEquirectangularMapReady(image)) {\n          cacheTexture = _generator.fromEquirectangular(texture, cacheTexture);\n        } else {\n          return null;\n        }\n      }\n      cacheTexture.pmremVersion = texture.pmremVersion;\n      _cache.set(texture, cacheTexture);\n    }\n    return cacheTexture.texture;\n  }\n\n  /**\n   * This node represents a PMREM which is a special type of preprocessed\n   * environment map intended for PBR materials.\n   *\n   * ```js\n   * const material = new MeshStandardNodeMaterial();\n   * material.envNode = pmremTexture( envMap );\n   * ```\n   *\n   * @augments TempNode\n   */\n  var PMREMNode = exports.PMREMNode = /*#__PURE__*/function (_TempNode15) {\n    /**\n     * Constructs a new function overloading node.\n     *\n     * @param {Texture} value - The input texture.\n     * @param {Node<vec2>} [uvNode=null] - The uv node.\n     * @param {Node<float>} [levelNode=null] - The level node.\n     */\n    function PMREMNode(value) {\n      var _this92;\n      var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, PMREMNode);\n      _this92 = _callSuper(this, PMREMNode, ['vec3']);\n\n      /**\n       * Reference to the input texture.\n       *\n       * @private\n       * @type {Texture}\n       */\n      _this92._value = value;\n\n      /**\n       * Reference to the generated PMREM.\n       *\n       * @private\n       * @type {Texture | null}\n       * @default null\n       */\n      _this92._pmrem = null;\n\n      /**\n       *  The uv node.\n       *\n       * @type {Node<vec2>}\n       */\n      _this92.uvNode = uvNode;\n\n      /**\n       *  The level node.\n       *\n       * @type {Node<float>}\n       */\n      _this92.levelNode = levelNode;\n\n      /**\n       * Reference to a PMREM generator.\n       *\n       * @private\n       * @type {PMREMGenerator}\n       * @default null\n       */\n      _this92._generator = null;\n      var defaultTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Texture)();\n      defaultTexture.isRenderTargetTexture = true;\n\n      /**\n       * The texture node holding the generated PMREM.\n       *\n       * @private\n       * @type {TextureNode}\n       */\n      _this92._texture = texture(defaultTexture);\n\n      /**\n       * A uniform representing the PMREM's width.\n       *\n       * @private\n       * @type {UniformNode<float>}\n       */\n      _this92._width = uniform(0);\n\n      /**\n       * A uniform representing the PMREM's height.\n       *\n       * @private\n       * @type {UniformNode<float>}\n       */\n      _this92._height = uniform(0);\n\n      /**\n       * A uniform representing the PMREM's max Mip.\n       *\n       * @private\n       * @type {UniformNode<float>}\n       */\n      _this92._maxMip = uniform(0);\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.RENDER`.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this92.updateBeforeType = NodeUpdateType.RENDER;\n      return _this92;\n    }\n    (0, _inherits2.default)(PMREMNode, _TempNode15);\n    return (0, _createClass2.default)(PMREMNode, [{\n      key: \"value\",\n      get:\n      /**\n       * The node's texture value.\n       *\n       * @type {Texture}\n       */\n      function get() {\n        return this._value;\n      }\n\n      /**\n       * Uses the given PMREM texture to update internal values.\n       *\n       * @param {Texture} texture - The PMREM texture.\n       */,\n      set: function set(value) {\n        this._value = value;\n        this._pmrem = null;\n      }\n    }, {\n      key: \"updateFromTexture\",\n      value: function updateFromTexture(texture) {\n        var cubeUVSize = _generateCubeUVSize(texture.image.height);\n        this._texture.value = texture;\n        this._width.value = cubeUVSize.texelWidth;\n        this._height.value = cubeUVSize.texelHeight;\n        this._maxMip.value = cubeUVSize.maxMip;\n      }\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore() {\n        var pmrem = this._pmrem;\n        var pmremVersion = pmrem ? pmrem.pmremVersion : -1;\n        var texture = this._value;\n        if (pmremVersion !== texture.pmremVersion) {\n          if (texture.isPMREMTexture === true) {\n            pmrem = texture;\n          } else {\n            pmrem = _getPMREMFromTexture(texture);\n          }\n          if (pmrem !== null) {\n            this._pmrem = pmrem;\n            this.updateFromTexture(pmrem);\n          }\n        }\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        if (_generator === null) {\n          _generator = builder.createPMREMGenerator();\n        }\n\n        //\n\n        this.updateBefore(builder);\n\n        //\n\n        var uvNode = this.uvNode;\n        if (uvNode === null && builder.context.getUV) {\n          uvNode = builder.context.getUV(this);\n        }\n\n        //\n\n        var texture = this.value;\n        if (builder.renderer.coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCoordinateSystem && texture.isPMREMTexture !== true && texture.isRenderTargetTexture === true) {\n          uvNode = vec3(uvNode.x.negate(), uvNode.yz);\n        }\n        uvNode = vec3(uvNode.x, uvNode.y.negate(), uvNode.z);\n\n        //\n\n        var levelNode = this.levelNode;\n        if (levelNode === null && builder.context.getTextureLevel) {\n          levelNode = builder.context.getTextureLevel(this);\n        }\n\n        //\n\n        return textureCubeUV(this._texture, uvNode, levelNode, this._width, this._height, this._maxMip);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PMREMNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * Returns `true` if the given cube map image has been fully loaded.\n   *\n   * @private\n   * @param {Array<(Image|Object)>} image - The cube map image.\n   * @return {Boolean} Whether the given cube map is ready or not.\n   */\n  function isCubeMapReady(image) {\n    if (image === null || image === undefined) return false;\n    var count = 0;\n    var length = 6;\n    for (var i = 0; i < length; i++) {\n      if (image[i] !== undefined) count++;\n    }\n    return count === length;\n  }\n\n  /**\n   * Returns `true` if the given equirectangular image has been fully loaded.\n   *\n   * @private\n   * @param {(Image|Object)} image - The equirectangular image.\n   * @return {Boolean} Whether the given cube map is ready or not.\n   */\n  function isEquirectangularMapReady(image) {\n    if (image === null || image === undefined) return false;\n    return image.height > 0;\n  }\n\n  /**\n   * TSL function for creating a PMREM node.\n   *\n   * @function\n   * @param {Texture} value - The input texture.\n   * @param {Node<vec2>} [uvNode=null] - The uv node.\n   * @param {Node<float>} [levelNode=null] - The level node.\n   * @returns {PMREMNode}\n   */\n  var pmremTexture = /*@__PURE__*/nodeProxy(PMREMNode);\n  var _envNodeCache = new WeakMap();\n\n  /**\n   * Represents a physical model for Image-based lighting (IBL). The environment\n   * is defined via environment maps in the equirectangular, cube map or cubeUV (PMREM) format.\n   * `EnvironmentNode` is intended for PBR materials like {@link MeshStandardNodeMaterial}.\n   *\n   * @augments LightingNode\n   */\n  var EnvironmentNode = exports.EnvironmentNode = /*#__PURE__*/function (_LightingNode5) {\n    /**\n     * Constructs a new environment node.\n     *\n     * @param {Node} [envNode=null] - A node representing the environment.\n     */\n    function EnvironmentNode() {\n      var _this93;\n      var envNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, EnvironmentNode);\n      _this93 = _callSuper(this, EnvironmentNode);\n\n      /**\n       * A node representing the environment.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this93.envNode = envNode;\n      return _this93;\n    }\n    (0, _inherits2.default)(EnvironmentNode, _LightingNode5);\n    return (0, _createClass2.default)(EnvironmentNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var material = builder.material;\n        var envNode = this.envNode;\n        if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {\n          var value = envNode.isTextureNode ? envNode.value : material[envNode.property];\n          var cacheEnvNode = _envNodeCache.get(value);\n          if (cacheEnvNode === undefined) {\n            cacheEnvNode = pmremTexture(value);\n            _envNodeCache.set(value, cacheEnvNode);\n          }\n          envNode = cacheEnvNode;\n        }\n\n        //\n\n        var envMap = material.envMap;\n        var intensity = envMap ? reference('envMapIntensity', 'float', builder.material) : reference('environmentIntensity', 'float', builder.scene); // @TODO: Add materialEnvIntensity in MaterialNode\n\n        var useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\n        var radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\n        var radiance = envNode.context(createRadianceContext(roughness, radianceNormalView)).mul(intensity);\n        var irradiance = envNode.context(createIrradianceContext(transformedNormalWorld)).mul(Math.PI).mul(intensity);\n        var isolateRadiance = cache(radiance);\n        var isolateIrradiance = cache(irradiance);\n\n        //\n\n        builder.context.radiance.addAssign(isolateRadiance);\n        builder.context.iblIrradiance.addAssign(isolateIrradiance);\n\n        //\n\n        var clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n        if (clearcoatRadiance) {\n          var clearcoatRadianceContext = envNode.context(createRadianceContext(clearcoatRoughness, transformedClearcoatNormalView)).mul(intensity);\n          var isolateClearcoatRadiance = cache(clearcoatRadianceContext);\n          clearcoatRadiance.addAssign(isolateClearcoatRadiance);\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'EnvironmentNode';\n      }\n    }]);\n  }(LightingNode);\n  var createRadianceContext = function createRadianceContext(roughnessNode, normalViewNode) {\n    var reflectVec = null;\n    return {\n      getUV: function getUV() {\n        if (reflectVec === null) {\n          reflectVec = positionViewDirection.negate().reflect(normalViewNode);\n\n          // Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n          reflectVec = roughnessNode.mul(roughnessNode).mix(reflectVec, normalViewNode).normalize();\n          reflectVec = reflectVec.transformDirection(cameraViewMatrix);\n        }\n        return reflectVec;\n      },\n      getTextureLevel: function getTextureLevel() {\n        return roughnessNode;\n      }\n    };\n  };\n  var createIrradianceContext = function createIrradianceContext(normalWorldNode) {\n    return {\n      getUV: function getUV() {\n        return normalWorldNode;\n      },\n      getTextureLevel: function getTextureLevel() {\n        return float(1.0);\n      }\n    };\n  };\n  var _defaultValues$6 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshStandardMaterial)();\n\n  /**\n   * Node material version of `MeshStandardMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshStandardNodeMaterial = exports.MeshStandardNodeMaterial = /*#__PURE__*/function (_NodeMaterial9) {\n    /**\n     * Constructs a new mesh standard node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshStandardNodeMaterial(parameters) {\n      var _this94;\n      (0, _classCallCheck2.default)(this, MeshStandardNodeMaterial);\n      _this94 = _callSuper(this, MeshStandardNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this94.isMeshStandardNodeMaterial = true;\n\n      /**\n       * Set to `true` because standard materials react on lights.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this94.lights = true;\n\n      /**\n       * The emissive color of standard materials is by default inferred from the `emissive`,\n       * `emissiveIntensity` and `emissiveMap` properties. This node property allows to\n       * overwrite the default and define the emissive color with a node instead.\n       *\n       * If you don't want to overwrite the emissive color but modify the existing\n       * value instead, use {@link module:MaterialNode.materialEmissive}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this94.emissiveNode = null;\n\n      /**\n       * The metalness of standard materials is by default inferred from the `metalness`,\n       * and `metalnessMap` properties. This node property allows to\n       * overwrite the default and define the metalness with a node instead.\n       *\n       * If you don't want to overwrite the metalness but modify the existing\n       * value instead, use {@link module:MaterialNode.materialMetalness}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this94.metalnessNode = null;\n\n      /**\n       * The roughness of standard materials is by default inferred from the `roughness`,\n       * and `roughnessMap` properties. This node property allows to\n       * overwrite the default and define the roughness with a node instead.\n       *\n       * If you don't want to overwrite the roughness but modify the existing\n       * value instead, use {@link module:MaterialNode.materialRoughness}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this94.roughnessNode = null;\n      _this94.setDefaultValues(_defaultValues$6);\n      _this94.setValues(parameters);\n      return _this94;\n    }\n\n    /**\n     * Overwritten since this type of material uses {@link EnvironmentNode}\n     * to implement the PBR (PMREM based) environment mapping. Besides, the\n     * method honors `Scene.environment`.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {EnvironmentNode<vec3>?} The environment node.\n     */\n    (0, _inherits2.default)(MeshStandardNodeMaterial, _NodeMaterial9);\n    return (0, _createClass2.default)(MeshStandardNodeMaterial, [{\n      key: \"setupEnvironment\",\n      value: function setupEnvironment(builder) {\n        var envNode = _superPropGet(MeshStandardNodeMaterial, \"setupEnvironment\", this, 3)([builder]);\n        if (envNode === null && builder.environmentNode) {\n          envNode = builder.environmentNode;\n        }\n        return envNode ? new EnvironmentNode(envNode) : null;\n      }\n\n      /**\n       * Setups the lighting model.\n       *\n       * @return {PhysicalLightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new PhysicalLightingModel();\n      }\n\n      /**\n       * Setups the specular related node variables.\n       */\n    }, {\n      key: \"setupSpecular\",\n      value: function setupSpecular() {\n        var specularColorNode = mix(vec3(0.04), diffuseColor.rgb, metalness);\n        specularColor.assign(specularColorNode);\n        specularF90.assign(1.0);\n      }\n\n      /**\n       * Setups the standard specific node variables.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupVariants\",\n      value: function setupVariants() {\n        // METALNESS\n\n        var metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;\n        metalness.assign(metalnessNode);\n\n        // ROUGHNESS\n\n        var roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;\n        roughnessNode = getRoughness({\n          roughness: roughnessNode\n        });\n        roughness.assign(roughnessNode);\n\n        // SPECULAR COLOR\n\n        this.setupSpecular();\n\n        // DIFFUSE COLOR\n\n        diffuseColor.assign(vec4(diffuseColor.rgb.mul(metalnessNode.oneMinus()), diffuseColor.a));\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.emissiveNode = source.emissiveNode;\n        this.metalnessNode = source.metalnessNode;\n        this.roughnessNode = source.roughnessNode;\n        return _superPropGet(MeshStandardNodeMaterial, \"copy\", this, 3)([source]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshStandardNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var _defaultValues$5 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshPhysicalMaterial)();\n\n  /**\n   * Node material version of `MeshPhysicalMaterial`.\n   *\n   * @augments MeshStandardNodeMaterial\n   */\n  var MeshPhysicalNodeMaterial = exports.MeshPhysicalNodeMaterial = /*#__PURE__*/function (_MeshStandardNodeMate) {\n    /**\n     * Constructs a new mesh physical node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshPhysicalNodeMaterial(parameters) {\n      var _this95;\n      (0, _classCallCheck2.default)(this, MeshPhysicalNodeMaterial);\n      _this95 = _callSuper(this, MeshPhysicalNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this95.isMeshPhysicalNodeMaterial = true;\n\n      /**\n       * The clearcoat of physical materials is by default inferred from the `clearcoat`\n       * and `clearcoatMap` properties. This node property allows to overwrite the default\n       * and define the clearcoat with a node instead.\n       *\n       * If you don't want to overwrite the clearcoat but modify the existing\n       * value instead, use {@link module:MaterialNode.materialClearcoat}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.clearcoatNode = null;\n\n      /**\n       * The clearcoat roughness of physical materials is by default inferred from the `clearcoatRoughness`\n       * and `clearcoatRoughnessMap` properties. This node property allows to overwrite the default\n       * and define the clearcoat roughness with a node instead.\n       *\n       * If you don't want to overwrite the clearcoat roughness but modify the existing\n       * value instead, use {@link module:MaterialNode.materialClearcoatRoughness}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.clearcoatRoughnessNode = null;\n\n      /**\n       * The clearcoat normal of physical materials is by default inferred from the `clearcoatNormalMap`\n       * property. This node property allows to overwrite the default\n       * and define the clearcoat normal with a node instead.\n       *\n       * If you don't want to overwrite the clearcoat normal but modify the existing\n       * value instead, use {@link module:MaterialNode.materialClearcoatNormal}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this95.clearcoatNormalNode = null;\n\n      /**\n       * The sheen of physical materials is by default inferred from the `sheen`, `sheenColor`\n       * and `sheenColorMap` properties. This node property allows to overwrite the default\n       * and define the sheen with a node instead.\n       *\n       * If you don't want to overwrite the sheen but modify the existing\n       * value instead, use {@link module:MaterialNode.materialSheen}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this95.sheenNode = null;\n\n      /**\n       * The sheen roughness of physical materials is by default inferred from the `sheenRoughness` and\n       * `sheenRoughnessMap` properties. This node property allows to overwrite the default\n       * and define the sheen roughness with a node instead.\n       *\n       * If you don't want to overwrite the sheen roughness but modify the existing\n       * value instead, use {@link module:MaterialNode.materialSheenRoughness}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.sheenRoughnessNode = null;\n\n      /**\n       * The iridescence of physical materials is by default inferred from the `iridescence`\n       * property. This node property allows to overwrite the default\n       * and define the iridescence with a node instead.\n       *\n       * If you don't want to overwrite the iridescence but modify the existing\n       * value instead, use {@link module:MaterialNode.materialIridescence}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.iridescenceNode = null;\n\n      /**\n       * The iridescence IOR of physical materials is by default inferred from the `iridescenceIOR`\n       * property. This node property allows to overwrite the default\n       * and define the iridescence IOR with a node instead.\n       *\n       * If you don't want to overwrite the iridescence IOR but modify the existing\n       * value instead, use {@link module:MaterialNode.materialIridescenceIOR}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.iridescenceIORNode = null;\n\n      /**\n       * The iridescence thickness of physical materials is by default inferred from the `iridescenceThicknessRange`\n       * and `iridescenceThicknessMap` properties. This node property allows to overwrite the default\n       * and define the iridescence thickness with a node instead.\n       *\n       * If you don't want to overwrite the iridescence thickness but modify the existing\n       * value instead, use {@link module:MaterialNode.materialIridescenceThickness}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.iridescenceThicknessNode = null;\n\n      /**\n       * The specular intensity of physical materials is by default inferred from the `specularIntensity`\n       * and `specularIntensityMap` properties. This node property allows to overwrite the default\n       * and define the specular intensity with a node instead.\n       *\n       * If you don't want to overwrite the specular intensity but modify the existing\n       * value instead, use {@link module:MaterialNode.materialSpecularIntensity}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.specularIntensityNode = null;\n\n      /**\n       * The specular color of physical materials is by default inferred from the `specularColor`\n       * and `specularColorMap` properties. This node property allows to overwrite the default\n       * and define the specular color with a node instead.\n       *\n       * If you don't want to overwrite the specular color but modify the existing\n       * value instead, use {@link module:MaterialNode.materialSpecularColor}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this95.specularColorNode = null;\n\n      /**\n       * The ior of physical materials is by default inferred from the `ior`\n       * property. This node property allows to overwrite the default\n       * and define the ior with a node instead.\n       *\n       * If you don't want to overwrite the ior but modify the existing\n       * value instead, use {@link module:MaterialNode.materialIOR}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.iorNode = null;\n\n      /**\n       * The transmission of physical materials is by default inferred from the `transmission` and\n       * `transmissionMap` properties. This node property allows to overwrite the default\n       * and define the transmission with a node instead.\n       *\n       * If you don't want to overwrite the transmission but modify the existing\n       * value instead, use {@link module:MaterialNode.materialTransmission}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.transmissionNode = null;\n\n      /**\n       * The thickness of physical materials is by default inferred from the `thickness` and\n       * `thicknessMap` properties. This node property allows to overwrite the default\n       * and define the thickness with a node instead.\n       *\n       * If you don't want to overwrite the thickness but modify the existing\n       * value instead, use {@link module:MaterialNode.materialThickness}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.thicknessNode = null;\n\n      /**\n       * The attenuation distance of physical materials is by default inferred from the\n       * `attenuationDistance` property. This node property allows to overwrite the default\n       * and define the attenuation distance with a node instead.\n       *\n       * If you don't want to overwrite the attenuation distance but modify the existing\n       * value instead, use {@link module:MaterialNode.materialAttenuationDistance}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.attenuationDistanceNode = null;\n\n      /**\n       * The attenuation color of physical materials is by default inferred from the\n       * `attenuationColor` property. This node property allows to overwrite the default\n       * and define the attenuation color with a node instead.\n       *\n       * If you don't want to overwrite the attenuation color but modify the existing\n       * value instead, use {@link module:MaterialNode.materialAttenuationColor}.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this95.attenuationColorNode = null;\n\n      /**\n       * The dispersion of physical materials is by default inferred from the\n       * `dispersion` property. This node property allows to overwrite the default\n       * and define the dispersion with a node instead.\n       *\n       * If you don't want to overwrite the dispersion but modify the existing\n       * value instead, use {@link module:MaterialNode.materialDispersion}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.dispersionNode = null;\n\n      /**\n       * The anisotropy of physical materials is by default inferred from the\n       * `anisotropy` property. This node property allows to overwrite the default\n       * and define the anisotropy with a node instead.\n       *\n       * If you don't want to overwrite the anisotropy but modify the existing\n       * value instead, use {@link module:MaterialNode.materialAnisotropy}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this95.anisotropyNode = null;\n      _this95.setDefaultValues(_defaultValues$5);\n      _this95.setValues(parameters);\n      return _this95;\n    }\n\n    /**\n     * Whether the lighting model should use clearcoat or not.\n     *\n     * @type {Boolean}\n     * @default true\n     */\n    (0, _inherits2.default)(MeshPhysicalNodeMaterial, _MeshStandardNodeMate);\n    return (0, _createClass2.default)(MeshPhysicalNodeMaterial, [{\n      key: \"useClearcoat\",\n      get: function get() {\n        return this.clearcoat > 0 || this.clearcoatNode !== null;\n      }\n\n      /**\n       * Whether the lighting model should use iridescence or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"useIridescence\",\n      get: function get() {\n        return this.iridescence > 0 || this.iridescenceNode !== null;\n      }\n\n      /**\n       * Whether the lighting model should use sheen or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"useSheen\",\n      get: function get() {\n        return this.sheen > 0 || this.sheenNode !== null;\n      }\n\n      /**\n       * Whether the lighting model should use anisotropy or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"useAnisotropy\",\n      get: function get() {\n        return this.anisotropy > 0 || this.anisotropyNode !== null;\n      }\n\n      /**\n       * Whether the lighting model should use transmission or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"useTransmission\",\n      get: function get() {\n        return this.transmission > 0 || this.transmissionNode !== null;\n      }\n\n      /**\n       * Whether the lighting model should use dispersion or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"useDispersion\",\n      get: function get() {\n        return this.dispersion > 0 || this.dispersionNode !== null;\n      }\n\n      /**\n       * Setups the specular related node variables.\n       */\n    }, {\n      key: \"setupSpecular\",\n      value: function setupSpecular() {\n        var iorNode = this.iorNode ? float(this.iorNode) : materialIOR;\n        ior.assign(iorNode);\n        specularColor.assign(mix(min$1(pow2(ior.sub(1.0).div(ior.add(1.0))).mul(materialSpecularColor), vec3(1.0)).mul(materialSpecularIntensity), diffuseColor.rgb, metalness));\n        specularF90.assign(mix(materialSpecularIntensity, 1.0, metalness));\n      }\n\n      /**\n       * Setups the lighting model.\n       *\n       * @return {PhysicalLightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new PhysicalLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion);\n      }\n\n      /**\n       * Setups the physical specific node variables.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupVariants\",\n      value: function setupVariants(builder) {\n        _superPropGet(MeshPhysicalNodeMaterial, \"setupVariants\", this, 3)([builder]);\n\n        // CLEARCOAT\n\n        if (this.useClearcoat) {\n          var clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;\n          var clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;\n          clearcoat.assign(clearcoatNode);\n          clearcoatRoughness.assign(getRoughness({\n            roughness: clearcoatRoughnessNode\n          }));\n        }\n\n        // SHEEN\n\n        if (this.useSheen) {\n          var sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;\n          var sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;\n          sheen.assign(sheenNode);\n          sheenRoughness.assign(sheenRoughnessNode);\n        }\n\n        // IRIDESCENCE\n\n        if (this.useIridescence) {\n          var iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;\n          var iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;\n          var iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;\n          iridescence.assign(iridescenceNode);\n          iridescenceIOR.assign(iridescenceIORNode);\n          iridescenceThickness.assign(iridescenceThicknessNode);\n        }\n\n        // ANISOTROPY\n\n        if (this.useAnisotropy) {\n          var anisotropyV = (this.anisotropyNode ? vec2(this.anisotropyNode) : materialAnisotropy).toVar();\n          anisotropy.assign(anisotropyV.length());\n          If(anisotropy.equal(0.0), function () {\n            anisotropyV.assign(vec2(1.0, 0.0));\n          }).Else(function () {\n            anisotropyV.divAssign(vec2(anisotropy));\n            anisotropy.assign(anisotropy.saturate());\n          });\n\n          // Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n          alphaT.assign(anisotropy.pow2().mix(roughness.pow2(), 1.0));\n          anisotropyT.assign(TBNViewMatrix[0].mul(anisotropyV.x).add(TBNViewMatrix[1].mul(anisotropyV.y)));\n          anisotropyB.assign(TBNViewMatrix[1].mul(anisotropyV.x).sub(TBNViewMatrix[0].mul(anisotropyV.y)));\n        }\n\n        // TRANSMISSION\n\n        if (this.useTransmission) {\n          var transmissionNode = this.transmissionNode ? float(this.transmissionNode) : materialTransmission;\n          var thicknessNode = this.thicknessNode ? float(this.thicknessNode) : materialThickness;\n          var attenuationDistanceNode = this.attenuationDistanceNode ? float(this.attenuationDistanceNode) : materialAttenuationDistance;\n          var attenuationColorNode = this.attenuationColorNode ? vec3(this.attenuationColorNode) : materialAttenuationColor;\n          transmission.assign(transmissionNode);\n          thickness.assign(thicknessNode);\n          attenuationDistance.assign(attenuationDistanceNode);\n          attenuationColor.assign(attenuationColorNode);\n          if (this.useDispersion) {\n            var dispersionNode = this.dispersionNode ? float(this.dispersionNode) : materialDispersion;\n            dispersion.assign(dispersionNode);\n          }\n        }\n      }\n\n      /**\n       * Setups the clearcoat normal node.\n       *\n       * @return {Node<vec3>} The clearcoat noraml.\n       */\n    }, {\n      key: \"setupClearcoatNormal\",\n      value: function setupClearcoatNormal() {\n        return this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this96 = this;\n        builder.context.setupClearcoatNormal = function () {\n          return _this96.setupClearcoatNormal(builder);\n        };\n        _superPropGet(MeshPhysicalNodeMaterial, \"setup\", this, 3)([builder]);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.clearcoatNode = source.clearcoatNode;\n        this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n        this.clearcoatNormalNode = source.clearcoatNormalNode;\n        this.sheenNode = source.sheenNode;\n        this.sheenRoughnessNode = source.sheenRoughnessNode;\n        this.iridescenceNode = source.iridescenceNode;\n        this.iridescenceIORNode = source.iridescenceIORNode;\n        this.iridescenceThicknessNode = source.iridescenceThicknessNode;\n        this.specularIntensityNode = source.specularIntensityNode;\n        this.specularColorNode = source.specularColorNode;\n        this.transmissionNode = source.transmissionNode;\n        this.thicknessNode = source.thicknessNode;\n        this.attenuationDistanceNode = source.attenuationDistanceNode;\n        this.attenuationColorNode = source.attenuationColorNode;\n        this.dispersionNode = source.dispersionNode;\n        this.anisotropyNode = source.anisotropyNode;\n        return _superPropGet(MeshPhysicalNodeMaterial, \"copy\", this, 3)([source]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshPhysicalNodeMaterial';\n      }\n    }]);\n  }(MeshStandardNodeMaterial);\n  /** @module MeshSSSNodeMaterial **/\n  /**\n   * Represents the lighting model for {@link MeshSSSNodeMaterial}.\n   *\n   * @augments PhysicalLightingModel\n   */\n  var SSSLightingModel = /*#__PURE__*/function (_PhysicalLightingMode) {\n    /**\n     * Constructs a new physical lighting model.\n     *\n     * @param {Boolean} [clearcoat=false] - Whether clearcoat is supported or not.\n     * @param {Boolean} [sheen=false] - Whether sheen is supported or not.\n     * @param {Boolean} [iridescence=false] - Whether iridescence is supported or not.\n     * @param {Boolean} [anisotropy=false] - Whether anisotropy is supported or not.\n     * @param {Boolean} [transmission=false] - Whether transmission is supported or not.\n     * @param {Boolean} [dispersion=false] - Whether dispersion is supported or not.\n     * @param {Boolean} [sss=false] - Whether SSS is supported or not.\n     */\n    function SSSLightingModel() {\n      var _this97;\n      var clearcoat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var sheen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var iridescence = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var anisotropy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var transmission = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var dispersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var sss = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      (0, _classCallCheck2.default)(this, SSSLightingModel);\n      _this97 = _callSuper(this, SSSLightingModel, [clearcoat, sheen, iridescence, anisotropy, transmission, dispersion]);\n\n      /**\n       * Whether the lighting model should use SSS or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this97.useSSS = sss;\n      return _this97;\n    }\n\n    /**\n     * Extends the default implementation with a SSS term.\n     *\n     * Reference: [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}\n     *\n     * @param {Object} input - The input data.\n     * @param {StackNode} stack - The current stack.\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(SSSLightingModel, _PhysicalLightingMode);\n    return (0, _createClass2.default)(SSSLightingModel, [{\n      key: \"direct\",\n      value: function direct(_ref111, stack, builder) {\n        var lightDirection = _ref111.lightDirection,\n          lightColor = _ref111.lightColor,\n          reflectedLight = _ref111.reflectedLight;\n        if (this.useSSS === true) {\n          var material = builder.material;\n          var thicknessColorNode = material.thicknessColorNode,\n            thicknessDistortionNode = material.thicknessDistortionNode,\n            thicknessAmbientNode = material.thicknessAmbientNode,\n            thicknessAttenuationNode = material.thicknessAttenuationNode,\n            thicknessPowerNode = material.thicknessPowerNode,\n            thicknessScaleNode = material.thicknessScaleNode;\n          var scatteringHalf = lightDirection.add(transformedNormalView.mul(thicknessDistortionNode)).normalize();\n          var scatteringDot = float(positionViewDirection.dot(scatteringHalf.negate()).saturate().pow(thicknessPowerNode).mul(thicknessScaleNode));\n          var scatteringIllu = vec3(scatteringDot.add(thicknessAmbientNode).mul(thicknessColorNode));\n          reflectedLight.directDiffuse.addAssign(scatteringIllu.mul(thicknessAttenuationNode.mul(lightColor)));\n        }\n        _superPropGet(SSSLightingModel, \"direct\", this, 3)([{\n          lightDirection: lightDirection,\n          lightColor: lightColor,\n          reflectedLight: reflectedLight\n        }, stack, builder]);\n      }\n    }]);\n  }(PhysicalLightingModel);\n  /**\n   * This node material is an experimental extension of {@link MeshPhysicalNodeMaterial}\n   * that implements a Subsurface scattering (SSS) term.\n   *\n   * @augments MeshPhysicalNodeMaterial\n   */\n  var MeshSSSNodeMaterial = exports.MeshSSSNodeMaterial = /*#__PURE__*/function (_MeshPhysicalNodeMate) {\n    /**\n     * Constructs a new mesh SSS node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshSSSNodeMaterial(parameters) {\n      var _this98;\n      (0, _classCallCheck2.default)(this, MeshSSSNodeMaterial);\n      _this98 = _callSuper(this, MeshSSSNodeMaterial, [parameters]);\n\n      /**\n       * Represents the thickness color.\n       *\n       * @type {Node<vec3>?}\n       * @default null\n       */\n      _this98.thicknessColorNode = null;\n\n      /**\n       * Represents the distortion factor.\n       *\n       * @type {Node<float>?}\n       */\n      _this98.thicknessDistortionNode = float(0.1);\n\n      /**\n       * Represents the thickness ambient factor.\n       *\n       * @type {Node<float>?}\n       */\n      _this98.thicknessAmbientNode = float(0.0);\n\n      /**\n       * Represents the thickness attenuation.\n       *\n       * @type {Node<float>?}\n       */\n      _this98.thicknessAttenuationNode = float(.1);\n\n      /**\n       * Represents the thickness power.\n       *\n       * @type {Node<float>?}\n       */\n      _this98.thicknessPowerNode = float(2.0);\n\n      /**\n       * Represents the thickness scale.\n       *\n       * @type {Node<float>?}\n       */\n      _this98.thicknessScaleNode = float(10.0);\n      return _this98;\n    }\n\n    /**\n     * Whether the lighting model should use SSS or not.\n     *\n     * @type {Boolean}\n     * @default true\n     */\n    (0, _inherits2.default)(MeshSSSNodeMaterial, _MeshPhysicalNodeMate);\n    return (0, _createClass2.default)(MeshSSSNodeMaterial, [{\n      key: \"useSSS\",\n      get: function get() {\n        return this.thicknessColorNode !== null;\n      }\n\n      /**\n       * Setups the lighting model.\n       *\n       * @return {SSSLightingModel} The lighting model.\n       */\n    }, {\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new SSSLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion, this.useSSS);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.thicknessColorNode = source.thicknessColorNode;\n        this.thicknessDistortionNode = source.thicknessDistortionNode;\n        this.thicknessAmbientNode = source.thicknessAmbientNode;\n        this.thicknessAttenuationNode = source.thicknessAttenuationNode;\n        this.thicknessPowerNode = source.thicknessPowerNode;\n        this.thicknessScaleNode = source.thicknessScaleNode;\n        return _superPropGet(MeshSSSNodeMaterial, \"copy\", this, 3)([source]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshSSSNodeMaterial';\n      }\n    }]);\n  }(MeshPhysicalNodeMaterial);\n  var getGradientIrradiance = /*@__PURE__*/Fn(function (_ref112) {\n    var normal = _ref112.normal,\n      lightDirection = _ref112.lightDirection,\n      builder = _ref112.builder;\n    // dotNL will be from -1.0 to 1.0\n    var dotNL = normal.dot(lightDirection);\n    var coord = vec2(dotNL.mul(0.5).add(0.5), 0.0);\n    if (builder.material.gradientMap) {\n      var gradientMap = materialReference('gradientMap', 'texture').context({\n        getUV: function getUV() {\n          return coord;\n        }\n      });\n      return vec3(gradientMap.r);\n    } else {\n      var fw = coord.fwidth().mul(0.5);\n      return mix(vec3(0.7), vec3(1.0), smoothstep(float(0.7).sub(fw.x), float(0.7).add(fw.x), coord.x));\n    }\n  });\n\n  /**\n   * Represents the lighting model for a toon material. Used in {@link MeshToonNodeMaterial}.\n   *\n   * @augments LightingModel\n   */\n  var ToonLightingModel = /*#__PURE__*/function (_LightingModel3) {\n    function ToonLightingModel() {\n      (0, _classCallCheck2.default)(this, ToonLightingModel);\n      return _callSuper(this, ToonLightingModel, arguments);\n    }\n    (0, _inherits2.default)(ToonLightingModel, _LightingModel3);\n    return (0, _createClass2.default)(ToonLightingModel, [{\n      key: \"direct\",\n      value:\n      /**\n       * Implements the direct lighting. Instead of using a conventional smooth irradiance, the irradiance is\n       * reduced to a small number of discrete shades to create a comic-like, flat look.\n       *\n       * @param {Object} input - The input data.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n      function direct(_ref113, stack, builder) {\n        var lightDirection = _ref113.lightDirection,\n          lightColor = _ref113.lightColor,\n          reflectedLight = _ref113.reflectedLight;\n        var irradiance = getGradientIrradiance({\n          normal: normalGeometry,\n          lightDirection: lightDirection,\n          builder: builder\n        }).mul(lightColor);\n        reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n          diffuseColor: diffuseColor.rgb\n        })));\n      }\n\n      /**\n       * Implements the indirect lighting.\n       *\n       * @param {ContextNode} input - The current node context.\n       * @param {StackNode} stack - The current stack.\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"indirect\",\n      value: function indirect(_ref114) {\n        var ambientOcclusion = _ref114.ambientOcclusion,\n          irradiance = _ref114.irradiance,\n          reflectedLight = _ref114.reflectedLight;\n        reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n          diffuseColor: diffuseColor\n        })));\n        reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);\n      }\n    }]);\n  }(LightingModel);\n  var _defaultValues$4 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshToonMaterial)();\n\n  /**\n   * Node material version of `MeshToonMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshToonNodeMaterial = exports.MeshToonNodeMaterial = /*#__PURE__*/function (_NodeMaterial10) {\n    /**\n     * Constructs a new mesh toon node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshToonNodeMaterial(parameters) {\n      var _this99;\n      (0, _classCallCheck2.default)(this, MeshToonNodeMaterial);\n      _this99 = _callSuper(this, MeshToonNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this99.isMeshToonNodeMaterial = true;\n\n      /**\n       * Set to `true` because toon materials react on lights.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this99.lights = true;\n      _this99.setDefaultValues(_defaultValues$4);\n      _this99.setValues(parameters);\n      return _this99;\n    }\n\n    /**\n     * Setups the lighting model.\n     *\n     * @return {ToonLightingModel} The lighting model.\n     */\n    (0, _inherits2.default)(MeshToonNodeMaterial, _NodeMaterial10);\n    return (0, _createClass2.default)(MeshToonNodeMaterial, [{\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new ToonLightingModel();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshToonNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /** @module MatcapUVNode **/\n  /**\n   * Can be used to compute texture coordinates for projecting a\n   * matcap onto a mesh. Used by {@link MeshMatcapNodeMaterial}.\n   *\n   * @augments TempNode\n   */\n  var MatcapUVNode = exports.MatcapUVNode = /*#__PURE__*/function (_TempNode16) {\n    /**\n     * Constructs a new matcap uv node.\n     */\n    function MatcapUVNode() {\n      (0, _classCallCheck2.default)(this, MatcapUVNode);\n      return _callSuper(this, MatcapUVNode, ['vec2']);\n    }\n    (0, _inherits2.default)(MatcapUVNode, _TempNode16);\n    return (0, _createClass2.default)(MatcapUVNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var x = vec3(positionViewDirection.z, 0, positionViewDirection.x.negate()).normalize();\n        var y = positionViewDirection.cross(x);\n        return vec2(x.dot(transformedNormalView), y.dot(transformedNormalView)).mul(0.495).add(0.5); // 0.495 to remove artifacts caused by undersized matcap disks\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MatcapUVNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a matcap uv node.\n   *\n   * @function\n   * @returns {MatcapUVNode}\n   */\n  var matcapUV = /*@__PURE__*/nodeImmutable(MatcapUVNode);\n  var _defaultValues$3 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshMatcapMaterial)();\n\n  /**\n   * Node material version of `MeshMatcapMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var MeshMatcapNodeMaterial = exports.MeshMatcapNodeMaterial = /*#__PURE__*/function (_NodeMaterial11) {\n    /**\n     * Constructs a new mesh normal node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function MeshMatcapNodeMaterial(parameters) {\n      var _this100;\n      (0, _classCallCheck2.default)(this, MeshMatcapNodeMaterial);\n      _this100 = _callSuper(this, MeshMatcapNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this100.isMeshMatcapNodeMaterial = true;\n      _this100.setDefaultValues(_defaultValues$3);\n      _this100.setValues(parameters);\n      return _this100;\n    }\n\n    /**\n     * Setups the matcap specific node variables.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(MeshMatcapNodeMaterial, _NodeMaterial11);\n    return (0, _createClass2.default)(MeshMatcapNodeMaterial, [{\n      key: \"setupVariants\",\n      value: function setupVariants(builder) {\n        var uv = matcapUV;\n        var matcapColor;\n        if (builder.material.matcap) {\n          matcapColor = materialReference('matcap', 'texture').context({\n            getUV: function getUV() {\n              return uv;\n            }\n          });\n        } else {\n          matcapColor = vec3(mix(0.2, 0.8, uv.y)); // default if matcap is missing\n        }\n        diffuseColor.rgb.mulAssign(matcapColor.rgb);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MeshMatcapNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  var _defaultValues$2 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PointsMaterial)();\n\n  /**\n   * Node material version of `PointsMaterial`.\n   *\n   * Since WebGPU can render point primitives only with a size of one pixel,\n   * this material type does not evaluate the `size` and `sizeAttenuation`\n   * property of `PointsMaterial`. Use {@link InstancedPointsNodeMaterial}\n   * instead if you need points with a size larger than one pixel.\n   *\n   * @augments NodeMaterial\n   */\n  var PointsNodeMaterial = exports.PointsNodeMaterial = /*#__PURE__*/function (_NodeMaterial12) {\n    /**\n     * Constructs a new points node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function PointsNodeMaterial(parameters) {\n      var _this101;\n      (0, _classCallCheck2.default)(this, PointsNodeMaterial);\n      _this101 = _callSuper(this, PointsNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this101.isPointsNodeMaterial = true;\n      _this101.setDefaultValues(_defaultValues$2);\n      _this101.setValues(parameters);\n      return _this101;\n    }\n    (0, _inherits2.default)(PointsNodeMaterial, _NodeMaterial12);\n    return (0, _createClass2.default)(PointsNodeMaterial, null, [{\n      key: \"type\",\n      get: function get() {\n        return 'PointsNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /** @module RotateNode **/\n  /**\n   * Applies a rotation to the given position node.\n   *\n   * @augments TempNode\n   */\n  var RotateNode = exports.RotateNode = /*#__PURE__*/function (_TempNode17) {\n    /**\n     * Constructs a new rotate node.\n     *\n     * @param {Node} positionNode - The position node.\n     * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\n     * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n     */\n    function RotateNode(positionNode, rotationNode) {\n      var _this102;\n      (0, _classCallCheck2.default)(this, RotateNode);\n      _this102 = _callSuper(this, RotateNode);\n\n      /**\n       * The position node.\n       *\n       * @type {Node}\n       */\n      _this102.positionNode = positionNode;\n\n      /**\n       *  Represents the rotation that is applied to the position node.\n       *  Depending on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n       *\n       * @type {Node}\n       */\n      _this102.rotationNode = rotationNode;\n      return _this102;\n    }\n\n    /**\n     * The type of the {@link RotateNode#positionNode} defines the node's type.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node's type.\n     */\n    (0, _inherits2.default)(RotateNode, _TempNode17);\n    return (0, _createClass2.default)(RotateNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.positionNode.getNodeType(builder);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var rotationNode = this.rotationNode,\n          positionNode = this.positionNode;\n        var nodeType = this.getNodeType(builder);\n        if (nodeType === 'vec2') {\n          var cosAngle = rotationNode.cos();\n          var sinAngle = rotationNode.sin();\n          var rotationMatrix = mat2(cosAngle, sinAngle, sinAngle.negate(), cosAngle);\n          return rotationMatrix.mul(positionNode);\n        } else {\n          var rotation = rotationNode;\n          var rotationXMatrix = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, cos(rotation.x), sin(rotation.x).negate(), 0.0), vec4(0.0, sin(rotation.x), cos(rotation.x), 0.0), vec4(0.0, 0.0, 0.0, 1.0));\n          var rotationYMatrix = mat4(vec4(cos(rotation.y), 0.0, sin(rotation.y), 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(sin(rotation.y).negate(), 0.0, cos(rotation.y), 0.0), vec4(0.0, 0.0, 0.0, 1.0));\n          var rotationZMatrix = mat4(vec4(cos(rotation.z), sin(rotation.z).negate(), 0.0, 0.0), vec4(sin(rotation.z), cos(rotation.z), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));\n          return rotationXMatrix.mul(rotationYMatrix).mul(rotationZMatrix).mul(vec4(positionNode, 1.0)).xyz;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RotateNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a rotate node.\n   *\n   * @function\n   * @param {Node} positionNode - The position node.\n   * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\n   * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n   * @returns {RotateNode}\n   */\n  var rotate = /*@__PURE__*/nodeProxy(RotateNode);\n  var _defaultValues$1 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SpriteMaterial)();\n\n  /**\n   * Node material version of `SpriteMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var SpriteNodeMaterial = exports.SpriteNodeMaterial = /*#__PURE__*/function (_NodeMaterial13) {\n    /**\n     * Constructs a new sprite node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function SpriteNodeMaterial(parameters) {\n      var _this103;\n      (0, _classCallCheck2.default)(this, SpriteNodeMaterial);\n      _this103 = _callSuper(this, SpriteNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this103.isSpriteNodeMaterial = true;\n      _this103._useSizeAttenuation = true;\n\n      /**\n       * This property makes it possible to define the position of the sprite with a\n       * node. That can be useful when the material is used with instanced rendering\n       * and node data are defined with an instanced attribute node:\n       * ```js\n       * const positionAttribute = new InstancedBufferAttribute( new Float32Array( positions ), 3 );\n       * material.positionNode = instancedBufferAttribute( positionAttribute );\n       * ```\n       * Another possibility is to compute the instanced data with a compute shader:\n       * ```js\n       * const positionBuffer = instancedArray( particleCount, 'vec3' );\n       * particleMaterial.positionNode = positionBuffer.toAttribute();\n       * ```\n       *\n       * @type {Node<vec2>?}\n       * @default null\n       */\n      _this103.positionNode = null;\n\n      /**\n       * The rotation of sprite materials is by default inferred from the `rotation`,\n       * property. This node property allows to overwrite the default and define\n       * the rotation with a node instead.\n       *\n       * If you don't want to overwrite the rotation but modify the existing\n       * value instead, use {@link module:MaterialNode.materialRotation}.\n       *\n       * @type {Node<float>?}\n       * @default null\n       */\n      _this103.rotationNode = null;\n\n      /**\n       * This node property provides an additional way to scale sprites next to\n       * `Object3D.scale`. The scale transformation based in `Object3D.scale`\n       * is multiplied with the scale value of this node in the vertex shader.\n       *\n       * @type {Node<vec2>?}\n       * @default null\n       */\n      _this103.scaleNode = null;\n      _this103.setDefaultValues(_defaultValues$1);\n      _this103.setValues(parameters);\n      return _this103;\n    }\n\n    /**\n     * Setups the position node in view space. This method implements\n     * the sprite specific vertex shader.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {Node<vec3>} The position in view space.\n     */\n    (0, _inherits2.default)(SpriteNodeMaterial, _NodeMaterial13);\n    return (0, _createClass2.default)(SpriteNodeMaterial, [{\n      key: \"setupPositionView\",\n      value: function setupPositionView(builder) {\n        var object = builder.object,\n          camera = builder.camera;\n        var sizeAttenuation = this.sizeAttenuation;\n        var positionNode = this.positionNode,\n          rotationNode = this.rotationNode,\n          scaleNode = this.scaleNode;\n        var mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));\n        var scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());\n        if (scaleNode !== null) {\n          scale = scale.mul(scaleNode);\n        }\n        if (sizeAttenuation === false) {\n          if (camera.isPerspectiveCamera) {\n            scale = scale.mul(mvPosition.z.negate());\n          } else {\n            var orthoScale = float(2.0).div(cameraProjectionMatrix.element(1).element(1));\n            scale = scale.mul(orthoScale.mul(2));\n          }\n        }\n        var alignedPosition = positionGeometry.xy;\n        if (object.center && object.center.isVector2 === true) {\n          var center = reference$1('center', 'vec2', object);\n          alignedPosition = alignedPosition.sub(center.sub(0.5));\n        }\n        alignedPosition = alignedPosition.mul(scale);\n        var rotation = float(rotationNode || materialRotation);\n        var rotatedPosition = rotate(alignedPosition, rotation);\n        return vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.positionNode = source.positionNode;\n        this.rotationNode = source.rotationNode;\n        this.scaleNode = source.scaleNode;\n        return _superPropGet(SpriteNodeMaterial, \"copy\", this, 3)([source]);\n      }\n\n      /**\n       * Whether to use size attenuation or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n    }, {\n      key: \"sizeAttenuation\",\n      get: function get() {\n        return this._useSizeAttenuation;\n      },\n      set: function set(value) {\n        if (this._useSizeAttenuation !== value) {\n          this._useSizeAttenuation = value;\n          this.needsUpdate = true;\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SpriteNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /**\n   * Represents lighting model for a shadow material. Used in {@link ShadowNodeMaterial}.\n   *\n   * @augments LightingModel\n   */\n  var ShadowMaskModel = /*#__PURE__*/function (_LightingModel4) {\n    /**\n     * Constructs a new shadow mask model.\n     */\n    function ShadowMaskModel() {\n      var _this104;\n      (0, _classCallCheck2.default)(this, ShadowMaskModel);\n      _this104 = _callSuper(this, ShadowMaskModel);\n\n      /**\n       * The shadow mask node.\n       *\n       * @type {Node}\n       */\n      _this104.shadowNode = float(1).toVar('shadowMask');\n      return _this104;\n    }\n\n    /**\n     * Only used to save the shadow mask.\n     *\n     * @param {Object} input - The input data.\n     */\n    (0, _inherits2.default)(ShadowMaskModel, _LightingModel4);\n    return (0, _createClass2.default)(ShadowMaskModel, [{\n      key: \"direct\",\n      value: function direct(_ref115) {\n        var shadowMask = _ref115.shadowMask;\n        this.shadowNode.mulAssign(shadowMask);\n      }\n\n      /**\n       * Uses the shadow mask to produce the final color.\n       *\n       * @param {ContextNode} context - The current node context.\n       */\n    }, {\n      key: \"finish\",\n      value: function finish(context) {\n        diffuseColor.a.mulAssign(this.shadowNode.oneMinus());\n        context.outgoingLight.rgb.assign(diffuseColor.rgb); // TODO: Optimize LightsNode to avoid this assignment\n      }\n    }]);\n  }(LightingModel);\n  var _defaultValues = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShadowMaterial)();\n\n  /**\n   * Node material version of `ShadowMaterial`.\n   *\n   * @augments NodeMaterial\n   */\n  var ShadowNodeMaterial = exports.ShadowNodeMaterial = /*#__PURE__*/function (_NodeMaterial14) {\n    /**\n     * Constructs a new shadow node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function ShadowNodeMaterial(parameters) {\n      var _this105;\n      (0, _classCallCheck2.default)(this, ShadowNodeMaterial);\n      _this105 = _callSuper(this, ShadowNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this105.isShadowNodeMaterial = true;\n\n      /**\n       * Set to `true` because so it's possible to implement\n       * the shadow mask effect.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this105.lights = true;\n      _this105.setDefaultValues(_defaultValues);\n      _this105.setValues(parameters);\n      return _this105;\n    }\n\n    /**\n     * Setups the lighting model.\n     *\n     * @return {ShadowMaskModel} The lighting model.\n     */\n    (0, _inherits2.default)(ShadowNodeMaterial, _NodeMaterial14);\n    return (0, _createClass2.default)(ShadowNodeMaterial, [{\n      key: \"setupLightingModel\",\n      value: function setupLightingModel(/*builder*/\n      ) {\n        return new ShadowMaskModel();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ShadowNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /** @module Texture3DNode **/\n  var _normal2 = Fn(function (_ref116) {\n    var texture = _ref116.texture,\n      uv = _ref116.uv;\n    var epsilon = 0.0001;\n    var ret = vec3().toVar();\n    If(uv.x.lessThan(epsilon), function () {\n      ret.assign(vec3(1, 0, 0));\n    }).ElseIf(uv.y.lessThan(epsilon), function () {\n      ret.assign(vec3(0, 1, 0));\n    }).ElseIf(uv.z.lessThan(epsilon), function () {\n      ret.assign(vec3(0, 0, 1));\n    }).ElseIf(uv.x.greaterThan(1 - epsilon), function () {\n      ret.assign(vec3(-1, 0, 0));\n    }).ElseIf(uv.y.greaterThan(1 - epsilon), function () {\n      ret.assign(vec3(0, -1, 0));\n    }).ElseIf(uv.z.greaterThan(1 - epsilon), function () {\n      ret.assign(vec3(0, 0, -1));\n    }).Else(function () {\n      var step = 0.01;\n      var x = texture.sample(uv.add(vec3(-step, 0.0, 0.0))).r.sub(texture.sample(uv.add(vec3(step, 0.0, 0.0))).r);\n      var y = texture.sample(uv.add(vec3(0.0, -step, 0.0))).r.sub(texture.sample(uv.add(vec3(0.0, step, 0.0))).r);\n      var z = texture.sample(uv.add(vec3(0.0, 0.0, -step))).r.sub(texture.sample(uv.add(vec3(0.0, 0.0, step))).r);\n      ret.assign(vec3(x, y, z));\n    });\n    return ret.normalize();\n  });\n\n  /**\n   * This type of uniform node represents a 3D texture.\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var Texture3DNode = exports.Texture3DNode = /*#__PURE__*/function (_TextureNode3) {\n    /**\n     * Constructs a new 3D texture node.\n     *\n     * @param {Data3DTexture} value - The 3D texture.\n     * @param {Node<vec2|vec3>?} [uvNode=null] - The uv node.\n     * @param {Node<int>?} [levelNode=null] - The level node.\n     */\n    function Texture3DNode(value) {\n      var _this106;\n      var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, Texture3DNode);\n      _this106 = _callSuper(this, Texture3DNode, [value, uvNode, levelNode]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this106.isTexture3DNode = true;\n      return _this106;\n    }\n\n    /**\n     * Overwrites the default implementation to return a fixed value `'texture3D'`.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The input type.\n     */\n    (0, _inherits2.default)(Texture3DNode, _TextureNode3);\n    return (0, _createClass2.default)(Texture3DNode, [{\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return 'texture3D';\n      }\n\n      /**\n       * Returns a default uv node which is in context of 3D textures a three-dimensional\n       * uv node.\n       *\n       * @return {Node<vec3>} The default uv node.\n       */\n    }, {\n      key: \"getDefaultUV\",\n      value: function getDefaultUV() {\n        return vec3(0.5, 0.5, 0.5);\n      }\n\n      /**\n       * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\n       * for 3D textures. The uv transformation matrix is not applied to 3D textures.\n       *\n       * @param {Boolean} value - The update toggle.\n       */\n    }, {\n      key: \"setUpdateMatrix\",\n      value: function setUpdateMatrix(/*updateMatrix*/) {} // Ignore .updateMatrix for 3d TextureNode\n\n      /**\n       * Overwrites the default implementation to return the unmodified uv node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node} uvNode - The uv node to setup.\n       * @return {Node} The unmodified uv node.\n       */\n    }, {\n      key: \"setupUV\",\n      value: function setupUV(builder, uvNode) {\n        var texture = this.value;\n        if (builder.isFlipY() && (texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true)) {\n          if (this.sampler) {\n            uvNode = uvNode.flipY();\n          } else {\n            uvNode = uvNode.setY(int(textureSize(this, this.levelNode).y).sub(uvNode.y).sub(1));\n          }\n        }\n        return uvNode;\n      }\n\n      /**\n       * Generates the uv code snippet.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {Node} uvNode - The uv node to generate code for.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generateUV\",\n      value: function generateUV(builder, uvNode) {\n        return uvNode.build(builder, 'vec3');\n      }\n\n      /**\n       * TODO.\n       *\n       * @param {Node<vec3>} uvNode - The uv node .\n       * @return {Node<vec3>} TODO.\n       */\n    }, {\n      key: \"normal\",\n      value: function normal(uvNode) {\n        return _normal2({\n          texture: this,\n          uv: uvNode\n        });\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'Texture3DNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * TSL function for creating a 3D texture node.\n   *\n   * @function\n   * @param {Data3DTexture} value - The 3D texture.\n   * @param {Node<vec2|vec3>?} [uvNode=null] - The uv node.\n   * @param {Node<int>?} [levelNode=null] - The level node.\n   * @returns {Texture3DNode}\n   */\n  var texture3D = /*@__PURE__*/nodeProxy(Texture3DNode);\n\n  /** @module VolumeNodeMaterial **/\n\n  /**\n   * Node material intended for volume rendering. The volumetic data are\n   * defined with an instance of {@link Data3DTexture}.\n   *\n   * @augments NodeMaterial\n   */\n  var VolumeNodeMaterial = exports.VolumeNodeMaterial = /*#__PURE__*/function (_NodeMaterial15) {\n    /**\n     * Constructs a new volume node material.\n     *\n     * @param {Object?} parameters - The configuration parameter.\n     */\n    function VolumeNodeMaterial(parameters) {\n      var _this107;\n      (0, _classCallCheck2.default)(this, VolumeNodeMaterial);\n      _this107 = _callSuper(this, VolumeNodeMaterial);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this107.isVolumeNodeMaterial = true;\n\n      /**\n       * The base color of the volume.\n       *\n       * @type {Color}\n       * @default 100\n       */\n      _this107.base = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)(0xffffff);\n\n      /**\n       * A 3D data texture holding the volumetric data.\n       *\n       * @type {Data3DTexture?}\n       * @default null\n       */\n      _this107.map = null;\n\n      /**\n       * This number of samples for each ray that hits the mesh's surface\n       * and travels through the volume.\n       *\n       * @type {Number}\n       * @default 100\n       */\n      _this107.steps = 100;\n\n      /**\n       * Callback for {@link VolumeNodeMaterial#testNode}.\n       *\n       * @callback testNodeCallback\n       * @param {Data3DTexture<float>} map - The 3D texture.\n       * @param {Node<float>} mapValue - The sampled value inside the volume.\n       * @param {Node<vec3>} probe - The probe which is the entry point of the ray on the mesh's surface.\n       * @param {Node<vec4>} finalColor - The final color.\n       */\n\n      /**\n       * The volume rendering of this material works by shooting rays\n       * from the camera position through each fragment of the mesh's\n       * surface and sample the inner volume in a raymarching fashion\n       * mutiple times.\n       *\n       * This node can be used to assign a callback function of type `Fn`\n       * that will be exexuted per sample. The callback receives the\n       * texture, the sampled texture value as well as position on the surface\n       * where the rays enters the volume. The last parameter is a color\n       * that allows the callback to determine the final color.\n       *\n       * @type {testNodeCallback?}\n       * @default null\n       */\n      _this107.testNode = null;\n      _this107.setValues(parameters);\n      return _this107;\n    }\n\n    /**\n     * Setups the vertex and fragment stage of this node material.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     */\n    (0, _inherits2.default)(VolumeNodeMaterial, _NodeMaterial15);\n    return (0, _createClass2.default)(VolumeNodeMaterial, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this108 = this;\n        var map = texture3D(this.map, null, 0);\n        var hitBox = Fn(function (_ref117) {\n          var orig = _ref117.orig,\n            dir = _ref117.dir;\n          var box_min = vec3(-0.5);\n          var box_max = vec3(0.5);\n          var inv_dir = dir.reciprocal();\n          var tmin_tmp = box_min.sub(orig).mul(inv_dir);\n          var tmax_tmp = box_max.sub(orig).mul(inv_dir);\n          var tmin = min$1(tmin_tmp, tmax_tmp);\n          var tmax = max$1(tmin_tmp, tmax_tmp);\n          var t0 = max$1(tmin.x, max$1(tmin.y, tmin.z));\n          var t1 = min$1(tmax.x, min$1(tmax.y, tmax.z));\n          return vec2(t0, t1);\n        });\n        this.fragmentNode = Fn(function () {\n          var vOrigin = varying(vec3(modelWorldMatrixInverse.mul(vec4(cameraPosition, 1.0))));\n          var vDirection = varying(positionGeometry.sub(vOrigin));\n          var rayDir = vDirection.normalize();\n          var bounds = vec2(hitBox({\n            orig: vOrigin,\n            dir: rayDir\n          })).toVar();\n          bounds.x.greaterThan(bounds.y).discard();\n          bounds.assign(vec2(max$1(bounds.x, 0.0), bounds.y));\n          var p = vec3(vOrigin.add(bounds.x.mul(rayDir))).toVar();\n          var inc = vec3(rayDir.abs().reciprocal()).toVar();\n          var delta = float(min$1(inc.x, min$1(inc.y, inc.z))).toVar('delta'); // used 'delta' name in loop\n\n          delta.divAssign(materialReference('steps', 'float'));\n          var ac = vec4(materialReference('base', 'color'), 0.0).toVar();\n          Loop({\n            type: 'float',\n            start: bounds.x,\n            end: bounds.y,\n            update: '+= delta'\n          }, function () {\n            var d = property('float', 'd').assign(map.sample(p.add(0.5)).r);\n            if (_this108.testNode !== null) {\n              _this108.testNode({\n                map: map,\n                mapValue: d,\n                probe: p,\n                finalColor: ac\n              }).append();\n            } else {\n              // default to show surface of mesh\n              ac.a.assign(1);\n              Break();\n            }\n            p.addAssign(rayDir.mul(delta));\n          });\n          ac.a.equal(0).discard();\n          return vec4(ac);\n        })();\n        _superPropGet(VolumeNodeMaterial, \"setup\", this, 3)([builder]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'VolumeNodeMaterial';\n      }\n    }]);\n  }(NodeMaterial);\n  /**\n   * This module manages the internal animation loop of the renderer.\n   *\n   * @private\n   */\n  var Animation = /*#__PURE__*/function () {\n    /**\n     * Constructs a new animation loop management component.\n     *\n     * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n     * @param {Info} info - Renderer component for managing metrics and monitoring data.\n     */\n    function Animation(nodes, info) {\n      (0, _classCallCheck2.default)(this, Animation);\n      /**\n       * Renderer component for managing nodes related logic.\n       *\n       * @type {Nodes}\n       */\n      this.nodes = nodes;\n\n      /**\n       * Renderer component for managing metrics and monitoring data.\n       *\n       * @type {Info}\n       */\n      this.info = info;\n\n      /**\n       * A reference to the context from `requestAnimationFrame()` can\n       * be called (usually `window`).\n       *\n       * @type {Window|XRSession}\n       */\n      this._context = self;\n\n      /**\n       * The user-defined animation loop.\n       *\n       * @type {Function?}\n       * @default null\n       */\n      this._animationLoop = null;\n\n      /**\n       * The requestId whic is returned from the `requestAnimationFrame()` call.\n       * Can be used to cancel the stop the animation loop.\n       *\n       * @type {Number?}\n       * @default null\n       */\n      this._requestId = null;\n    }\n\n    /**\n     * Starts the internal animation loop.\n     */\n    return (0, _createClass2.default)(Animation, [{\n      key: \"start\",\n      value: function start() {\n        var _this109 = this;\n        var _update = function update(time, frame) {\n          _this109._requestId = _this109._context.requestAnimationFrame(_update);\n          if (_this109.info.autoReset === true) _this109.info.reset();\n          _this109.nodes.nodeFrame.update();\n          _this109.info.frame = _this109.nodes.nodeFrame.frameId;\n          if (_this109._animationLoop !== null) _this109._animationLoop(time, frame);\n        };\n        _update();\n      }\n\n      /**\n       * Stops the internal animation loop.\n       */\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this._context.cancelAnimationFrame(this._requestId);\n        this._requestId = null;\n      }\n\n      /**\n       * Defines the user-level animation loop.\n       *\n       * @param {Function} callback - The animation loop.\n       */\n    }, {\n      key: \"setAnimationLoop\",\n      value: function setAnimationLoop(callback) {\n        this._animationLoop = callback;\n      }\n\n      /**\n       * Defines the context in which `requestAnimationFrame()` is executed.\n       *\n       * @param {Window|XRSession} context - The context to set.\n       */\n    }, {\n      key: \"setContext\",\n      value: function setContext(context) {\n        this._context = context;\n      }\n\n      /**\n       * Frees all internal resources and stops the animation loop.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.stop();\n      }\n    }]);\n  }();\n  /**\n   * Data structure for the renderer. It allows defining values\n   * with chained, hierarchical keys. Keys are meant to be\n   * objects since the module internally works with Weak Maps\n   * for perforamnce reasons.\n   *\n   * @private\n   */\n  var ChainMap = /*#__PURE__*/function () {\n    /**\n     * Constructs a new chained map.\n     */\n    function ChainMap() {\n      (0, _classCallCheck2.default)(this, ChainMap);\n      /**\n       * The root Weak Map.\n       *\n       * @type {WeakMap}\n       */\n      this.weakMap = new WeakMap();\n    }\n\n    /**\n     * Returns the value for the given array of keys.\n     *\n     * @param {Array<Object>} keys - List of keys.\n     * @return {Any} The value. Returns `undefined` if no value was found.\n     */\n    return (0, _createClass2.default)(ChainMap, [{\n      key: \"get\",\n      value: function get(keys) {\n        var map = this.weakMap;\n        for (var i = 0; i < keys.length; i++) {\n          map = map.get(keys[i]);\n          if (map === undefined) return undefined;\n        }\n        return map.get(keys[keys.length - 1]);\n      }\n\n      /**\n       * Sets the value for the given keys.\n       *\n       * @param {Array<Object>} keys - List of keys.\n       * @param {Any} value - The value to set.\n       * @return {ChainMap} A reference to this chain map.\n       */\n    }, {\n      key: \"set\",\n      value: function set(keys, value) {\n        var map = this.weakMap;\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          if (map.has(key) === false) map.set(key, new WeakMap());\n          map = map.get(key);\n        }\n        map.set(keys[keys.length - 1], value);\n        return this;\n      }\n\n      /**\n       * Deletes a value for the given keys.\n       *\n       * @param {Array<Object>} keys - The keys.\n       * @return {Boolean} Returns `true` if the value has been removed successfully and `false` if the value has not be found.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete(keys) {\n        var map = this.weakMap;\n        for (var i = 0; i < keys.length; i++) {\n          map = map.get(keys[i]);\n          if (map === undefined) return false;\n        }\n        return map.delete(keys[keys.length - 1]);\n      }\n    }]);\n  }();\n  var _id$9 = 0;\n  function getKeys(obj) {\n    var keys = Object.keys(obj);\n    var proto = Object.getPrototypeOf(obj);\n    while (proto) {\n      var descriptors = Object.getOwnPropertyDescriptors(proto);\n      for (var key in descriptors) {\n        if (descriptors[key] !== undefined) {\n          var descriptor = descriptors[key];\n          if (descriptor && typeof descriptor.get === 'function') {\n            keys.push(key);\n          }\n        }\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n    return keys;\n  }\n\n  /**\n   * A render object is the renderer's representation of single entity that gets drawn\n   * with a draw command. There is no unique mapping of render objects to 3D objects in the\n   * scene since render objects also depend from the used material, the current render context\n   * and the current scene's lighting.\n   *\n   * In general, the basic process of the renderer is:\n   *\n   * - Analyze the 3D objects in the scene and generate render lists containing render items.\n   * - Process the render lists by calling one or more render commands for each render item.\n   * - For each render command, request a render object and perform the draw.\n   *\n   * The module provides an interface to get data required for the draw command like the actual\n   * draw parameters or vertex buffers. It also holds a series of caching related methods since\n   * creating render objects should only be done when necessary.\n   *\n   * @private\n   */\n  var RenderObject = /*#__PURE__*/function () {\n    /**\n     * Constructs a new render object.\n     *\n     * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n     * @param {Geometries} geometries - Renderer component for managing geometries.\n     * @param {Renderer} renderer - The renderer.\n     * @param {Object3D} object - The 3D object.\n     * @param {Material} material - The 3D object's material.\n     * @param {Scene} scene - The scene the 3D object belongs to.\n     * @param {Camera} camera - The camera the object should be rendered with.\n     * @param {LightsNode} lightsNode - The lights node.\n     * @param {RenderContext} renderContext - The render context.\n     * @param {ClippingContext} clippingContext - The clipping context.\n     */\n    function RenderObject(nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext) {\n      var _this110 = this;\n      (0, _classCallCheck2.default)(this, RenderObject);\n      this.id = _id$9++;\n\n      /**\n       * Renderer component for managing nodes related logic.\n       *\n       * @type {Nodes}\n       * @private\n       */\n      this._nodes = nodes;\n\n      /**\n       * Renderer component for managing geometries.\n       *\n       * @type {Geometries}\n       * @private\n       */\n      this._geometries = geometries;\n\n      /**\n       * The renderer.\n       *\n       * @type {Renderer}\n       */\n      this.renderer = renderer;\n\n      /**\n       * The 3D object.\n       *\n       * @type {Object3D}\n       */\n      this.object = object;\n\n      /**\n       * The 3D object's material.\n       *\n       * @type {Material}\n       */\n      this.material = material;\n\n      /**\n       * The scene the 3D object belongs to.\n       *\n       * @type {Scene}\n       */\n      this.scene = scene;\n\n      /**\n       * The camera the 3D object should be rendered with.\n       *\n       * @type {Camera}\n       */\n      this.camera = camera;\n\n      /**\n       * The lights node.\n       *\n       * @type {LightsNode}\n       */\n      this.lightsNode = lightsNode;\n\n      /**\n       * The render context.\n       *\n       * @type {RenderContext}\n       */\n      this.context = renderContext;\n\n      /**\n       * The 3D object's geometry.\n       *\n       * @type {BufferGeometry}\n       */\n      this.geometry = object.geometry;\n\n      /**\n       * The render object's version.\n       *\n       * @type {Number}\n       */\n      this.version = material.version;\n\n      /**\n       * The draw range of the geometry.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      this.drawRange = null;\n\n      /**\n       * An array holding the buffer attributes\n       * of the render object. This entails attribute\n       * definitions on geometry and node level.\n       *\n       * @type {Array<BufferAttribute>?}\n       * @default null\n       */\n      this.attributes = null;\n\n      /**\n       * A reference to a render pipeline the render\n       * object is processed with.\n       *\n       * @type {RenderPipeline}\n       * @default null\n       */\n      this.pipeline = null;\n\n      /**\n       * An array holding the vertex buffers which can\n       * be buffer attributes but also interleaved buffers.\n       *\n       * @type {Array<BufferAttribute|InterleavedBuffer>?}\n       * @default null\n       */\n      this.vertexBuffers = null;\n\n      /**\n       * The parameters for the draw command.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      this.drawParams = null;\n\n      /**\n       * If this render object is used inside a render bundle,\n       * this property points to the respective bundle group.\n       *\n       * @type {BundleGroup?}\n       * @default null\n       */\n      this.bundle = null;\n\n      /**\n       * The clipping context.\n       *\n       * @type {ClippingContext}\n       */\n      this.clippingContext = clippingContext;\n\n      /**\n       * The clipping context's cache key.\n       *\n       * @type {String}\n       */\n      this.clippingContextCacheKey = clippingContext !== null ? clippingContext.cacheKey : '';\n\n      /**\n       * The initial node cache key.\n       *\n       * @type {Number}\n       */\n      this.initialNodesCacheKey = this.getDynamicCacheKey();\n\n      /**\n       * The initial cache key.\n       *\n       * @type {Number}\n       */\n      this.initialCacheKey = this.getCacheKey();\n\n      /**\n       * The node builder state.\n       *\n       * @type {NodeBuilderState?}\n       * @private\n       * @default null\n       */\n      this._nodeBuilderState = null;\n\n      /**\n       * An array of bindings.\n       *\n       * @type {Array<BindGroup>?}\n       * @private\n       * @default null\n       */\n      this._bindings = null;\n\n      /**\n       * Reference to the node material observer.\n       *\n       * @type {NodeMaterialObserver?}\n       * @private\n       * @default null\n       */\n      this._monitor = null;\n\n      /**\n       * An event listener which is defined by `RenderObjects`. It performs\n       * clean up tasks when `dispose()` on this render object.\n       *\n       * @method\n       */\n      this.onDispose = null;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      this.isRenderObject = true;\n\n      /**\n       * An event listener which is executed when `dispose()` is called on\n       * the render object's material.\n       *\n       * @method\n       */\n      this.onMaterialDispose = function () {\n        _this110.dispose();\n      };\n      this.material.addEventListener('dispose', this.onMaterialDispose);\n    }\n\n    /**\n     * Updates the clipping context.\n     *\n     * @param {ClippingContext} context - The clipping context to set.\n     */\n    return (0, _createClass2.default)(RenderObject, [{\n      key: \"updateClipping\",\n      value: function updateClipping(context) {\n        this.clippingContext = context;\n      }\n\n      /**\n       * Whether the clipping requires an update or not.\n       *\n       * @type {Boolean}\n       * @readonly\n       */\n    }, {\n      key: \"clippingNeedsUpdate\",\n      get: function get() {\n        if (this.clippingContext === null || this.clippingContext.cacheKey === this.clippingContextCacheKey) return false;\n        this.clippingContextCacheKey = this.clippingContext.cacheKey;\n        return true;\n      }\n\n      /**\n       * The number of clipping planes defined in context of hardware clipping.\n       *\n       * @type {Number}\n       * @readonly\n       */\n    }, {\n      key: \"hardwareClippingPlanes\",\n      get: function get() {\n        return this.material.hardwareClipping === true ? this.clippingContext.unionClippingCount : 0;\n      }\n\n      /**\n       * Returns the node builder state of this render object.\n       *\n       * @return {NodeBuilderState} The node buider state.\n       */\n    }, {\n      key: \"getNodeBuilderState\",\n      value: function getNodeBuilderState() {\n        return this._nodeBuilderState || (this._nodeBuilderState = this._nodes.getForRender(this));\n      }\n\n      /**\n       * Returns the node material observer of this render object.\n       *\n       * @return {NodeMaterialObserver} The node material observer.\n       */\n    }, {\n      key: \"getMonitor\",\n      value: function getMonitor() {\n        return this._monitor || (this._monitor = this.getNodeBuilderState().monitor);\n      }\n\n      /**\n       * Returns an array of bind groups of this render object.\n       *\n       * @return {Array<BindGroup>} The bindings.\n       */\n    }, {\n      key: \"getBindings\",\n      value: function getBindings() {\n        return this._bindings || (this._bindings = this.getNodeBuilderState().createBindings());\n      }\n\n      /**\n       * Returns the index of the render object's geometry.\n       *\n       * @return {BufferAttribute?} The index. Returns `null` for non-indexed geometries.\n       */\n    }, {\n      key: \"getIndex\",\n      value: function getIndex() {\n        return this._geometries.getIndex(this);\n      }\n\n      /**\n       * Returns the indirect buffer attribute.\n       *\n       * @return {BufferAttribute?} The indirect attribute. `null` if no indirect drawing is used.\n       */\n    }, {\n      key: \"getIndirect\",\n      value: function getIndirect() {\n        return this._geometries.getIndirect(this);\n      }\n\n      /**\n       * Returns an array that acts as a key for identifying the render object in a chain map.\n       *\n       * @return {Array<Object>} An array with object references.\n       */\n    }, {\n      key: \"getChainArray\",\n      value: function getChainArray() {\n        return [this.object, this.material, this.context, this.lightsNode];\n      }\n\n      /**\n       * This method is used when the geometry of a 3D object has been exchanged and the\n       * respective render object now requires an update.\n       *\n       * @param {BufferGeometry} geometry - The geometry to set.\n       */\n    }, {\n      key: \"setGeometry\",\n      value: function setGeometry(geometry) {\n        this.geometry = geometry;\n        this.attributes = null;\n      }\n\n      /**\n       * Returns the buffer attributes of the render object. The returned array holds\n       * attribute definitions on geometry and node level.\n       *\n       * @return {Array<BufferAttribute>} An array with buffer attributes.\n       */\n    }, {\n      key: \"getAttributes\",\n      value: function getAttributes() {\n        if (this.attributes !== null) return this.attributes;\n        var nodeAttributes = this.getNodeBuilderState().nodeAttributes;\n        var geometry = this.geometry;\n        var attributes = [];\n        var vertexBuffers = new Set();\n        for (var nodeAttribute of nodeAttributes) {\n          var _attribute5 = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute(nodeAttribute.name);\n          if (_attribute5 === undefined) continue;\n          attributes.push(_attribute5);\n          var _bufferAttribute = _attribute5.isInterleavedBufferAttribute ? _attribute5.data : _attribute5;\n          vertexBuffers.add(_bufferAttribute);\n        }\n        this.attributes = attributes;\n        this.vertexBuffers = Array.from(vertexBuffers.values());\n        return attributes;\n      }\n\n      /**\n       * Returns the vertex buffers of the render object.\n       *\n       * @return {Array<BufferAttribute|InterleavedBuffer>} An array with buffer attribute or interleaved buffers.\n       */\n    }, {\n      key: \"getVertexBuffers\",\n      value: function getVertexBuffers() {\n        if (this.vertexBuffers === null) this.getAttributes();\n        return this.vertexBuffers;\n      }\n\n      /**\n       * Returns the draw parameters for the render object.\n       *\n       * @return {{vertexCount: Number, firstVertex: Number, instanceCount: Number, firstInstance: Number}} The draw parameters.\n       */\n    }, {\n      key: \"getDrawParameters\",\n      value: function getDrawParameters() {\n        var object = this.object,\n          material = this.material,\n          geometry = this.geometry,\n          group = this.group,\n          drawRange = this.drawRange;\n        var drawParams = this.drawParams || (this.drawParams = {\n          vertexCount: 0,\n          firstVertex: 0,\n          instanceCount: 0,\n          firstInstance: 0\n        });\n        var index = this.getIndex();\n        var hasIndex = index !== null;\n        var instanceCount = geometry.isInstancedBufferGeometry ? geometry.instanceCount : object.count > 1 ? object.count : 1;\n        if (instanceCount === 0) return null;\n        drawParams.instanceCount = instanceCount;\n        if (object.isBatchedMesh === true) return drawParams;\n        var rangeFactor = 1;\n        if (material.wireframe === true && !object.isPoints && !object.isLineSegments && !object.isLine && !object.isLineLoop) {\n          rangeFactor = 2;\n        }\n        var firstVertex = drawRange.start * rangeFactor;\n        var lastVertex = (drawRange.start + drawRange.count) * rangeFactor;\n        if (group !== null) {\n          firstVertex = Math.max(firstVertex, group.start * rangeFactor);\n          lastVertex = Math.min(lastVertex, (group.start + group.count) * rangeFactor);\n        }\n        var position = geometry.attributes.position;\n        var itemCount = Infinity;\n        if (hasIndex) {\n          itemCount = index.count;\n        } else if (position !== undefined && position !== null) {\n          itemCount = position.count;\n        }\n        firstVertex = Math.max(firstVertex, 0);\n        lastVertex = Math.min(lastVertex, itemCount);\n        var count = lastVertex - firstVertex;\n        if (count < 0 || count === Infinity) return null;\n        drawParams.vertexCount = count;\n        drawParams.firstVertex = firstVertex;\n        return drawParams;\n      }\n\n      /**\n       * Returns the render object's geometry cache key.\n       *\n       * The geometry cache key is part of the material cache key.\n       *\n       * @return {String} The geometry cache key.\n       */\n    }, {\n      key: \"getGeometryCacheKey\",\n      value: function getGeometryCacheKey() {\n        var geometry = this.geometry;\n        var cacheKey = '';\n        for (var name of Object.keys(geometry.attributes).sort()) {\n          var _attribute6 = geometry.attributes[name];\n          cacheKey += name + ',';\n          if (_attribute6.data) cacheKey += _attribute6.data.stride + ',';\n          if (_attribute6.offset) cacheKey += _attribute6.offset + ',';\n          if (_attribute6.itemSize) cacheKey += _attribute6.itemSize + ',';\n          if (_attribute6.normalized) cacheKey += 'n,';\n        }\n        if (geometry.index) {\n          cacheKey += 'index,';\n        }\n        return cacheKey;\n      }\n\n      /**\n       * Returns the render object's material cache key.\n       *\n       * The material cache key is part of the render object cache key.\n       *\n       * @return {String} The material cache key.\n       */\n    }, {\n      key: \"getMaterialCacheKey\",\n      value: function getMaterialCacheKey() {\n        var object = this.object,\n          material = this.material;\n        var cacheKey = material.customProgramCacheKey();\n        for (var _property10 of getKeys(material)) {\n          if (/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(_property10)) continue;\n          var value = material[_property10];\n          var valueKey = void 0;\n          if (value !== null) {\n            // some material values require a formatting\n\n            var type = typeof value;\n            if (type === 'number') {\n              valueKey = value !== 0 ? '1' : '0'; // Convert to on/off, important for clearcoat, transmission, etc\n            } else if (type === 'object') {\n              valueKey = '{';\n              if (value.isTexture) {\n                valueKey += value.mapping;\n              }\n              valueKey += '}';\n            } else {\n              valueKey = String(value);\n            }\n          } else {\n            valueKey = String(value);\n          }\n          cacheKey += /*property + ':' +*/valueKey + ',';\n        }\n        cacheKey += this.clippingContextCacheKey + ',';\n        if (object.geometry) {\n          cacheKey += this.getGeometryCacheKey();\n        }\n        if (object.skeleton) {\n          cacheKey += object.skeleton.bones.length + ',';\n        }\n        if (object.morphTargetInfluences) {\n          cacheKey += object.morphTargetInfluences.length + ',';\n        }\n        if (object.isBatchedMesh) {\n          cacheKey += object._matricesTexture.uuid + ',';\n          if (object._colorsTexture !== null) {\n            cacheKey += object._colorsTexture.uuid + ',';\n          }\n        }\n        if (object.count > 1) {\n          // TODO: https://github.com/mrdoob/three.js/pull/29066#issuecomment-2269400850\n\n          cacheKey += object.uuid + ',';\n        }\n        cacheKey += object.receiveShadow + ',';\n        return hashString(cacheKey);\n      }\n\n      /**\n       * Whether the geometry requires an update or not.\n       *\n       * @type {Boolean}\n       * @readonly\n       */\n    }, {\n      key: \"needsGeometryUpdate\",\n      get: function get() {\n        return this.geometry.id !== this.object.geometry.id;\n      }\n\n      /**\n       * Whether the render object requires an update or not.\n       *\n       * Note: There are two distinct places where render objects are checked for an update.\n       *\n       * 1. In `RenderObjects.get()` which is executed when the render object is request. This\n       * method checks the `needsUpdate` flag and recreates the render object if necessary.\n       * 2. In `Renderer._renderObjectDirect()` right after getting the render object via\n       * `RenderObjects.get()`. The render object's NodeMaterialObserver is then used to detect\n       * a need for a refresh due to material, geometry or object related value changes.\n       *\n       * TODO: Investigate if it's possible to merge boths steps so there is only a single place\n       * that performs the 'needsUpdate' check.\n       *\n       * @type {Boolean}\n       * @readonly\n       */\n    }, {\n      key: \"needsUpdate\",\n      get: function get() {\n        return /*this.object.static !== true &&*/this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate;\n      }\n\n      /**\n       * Returns the dynamic cache key which represents a key that is computed per draw command.\n       *\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"getDynamicCacheKey\",\n      value: function getDynamicCacheKey() {\n        // Environment Nodes Cache Key\n\n        var cacheKey = this._nodes.getCacheKey(this.scene, this.lightsNode);\n        if (this.object.receiveShadow) {\n          cacheKey += 1;\n        }\n        return cacheKey;\n      }\n\n      /**\n       * Returns the render object's cache key.\n       *\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"getCacheKey\",\n      value: function getCacheKey() {\n        return this.getMaterialCacheKey() + this.getDynamicCacheKey();\n      }\n\n      /**\n       * Frees internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.material.removeEventListener('dispose', this.onMaterialDispose);\n        this.onDispose();\n      }\n    }]);\n  }();\n  var _chainArray = [];\n\n  /**\n   * This module manages the render objects of the renderer.\n   *\n   * @private\n   */\n  var RenderObjects = /*#__PURE__*/function () {\n    /**\n     * Constructs a new render object management component.\n     *\n     * @param {Renderer} renderer - The renderer.\n     * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n     * @param {Geometries} geometries - Renderer component for managing geometries.\n     * @param {Pipelines} pipelines - Renderer component for managing pipelines.\n     * @param {Bindings} bindings - Renderer component for managing bindings.\n     * @param {Info} info - Renderer component for managing metrics and monitoring data.\n     */\n    function RenderObjects(renderer, nodes, geometries, pipelines, bindings, info) {\n      (0, _classCallCheck2.default)(this, RenderObjects);\n      /**\n       * The renderer.\n       *\n       * @type {Renderer}\n       */\n      this.renderer = renderer;\n\n      /**\n       * Renderer component for managing nodes related logic.\n       *\n       * @type {Nodes}\n       */\n      this.nodes = nodes;\n\n      /**\n       * Renderer component for managing geometries.\n       *\n       * @type {Geometries}\n       */\n      this.geometries = geometries;\n\n      /**\n       * Renderer component for managing pipelines.\n       *\n       * @type {Pipelines}\n       */\n      this.pipelines = pipelines;\n\n      /**\n       * Renderer component for managing bindings.\n       *\n       * @type {Bindings}\n       */\n      this.bindings = bindings;\n\n      /**\n       * Renderer component for managing metrics and monitoring data.\n       *\n       * @type {Info}\n       */\n      this.info = info;\n\n      /**\n       * A dictionary that manages render contexts in chain maps\n       * for each pass ID.\n       *\n       * @type {Object<String,ChainMap>}\n       */\n      this.chainMaps = {};\n    }\n\n    /**\n     * Returns a render object for the given object and state data.\n     *\n     * @param {Object3D} object - The 3D object.\n     * @param {Material} material - The 3D object's material.\n     * @param {Scene} scene - The scene the 3D object belongs to.\n     * @param {Camera} camera - The camera the 3D object should be rendered with.\n     * @param {LightsNode} lightsNode - The lights node.\n     * @param {RenderContext} renderContext - The render context.\n     * @param {ClippingContext} clippingContext - The clipping context.\n     * @param {String?} passId - An optional ID for identifying the pass.\n     * @return {RenderObject} The render object.\n     */\n    return (0, _createClass2.default)(RenderObjects, [{\n      key: \"get\",\n      value: function get(object, material, scene, camera, lightsNode, renderContext, clippingContext, passId) {\n        var chainMap = this.getChainMap(passId);\n\n        // reuse chainArray\n        _chainArray[0] = object;\n        _chainArray[1] = material;\n        _chainArray[2] = renderContext;\n        _chainArray[3] = lightsNode;\n        var renderObject = chainMap.get(_chainArray);\n        if (renderObject === undefined) {\n          renderObject = this.createRenderObject(this.nodes, this.geometries, this.renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext, passId);\n          chainMap.set(_chainArray, renderObject);\n        } else {\n          renderObject.updateClipping(clippingContext);\n          if (renderObject.needsGeometryUpdate) {\n            renderObject.setGeometry(object.geometry);\n          }\n          if (renderObject.version !== material.version || renderObject.needsUpdate) {\n            if (renderObject.initialCacheKey !== renderObject.getCacheKey()) {\n              renderObject.dispose();\n              renderObject = this.get(object, material, scene, camera, lightsNode, renderContext, clippingContext, passId);\n            } else {\n              renderObject.version = material.version;\n            }\n          }\n        }\n        return renderObject;\n      }\n\n      /**\n       * Returns a chain map for the given pass ID.\n       *\n       * @param {String} [passId='default'] - The pass ID.\n       * @return {ChainMap} The chain map.\n       */\n    }, {\n      key: \"getChainMap\",\n      value: function getChainMap() {\n        var passId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n        return this.chainMaps[passId] || (this.chainMaps[passId] = new ChainMap());\n      }\n\n      /**\n       * Frees internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.chainMaps = {};\n      }\n\n      /**\n       * Factory method for creating render objects with the given list of parameters.\n       *\n       * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n       * @param {Geometries} geometries - Renderer component for managing geometries.\n       * @param {Renderer} renderer - The renderer.\n       * @param {Object3D} object - The 3D object.\n       * @param {Material} material - The object's material.\n       * @param {Scene} scene - The scene the 3D object belongs to.\n       * @param {Camera} camera - The camera the object should be rendered with.\n       * @param {LightsNode} lightsNode - The lights node.\n       * @param {RenderContext} renderContext - The render context.\n       * @param {ClippingContext} clippingContext - The clipping context.\n       * @param {String?} passId - An optional ID for identifying the pass.\n       * @return {RenderObject} The render object.\n       */\n    }, {\n      key: \"createRenderObject\",\n      value: function createRenderObject(nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext, passId) {\n        var _this111 = this;\n        var chainMap = this.getChainMap(passId);\n        var renderObject = new RenderObject(nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext);\n        renderObject.onDispose = function () {\n          _this111.pipelines.delete(renderObject);\n          _this111.bindings.delete(renderObject);\n          _this111.nodes.delete(renderObject);\n          chainMap.delete(renderObject.getChainArray());\n        };\n        return renderObject;\n      }\n    }]);\n  }();\n  /**\n   * Data structure for the renderer. It is intended to manage\n   * data of objects in dictionaries.\n   *\n   * @private\n   */\n  var DataMap = /*#__PURE__*/function () {\n    /**\n     * Constructs a new data map.\n     */\n    function DataMap() {\n      (0, _classCallCheck2.default)(this, DataMap);\n      /**\n       * `DataMap` internally uses a weak map\n       * to manage its data.\n       *\n       * @type {WeakMap}\n       */\n      this.data = new WeakMap();\n    }\n\n    /**\n     * Returns the dictionary for the given object.\n     *\n     * @param {Object} object - The object.\n     * @return {Object} The dictionary.\n     */\n    return (0, _createClass2.default)(DataMap, [{\n      key: \"get\",\n      value: function get(object) {\n        var map = this.data.get(object);\n        if (map === undefined) {\n          map = {};\n          this.data.set(object, map);\n        }\n        return map;\n      }\n\n      /**\n       * Deletes the dictionary for the given object.\n       *\n       * @param {Object} object - The object.\n       * @return {Object?} The deleted dictionary.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete(object) {\n        var map = null;\n        if (this.data.has(object)) {\n          map = this.data.get(object);\n          this.data.delete(object);\n        }\n        return map;\n      }\n\n      /**\n       * Returns `true` if the given object has a dictionary defined.\n       *\n       * @param {Object} object - The object to test.\n       * @return {Boolean} Whether a dictionary is defined or not.\n       */\n    }, {\n      key: \"has\",\n      value: function has(object) {\n        return this.data.has(object);\n      }\n\n      /**\n       * Frees internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.data = new WeakMap();\n      }\n    }]);\n  }();\n  var AttributeType = {\n    VERTEX: 1,\n    INDEX: 2,\n    STORAGE: 3,\n    INDIRECT: 4\n  };\n\n  // size of a chunk in bytes (STD140 layout)\n\n  var GPU_CHUNK_BYTES = 16;\n\n  // @TODO: Move to src/constants.js\n\n  var BlendColorFactor = 211;\n  var OneMinusBlendColorFactor = 212;\n\n  /**\n   * This renderer module manages geometry attributes.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Attributes = /*#__PURE__*/function (_DataMap) {\n    /**\n     * Constructs a new attribute management component.\n     *\n     * @param {Backend} backend - The renderer's backend.\n     */\n    function Attributes(backend) {\n      var _this112;\n      (0, _classCallCheck2.default)(this, Attributes);\n      _this112 = _callSuper(this, Attributes);\n\n      /**\n       * The renderer's backend.\n       *\n       * @type {Backend}\n       */\n      _this112.backend = backend;\n      return _this112;\n    }\n\n    /**\n     * Deletes the data for the given attribute.\n     *\n     * @param {BufferAttribute} attribute - The attribute.\n     * @return {Object} The deleted attribute data.\n     */\n    (0, _inherits2.default)(Attributes, _DataMap);\n    return (0, _createClass2.default)(Attributes, [{\n      key: \"delete\",\n      value: function _delete(attribute) {\n        var attributeData = _superPropGet(Attributes, \"delete\", this, 3)([attribute]);\n        if (attributeData !== undefined) {\n          this.backend.destroyAttribute(attribute);\n        }\n        return attributeData;\n      }\n\n      /**\n       * Updates the given attribute. This method creates attribute buffers\n       * for new attributes and updates data for existing ones.\n       *\n       * @param {BufferAttribute} attribute - The attribute to update.\n       * @param {Number} type - The attribute type.\n       */\n    }, {\n      key: \"update\",\n      value: function update(attribute, type) {\n        var data = this.get(attribute);\n        if (data.version === undefined) {\n          if (type === AttributeType.VERTEX) {\n            this.backend.createAttribute(attribute);\n          } else if (type === AttributeType.INDEX) {\n            this.backend.createIndexAttribute(attribute);\n          } else if (type === AttributeType.STORAGE) {\n            this.backend.createStorageAttribute(attribute);\n          } else if (type === AttributeType.INDIRECT) {\n            this.backend.createIndirectStorageAttribute(attribute);\n          }\n          data.version = this._getBufferAttribute(attribute).version;\n        } else {\n          var _bufferAttribute2 = this._getBufferAttribute(attribute);\n          if (data.version < _bufferAttribute2.version || _bufferAttribute2.usage === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DynamicDrawUsage) {\n            this.backend.updateAttribute(attribute);\n            data.version = _bufferAttribute2.version;\n          }\n        }\n      }\n\n      /**\n       * Utility method for handling interleaved buffer attributes correctly.\n       * To process them, their `InterleavedBuffer` is returned.\n       *\n       * @param {BufferAttribute} attribute - The attribute.\n       * @return {BufferAttribute|InterleavedBuffer}\n       */\n    }, {\n      key: \"_getBufferAttribute\",\n      value: function _getBufferAttribute(attribute) {\n        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n        return attribute;\n      }\n    }]);\n  }(DataMap);\n  /**\n   * Returns `true` if the given array has values that require an Uint32 array type.\n   *\n   * @private\n   * @function\n   * @param {Array<Number>} array - The array to test.\n   * @return {Booolean} Whether the given array has values that require an Uint32 array type or not.\n   */\n  function arrayNeedsUint32(array) {\n    // assumes larger values usually on last\n\n    for (var i = array.length - 1; i >= 0; --i) {\n      if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n    }\n    return false;\n  }\n\n  /**\n   * Returns the wireframe version for the given geometry.\n   *\n   * @private\n   * @function\n   * @param {BufferGeometry} geometry - The geometry.\n   * @return {Number} The versio.\n   */\n  function getWireframeVersion(geometry) {\n    return geometry.index !== null ? geometry.index.version : geometry.attributes.position.version;\n  }\n\n  /**\n   * Returns a wireframe index attribute for the given geometry.\n   *\n   * @private\n   * @function\n   * @param {BufferGeometry} geometry - The geometry.\n   * @return {BufferAttribute} The wireframe index attribute.\n   */\n  function getWireframeIndex(geometry) {\n    var indices = [];\n    var geometryIndex = geometry.index;\n    var geometryPosition = geometry.attributes.position;\n    if (geometryIndex !== null) {\n      var array = geometryIndex.array;\n      for (var i = 0, l = array.length; i < l; i += 3) {\n        var a = array[i + 0];\n        var b = array[i + 1];\n        var c = array[i + 2];\n        indices.push(a, b, b, c, c, a);\n      }\n    } else {\n      var _array = geometryPosition.array;\n      for (var _i9 = 0, _l2 = _array.length / 3 - 1; _i9 < _l2; _i9 += 3) {\n        var _a = _i9 + 0;\n        var _b = _i9 + 1;\n        var _c = _i9 + 2;\n        indices.push(_a, _b, _b, _c, _c, _a);\n      }\n    }\n    var attribute = new (arrayNeedsUint32(indices) ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uint32BufferAttribute : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Uint16BufferAttribute)(indices, 1);\n    attribute.version = getWireframeVersion(geometry);\n    return attribute;\n  }\n\n  /**\n   * This renderer module manages geometries.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Geometries = /*#__PURE__*/function (_DataMap2) {\n    /**\n     * Constructs a new geometry management component.\n     *\n     * @param {Attributes} attributes - Renderer component for managing attributes.\n     * @param {Info} info - Renderer component for managing metrics and monitoring data.\n     */\n    function Geometries(attributes, info) {\n      var _this113;\n      (0, _classCallCheck2.default)(this, Geometries);\n      _this113 = _callSuper(this, Geometries);\n\n      /**\n       * Renderer component for managing attributes.\n       *\n       * @type {Attributes}\n       */\n      _this113.attributes = attributes;\n\n      /**\n       * Renderer component for managing metrics and monitoring data.\n       *\n       * @type {Info}\n       */\n      _this113.info = info;\n\n      /**\n       * Weak Map for managing attributes for wireframe rendering.\n       *\n       * @type {WeakMap<BufferGeometry,BufferAttribute>}\n       */\n      _this113.wireframes = new WeakMap();\n\n      /**\n       * This Weak Map is used to make sure buffer attributes are\n       * updated only once per render call.\n       *\n       * @type {WeakMap<BufferAttribute,Number>}\n       */\n      _this113.attributeCall = new WeakMap();\n      return _this113;\n    }\n\n    /**\n     * Returns `true` if the given render object has an initialized geometry.\n     *\n     * @param {RenderObject} renderObject - The render object.\n     * @return {Boolean} Whether if the given render object has an initialized geometry or not.\n     */\n    (0, _inherits2.default)(Geometries, _DataMap2);\n    return (0, _createClass2.default)(Geometries, [{\n      key: \"has\",\n      value: function has(renderObject) {\n        var geometry = renderObject.geometry;\n        return _superPropGet(Geometries, \"has\", this, 3)([geometry]) && this.get(geometry).initialized === true;\n      }\n\n      /**\n       * Prepares the geometry of the given render object for rendering.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateForRender\",\n      value: function updateForRender(renderObject) {\n        if (this.has(renderObject) === false) this.initGeometry(renderObject);\n        this.updateAttributes(renderObject);\n      }\n\n      /**\n       * Initializes the geometry of the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"initGeometry\",\n      value: function initGeometry(renderObject) {\n        var _this114 = this;\n        var geometry = renderObject.geometry;\n        var geometryData = this.get(geometry);\n        geometryData.initialized = true;\n        this.info.memory.geometries++;\n        var _onDispose = function onDispose() {\n          _this114.info.memory.geometries--;\n          var index = geometry.index;\n          var geometryAttributes = renderObject.getAttributes();\n          if (index !== null) {\n            _this114.attributes.delete(index);\n          }\n          for (var geometryAttribute of geometryAttributes) {\n            _this114.attributes.delete(geometryAttribute);\n          }\n          var wireframeAttribute = _this114.wireframes.get(geometry);\n          if (wireframeAttribute !== undefined) {\n            _this114.attributes.delete(wireframeAttribute);\n          }\n          geometry.removeEventListener('dispose', _onDispose);\n        };\n        geometry.addEventListener('dispose', _onDispose);\n      }\n\n      /**\n       * Updates the geometry attributes of the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateAttributes\",\n      value: function updateAttributes(renderObject) {\n        // attributes\n\n        var attributes = renderObject.getAttributes();\n        for (var _attribute7 of attributes) {\n          if (_attribute7.isStorageBufferAttribute || _attribute7.isStorageInstancedBufferAttribute) {\n            this.updateAttribute(_attribute7, AttributeType.STORAGE);\n          } else {\n            this.updateAttribute(_attribute7, AttributeType.VERTEX);\n          }\n        }\n\n        // indexes\n\n        var index = this.getIndex(renderObject);\n        if (index !== null) {\n          this.updateAttribute(index, AttributeType.INDEX);\n        }\n\n        // indirect\n\n        var indirect = renderObject.geometry.indirect;\n        if (indirect !== null) {\n          this.updateAttribute(indirect, AttributeType.INDIRECT);\n        }\n      }\n\n      /**\n       * Updates the given attribute.\n       *\n       * @param {BufferAttribute} attribute - The attribute to update.\n       * @param {Number} type - The attribute type.\n       */\n    }, {\n      key: \"updateAttribute\",\n      value: function updateAttribute(attribute, type) {\n        var callId = this.info.render.calls;\n        if (!attribute.isInterleavedBufferAttribute) {\n          if (this.attributeCall.get(attribute) !== callId) {\n            this.attributes.update(attribute, type);\n            this.attributeCall.set(attribute, callId);\n          }\n        } else {\n          if (this.attributeCall.get(attribute) === undefined) {\n            this.attributes.update(attribute, type);\n            this.attributeCall.set(attribute, callId);\n          } else if (this.attributeCall.get(attribute.data) !== callId) {\n            this.attributes.update(attribute, type);\n            this.attributeCall.set(attribute.data, callId);\n            this.attributeCall.set(attribute, callId);\n          }\n        }\n      }\n\n      /**\n       * Returns the indirect buffer attribute of the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {BufferAttribute?} The indirect attribute. `null` if no indirect drawing is used.\n       */\n    }, {\n      key: \"getIndirect\",\n      value: function getIndirect(renderObject) {\n        return renderObject.geometry.indirect;\n      }\n\n      /**\n       * Returns the index of the given render object's geometry. This is implemented\n       * in a method to return a wireframe index if necessary.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {BufferAttribute?} The index. Returns `null` for non-indexed geometries.\n       */\n    }, {\n      key: \"getIndex\",\n      value: function getIndex(renderObject) {\n        var geometry = renderObject.geometry,\n          material = renderObject.material;\n        var index = geometry.index;\n        if (material.wireframe === true) {\n          var wireframes = this.wireframes;\n          var wireframeAttribute = wireframes.get(geometry);\n          if (wireframeAttribute === undefined) {\n            wireframeAttribute = getWireframeIndex(geometry);\n            wireframes.set(geometry, wireframeAttribute);\n          } else if (wireframeAttribute.version !== getWireframeVersion(geometry)) {\n            this.attributes.delete(wireframeAttribute);\n            wireframeAttribute = getWireframeIndex(geometry);\n            wireframes.set(geometry, wireframeAttribute);\n          }\n          index = wireframeAttribute;\n        }\n        return index;\n      }\n    }]);\n  }(DataMap);\n  /**\n   * This renderer module provides a series of statistical information\n   * about the GPU memory and the rendering process. Useful for debugging\n   * and monitoring.\n   */\n  var Info = /*#__PURE__*/function () {\n    /**\n     * Constructs a new info component.\n     */\n    function Info() {\n      (0, _classCallCheck2.default)(this, Info);\n      /**\n       * Whether frame related metrics should automatically\n       * be resetted or not. This property should be set to `false`\n       * by apps which manage their own animation loop. They must\n       * then call `renderer.info.reset()` once per frame manually.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.autoReset = true;\n\n      /**\n       * The current frame ID. This ID is managed\n       * by `NodeFrame`.\n       *\n       * @type {Number}\n       * @readonly\n       * @default 0\n       */\n      this.frame = 0;\n\n      /**\n       * The number of render calls since the\n       * app has been started.\n       *\n       * @type {Number}\n       * @readonly\n       * @default 0\n       */\n      this.calls = 0;\n\n      /**\n       * Render related metrics.\n       *\n       * @type {Object}\n       * @readonly\n       * @property {Number} calls - The number of render calls since the app has been started.\n       * @property {Number} frameCalls - The number of render calls of the current frame.\n       * @property {Number} drawCalls - The number of draw calls of the current frame.\n       * @property {Number} triangles - The number of rendered triangle primitives of the current frame.\n       * @property {Number} points - The number of rendered point primitives of the current frame.\n       * @property {Number} lines - The number of rendered line primitives of the current frame.\n       * @property {Number} previousFrameCalls - The number of render calls of the previous frame.\n       * @property {Number} timestamp - The timestamp of the frame when using `renderer.renderAsync()`.\n       * @property {Number} timestampCalls - The number of render calls using `renderer.renderAsync()`.\n       */\n      this.render = {\n        calls: 0,\n        frameCalls: 0,\n        drawCalls: 0,\n        triangles: 0,\n        points: 0,\n        lines: 0,\n        timestamp: 0,\n        previousFrameCalls: 0,\n        timestampCalls: 0\n      };\n\n      /**\n       * Compute related metrics.\n       *\n       * @type {Object}\n       * @readonly\n       * @property {Number} calls - The number of compute calls since the app has been started.\n       * @property {Number} frameCalls - The number of compute calls of the current frame.\n       * @property {Number} previousFrameCalls - The number of compute calls of the previous frame.\n       * @property {Number} timestamp - The timestamp of the frame when using `renderer.computeAsync()`.\n       * @property {Number} timestampCalls - The number of render calls using `renderer.computeAsync()`.\n       */\n      this.compute = {\n        calls: 0,\n        frameCalls: 0,\n        timestamp: 0,\n        previousFrameCalls: 0,\n        timestampCalls: 0\n      };\n\n      /**\n       * Memory related metrics.\n       *\n       * @type {Object}\n       * @readonly\n       * @property {Number} geometries - The number of active geometries.\n       * @property {Number} frameCalls - The number of active textures.\n       */\n      this.memory = {\n        geometries: 0,\n        textures: 0\n      };\n    }\n\n    /**\n     * This method should be executed per draw call and updates the corresponding metrics.\n     *\n     * @param {Object3D} object - The 3D object that is going to be rendered.\n     * @param {Number} count - The vertex or index count.\n     * @param {Number} instanceCount - The instance count.\n     */\n    return (0, _createClass2.default)(Info, [{\n      key: \"update\",\n      value: function update(object, count, instanceCount) {\n        this.render.drawCalls++;\n        if (object.isMesh || object.isSprite) {\n          this.render.triangles += instanceCount * (count / 3);\n        } else if (object.isPoints) {\n          this.render.points += instanceCount * count;\n        } else if (object.isLineSegments) {\n          this.render.lines += instanceCount * (count / 2);\n        } else if (object.isLine) {\n          this.render.lines += instanceCount * (count - 1);\n        } else {\n          console.error('THREE.WebGPUInfo: Unknown object type.');\n        }\n      }\n\n      /**\n       * Used by async render methods to updated timestamp metrics.\n       *\n       * @param {('render'|'compute')} type - The type of render call.\n       * @param {Number} time - The duration of the compute/render call in milliseconds.\n       */\n    }, {\n      key: \"updateTimestamp\",\n      value: function updateTimestamp(type, time) {\n        if (this[type].timestampCalls === 0) {\n          this[type].timestamp = 0;\n        }\n        this[type].timestamp += time;\n        this[type].timestampCalls++;\n        if (this[type].timestampCalls >= this[type].previousFrameCalls) {\n          this[type].timestampCalls = 0;\n        }\n      }\n\n      /**\n       * Resets frame related metrics.\n       */\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        var previousRenderFrameCalls = this.render.frameCalls;\n        this.render.previousFrameCalls = previousRenderFrameCalls;\n        var previousComputeFrameCalls = this.compute.frameCalls;\n        this.compute.previousFrameCalls = previousComputeFrameCalls;\n        this.render.drawCalls = 0;\n        this.render.frameCalls = 0;\n        this.compute.frameCalls = 0;\n        this.render.triangles = 0;\n        this.render.points = 0;\n        this.render.lines = 0;\n      }\n\n      /**\n       * Performs a complete reset of the object.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.reset();\n        this.calls = 0;\n        this.render.calls = 0;\n        this.compute.calls = 0;\n        this.render.timestamp = 0;\n        this.compute.timestamp = 0;\n        this.memory.geometries = 0;\n        this.memory.textures = 0;\n      }\n    }]);\n  }();\n  /**\n   * Abstract class for representing pipelines.\n   *\n   * @private\n   * @abstract\n   */\n  var Pipeline = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new pipeline.\n   *\n   * @param {String} cacheKey - The pipeline's cache key.\n   */\n  function Pipeline(cacheKey) {\n    (0, _classCallCheck2.default)(this, Pipeline);\n    /**\n     * The pipeline's cache key.\n     *\n     * @type {String}\n     */\n    this.cacheKey = cacheKey;\n\n    /**\n     * How often the pipeline is currently in use.\n     *\n     * @type {Number}\n     * @default 0\n     */\n    this.usedTimes = 0;\n  });\n  /**\n   * Class for representing render pipelines.\n   *\n   * @private\n   * @augments Pipeline\n   */\n  var RenderPipeline = /*#__PURE__*/function (_Pipeline) {\n    /**\n     * Constructs a new render pipeline.\n     *\n     * @param {String} cacheKey - The pipeline's cache key.\n     * @param {ProgrammableStage} vertexProgram - The pipeline's vertex shader.\n     * @param {ProgrammableStage} fragmentProgram - The pipeline's fragment shader.\n     */\n    function RenderPipeline(cacheKey, vertexProgram, fragmentProgram) {\n      var _this115;\n      (0, _classCallCheck2.default)(this, RenderPipeline);\n      _this115 = _callSuper(this, RenderPipeline, [cacheKey]);\n\n      /**\n       * The pipeline's vertex shader.\n       *\n       * @type {ProgrammableStage}\n       */\n      _this115.vertexProgram = vertexProgram;\n\n      /**\n       * The pipeline's fragment shader.\n       *\n       * @type {ProgrammableStage}\n       */\n      _this115.fragmentProgram = fragmentProgram;\n      return _this115;\n    }\n    (0, _inherits2.default)(RenderPipeline, _Pipeline);\n    return (0, _createClass2.default)(RenderPipeline);\n  }(Pipeline);\n  /**\n   * Class for representing compute pipelines.\n   *\n   * @private\n   * @augments Pipeline\n   */\n  var ComputePipeline = /*#__PURE__*/function (_Pipeline2) {\n    /**\n     * Constructs a new render pipeline.\n     *\n     * @param {String} cacheKey - The pipeline's cache key.\n     * @param {ProgrammableStage} computeProgram - The pipeline's compute shader.\n     */\n    function ComputePipeline(cacheKey, computeProgram) {\n      var _this116;\n      (0, _classCallCheck2.default)(this, ComputePipeline);\n      _this116 = _callSuper(this, ComputePipeline, [cacheKey]);\n\n      /**\n       * The pipeline's compute shader.\n       *\n       * @type {ProgrammableStage}\n       */\n      _this116.computeProgram = computeProgram;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this116.isComputePipeline = true;\n      return _this116;\n    }\n    (0, _inherits2.default)(ComputePipeline, _Pipeline2);\n    return (0, _createClass2.default)(ComputePipeline);\n  }(Pipeline);\n  var _id$8 = 0;\n\n  /**\n   * Class for representing programmable stages which are vertex,\n   * fragment or compute shaders. Unlike fixed-function states (like blending),\n   * they represent the programmable part of a pipeline.\n   *\n   * @private\n   */\n  var ProgrammableStage = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new programmable stage.\n   *\n   * @param {String} code - The shader code.\n   * @param {('vertex'|'fragment'|'compute')} stage - The type of stage.\n   * @param {String} name - The name of the shader.\n   * @param {Array<Object>?} [transforms=null] - The transforms (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n   * @param {Array<Object>?} [attributes=null] - The attributes (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n   */\n  function ProgrammableStage(code, stage, name) {\n    var transforms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var attributes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    (0, _classCallCheck2.default)(this, ProgrammableStage);\n    /**\n     * The id of the programmable stage.\n     *\n     * @type {Number}\n     */\n    this.id = _id$8++;\n\n    /**\n     * The shader code.\n     *\n     * @type {String}\n     */\n    this.code = code;\n\n    /**\n     * The type of stage.\n     *\n     * @type {String}\n     */\n    this.stage = stage;\n\n    /**\n     * The name of the stage.\n     * This is used for debugging purposes.\n     *\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * The transforms (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n     *\n     * @type {Array<Object>?}\n     */\n    this.transforms = transforms;\n\n    /**\n     * The attributes (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n     *\n     * @type {Array<Object>?}\n     */\n    this.attributes = attributes;\n\n    /**\n     * How often the programmable stage is currently in use.\n     *\n     * @type {Number}\n     * @default 0\n     */\n    this.usedTimes = 0;\n  });\n  /**\n   * This renderer module manages the pipelines of the renderer.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Pipelines = /*#__PURE__*/function (_DataMap3) {\n    /**\n     * Constructs a new pipeline management component.\n     *\n     * @param {Backend} backend - The renderer's backend.\n     * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n     */\n    function Pipelines(backend, nodes) {\n      var _this117;\n      (0, _classCallCheck2.default)(this, Pipelines);\n      _this117 = _callSuper(this, Pipelines);\n\n      /**\n       * The renderer's backend.\n       *\n       * @type {Backend}\n       */\n      _this117.backend = backend;\n\n      /**\n       * Renderer component for managing nodes related logic.\n       *\n       * @type {Nodes}\n       */\n      _this117.nodes = nodes;\n\n      /**\n       * A references to the bindings management component.\n       * This reference will be set inside the `Bindings`\n       * constructor.\n       *\n       * @type {Bindings?}\n       * @default null\n       */\n      _this117.bindings = null;\n\n      /**\n       * Internal cache for maintaining pipelines.\n       * The key of the map is a cache key, the value the pipeline.\n       *\n       * @type {Map<String,Pipeline>}\n       */\n      _this117.caches = new Map();\n\n      /**\n       * This dictionary maintains for each shader stage type (vertex,\n       * fragment and compute) the progammable stage objects which\n       * represent the actual shader code.\n       *\n       * @type {Object<String,Map>}\n       */\n      _this117.programs = {\n        vertex: new Map(),\n        fragment: new Map(),\n        compute: new Map()\n      };\n      return _this117;\n    }\n\n    /**\n     * Returns a compute pipeline for the given compute node.\n     *\n     * @param {Node} computeNode - The compute node.\n     * @param {Array<BindGroup>} bindings - The bindings.\n     * @return {ComputePipeline} The compute pipeline.\n     */\n    (0, _inherits2.default)(Pipelines, _DataMap3);\n    return (0, _createClass2.default)(Pipelines, [{\n      key: \"getForCompute\",\n      value: function getForCompute(computeNode, bindings) {\n        var backend = this.backend;\n        var data = this.get(computeNode);\n        if (this._needsComputeUpdate(computeNode)) {\n          var previousPipeline = data.pipeline;\n          if (previousPipeline) {\n            previousPipeline.usedTimes--;\n            previousPipeline.computeProgram.usedTimes--;\n          }\n\n          // get shader\n\n          var nodeBuilderState = this.nodes.getForCompute(computeNode);\n\n          // programmable stage\n\n          var stageCompute = this.programs.compute.get(nodeBuilderState.computeShader);\n          if (stageCompute === undefined) {\n            if (previousPipeline && previousPipeline.computeProgram.usedTimes === 0) this._releaseProgram(previousPipeline.computeProgram);\n            stageCompute = new ProgrammableStage(nodeBuilderState.computeShader, 'compute', computeNode.name, nodeBuilderState.transforms, nodeBuilderState.nodeAttributes);\n            this.programs.compute.set(nodeBuilderState.computeShader, stageCompute);\n            backend.createProgram(stageCompute);\n          }\n\n          // determine compute pipeline\n\n          var cacheKey = this._getComputeCacheKey(computeNode, stageCompute);\n          var pipeline = this.caches.get(cacheKey);\n          if (pipeline === undefined) {\n            if (previousPipeline && previousPipeline.usedTimes === 0) this._releasePipeline(previousPipeline);\n            pipeline = this._getComputePipeline(computeNode, stageCompute, cacheKey, bindings);\n          }\n\n          // keep track of all used times\n\n          pipeline.usedTimes++;\n          stageCompute.usedTimes++;\n\n          //\n\n          data.version = computeNode.version;\n          data.pipeline = pipeline;\n        }\n        return data.pipeline;\n      }\n\n      /**\n       * Returns a render pipeline for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @param {Array<Promise>?} [promises=null] - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.\n       * @return {RenderPipeline} The render pipeline.\n       */\n    }, {\n      key: \"getForRender\",\n      value: function getForRender(renderObject) {\n        var promises = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var backend = this.backend;\n        var data = this.get(renderObject);\n        if (this._needsRenderUpdate(renderObject)) {\n          var previousPipeline = data.pipeline;\n          if (previousPipeline) {\n            previousPipeline.usedTimes--;\n            previousPipeline.vertexProgram.usedTimes--;\n            previousPipeline.fragmentProgram.usedTimes--;\n          }\n\n          // get shader\n\n          var nodeBuilderState = renderObject.getNodeBuilderState();\n          var name = renderObject.material ? renderObject.material.name : '';\n\n          // programmable stages\n\n          var stageVertex = this.programs.vertex.get(nodeBuilderState.vertexShader);\n          if (stageVertex === undefined) {\n            if (previousPipeline && previousPipeline.vertexProgram.usedTimes === 0) this._releaseProgram(previousPipeline.vertexProgram);\n            stageVertex = new ProgrammableStage(nodeBuilderState.vertexShader, 'vertex', name);\n            this.programs.vertex.set(nodeBuilderState.vertexShader, stageVertex);\n            backend.createProgram(stageVertex);\n          }\n          var stageFragment = this.programs.fragment.get(nodeBuilderState.fragmentShader);\n          if (stageFragment === undefined) {\n            if (previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0) this._releaseProgram(previousPipeline.fragmentProgram);\n            stageFragment = new ProgrammableStage(nodeBuilderState.fragmentShader, 'fragment', name);\n            this.programs.fragment.set(nodeBuilderState.fragmentShader, stageFragment);\n            backend.createProgram(stageFragment);\n          }\n\n          // determine render pipeline\n\n          var cacheKey = this._getRenderCacheKey(renderObject, stageVertex, stageFragment);\n          var pipeline = this.caches.get(cacheKey);\n          if (pipeline === undefined) {\n            if (previousPipeline && previousPipeline.usedTimes === 0) this._releasePipeline(previousPipeline);\n            pipeline = this._getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises);\n          } else {\n            renderObject.pipeline = pipeline;\n          }\n\n          // keep track of all used times\n\n          pipeline.usedTimes++;\n          stageVertex.usedTimes++;\n          stageFragment.usedTimes++;\n\n          //\n\n          data.pipeline = pipeline;\n        }\n        return data.pipeline;\n      }\n\n      /**\n       * Deletes the pipeline for the given render object.\n       *\n       * @param {RenderObject} object - The render object.\n       * @return {Object?} The deleted dictionary.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete(object) {\n        var pipeline = this.get(object).pipeline;\n        if (pipeline) {\n          // pipeline\n\n          pipeline.usedTimes--;\n          if (pipeline.usedTimes === 0) this._releasePipeline(pipeline);\n\n          // programs\n\n          if (pipeline.isComputePipeline) {\n            pipeline.computeProgram.usedTimes--;\n            if (pipeline.computeProgram.usedTimes === 0) this._releaseProgram(pipeline.computeProgram);\n          } else {\n            pipeline.fragmentProgram.usedTimes--;\n            pipeline.vertexProgram.usedTimes--;\n            if (pipeline.vertexProgram.usedTimes === 0) this._releaseProgram(pipeline.vertexProgram);\n            if (pipeline.fragmentProgram.usedTimes === 0) this._releaseProgram(pipeline.fragmentProgram);\n          }\n        }\n        return _superPropGet(Pipelines, \"delete\", this, 3)([object]);\n      }\n\n      /**\n       * Frees internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        _superPropGet(Pipelines, \"dispose\", this, 3)([]);\n        this.caches = new Map();\n        this.programs = {\n          vertex: new Map(),\n          fragment: new Map(),\n          compute: new Map()\n        };\n      }\n\n      /**\n       * Updates the pipeline for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateForRender\",\n      value: function updateForRender(renderObject) {\n        this.getForRender(renderObject);\n      }\n\n      /**\n       * Returns a compute pipeline for the given parameters.\n       *\n       * @private\n       * @param {Node} computeNode - The compute node.\n       * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.\n       * @param {String} cacheKey - The cache key.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       * @return {ComputePipeline} The compute pipeline.\n       */\n    }, {\n      key: \"_getComputePipeline\",\n      value: function _getComputePipeline(computeNode, stageCompute, cacheKey, bindings) {\n        // check for existing pipeline\n\n        cacheKey = cacheKey || this._getComputeCacheKey(computeNode, stageCompute);\n        var pipeline = this.caches.get(cacheKey);\n        if (pipeline === undefined) {\n          pipeline = new ComputePipeline(cacheKey, stageCompute);\n          this.caches.set(cacheKey, pipeline);\n          this.backend.createComputePipeline(pipeline, bindings);\n        }\n        return pipeline;\n      }\n\n      /**\n       * Returns a render pipeline for the given parameters.\n       *\n       * @private\n       * @param {RenderObject} renderObject - The render object.\n       * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.\n       * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.\n       * @param {String} cacheKey - The cache key.\n       * @param {Array} promises - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.\n       * @return {ComputePipeline} The compute pipeline.\n       */\n    }, {\n      key: \"_getRenderPipeline\",\n      value: function _getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises) {\n        // check for existing pipeline\n\n        cacheKey = cacheKey || this._getRenderCacheKey(renderObject, stageVertex, stageFragment);\n        var pipeline = this.caches.get(cacheKey);\n        if (pipeline === undefined) {\n          pipeline = new RenderPipeline(cacheKey, stageVertex, stageFragment);\n          this.caches.set(cacheKey, pipeline);\n          renderObject.pipeline = pipeline;\n\n          // The `promises` array is `null` by default and only set to an empty array when\n          // `Renderer.compileAsync()` is used. The next call actually fills the array with\n          // pending promises that resolve when the render pipelines are ready for rendering.\n\n          this.backend.createRenderPipeline(renderObject, promises);\n        }\n        return pipeline;\n      }\n\n      /**\n       * Computes a cache key representing a compute pipeline.\n       *\n       * @private\n       * @param {Node} computeNode - The compute node.\n       * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"_getComputeCacheKey\",\n      value: function _getComputeCacheKey(computeNode, stageCompute) {\n        return computeNode.id + ',' + stageCompute.id;\n      }\n\n      /**\n       * Computes a cache key representing a render pipeline.\n       *\n       * @private\n       * @param {RenderObject} renderObject - The render object.\n       * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.\n       * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"_getRenderCacheKey\",\n      value: function _getRenderCacheKey(renderObject, stageVertex, stageFragment) {\n        return stageVertex.id + ',' + stageFragment.id + ',' + this.backend.getRenderCacheKey(renderObject);\n      }\n\n      /**\n       * Releases the given pipeline.\n       *\n       * @private\n       * @param {Pipeline} pipeline - The pipeline to release.\n       */\n    }, {\n      key: \"_releasePipeline\",\n      value: function _releasePipeline(pipeline) {\n        this.caches.delete(pipeline.cacheKey);\n      }\n\n      /**\n       * Releases the shader program.\n       *\n       * @private\n       * @param {Object} program - The shdaer program to release.\n       */\n    }, {\n      key: \"_releaseProgram\",\n      value: function _releaseProgram(program) {\n        var code = program.code;\n        var stage = program.stage;\n        this.programs[stage].delete(code);\n      }\n\n      /**\n       * Returns `true` if the compute pipeline for the given compute node requires an update.\n       *\n       * @private\n       * @param {Node} computeNode - The compute node.\n       * @return {Boolean} Whether the compute pipeline for the given compute node requires an update or not.\n       */\n    }, {\n      key: \"_needsComputeUpdate\",\n      value: function _needsComputeUpdate(computeNode) {\n        var data = this.get(computeNode);\n        return data.pipeline === undefined || data.version !== computeNode.version;\n      }\n\n      /**\n       * Returns `true` if the render pipeline for the given render object requires an update.\n       *\n       * @private\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Boolean} Whether the render object for the given render object requires an update or not.\n       */\n    }, {\n      key: \"_needsRenderUpdate\",\n      value: function _needsRenderUpdate(renderObject) {\n        var data = this.get(renderObject);\n        return data.pipeline === undefined || this.backend.needsRenderUpdate(renderObject);\n      }\n    }]);\n  }(DataMap);\n  /**\n   * This renderer module manages the bindings of the renderer.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Bindings = /*#__PURE__*/function (_DataMap4) {\n    /**\n     * Constructs a new bindings management component.\n     *\n     * @param {Backend} backend - The renderer's backend.\n     * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n     * @param {Textures} textures - Renderer component for managing textures.\n     * @param {Attributes} attributes - Renderer component for managing attributes.\n     * @param {Pipelines} pipelines - Renderer component for managing pipelines.\n     * @param {Info} info - Renderer component for managing metrics and monitoring data.\n     */\n    function Bindings(backend, nodes, textures, attributes, pipelines, info) {\n      var _this118;\n      (0, _classCallCheck2.default)(this, Bindings);\n      _this118 = _callSuper(this, Bindings);\n\n      /**\n       * The renderer's backend.\n       *\n       * @type {Backend}\n       */\n      _this118.backend = backend;\n\n      /**\n       * Renderer component for managing textures.\n       *\n       * @type {Textures}\n       */\n      _this118.textures = textures;\n\n      /**\n       * Renderer component for managing pipelines.\n       *\n       * @type {Pipelines}\n       */\n      _this118.pipelines = pipelines;\n\n      /**\n       * Renderer component for managing attributes.\n       *\n       * @type {Attributes}\n       */\n      _this118.attributes = attributes;\n\n      /**\n       * Renderer component for managing nodes related logic.\n       *\n       * @type {Nodes}\n       */\n      _this118.nodes = nodes;\n\n      /**\n       * Renderer component for managing metrics and monitoring data.\n       *\n       * @type {Info}\n       */\n      _this118.info = info;\n      _this118.pipelines.bindings = _this118; // assign bindings to pipelines\n      return _this118;\n    }\n\n    /**\n     * Returns the bind groups for the given render object.\n     *\n     * @param {RenderObject} renderObject - The render object.\n     * @return {Array<BindGroup>} The bind groups.\n     */\n    (0, _inherits2.default)(Bindings, _DataMap4);\n    return (0, _createClass2.default)(Bindings, [{\n      key: \"getForRender\",\n      value: function getForRender(renderObject) {\n        var bindings = renderObject.getBindings();\n        for (var bindGroup of bindings) {\n          var groupData = this.get(bindGroup);\n          if (groupData.bindGroup === undefined) {\n            // each object defines an array of bindings (ubos, textures, samplers etc.)\n\n            this._init(bindGroup);\n            this.backend.createBindings(bindGroup, bindings, 0);\n            groupData.bindGroup = bindGroup;\n          }\n        }\n        return bindings;\n      }\n\n      /**\n       * Returns the bind groups for the given compute node.\n       *\n       * @param {Node} computeNode - The compute node.\n       * @return {Array<BindGroup>} The bind groups.\n       */\n    }, {\n      key: \"getForCompute\",\n      value: function getForCompute(computeNode) {\n        var bindings = this.nodes.getForCompute(computeNode).bindings;\n        for (var bindGroup of bindings) {\n          var groupData = this.get(bindGroup);\n          if (groupData.bindGroup === undefined) {\n            this._init(bindGroup);\n            this.backend.createBindings(bindGroup, bindings, 0);\n            groupData.bindGroup = bindGroup;\n          }\n        }\n        return bindings;\n      }\n\n      /**\n       * Updates the bindings for the given compute node.\n       *\n       * @param {Node} computeNode - The compute node.\n       */\n    }, {\n      key: \"updateForCompute\",\n      value: function updateForCompute(computeNode) {\n        this._updateBindings(this.getForCompute(computeNode));\n      }\n\n      /**\n       * Updates the bindings for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateForRender\",\n      value: function updateForRender(renderObject) {\n        this._updateBindings(this.getForRender(renderObject));\n      }\n\n      /**\n       * Updates the given array of bindings.\n       *\n       * @param {Array<BindGroup>} bindings - The bind groups.\n       */\n    }, {\n      key: \"_updateBindings\",\n      value: function _updateBindings(bindings) {\n        for (var bindGroup of bindings) {\n          this._update(bindGroup, bindings);\n        }\n      }\n\n      /**\n       * Initializes the given bind group.\n       *\n       * @param {BindGroup} bindGroup - The bind group to initialize.\n       */\n    }, {\n      key: \"_init\",\n      value: function _init(bindGroup) {\n        for (var binding of bindGroup.bindings) {\n          if (binding.isSampledTexture) {\n            this.textures.updateTexture(binding.texture);\n          } else if (binding.isStorageBuffer) {\n            var _attribute8 = binding.attribute;\n            var attributeType = _attribute8.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;\n            this.attributes.update(_attribute8, attributeType);\n          }\n        }\n      }\n\n      /**\n       * Updates the given bind group.\n       *\n       * @param {BindGroup} bindGroup - The bind group to update.\n       * @param {Array<BindGroup>} bindings - The bind groups.\n       */\n    }, {\n      key: \"_update\",\n      value: function _update(bindGroup, bindings) {\n        var backend = this.backend;\n        var needsBindingsUpdate = false;\n        var cacheBindings = true;\n        var cacheIndex = 0;\n        var version = 0;\n\n        // iterate over all bindings and check if buffer updates or a new binding group is required\n\n        for (var binding of bindGroup.bindings) {\n          if (binding.isNodeUniformsGroup) {\n            var updated = this.nodes.updateGroup(binding);\n\n            // every uniforms group is a uniform buffer. So if no update is required,\n            // we move one with the next binding. Otherwise the next if block will update the group.\n\n            if (updated === false) continue;\n          }\n          if (binding.isUniformBuffer) {\n            var _updated = binding.update();\n            if (_updated) {\n              backend.updateBinding(binding);\n            }\n          } else if (binding.isSampler) {\n            binding.update();\n          } else if (binding.isSampledTexture) {\n            var texturesTextureData = this.textures.get(binding.texture);\n            if (binding.needsBindingsUpdate(texturesTextureData.generation)) needsBindingsUpdate = true;\n            var _updated2 = binding.update();\n            var _texture2 = binding.texture;\n            if (_updated2) {\n              this.textures.updateTexture(_texture2);\n            }\n            var textureData = backend.get(_texture2);\n            if (textureData.externalTexture !== undefined || texturesTextureData.isDefaultTexture) {\n              cacheBindings = false;\n            } else {\n              cacheIndex = cacheIndex * 10 + _texture2.id;\n              version += _texture2.version;\n            }\n            if (backend.isWebGPUBackend === true && textureData.texture === undefined && textureData.externalTexture === undefined) {\n              // TODO: Remove this once we found why updated === false isn't bound to a texture in the WebGPU backend\n              console.error('Bindings._update: binding should be available:', binding, _updated2, _texture2, binding.textureNode.value, needsBindingsUpdate);\n              this.textures.updateTexture(_texture2);\n              needsBindingsUpdate = true;\n            }\n            if (_texture2.isStorageTexture === true) {\n              var _textureData = this.get(_texture2);\n              if (binding.store === true) {\n                _textureData.needsMipmap = true;\n              } else if (this.textures.needsMipmaps(_texture2) && _textureData.needsMipmap === true) {\n                this.backend.generateMipmaps(_texture2);\n                _textureData.needsMipmap = false;\n              }\n            }\n          }\n        }\n        if (needsBindingsUpdate === true) {\n          this.backend.updateBindings(bindGroup, bindings, cacheBindings ? cacheIndex : 0, version);\n        }\n      }\n    }]);\n  }(DataMap);\n  /**\n   * Default sorting function for opaque render items.\n   *\n   * @private\n   * @function\n   * @param {Object} a - The first render item.\n   * @param {Object} b - The second render item.\n   * @return {Number} A numeric value which defines the sort order.\n   */\n  function painterSortStable(a, b) {\n    if (a.groupOrder !== b.groupOrder) {\n      return a.groupOrder - b.groupOrder;\n    } else if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.material.id !== b.material.id) {\n      return a.material.id - b.material.id;\n    } else if (a.z !== b.z) {\n      return a.z - b.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  /**\n   * Default sorting function for transparent render items.\n   *\n   * @private\n   * @function\n   * @param {Object} a - The first render item.\n   * @param {Object} b - The second render item.\n   * @return {Number} A numeric value which defines the sort order.\n   */\n  function reversePainterSortStable(a, b) {\n    if (a.groupOrder !== b.groupOrder) {\n      return a.groupOrder - b.groupOrder;\n    } else if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  /**\n   * Returns `true` if the given transparent material requires a double pass.\n   *\n   * @private\n   * @function\n   * @param {Material} material - The transparent material.\n   * @return {Boolean} Whether the given material requires a double pass or not.\n   */\n  function needsDoublePass(material) {\n    var hasTransmission = material.transmission > 0 || material.transmissionNode;\n    return hasTransmission && material.side === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide && material.forceSinglePass === false;\n  }\n\n  /**\n   * When the renderer analyzes the scene at the beginning of a render call,\n   * it stores 3D object for further processing in render lists. Depending on the\n   * properties of a 3D objects (like their transformation or material state), the\n   * objects are maintained in ordered lists for the actual rendering.\n   *\n   * Render lists are unique per scene and camera combination.\n   *\n   * @private\n   * @augments Pipeline\n   */\n  var RenderList = /*#__PURE__*/function () {\n    /**\n     * Constructs a render list.\n     *\n     * @param {Lighting} lighting - The lighting management component.\n     * @param {Scene} scene - The scene.\n     * @param {Camera} camera - The camera the scene is rendered with.\n     */\n    function RenderList(lighting, scene, camera) {\n      (0, _classCallCheck2.default)(this, RenderList);\n      /**\n       * 3D objects are transformed into render items and stored in this array.\n       *\n       * @type {Array<Object>}\n       */\n      this.renderItems = [];\n\n      /**\n       * The current render items index.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.renderItemsIndex = 0;\n\n      /**\n       * A list with opaque render items.\n       *\n       * @type {Array<Object>}\n       */\n      this.opaque = [];\n\n      /**\n       * A list with transparent render items which require\n       * double pass rendering (e.g. transmissive objects).\n       *\n       * @type {Array<Object>}\n       */\n      this.transparentDoublePass = [];\n\n      /**\n       * A list with transparent render items.\n       *\n       * @type {Array<Object>}\n       */\n      this.transparent = [];\n\n      /**\n       * A list with transparent render bundle data.\n       *\n       * @type {Array<Object>}\n       */\n      this.bundles = [];\n\n      /**\n       * The render list's lights node. This node is later\n       * relevant for the actual analytical light nodes which\n       * compute the scene's lighting in the shader.\n       *\n       * @type {LightsNode}\n       */\n      this.lightsNode = lighting.getNode(scene, camera);\n\n      /**\n       * The scene's lights stored in an array. This array\n       * is used to setup the lights node.\n       *\n       * @type {Array<Light>}\n       */\n      this.lightsArray = [];\n\n      /**\n       * The scene.\n       *\n       * @type {Scene}\n       */\n      this.scene = scene;\n\n      /**\n       * The camera the scene is rendered with.\n       *\n       * @type {Camera}\n       */\n      this.camera = camera;\n\n      /**\n       * How many objects perform occlusion query tests.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.occlusionQueryCount = 0;\n    }\n\n    /**\n     * This method is called right at the beginning of a render call\n     * before the scene is analyzed. It prepares the internal data\n     * structures for the upcoming render lists generation.\n     *\n     * @return {RenderList} A reference to this render list.\n     */\n    return (0, _createClass2.default)(RenderList, [{\n      key: \"begin\",\n      value: function begin() {\n        this.renderItemsIndex = 0;\n        this.opaque.length = 0;\n        this.transparentDoublePass.length = 0;\n        this.transparent.length = 0;\n        this.bundles.length = 0;\n        this.lightsArray.length = 0;\n        this.occlusionQueryCount = 0;\n        return this;\n      }\n\n      /**\n       * Returns a render item for the giving render item state. The state is defined\n       * by a series of object-related parameters.\n       *\n       * The method avoids object creation by holding render items and reusing them in\n       * subsequent render calls (just with different property values).\n       *\n       * @param {Object3D} object - The 3D object.\n       * @param {BufferGeometry} geometry - The 3D object's geometry.\n       * @param {Material} material - The 3D object's material.\n       * @param {Number} groupOrder - The current group order.\n       * @param {Number} z - Th 3D object's depth value (z value in clip space).\n       * @param {Number?} group - {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {ClippingContext} clippingContext - The current clipping context.\n       * @return {Object} The render item.\n       */\n    }, {\n      key: \"getNextRenderItem\",\n      value: function getNextRenderItem(object, geometry, material, groupOrder, z, group, clippingContext) {\n        var renderItem = this.renderItems[this.renderItemsIndex];\n        if (renderItem === undefined) {\n          renderItem = {\n            id: object.id,\n            object: object,\n            geometry: geometry,\n            material: material,\n            groupOrder: groupOrder,\n            renderOrder: object.renderOrder,\n            z: z,\n            group: group,\n            clippingContext: clippingContext\n          };\n          this.renderItems[this.renderItemsIndex] = renderItem;\n        } else {\n          renderItem.id = object.id;\n          renderItem.object = object;\n          renderItem.geometry = geometry;\n          renderItem.material = material;\n          renderItem.groupOrder = groupOrder;\n          renderItem.renderOrder = object.renderOrder;\n          renderItem.z = z;\n          renderItem.group = group;\n          renderItem.clippingContext = clippingContext;\n        }\n        this.renderItemsIndex++;\n        return renderItem;\n      }\n\n      /**\n       * Pushes the given object as a render item to the internal render lists.\n       * The selected lists depend on the object properties.\n       *\n       * @param {Object3D} object - The 3D object.\n       * @param {BufferGeometry} geometry - The 3D object's geometry.\n       * @param {Material} material - The 3D object's material.\n       * @param {Number} groupOrder - The current group order.\n       * @param {Number} z - Th 3D object's depth value (z value in clip space).\n       * @param {Number?} group - {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {ClippingContext} clippingContext - The current clipping context.\n       */\n    }, {\n      key: \"push\",\n      value: function push(object, geometry, material, groupOrder, z, group, clippingContext) {\n        var renderItem = this.getNextRenderItem(object, geometry, material, groupOrder, z, group, clippingContext);\n        if (object.occlusionTest === true) this.occlusionQueryCount++;\n        if (material.transparent === true || material.transmission > 0) {\n          if (needsDoublePass(material)) this.transparentDoublePass.push(renderItem);\n          this.transparent.push(renderItem);\n        } else {\n          this.opaque.push(renderItem);\n        }\n      }\n\n      /**\n       * Inserts the given object as a render item at the start of the internal render lists.\n       * The selected lists depend on the object properties.\n       *\n       * @param {Object3D} object - The 3D object.\n       * @param {BufferGeometry} geometry - The 3D object's geometry.\n       * @param {Material} material - The 3D object's material.\n       * @param {Number} groupOrder - The current group order.\n       * @param {Number} z - Th 3D object's depth value (z value in clip space).\n       * @param {Number?} group - {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {ClippingContext} clippingContext - The current clipping context.\n       */\n    }, {\n      key: \"unshift\",\n      value: function unshift(object, geometry, material, groupOrder, z, group, clippingContext) {\n        var renderItem = this.getNextRenderItem(object, geometry, material, groupOrder, z, group, clippingContext);\n        if (material.transparent === true || material.transmission > 0) {\n          if (needsDoublePass(material)) this.transparentDoublePass.unshift(renderItem);\n          this.transparent.unshift(renderItem);\n        } else {\n          this.opaque.unshift(renderItem);\n        }\n      }\n\n      /**\n       * Pushes render bundle group data into the render list.\n       *\n       * @param {Object} group - Bundle group data.\n       */\n    }, {\n      key: \"pushBundle\",\n      value: function pushBundle(group) {\n        this.bundles.push(group);\n      }\n\n      /**\n       * Pushes a light into the render list.\n       *\n       * @param {Light} light - The light.\n       */\n    }, {\n      key: \"pushLight\",\n      value: function pushLight(light) {\n        this.lightsArray.push(light);\n      }\n\n      /**\n       * Sorts the internal render lists.\n       *\n       * @param {Function} customOpaqueSort - A custom sort function for opaque objects.\n       * @param {Function} customTransparentSort -  A custom sort function for transparent objects.\n       */\n    }, {\n      key: \"sort\",\n      value: function sort(customOpaqueSort, customTransparentSort) {\n        if (this.opaque.length > 1) this.opaque.sort(customOpaqueSort || painterSortStable);\n        if (this.transparentDoublePass.length > 1) this.transparentDoublePass.sort(customTransparentSort || reversePainterSortStable);\n        if (this.transparent.length > 1) this.transparent.sort(customTransparentSort || reversePainterSortStable);\n      }\n\n      /**\n       * This method performs finalizing tasks right after the render lists\n       * have been generated.\n       */\n    }, {\n      key: \"finish\",\n      value: function finish() {\n        // update lights\n\n        this.lightsNode.setLights(this.lightsArray);\n\n        // Clear references from inactive renderItems in the list\n\n        for (var i = this.renderItemsIndex, il = this.renderItems.length; i < il; i++) {\n          var renderItem = this.renderItems[i];\n          if (renderItem.id === null) break;\n          renderItem.id = null;\n          renderItem.object = null;\n          renderItem.geometry = null;\n          renderItem.material = null;\n          renderItem.groupOrder = null;\n          renderItem.renderOrder = null;\n          renderItem.z = null;\n          renderItem.group = null;\n          renderItem.clippingContext = null;\n        }\n      }\n    }]);\n  }();\n  /**\n   * This renderer module manages the render lists which are unique\n   * per scene and camera combination.\n   *\n   * @private\n   */\n  var RenderLists = /*#__PURE__*/function () {\n    /**\n     * Constructs a render lists management component.\n     *\n     * @param {Lighting} lighting - The lighting management component.\n     */\n    function RenderLists(lighting) {\n      (0, _classCallCheck2.default)(this, RenderLists);\n      /**\n       * The lighting management component.\n       *\n       * @type {Lighting}\n       */\n      this.lighting = lighting;\n\n      /**\n       * The internal chain map which holds the render lists.\n       *\n       * @type {ChainMap}\n       */\n      this.lists = new ChainMap();\n    }\n\n    /**\n     * Returns a render list for the given scene and camera.\n     *\n     * @param {Scene} scene - The scene.\n     * @param {Camera} camera - The camera.\n     * @return {RenderList} The render list.\n     */\n    return (0, _createClass2.default)(RenderLists, [{\n      key: \"get\",\n      value: function get(scene, camera) {\n        var lists = this.lists;\n        var keys = [scene, camera];\n        var list = lists.get(keys);\n        if (list === undefined) {\n          list = new RenderList(this.lighting, scene, camera);\n          lists.set(keys, list);\n        }\n        return list;\n      }\n\n      /**\n       * Frees all internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.lists = new ChainMap();\n      }\n    }]);\n  }();\n  var _id$7 = 0;\n\n  /**\n   * Any render or compute command is executed in a specific context that defines\n   * the state of the renderer and its backend. Typical examples for such context\n   * data are the current clear values or data from the active framebuffer. This\n   * module is used to represent these contexts as objects.\n   *\n   * @private\n   */\n  var RenderContext = /*#__PURE__*/function () {\n    /**\n     * Constructs a new render context.\n     */\n    function RenderContext() {\n      (0, _classCallCheck2.default)(this, RenderContext);\n      /**\n       * The context's ID.\n       *\n       * @type {Number}\n       */\n      this.id = _id$7++;\n\n      /**\n       * Whether the current active framebuffer has a color attachment.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.color = true;\n\n      /**\n       * Whether the color attachment should be cleared or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.clearColor = true;\n\n      /**\n       * The clear color value.\n       *\n       * @type {Object}\n       * @default true\n       */\n      this.clearColorValue = {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 1\n      };\n\n      /**\n       * Whether the current active framebuffer has a depth attachment.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.depth = true;\n\n      /**\n       * Whether the depth attachment should be cleared or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.clearDepth = true;\n\n      /**\n       * The clear depth value.\n       *\n       * @type {Number}\n       * @default 1\n       */\n      this.clearDepthValue = 1;\n\n      /**\n       * Whether the current active framebuffer has a stencil attachment.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.stencil = false;\n\n      /**\n       * Whether the stencil attachment should be cleared or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.clearStencil = true;\n\n      /**\n       * The clear stencil value.\n       *\n       * @type {Number}\n       * @default 1\n       */\n      this.clearStencilValue = 1;\n\n      /**\n       * By default the viewport encloses the entire framebuffer If a smaller\n       * viewport is manually defined, this property is to `true` by the renderer.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.viewport = false;\n\n      /**\n       * The viewport value. This value is in physical pixels meaning it incorporates\n       * the renderer's pixel ratio. The viewport property of render targets or\n       * the renderer is in logical pixels.\n       *\n       * @type {Vector4}\n       */\n      this.viewportValue = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n\n      /**\n       * When the scissor test is active and scissor rectangle smaller than the\n       * framebuffers dimensions, this property is to `true` by the renderer.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.scissor = false;\n\n      /**\n       * The scissor rectangle.\n       *\n       * @type {Vector4}\n       */\n      this.scissorValue = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n\n      /**\n       * The textures of the active render target.\n       * `null` when no render target is set.\n       *\n       * @type {Array<Texture>?}\n       * @default null\n       */\n      this.textures = null;\n\n      /**\n       * The depth texture of the active render target.\n       * `null` when no render target is set.\n       *\n       * @type {DepthTexture?}\n       * @default null\n       */\n      this.depthTexture = null;\n\n      /**\n       * The active cube face.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.activeCubeFace = 0;\n\n      /**\n       * The number of MSAA samples. This value is always `1` when\n       * MSAA isn't used.\n       *\n       * @type {Number}\n       * @default 1\n       */\n      this.sampleCount = 1;\n\n      /**\n       * The framebuffers width in physical pixels.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.width = 0;\n\n      /**\n       * The framebuffers height in physical pixels.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.height = 0;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      this.isRenderContext = true;\n    }\n\n    /**\n     * Returns the cache key of this render context.\n     *\n     * @return {Number} The cache key.\n     */\n    return (0, _createClass2.default)(RenderContext, [{\n      key: \"getCacheKey\",\n      value: function getCacheKey() {\n        return _getCacheKey(this);\n      }\n    }]);\n  }();\n  /**\n   * Computes a cache key for the given render context.\n   *\n   * @param {RenderContext} renderContext - The render context.\n   * @return {Number} The cache key.\n   */\n  function _getCacheKey(renderContext) {\n    var textures = renderContext.textures,\n      activeCubeFace = renderContext.activeCubeFace;\n    var values = [activeCubeFace];\n    for (var _texture3 of textures) {\n      values.push(_texture3.id);\n    }\n    return hashArray(values);\n  }\n\n  /**\n   * This module manages the render contexts of the renderer.\n   *\n   * @private\n   */\n  var RenderContexts = /*#__PURE__*/function () {\n    /**\n     * Constructs a new render context management component.\n     */\n    function RenderContexts() {\n      (0, _classCallCheck2.default)(this, RenderContexts);\n      /**\n       * A dictionary that manages render contexts in chain maps\n       * for each attachment state.\n       *\n       * @type {Object<String,ChainMap>}\n       */\n      this.chainMaps = {};\n    }\n\n    /**\n     * Returns a render context for the given scene, camera and render target.\n     *\n     * @param {Scene?} [scene=null] - The scene. The parameter can become `null` e.g. when the renderer clears a render target.\n     * @param {Camera?} [camera=null] - The camera that is used to render the scene. The parameter can become `null` e.g. when the renderer clears a render target.\n     * @param {RenderTarget?} [renderTarget=null] - The active render target.\n     * @return {RenderContext} The render context.\n     */\n    return (0, _createClass2.default)(RenderContexts, [{\n      key: \"get\",\n      value: function get() {\n        var scene = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var camera = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var renderTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var chainKey = [];\n        if (scene !== null) chainKey.push(scene);\n        if (camera !== null) chainKey.push(camera);\n        if (chainKey.length === 0) {\n          chainKey.push({\n            id: 'default'\n          });\n        }\n        var attachmentState;\n        if (renderTarget === null) {\n          attachmentState = 'default';\n        } else {\n          var format = renderTarget.texture.format;\n          var count = renderTarget.textures.length;\n          attachmentState = `${count}:${format}:${renderTarget.samples}:${renderTarget.depthBuffer}:${renderTarget.stencilBuffer}`;\n        }\n        var chainMap = this.getChainMap(attachmentState);\n        var renderState = chainMap.get(chainKey);\n        if (renderState === undefined) {\n          renderState = new RenderContext();\n          chainMap.set(chainKey, renderState);\n        }\n        if (renderTarget !== null) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n        return renderState;\n      }\n\n      /**\n       * Returns a chain map for the given attachment state.\n       *\n       * @param {String} attachmentState - The attachment state.\n       * @return {ChainMap} The chain map.\n       */\n    }, {\n      key: \"getChainMap\",\n      value: function getChainMap(attachmentState) {\n        return this.chainMaps[attachmentState] || (this.chainMaps[attachmentState] = new ChainMap());\n      }\n\n      /**\n       * Frees internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.chainMaps = {};\n      }\n    }]);\n  }();\n  var _size$3 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n\n  /**\n   * This module manages the textures of the renderer.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Textures = /*#__PURE__*/function (_DataMap5) {\n    /**\n     * Constructs a new texture management component.\n     *\n     * @param {Renderer} renderer - The renderer.\n     * @param {Backend} backend - The renderer's backend.\n     * @param {Info} info - Renderer component for managing metrics and monitoring data.\n     */\n    function Textures(renderer, backend, info) {\n      var _this119;\n      (0, _classCallCheck2.default)(this, Textures);\n      _this119 = _callSuper(this, Textures);\n\n      /**\n       * The renderer.\n       *\n       * @type {Renderer}\n       */\n      _this119.renderer = renderer;\n\n      /**\n       * The backend.\n       *\n       * @type {Backend}\n       */\n      _this119.backend = backend;\n\n      /**\n       * Renderer component for managing metrics and monitoring data.\n       *\n       * @type {Info}\n       */\n      _this119.info = info;\n      return _this119;\n    }\n\n    /**\n     * Updates the given render target. Based on the given render target configuration,\n     * it updates the texture states representing the attachments of the framebuffer.\n     *\n     * @param {RenderTarget} renderTarget - The render target to update.\n     * @param {Number} [activeMipmapLevel=0] - The active mipmap level.\n     */\n    (0, _inherits2.default)(Textures, _DataMap5);\n    return (0, _createClass2.default)(Textures, [{\n      key: \"updateRenderTarget\",\n      value: function updateRenderTarget(renderTarget) {\n        var _this120 = this;\n        var activeMipmapLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var renderTargetData = this.get(renderTarget);\n        var sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n        var depthTextureMips = renderTargetData.depthTextureMips || (renderTargetData.depthTextureMips = {});\n        var textures = renderTarget.textures;\n        var size = this.getSize(textures[0]);\n        var mipWidth = size.width >> activeMipmapLevel;\n        var mipHeight = size.height >> activeMipmapLevel;\n        var depthTexture = renderTarget.depthTexture || depthTextureMips[activeMipmapLevel];\n        var useDepthTexture = renderTarget.depthBuffer === true || renderTarget.stencilBuffer === true;\n        var textureNeedsUpdate = false;\n        if (depthTexture === undefined && useDepthTexture) {\n          depthTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)();\n          depthTexture.format = renderTarget.stencilBuffer ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthStencilFormat : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthFormat;\n          depthTexture.type = renderTarget.stencilBuffer ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt248Type : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType; // FloatType\n          depthTexture.image.width = mipWidth;\n          depthTexture.image.height = mipHeight;\n          depthTextureMips[activeMipmapLevel] = depthTexture;\n        }\n        if (renderTargetData.width !== size.width || size.height !== renderTargetData.height) {\n          textureNeedsUpdate = true;\n          if (depthTexture) {\n            depthTexture.needsUpdate = true;\n            depthTexture.image.width = mipWidth;\n            depthTexture.image.height = mipHeight;\n          }\n        }\n        renderTargetData.width = size.width;\n        renderTargetData.height = size.height;\n        renderTargetData.textures = textures;\n        renderTargetData.depthTexture = depthTexture || null;\n        renderTargetData.depth = renderTarget.depthBuffer;\n        renderTargetData.stencil = renderTarget.stencilBuffer;\n        renderTargetData.renderTarget = renderTarget;\n        if (renderTargetData.sampleCount !== sampleCount) {\n          textureNeedsUpdate = true;\n          if (depthTexture) {\n            depthTexture.needsUpdate = true;\n          }\n          renderTargetData.sampleCount = sampleCount;\n        }\n\n        //\n\n        var options = {\n          sampleCount: sampleCount\n        };\n        for (var i = 0; i < textures.length; i++) {\n          var _texture4 = textures[i];\n          if (textureNeedsUpdate) _texture4.needsUpdate = true;\n          this.updateTexture(_texture4, options);\n        }\n        if (depthTexture) {\n          this.updateTexture(depthTexture, options);\n        }\n\n        // dispose handler\n\n        if (renderTargetData.initialized !== true) {\n          renderTargetData.initialized = true;\n\n          // dispose\n\n          var _onDispose2 = function onDispose() {\n            renderTarget.removeEventListener('dispose', _onDispose2);\n            for (var _i10 = 0; _i10 < textures.length; _i10++) {\n              _this120._destroyTexture(textures[_i10]);\n            }\n            if (depthTexture) {\n              _this120._destroyTexture(depthTexture);\n            }\n            _this120.delete(renderTarget);\n          };\n          renderTarget.addEventListener('dispose', _onDispose2);\n        }\n      }\n\n      /**\n       * Updates the given texture. Depending on the texture state, this method\n       * triggers the upload of texture data to the GPU memory. If the texture data are\n       * not yet ready for the upload, it uses default texture data for as a placeholder.\n       *\n       * @param {Texture} texture - The texture to update.\n       * @param {Object} [options={}] - The options.\n       */\n    }, {\n      key: \"updateTexture\",\n      value: function updateTexture(texture) {\n        var _this121 = this;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var textureData = this.get(texture);\n        if (textureData.initialized === true && textureData.version === texture.version) return;\n        var isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n        var backend = this.backend;\n        if (isRenderTarget && textureData.initialized === true) {\n          // it's an update\n\n          backend.destroySampler(texture);\n          backend.destroyTexture(texture);\n        }\n\n        //\n\n        if (texture.isFramebufferTexture) {\n          var renderTarget = this.renderer.getRenderTarget();\n          if (renderTarget) {\n            texture.type = renderTarget.texture.type;\n          } else {\n            texture.type = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType;\n          }\n        }\n\n        //\n\n        var _this$getSize = this.getSize(texture),\n          width = _this$getSize.width,\n          height = _this$getSize.height,\n          depth = _this$getSize.depth;\n        options.width = width;\n        options.height = height;\n        options.depth = depth;\n        options.needsMipmaps = this.needsMipmaps(texture);\n        options.levels = options.needsMipmaps ? this.getMipLevels(texture, width, height) : 1;\n\n        //\n\n        if (isRenderTarget || texture.isStorageTexture === true) {\n          backend.createSampler(texture);\n          backend.createTexture(texture, options);\n          textureData.generation = texture.version;\n        } else {\n          var needsCreate = textureData.initialized !== true;\n          if (needsCreate) backend.createSampler(texture);\n          if (texture.version > 0) {\n            var image = texture.image;\n            if (image === undefined) {\n              console.warn('THREE.Renderer: Texture marked for update but image is undefined.');\n            } else if (image.complete === false) {\n              console.warn('THREE.Renderer: Texture marked for update but image is incomplete.');\n            } else {\n              if (texture.images) {\n                var images = [];\n                for (var _image of texture.images) {\n                  images.push(_image);\n                }\n                options.images = images;\n              } else {\n                options.image = image;\n              }\n              if (textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true) {\n                backend.createTexture(texture, options);\n                textureData.isDefaultTexture = false;\n                textureData.generation = texture.version;\n              }\n              if (texture.source.dataReady === true) backend.updateTexture(texture, options);\n              if (options.needsMipmaps && texture.mipmaps.length === 0) backend.generateMipmaps(texture);\n            }\n          } else {\n            // async update\n\n            backend.createDefaultTexture(texture);\n            textureData.isDefaultTexture = true;\n            textureData.generation = texture.version;\n          }\n        }\n\n        // dispose handler\n\n        if (textureData.initialized !== true) {\n          textureData.initialized = true;\n          textureData.generation = texture.version;\n\n          //\n\n          this.info.memory.textures++;\n\n          // dispose\n\n          var _onDispose3 = function onDispose() {\n            texture.removeEventListener('dispose', _onDispose3);\n            _this121._destroyTexture(texture);\n            _this121.info.memory.textures--;\n          };\n          texture.addEventListener('dispose', _onDispose3);\n        }\n\n        //\n\n        textureData.version = texture.version;\n      }\n\n      /**\n       * Computes the size of the given texture and writes the result\n       * into the target vector. This vector is also returned by the\n       * method.\n       *\n       * If no texture data are available for the compute yet, the method\n       * returns default size values.\n       *\n       * @param {Texture} texture - The texture to compute the size for.\n       * @param {Vector3} target - The target vector.\n       * @return {Vector3} The target vector.\n       */\n    }, {\n      key: \"getSize\",\n      value: function getSize(texture) {\n        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _size$3;\n        var image = texture.images ? texture.images[0] : texture.image;\n        if (image) {\n          if (image.image !== undefined) image = image.image;\n          target.width = image.width || 1;\n          target.height = image.height || 1;\n          target.depth = texture.isCubeTexture ? 6 : image.depth || 1;\n        } else {\n          target.width = target.height = target.depth = 1;\n        }\n        return target;\n      }\n\n      /**\n       * Computes the number of mipmap levels for the given texture.\n       *\n       * @param {Texture} texture - The texture.\n       * @param {Number} width - The texture's width.\n       * @param {Number} height - The texture's height.\n       * @return {Number} The number of mipmap levels.\n       */\n    }, {\n      key: \"getMipLevels\",\n      value: function getMipLevels(texture, width, height) {\n        var mipLevelCount;\n        if (texture.isCompressedTexture) {\n          if (texture.mipmaps) {\n            mipLevelCount = texture.mipmaps.length;\n          } else {\n            mipLevelCount = 1;\n          }\n        } else {\n          mipLevelCount = Math.floor(Math.log2(Math.max(width, height))) + 1;\n        }\n        return mipLevelCount;\n      }\n\n      /**\n       * Returns `true` if the given texture requires mipmaps.\n       *\n       * @param {Texture} texture - The texture.\n       * @return {Boolean} Whether mipmaps are required or not.\n       */\n    }, {\n      key: \"needsMipmaps\",\n      value: function needsMipmaps(texture) {\n        return this.isEnvironmentTexture(texture) || texture.isCompressedTexture === true || texture.generateMipmaps;\n      }\n\n      /**\n       * Returns `true` if the given texture is an environment map.\n       *\n       * @param {Texture} texture - The texture.\n       * @return {Boolean} Whether the given texture is an environment map or not.\n       */\n    }, {\n      key: \"isEnvironmentTexture\",\n      value: function isEnvironmentTexture(texture) {\n        var mapping = texture.mapping;\n        return mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularReflectionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularRefractionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping;\n      }\n\n      /**\n       * Frees internal resource when the given texture isn't\n       * required anymore.\n       *\n       * @param {Texture} texture - The texture to destroy.\n       */\n    }, {\n      key: \"_destroyTexture\",\n      value: function _destroyTexture(texture) {\n        this.backend.destroySampler(texture);\n        this.backend.destroyTexture(texture);\n        this.delete(texture);\n      }\n    }]);\n  }(DataMap);\n  /**\n   * A four-component version of {@link Color} which is internally\n   * used by the renderer to represents clear color with alpha as\n   * one object.\n   *\n   * @private\n   * @augments Color\n   */\n  var Color4 = /*#__PURE__*/function (_Color) {\n    /**\n     * Constructs a new four-component color.\n     *\n     * @param {Number|String} r - The red value.\n     * @param {Number} g - The green value.\n     * @param {Number} b - The blue value.\n     * @param {Number} [a=1] - The alpha value.\n     */\n    function Color4(r, g, b) {\n      var _this122;\n      var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, Color4);\n      _this122 = _callSuper(this, Color4, [r, g, b]);\n      _this122.a = a;\n      return _this122;\n    }\n\n    /**\n     * Overwrites the default to honor alpha.\n     *\n     * @param {Number|String} r - The red value.\n     * @param {Number} g - The green value.\n     * @param {Number} b - The blue value.\n     * @param {Number} [a=1] - The alpha value.\n     * @return {Color4} A reference to this object.\n     */\n    (0, _inherits2.default)(Color4, _Color);\n    return (0, _createClass2.default)(Color4, [{\n      key: \"set\",\n      value: function set(r, g, b) {\n        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n        this.a = a;\n        return _superPropGet(Color4, \"set\", this, 3)([r, g, b]);\n      }\n\n      /**\n       * Overwrites the default to honor alpha.\n       *\n       * @param {Color4} color - The color to copy.\n       * @return {Color4} A reference to this object.\n       */\n    }, {\n      key: \"copy\",\n      value: function copy(color) {\n        if (color.a !== undefined) this.a = color.a;\n        return _superPropGet(Color4, \"copy\", this, 3)([color]);\n      }\n\n      /**\n       * Overwrites the default to honor alpha.\n       *\n       * @return {Color4} The cloned color.\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.r, this.g, this.b, this.a);\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color);\n  /** @module ParameterNode **/\n  /**\n   * Special version of {@link PropertyNode} which is used for parameters.\n   *\n   * @augments PropertyNode\n   */\n  var ParameterNode = exports.ParameterNode = /*#__PURE__*/function (_PropertyNode) {\n    /**\n     * Constructs a new parameter node.\n     *\n     * @param {String} nodeType - The type of the node.\n     * @param {String?} [name=null] - The name of the parameter in the shader.\n     */\n    function ParameterNode(nodeType) {\n      var _this123;\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, ParameterNode);\n      _this123 = _callSuper(this, ParameterNode, [nodeType, name]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this123.isParameterNode = true;\n      return _this123;\n    }\n    (0, _inherits2.default)(ParameterNode, _PropertyNode);\n    return (0, _createClass2.default)(ParameterNode, [{\n      key: \"getHash\",\n      value: function getHash() {\n        return this.uuid;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate() {\n        return this.name;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ParameterNode';\n      }\n    }]);\n  }(PropertyNode);\n  /**\n   * TSL function for creating a parameter node.\n   *\n   * @function\n   * @param {String} type - The type of the node.\n   * @param {String?} name - The name of the parameter in the shader.\n   * @returns {ParameterNode}\n   */\n  var parameter = function parameter(type, name) {\n    return nodeObject(new ParameterNode(type, name));\n  };\n\n  /** @module StackNode **/\n\n  /**\n   * Stack is a helper for Nodes that need to produce stack-based code instead of continuous flow.\n   * They are usually needed in cases like `If`, `Else`.\n   *\n   * @augments Node\n   */\n  var StackNode = exports.StackNode = /*#__PURE__*/function (_Node37) {\n    /**\n     * Constructs a new stack node.\n     *\n     * @param {StackNode?} [parent=null] - The parent stack node.\n     */\n    function StackNode() {\n      var _this124;\n      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, StackNode);\n      _this124 = _callSuper(this, StackNode);\n\n      /**\n       * List of nodes.\n       *\n       * @type {Array<Node>}\n       */\n      _this124.nodes = [];\n\n      /**\n       * The output node.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this124.outputNode = null;\n\n      /**\n       * The parent stack node.\n       *\n       * @type {StackNode}\n       * @default null\n       */\n      _this124.parent = parent;\n\n      /**\n       * The current conditional node.\n       *\n       * @private\n       * @type {ConditionalNode}\n       * @default null\n       */\n      _this124._currentCond = null;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this124.isStackNode = true;\n      return _this124;\n    }\n    (0, _inherits2.default)(StackNode, _Node37);\n    return (0, _createClass2.default)(StackNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.outputNode ? this.outputNode.getNodeType(builder) : 'void';\n      }\n\n      /**\n       * Adds a node to this stack.\n       *\n       * @param {Node} node - The node to add.\n       * @return {StackNode} A reference to this stack node.\n       */\n    }, {\n      key: \"add\",\n      value: function add(node) {\n        this.nodes.push(node);\n        return this;\n      }\n\n      /**\n       * Represent an `if` statement in TSL.\n       *\n       * @param {Node} boolNode - Represents the condition.\n       * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\n       * @return {StackNode} A reference to this stack node.\n       */\n    }, {\n      key: \"If\",\n      value: function If(boolNode, method) {\n        var methodNode = new ShaderNode(method);\n        this._currentCond = select(boolNode, methodNode);\n        return this.add(this._currentCond);\n      }\n\n      /**\n       * Represent an `elseif` statement in TSL.\n       *\n       * @param {Node} boolNode - Represents the condition.\n       * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\n       * @return {StackNode} A reference to this stack node.\n       */\n    }, {\n      key: \"ElseIf\",\n      value: function ElseIf(boolNode, method) {\n        var methodNode = new ShaderNode(method);\n        var ifNode = select(boolNode, methodNode);\n        this._currentCond.elseNode = ifNode;\n        this._currentCond = ifNode;\n        return this;\n      }\n\n      /**\n       * Represent an `else` statement in TSL.\n       *\n       * @param {Function} method - TSL code which is executed in the `else` case.\n       * @return {StackNode} A reference to this stack node.\n       */\n    }, {\n      key: \"Else\",\n      value: function Else(method) {\n        this._currentCond.elseNode = new ShaderNode(method);\n        return this;\n      }\n    }, {\n      key: \"build\",\n      value: function build(builder) {\n        var _this$outputNode;\n        var previousStack = getCurrentStack();\n        setCurrentStack(this);\n        for (var node of this.nodes) {\n          node.build(builder, 'void');\n        }\n        setCurrentStack(previousStack);\n        for (var _len17 = arguments.length, params = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n          params[_key17 - 1] = arguments[_key17];\n        }\n        return this.outputNode ? (_this$outputNode = this.outputNode).build.apply(_this$outputNode, [builder].concat(params)) : _superPropGet(StackNode, \"build\", this, 3)([builder].concat(params));\n      }\n\n      //\n    }, {\n      key: \"else\",\n      value: function _else() {\n        // @deprecated, r168\n\n        console.warn('TSL.StackNode: .else() has been renamed to .Else().');\n        return this.Else.apply(this, arguments);\n      }\n    }, {\n      key: \"elseif\",\n      value: function elseif() {\n        // @deprecated, r168\n\n        console.warn('TSL.StackNode: .elseif() has been renamed to .ElseIf().');\n        return this.ElseIf.apply(this, arguments);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'StackNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a stack node.\n   *\n   * @function\n   * @param {StackNode?} [parent=null] - The parent stack node.\n   * @returns {StackNode}\n   */\n  var stack = /*@__PURE__*/nodeProxy(StackNode);\n\n  /** @module OutputStructNode **/\n\n  /**\n   * This node can be used to define multiple outputs in a shader programs.\n   *\n   * @augments Node\n   */\n  var OutputStructNode = exports.OutputStructNode = /*#__PURE__*/function (_Node38) {\n    /**\n     * Constructs a new output struct node. The constructor can be invoked with an\n     * arbitrary number of nodes representing the members.\n     *\n     * @param {...Node} members - A parameter list of nodes.\n     */\n    function OutputStructNode() {\n      var _this125;\n      (0, _classCallCheck2.default)(this, OutputStructNode);\n      _this125 = _callSuper(this, OutputStructNode);\n\n      /**\n       * An array of nodes which defines the output.\n       *\n       * @type {Array<Node>}\n       */\n      for (var _len18 = arguments.length, members = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n        members[_key18] = arguments[_key18];\n      }\n      _this125.members = members;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this125.isOutputStructNode = true;\n      return _this125;\n    }\n    (0, _inherits2.default)(OutputStructNode, _Node38);\n    return (0, _createClass2.default)(OutputStructNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(OutputStructNode, \"setup\", this, 3)([builder]);\n        var members = this.members;\n        var types = [];\n        for (var i = 0; i < members.length; i++) {\n          types.push(members[i].getNodeType(builder));\n        }\n        this.nodeType = builder.getStructTypeFromNode(this, types).name;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var propertyName = builder.getOutputStructName();\n        var members = this.members;\n        var structPrefix = propertyName !== '' ? propertyName + '.' : '';\n        for (var i = 0; i < members.length; i++) {\n          var snippet = members[i].build(builder, output);\n          builder.addLineFlowCode(`${structPrefix}m${i} = ${snippet}`, this);\n        }\n        return propertyName;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'OutputStructNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating an output struct node.\n   *\n   * @function\n   * @param {...Node} members - A parameter list of nodes.\n   * @returns {OutputStructNode}\n   */\n  var outputStruct = /*@__PURE__*/nodeProxy(OutputStructNode);\n\n  /** @module MRTNode **/\n\n  /**\n   * Returns the MRT texture index for the given name.\n   *\n   * @param {Array<Texture>} textures - The textures of a MRT-configured render target.\n   * @param {String} name - The name of the MRT texture which index is requested.\n   * @return {Number} The texture index.\n   */\n  function getTextureIndex(textures, name) {\n    for (var i = 0; i < textures.length; i++) {\n      if (textures[i].name === name) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * This node can be used setup a MRT context for rendering. A typical MRT setup for\n   * post-processing is shown below:\n   * ```js\n   * const mrtNode = mrt( {\n   *   output: output,\n   *   normal: normalView\n   * } ) );\n   * ```\n   * The MRT output is defined as a dictionary.\n   *\n   * @augments OutputStructNode\n   */\n  var MRTNode = exports.MRTNode = /*#__PURE__*/function (_OutputStructNode) {\n    /**\n     * Constructs a new output struct node.\n     *\n     * @param {Object<String, Node>} outputNodes - The MRT outputs.\n     */\n    function MRTNode(outputNodes) {\n      var _this126;\n      (0, _classCallCheck2.default)(this, MRTNode);\n      _this126 = _callSuper(this, MRTNode);\n\n      /**\n       * A dictionary representing the MRT outputs. The key\n       * is the name of the output, the value the node which produces\n       * the output result.\n       *\n       * @type {Object<String, Node>}\n       */\n      _this126.outputNodes = outputNodes;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this126.isMRTNode = true;\n      return _this126;\n    }\n\n    /**\n     * Returns `true` if the MRT node has an output with the given name.\n     *\n     * @param {String} name - The name of the output.\n     * @return {NodeBuilder} Whether the MRT node has an output for the given name or not.\n     */\n    (0, _inherits2.default)(MRTNode, _OutputStructNode);\n    return (0, _createClass2.default)(MRTNode, [{\n      key: \"has\",\n      value: function has(name) {\n        return this.outputNodes[name] !== undefined;\n      }\n\n      /**\n       * Returns the output node for the given name.\n       *\n       * @param {String} name - The name of the output.\n       * @return {Node} The output node.\n       */\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        return this.outputNodes[name];\n      }\n\n      /**\n       * Merges the outputs of the given MRT node with the outputs of this node.\n       *\n       * @param {MRTNode} mrtNode - The MRT to merge.\n       * @return {MRTNode} A new MRT node with merged outputs..\n       */\n    }, {\n      key: \"merge\",\n      value: function merge(mrtNode) {\n        var outputs = Object.assign({}, this.outputNodes, mrtNode.outputNodes);\n        return mrt(outputs);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var outputNodes = this.outputNodes;\n        var mrt = builder.renderer.getRenderTarget();\n        var members = [];\n        var textures = mrt.textures;\n        for (var name in outputNodes) {\n          var index = getTextureIndex(textures, name);\n          members[index] = vec4(outputNodes[name]);\n        }\n        this.members = members;\n        return _superPropGet(MRTNode, \"setup\", this, 3)([builder]);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'MRTNode';\n      }\n    }]);\n  }(OutputStructNode);\n  /**\n   * TSL function for creating a MRT node.\n   *\n   * @function\n   * @param {Object<String, Node>} outputNodes - The MRT outputs.\n   * @returns {MRTNode}\n   */\n  var mrt = /*@__PURE__*/nodeProxy(MRTNode);\n\n  /** @module Hash **/\n\n  /**\n   * Generates a hash value in the range `[0, 1]` from the given seed.\n   *\n   * @method\n   * @param {Node<float>} seed - The seed.\n   * @return {Node<float>} The hash value.\n   */\n  var hash = /*@__PURE__*/Fn(function (_ref118) {\n    var _ref119 = (0, _slicedToArray2.default)(_ref118, 1),\n      seed = _ref119[0];\n    // Taken from https://www.shadertoy.com/view/XlGcRh, originally from pcg-random.org\n\n    var state = seed.toUint().mul(747796405).add(2891336453);\n    var word = state.shiftRight(state.shiftRight(28).add(4)).bitXor(state).mul(277803737);\n    var result = word.shiftRight(22).bitXor(word);\n    return result.toFloat().mul(1 / 2 ** 32); // Convert to range [0, 1)\n  });\n\n  /** @module MathUtils **/\n\n  /**\n   * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n   * The corners are mapped to `0` and the center to `1`.\n   * Reference: {@link https://iquilezles.org/articles/functions/}.\n   *\n   * @method\n   * @param {Node<float>} x - The value to remap.\n   * @param {Node<float>} k - Allows to control the remapping functions shape by rising the parabola to a power `k`.\n   * @return {Node<float>} The remapped value.\n   */\n  var parabola = function parabola(x, k) {\n    return pow(mul(4.0, x.mul(sub(1.0, x))), k);\n  };\n\n  /**\n   * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n   * Expands the sides and compresses the center, and keeps `0.5` mapped to `0.5`.\n   * Reference: {@link https://iquilezles.org/articles/functions/}.\n   *\n   * @method\n   * @param {Node<float>} x - The value to remap.\n   * @param {Node<float>} k - `k=1` is the identity curve,`k<1` produces the classic `gain()` shape, and `k>1` produces \"s\" shaped curves.\n   * @return {Node<float>} The remapped value.\n   */\n  var gain = function gain(x, k) {\n    return x.lessThan(0.5) ? parabola(x.mul(2.0), k).div(2.0) : sub(1.0, parabola(mul(sub(1.0, x), 2.0), k).div(2.0));\n  };\n\n  /**\n   * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n   * A generalization of the `parabola()`. Keeps the corners mapped to 0 but allows the control of the shape one either side of the curve.\n   * Reference: {@link https://iquilezles.org/articles/functions/}.\n   *\n   * @method\n   * @param {Node<float>} x - The value to remap.\n   * @param {Node<float>} a - First control parameter.\n   * @param {Node<float>} b - Second control parameter.\n   * @return {Node<float>} The remapped value.\n   */\n  var pcurve = function pcurve(x, a, b) {\n    return pow(div(pow(x, a), add(pow(x, a), pow(sub(1.0, x), b))), 1.0 / a);\n  };\n\n  /**\n   * A phase shifted sinus curve that starts at zero and ends at zero, with bouncing behavior.\n   * Reference: {@link https://iquilezles.org/articles/functions/}.\n   *\n   * @method\n   * @param {Node<float>} x - The value to compute the sin for.\n   * @param {Node<float>} k - Controls the amount of bounces.\n   * @return {Node<float>} The result value.\n   */\n  var sinc = function sinc(x, k) {\n    return sin(PI.mul(k.mul(x).sub(1.0))).div(PI.mul(k.mul(x).sub(1.0)));\n  };\n\n  // https://github.com/cabbibo/glsl-tri-noise-3d\n\n  /** @module TriNoise3D **/\n\n  var tri = /*@__PURE__*/Fn(function (_ref120) {\n    var _ref121 = (0, _slicedToArray2.default)(_ref120, 1),\n      x = _ref121[0];\n    return x.fract().sub(.5).abs();\n  }).setLayout({\n    name: 'tri',\n    type: 'float',\n    inputs: [{\n      name: 'x',\n      type: 'float'\n    }]\n  });\n  var tri3 = /*@__PURE__*/Fn(function (_ref122) {\n    var _ref123 = (0, _slicedToArray2.default)(_ref122, 1),\n      p = _ref123[0];\n    return vec3(tri(p.z.add(tri(p.y.mul(1.)))), tri(p.z.add(tri(p.x.mul(1.)))), tri(p.y.add(tri(p.x.mul(1.)))));\n  }).setLayout({\n    name: 'tri3',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }]\n  });\n\n  /**\n   * Generates a noise value from the given position, speed and time parameters.\n   *\n   * @method\n   * @param {Node<vec3>} position - The position.\n   * @param {Node<float>} speed - The speed.\n   * @param {Node<float>} time - The time.\n   * @return {Node<float>} The generated noise.\n   */\n  var triNoise3D = /*@__PURE__*/Fn(function (_ref124) {\n    var _ref125 = (0, _slicedToArray2.default)(_ref124, 3),\n      position = _ref125[0],\n      speed = _ref125[1],\n      time = _ref125[2];\n    var p = vec3(position).toVar();\n    var z = float(1.4).toVar();\n    var rz = float(0.0).toVar();\n    var bp = vec3(p).toVar();\n    Loop({\n      start: float(0.0),\n      end: float(3.0),\n      type: 'float',\n      condition: '<='\n    }, function () {\n      var dg = vec3(tri3(bp.mul(2.0))).toVar();\n      p.addAssign(dg.add(time.mul(float(0.1).mul(speed))));\n      bp.mulAssign(1.8);\n      z.mulAssign(1.5);\n      p.mulAssign(1.2);\n      var t = float(tri(p.z.add(tri(p.x.add(tri(p.y)))))).toVar();\n      rz.addAssign(t.div(z));\n      bp.addAssign(0.14);\n    });\n    return rz;\n  }).setLayout({\n    name: 'triNoise3D',\n    type: 'float',\n    inputs: [{\n      name: 'position',\n      type: 'vec3'\n    }, {\n      name: 'speed',\n      type: 'float'\n    }, {\n      name: 'time',\n      type: 'float'\n    }]\n  });\n\n  /** @module FunctionOverloadingNode **/\n\n  /**\n   * This class allows to define multiple overloaded versions\n   * of the same function. Depending on the parameters of the function\n   * call, the node picks the best-fit overloaded version.\n   *\n   * @augments Node\n   */\n  var FunctionOverloadingNode = exports.FunctionOverloadingNode = /*#__PURE__*/function (_Node39) {\n    /**\n     * Constructs a new function overloading node.\n     *\n     * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.\n     * @param {...Node} parametersNodes - A list of parameter nodes.\n     */\n    function FunctionOverloadingNode() {\n      var _this127;\n      var functionNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      (0, _classCallCheck2.default)(this, FunctionOverloadingNode);\n      _this127 = _callSuper(this, FunctionOverloadingNode);\n\n      /**\n       * Array of `Fn` function definitions.\n       *\n       * @type {Array<Function>}\n       */\n      _this127.functionNodes = functionNodes;\n\n      /**\n       * A list of parameter nodes.\n       *\n       * @type {Array<Node>}\n       */\n      for (var _len19 = arguments.length, parametersNodes = new Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {\n        parametersNodes[_key19 - 1] = arguments[_key19];\n      }\n      _this127.parametersNodes = parametersNodes;\n\n      /**\n       * The selected overloaded function call.\n       *\n       * @private\n       * @type {ShaderCallNodeInternal}\n       */\n      _this127._candidateFnCall = null;\n\n      /**\n       * This node is marked as global.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this127.global = true;\n      return _this127;\n    }\n\n    /**\n     * This method is overwritten since the node type is inferred from\n     * the function's return type.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The node type.\n     */\n    (0, _inherits2.default)(FunctionOverloadingNode, _Node39);\n    return (0, _createClass2.default)(FunctionOverloadingNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType() {\n        return this.functionNodes[0].shaderNode.layout.type;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var params = this.parametersNodes;\n        var candidateFnCall = this._candidateFnCall;\n        if (candidateFnCall === null) {\n          var candidateFn = null;\n          var candidateScore = -1;\n          for (var functionNode of this.functionNodes) {\n            var shaderNode = functionNode.shaderNode;\n            var layout = shaderNode.layout;\n            if (layout === null) {\n              throw new Error('FunctionOverloadingNode: FunctionNode must be a layout.');\n            }\n            var inputs = layout.inputs;\n            if (params.length === inputs.length) {\n              var score = 0;\n              for (var i = 0; i < params.length; i++) {\n                var param = params[i];\n                var input = inputs[i];\n                if (param.getNodeType(builder) === input.type) {\n                  score++;\n                } else {\n                  score = 0;\n                }\n              }\n              if (score > candidateScore) {\n                candidateFn = functionNode;\n                candidateScore = score;\n              }\n            }\n          }\n          this._candidateFnCall = candidateFnCall = candidateFn.apply(void 0, (0, _toConsumableArray2.default)(params));\n        }\n        return candidateFnCall;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'FunctionOverloadingNode';\n      }\n    }]);\n  }(Node);\n  var overloadingBaseFn = /*@__PURE__*/nodeProxy(FunctionOverloadingNode);\n\n  /**\n   * TSL function for creating a function overloading node.\n   *\n   * @function\n   * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.\n   * @returns {FunctionOverloadingNode}\n   */\n  var overloadingFn = function overloadingFn(functionNodes) {\n    return function () {\n      for (var _len20 = arguments.length, params = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n        params[_key20] = arguments[_key20];\n      }\n      return overloadingBaseFn.apply(void 0, [functionNodes].concat(params));\n    };\n  };\n\n  /** @module Timer **/\n\n  /**\n   * Represents the elapsed time in seconds.\n   *\n   * @type {UniformNode<float>}\n   */\n  var time = /*@__PURE__*/uniform(0).setGroup(renderGroup).onRenderUpdate(function (frame) {\n    return frame.time;\n  });\n\n  /**\n   * Represents the delta time in seconds.\n   *\n   * @type {UniformNode<float>}\n   */\n  var deltaTime = /*@__PURE__*/uniform(0).setGroup(renderGroup).onRenderUpdate(function (frame) {\n    return frame.deltaTime;\n  });\n\n  /**\n   * Represents the current frame ID.\n   *\n   * @type {UniformNode<uint>}\n   */\n  var frameId = /*@__PURE__*/uniform(0, 'uint').setGroup(renderGroup).onRenderUpdate(function (frame) {\n    return frame.frameId;\n  });\n\n  // Deprecated\n\n  var timerLocal = function timerLocal() {\n    var timeScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    // @deprecated, r170\n\n    console.warn('TSL: timerLocal() is deprecated. Use \"time\" instead.');\n    return time.mul(timeScale);\n  };\n  var timerGlobal = function timerGlobal() {\n    var timeScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    // @deprecated, r170\n\n    console.warn('TSL: timerGlobal() is deprecated. Use \"time\" instead.');\n    return time.mul(timeScale);\n  };\n  var timerDelta = function timerDelta() {\n    var timeScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    // @deprecated, r170\n\n    console.warn('TSL: timerDelta() is deprecated. Use \"deltaTime\" instead.');\n    return deltaTime.mul(timeScale);\n  };\n\n  /** @module Oscillators **/\n\n  /**\n   * Generates a sine wave oscillation based on a timer.\n   *\n   * @method\n   * @param {Node<float>} t - The timer to generate the oscillation with.\n   * @return {Node<float>} The oscillation node.\n   */\n  var oscSine = function oscSine() {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time;\n    return t.add(0.75).mul(Math.PI * 2).sin().mul(0.5).add(0.5);\n  };\n\n  /**\n   * Generates a square wave oscillation based on a timer.\n   *\n   * @method\n   * @param {Node<float>} t - The timer to generate the oscillation with.\n   * @return {Node<float>} The oscillation node.\n   */\n  var oscSquare = function oscSquare() {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time;\n    return t.fract().round();\n  };\n\n  /**\n   * Generates a triangle wave oscillation based on a timer.\n   *\n   * @method\n   * @param {Node<float>} t - The timer to generate the oscillation with.\n   * @return {Node<float>} The oscillation node.\n   */\n  var oscTriangle = function oscTriangle() {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time;\n    return t.add(0.5).fract().mul(2).sub(1).abs();\n  };\n\n  /**\n   * Generates a sawtooth wave oscillation based on a timer.\n   *\n   * @method\n   * @param {Node<float>} t - The timer to generate the oscillation with.\n   * @return {Node<float>} The oscillation node.\n   */\n  var oscSawtooth = function oscSawtooth() {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : time;\n    return t.fract();\n  };\n\n  /** @module UVUtils **/\n\n  /**\n   * Rotates the given uv coordinates around a center point\n   *\n   * @method\n   * @param {Node<vec2>} uv - The uv coordinates.\n   * @param {Node<float>} rotation - The rotation defined in radians.\n   * @param {Node<vec2>} center - The center of rotation\n   * @return {Node<vec2>} The rotated uv coordinates.\n   */\n  var rotateUV = /*@__PURE__*/Fn(function (_ref126) {\n    var _ref127 = (0, _slicedToArray2.default)(_ref126, 3),\n      uv = _ref127[0],\n      rotation = _ref127[1],\n      _ref127$ = _ref127[2],\n      center = _ref127$ === void 0 ? vec2(0.5) : _ref127$;\n    return rotate(uv.sub(center), rotation).add(center);\n  });\n\n  /**\n   * Applies a spherical warping effect to the given uv coordinates.\n   *\n   * @method\n   * @param {Node<vec2>} uv - The uv coordinates.\n   * @param {Node<float>} strength - The strength of the effect.\n   * @param {Node<vec2>} center - The center point\n   * @return {Node<vec2>} The updated uv coordinates.\n   */\n  var spherizeUV = /*@__PURE__*/Fn(function (_ref128) {\n    var _ref129 = (0, _slicedToArray2.default)(_ref128, 3),\n      uv = _ref129[0],\n      strength = _ref129[1],\n      _ref129$ = _ref129[2],\n      center = _ref129$ === void 0 ? vec2(0.5) : _ref129$;\n    var delta = uv.sub(center);\n    var delta2 = delta.dot(delta);\n    var delta4 = delta2.mul(delta2);\n    var deltaOffset = delta4.mul(strength);\n    return uv.add(delta.mul(deltaOffset));\n  });\n\n  /** @module SpriteUtils **/\n\n  /**\n   * This can be used to achieve a billboarding behavior for flat meshes. That means they are\n   * oriented always towards the camera.\n   *\n   * ```js\n   * material.vertexNode = billboarding();\n   * ```\n   *\n   * @method\n   * @param {Object} config - The configuration object.\n   * @param {Node<vec3>?} [config.position=null] - Can be used to define the vertex positions in world space.\n   * @param {Boolean} [config.horizontal=true] - Whether to follow the camera rotation horizontally or not.\n   * @param {Boolean} [config.vertical=false] - Whether to follow the camera rotation vertically or not.\n   * @return {Node<vec3>} The updated vertex position in clip space.\n   */\n  var billboarding = /*@__PURE__*/Fn(function (_ref130) {\n    var _ref130$position = _ref130.position,\n      position = _ref130$position === void 0 ? null : _ref130$position,\n      _ref130$horizontal = _ref130.horizontal,\n      horizontal = _ref130$horizontal === void 0 ? true : _ref130$horizontal,\n      _ref130$vertical = _ref130.vertical,\n      vertical = _ref130$vertical === void 0 ? false : _ref130$vertical;\n    var worldMatrix;\n    if (position !== null) {\n      worldMatrix = modelWorldMatrix.toVar();\n      worldMatrix[3][0] = position.x;\n      worldMatrix[3][1] = position.y;\n      worldMatrix[3][2] = position.z;\n    } else {\n      worldMatrix = modelWorldMatrix;\n    }\n    var modelViewMatrix = cameraViewMatrix.mul(worldMatrix);\n    if (defined(horizontal)) {\n      modelViewMatrix[0][0] = modelWorldMatrix[0].length();\n      modelViewMatrix[0][1] = 0;\n      modelViewMatrix[0][2] = 0;\n    }\n    if (defined(vertical)) {\n      modelViewMatrix[1][0] = 0;\n      modelViewMatrix[1][1] = modelWorldMatrix[1].length();\n      modelViewMatrix[1][2] = 0;\n    }\n    modelViewMatrix[2][0] = 0;\n    modelViewMatrix[2][1] = 0;\n    modelViewMatrix[2][2] = 1;\n    return cameraProjectionMatrix.mul(modelViewMatrix).mul(positionLocal);\n  });\n\n  /** @module ViewportUtils **/\n\n  /**\n   * A special version of a screen uv function that involves a depth comparison\n   * when computing the final uvs. The function mitigates visual errors when\n   * using viewport texture nodes for refraction purposes. Without this function\n   * objects in front of a refractive surface might appear on the refractive surface\n   * which is incorrect.\n   *\n   * @method\n   * @param {Node<vec2>?} uv - Optional uv coordinates. By default `screenUV` is used.\n   * @return {Node<vec2>} The update uv coordinates.\n   */\n  var viewportSafeUV = /*@__PURE__*/Fn(function (_ref131) {\n    var _ref132 = (0, _slicedToArray2.default)(_ref131, 1),\n      _ref132$ = _ref132[0],\n      uv = _ref132$ === void 0 ? null : _ref132$;\n    var depth = linearDepth();\n    var depthDiff = linearDepth(viewportDepthTexture(uv)).sub(depth);\n    var finalUV = depthDiff.lessThan(0).select(screenUV, uv);\n    return finalUV;\n  });\n\n  /** @module SpriteSheetUVNode **/\n\n  /**\n   * Can be used to compute texture coordinates for animated sprite sheets.\n   *\n   * ```js\n   * const uvNode = spritesheetUV( vec2( 6, 6 ), uv(), time.mul( animationSpeed ) );\n   *\n   * material.colorNode = texture( spriteSheet, uvNode );\n   * ```\n   *\n   * @augments Node\n   */\n  var SpriteSheetUVNode = exports.SpriteSheetUVNode = /*#__PURE__*/function (_Node40) {\n    /**\n     * Constructs a new sprite sheet uv node.\n     *\n     * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\n     * @param {Node<vec2>} [uvNode=uv()] - The uv node.\n     * @param {Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\n     */\n    function SpriteSheetUVNode(countNode) {\n      var _this128;\n      var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : uv();\n      var frameNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : float(0);\n      (0, _classCallCheck2.default)(this, SpriteSheetUVNode);\n      _this128 = _callSuper(this, SpriteSheetUVNode, ['vec2']);\n\n      /**\n       * The node that defines the number of sprites in the x and y direction (e.g 6x6).\n       *\n       * @type {Node<vec2>}\n       */\n      _this128.countNode = countNode;\n\n      /**\n       * The uv node.\n       *\n       * @type {Node<vec2>}\n       */\n      _this128.uvNode = uvNode;\n\n      /**\n       * The node that defines the current frame/sprite.\n       *\n       * @type {Node<float>}\n       */\n      _this128.frameNode = frameNode;\n      return _this128;\n    }\n    (0, _inherits2.default)(SpriteSheetUVNode, _Node40);\n    return (0, _createClass2.default)(SpriteSheetUVNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var frameNode = this.frameNode,\n          uvNode = this.uvNode,\n          countNode = this.countNode;\n        var width = countNode.width,\n          height = countNode.height;\n        var frameNum = frameNode.mod(width.mul(height)).floor();\n        var column = frameNum.mod(width);\n        var row = height.sub(frameNum.add(1).div(width).ceil());\n        var scale = countNode.reciprocal();\n        var uvFrameOffset = vec2(column, row);\n        return uvNode.add(uvFrameOffset).mul(scale);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SpriteSheetUVNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a sprite sheet uv node.\n   *\n   * @function\n   * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\n   * @param {Node<vec2>} [uvNode=uv()] - The uv node.\n   * @param {Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\n   * @returns {SpriteSheetUVNode}\n   */\n  var spritesheetUV = /*@__PURE__*/nodeProxy(SpriteSheetUVNode);\n\n  /** @module TriplanarTexturesNode **/\n\n  /**\n   * Can be used for triplanar texture mapping.\n   *\n   * ```js\n   * material.colorNode = triplanarTexture( texture( diffuseMap ) );\n   * ```\n   *\n   * @augments Node\n   */\n  var TriplanarTexturesNode = exports.TriplanarTexturesNode = /*#__PURE__*/function (_Node41) {\n    /**\n     * Constructs a new triplanar textures node.\n     *\n     * @param {Node} textureXNode - First texture node.\n     * @param {Node?} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\n     * @param {Node?} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\n     * @param {Node<float>?} [scaleNode=float(1)] - The scale node.\n     * @param {Node<vec3>?} [positionNode=positionLocal] - Vertex positions in local space.\n     * @param {Node<vec3>?} [normalNode=normalLocal] - Normals in local space.\n     */\n    function TriplanarTexturesNode(textureXNode) {\n      var _this129;\n      var textureYNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var textureZNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var scaleNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : float(1);\n      var positionNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : positionLocal;\n      var normalNode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : normalLocal;\n      (0, _classCallCheck2.default)(this, TriplanarTexturesNode);\n      _this129 = _callSuper(this, TriplanarTexturesNode, ['vec4']);\n\n      /**\n       * First texture node.\n       *\n       * @type {Node}\n       */\n      _this129.textureXNode = textureXNode;\n\n      /**\n       * Second texture node. When not set, the shader will sample from `textureXNode` instead.\n       *\n       * @type {Node}\n       * @default null\n       */\n      _this129.textureYNode = textureYNode;\n\n      /**\n       * Third texture node. When not set, the shader will sample from `textureXNode` instead.\n       *\n       * @type {Node}\n       * @default null\n       */\n      _this129.textureZNode = textureZNode;\n\n      /**\n       * The scale node.\n       *\n       * @type {Node<float>}\n       * @default float(1)\n       */\n      _this129.scaleNode = scaleNode;\n\n      /**\n       * Vertex positions in local space.\n       *\n       * @type {Node<vec3>}\n       * @default positionLocal\n       */\n      _this129.positionNode = positionNode;\n\n      /**\n       * Normals in local space.\n       *\n       * @type {Node<vec3>}\n       * @default normalLocal\n       */\n      _this129.normalNode = normalNode;\n      return _this129;\n    }\n    (0, _inherits2.default)(TriplanarTexturesNode, _Node41);\n    return (0, _createClass2.default)(TriplanarTexturesNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var textureXNode = this.textureXNode,\n          textureYNode = this.textureYNode,\n          textureZNode = this.textureZNode,\n          scaleNode = this.scaleNode,\n          positionNode = this.positionNode,\n          normalNode = this.normalNode;\n\n        // Ref: https://github.com/keijiro/StandardTriplanar\n\n        // Blending factor of triplanar mapping\n        var bf = normalNode.abs().normalize();\n        bf = bf.div(bf.dot(vec3(1.0)));\n\n        // Triplanar mapping\n        var tx = positionNode.yz.mul(scaleNode);\n        var ty = positionNode.zx.mul(scaleNode);\n        var tz = positionNode.xy.mul(scaleNode);\n\n        // Base color\n        var textureX = textureXNode.value;\n        var textureY = textureYNode !== null ? textureYNode.value : textureX;\n        var textureZ = textureZNode !== null ? textureZNode.value : textureX;\n        var cx = texture(textureX, tx).mul(bf.x);\n        var cy = texture(textureY, ty).mul(bf.y);\n        var cz = texture(textureZ, tz).mul(bf.z);\n        return add(cx, cy, cz);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'TriplanarTexturesNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a triplanar textures node.\n   *\n   * @function\n   * @param {Node} textureXNode - First texture node.\n   * @param {Node?} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\n   * @param {Node?} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\n   * @param {Node<float>?} [scaleNode=float(1)] - The scale node.\n   * @param {Node<vec3>?} [positionNode=positionLocal] - Vertex positions in local space.\n   * @param {Node<vec3>?} [normalNode=normalLocal] - Normals in local space.\n   * @returns {TriplanarTexturesNode}\n   */\n  var triplanarTextures = /*@__PURE__*/nodeProxy(TriplanarTexturesNode);\n\n  /**\n   * TSL function for creating a triplanar textures node.\n   *\n   * @function\n   * @param {Node} textureXNode - First texture node.\n   * @param {Node?} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\n   * @param {Node?} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\n   * @param {Node<float>?} [scaleNode=float(1)] - The scale node.\n   * @param {Node<vec3>?} [positionNode=positionLocal] - Vertex positions in local space.\n   * @param {Node<vec3>?} [normalNode=normalLocal] - Normals in local space.\n   * @returns {TriplanarTexturesNode}\n   */\n  var triplanarTexture = function triplanarTexture() {\n    return triplanarTextures.apply(void 0, arguments);\n  };\n\n  /** @module ReflectorNode **/\n\n  var _reflectorPlane = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Plane)();\n  var _normal = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n  var _reflectorWorldPosition = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n  var _cameraWorldPosition = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n  var _rotationMatrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n  var _lookAtPosition = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(0, 0, -1);\n  var clipPlane = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n  var _view = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n  var _target = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n  var _q = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n  var _size$2 = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n  var _defaultRT = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)();\n  var _defaultUV = screenUV.flipX();\n  _defaultRT.depthTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)(1, 1);\n  var _inReflector = false;\n\n  /**\n   * This node can be used to implement mirror-like flat reflective surfaces.\n   *\n   * ```js\n   * const groundReflector = reflector();\n   * material.colorNode = groundReflector;\n   *\n   * const plane = new Mesh( geometry, material );\n   * plane.add( groundReflector.target );\n   * ```\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var ReflectorNode = exports.ReflectorNode = /*#__PURE__*/function (_TextureNode4) {\n    /**\n     * Constructs a new reflector node.\n     *\n     * @param {Object} [parameters={}] - An object holding configuration parameters.\n     * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\n     * @param {Number} [parameters.resolution=1] - The resolution scale.\n     * @param {Boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\n     * @param {Boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\n     * @param {Boolean} [parameters.depth=false] - Whether depth data should be generated or not.\n     * @param {TextureNode} [parameters.defaultTexture] - The default texture node.\n     * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.\n     */\n    function ReflectorNode() {\n      var _this130;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, ReflectorNode);\n      _this130 = _callSuper(this, ReflectorNode, [parameters.defaultTexture || _defaultRT.texture, _defaultUV]);\n\n      /**\n       * A reference to the internal reflector base node which holds the actual implementation.\n       *\n       * @private\n       * @type {ReflectorBaseNode?}\n       * @default null\n       */\n      _this130._reflectorBaseNode = parameters.reflector || new ReflectorBaseNode(_this130, parameters);\n\n      /**\n       * A reference to the internal depth node.\n       *\n       * @private\n       * @type {Node?}\n       * @default null\n       */\n      _this130._depthNode = null;\n      _this130.setUpdateMatrix(false);\n      return _this130;\n    }\n\n    /**\n     * A reference to the internal reflector node.\n     *\n     * @type {ReflectorBaseNode}\n     */\n    (0, _inherits2.default)(ReflectorNode, _TextureNode4);\n    return (0, _createClass2.default)(ReflectorNode, [{\n      key: \"reflector\",\n      get: function get() {\n        return this._reflectorBaseNode;\n      }\n\n      /**\n       * A reference to 3D object the reflector is linked to.\n       *\n       * @type {Object3D}\n       */\n    }, {\n      key: \"target\",\n      get: function get() {\n        return this._reflectorBaseNode.target;\n      }\n\n      /**\n       * Returns a node representing the mirror's depth. That can be used\n       * to implement more advanced reflection effects like distance attenuation.\n       *\n       * @return {Node} The depth node.\n       */\n    }, {\n      key: \"getDepthNode\",\n      value: function getDepthNode() {\n        if (this._depthNode === null) {\n          if (this._reflectorBaseNode.depth !== true) {\n            throw new Error('THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ');\n          }\n          this._depthNode = nodeObject(new ReflectorNode({\n            defaultTexture: _defaultRT.depthTexture,\n            reflector: this._reflectorBaseNode\n          }));\n        }\n        return this._depthNode;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        // ignore if used in post-processing\n        if (!builder.object.isQuadMesh) this._reflectorBaseNode.build(builder);\n        return _superPropGet(ReflectorNode, \"setup\", this, 3)([builder]);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var texture = new this.constructor(this.reflectorNode);\n        texture._reflectorBaseNode = this._reflectorBaseNode;\n        return texture;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ReflectorNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * Holds the actual implementation of the reflector.\n   *\n   * TODO: Explain why `ReflectorBaseNode`. Originally the entire logic was implemented\n   * in `ReflectorNode`, see #29619.\n   *\n   * @private\n   * @augments Node\n   */\n  var ReflectorBaseNode = /*#__PURE__*/function (_Node42) {\n    /**\n     * Constructs a new reflector base node.\n     *\n     * @param {TextureNode} textureNode - Represents the rendered reflections as a texture node.\n     * @param {Object} [parameters={}] - An object holding configuration parameters.\n     * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\n     * @param {Number} [parameters.resolution=1] - The resolution scale.\n     * @param {Boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\n     * @param {Boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\n     * @param {Boolean} [parameters.depth=false] - Whether depth data should be generated or not.\n     */\n    function ReflectorBaseNode(textureNode) {\n      var _this131;\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, ReflectorBaseNode);\n      _this131 = _callSuper(this, ReflectorBaseNode);\n      var _parameters$target = parameters.target,\n        target = _parameters$target === void 0 ? new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Object3D)() : _parameters$target,\n        _parameters$resolutio = parameters.resolution,\n        resolution = _parameters$resolutio === void 0 ? 1 : _parameters$resolutio,\n        _parameters$generateM = parameters.generateMipmaps,\n        generateMipmaps = _parameters$generateM === void 0 ? false : _parameters$generateM,\n        _parameters$bounces = parameters.bounces,\n        bounces = _parameters$bounces === void 0 ? true : _parameters$bounces,\n        _parameters$depth = parameters.depth,\n        depth = _parameters$depth === void 0 ? false : _parameters$depth;\n\n      /**\n       * Represents the rendered reflections as a texture node.\n       *\n       * @type {TextureNode}\n       */\n      _this131.textureNode = textureNode;\n\n      /**\n       * The 3D object the reflector is linked to.\n       *\n       * @type {Object3D}\n       * @default {new Object3D()}\n       */\n      _this131.target = target;\n\n      /**\n       * The resolution scale.\n       *\n       * @type {Number}\n       * @default {1}\n       */\n      _this131.resolution = resolution;\n\n      /**\n       * Whether mipmaps should be generated or not.\n       *\n       * @type {Boolean}\n       * @default {false}\n       */\n      _this131.generateMipmaps = generateMipmaps;\n\n      /**\n       * Whether reflectors can render other reflector nodes or not.\n       *\n       * @type {Boolean}\n       * @default {true}\n       */\n      _this131.bounces = bounces;\n\n      /**\n       * Whether depth data should be generated or not.\n       *\n       * @type {Boolean}\n       * @default {false}\n       */\n      _this131.depth = depth;\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.RENDER` when {@link ReflectorBaseNode#bounces}\n       * is `true`. Otherwise it's `NodeUpdateType.FRAME`.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this131.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;\n\n      /**\n       * Weak map for managing virtual cameras.\n       *\n       * @type {WeakMap<Camera, Camera>}\n       */\n      _this131.virtualCameras = new WeakMap();\n\n      /**\n       * Weak map for managing render targets.\n       *\n       * @type {WeakMap<Camera, RenderTarget>}\n       */\n      _this131.renderTargets = new WeakMap();\n      return _this131;\n    }\n\n    /**\n     * Updates the resolution of the internal render target.\n     *\n     * @private\n     * @param {RenderTarget} renderTarget - The render target to resize.\n     * @param {Renderer} renderer - The renderer that is used to determine the new size.\n     */\n    (0, _inherits2.default)(ReflectorBaseNode, _Node42);\n    return (0, _createClass2.default)(ReflectorBaseNode, [{\n      key: \"_updateResolution\",\n      value: function _updateResolution(renderTarget, renderer) {\n        var resolution = this.resolution;\n        renderer.getDrawingBufferSize(_size$2);\n        renderTarget.setSize(Math.round(_size$2.width * resolution), Math.round(_size$2.height * resolution));\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this._updateResolution(_defaultRT, builder.renderer);\n        return _superPropGet(ReflectorBaseNode, \"setup\", this, 3)([builder]);\n      }\n\n      /**\n       * Returns a virtual camera for the given camera. The virtual camera is used to\n       * render the scene from the reflector's view so correct reflections can be produced.\n       *\n       * @param {Camera} camera - The scene's camera.\n       * @return {Camera} The corresponding virtual camera.\n       */\n    }, {\n      key: \"getVirtualCamera\",\n      value: function getVirtualCamera(camera) {\n        var virtualCamera = this.virtualCameras.get(camera);\n        if (virtualCamera === undefined) {\n          virtualCamera = camera.clone();\n          this.virtualCameras.set(camera, virtualCamera);\n        }\n        return virtualCamera;\n      }\n\n      /**\n       * Returns a render target for the given camera. The reflections are rendered\n       * into this render target.\n       *\n       * @param {Camera} camera - The scene's camera.\n       * @return {RenderTarget} The render target.\n       */\n    }, {\n      key: \"getRenderTarget\",\n      value: function getRenderTarget(camera) {\n        var renderTarget = this.renderTargets.get(camera);\n        if (renderTarget === undefined) {\n          renderTarget = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)(0, 0, {\n            type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType\n          });\n          if (this.generateMipmaps === true) {\n            renderTarget.texture.minFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipMapLinearFilter;\n            renderTarget.texture.generateMipmaps = true;\n          }\n          if (this.depth === true) {\n            renderTarget.depthTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)();\n          }\n          this.renderTargets.set(camera, renderTarget);\n        }\n        return renderTarget;\n      }\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(frame) {\n        if (this.bounces === false && _inReflector) return false;\n        _inReflector = true;\n        var scene = frame.scene,\n          camera = frame.camera,\n          renderer = frame.renderer,\n          material = frame.material;\n        var target = this.target;\n        var virtualCamera = this.getVirtualCamera(camera);\n        var renderTarget = this.getRenderTarget(virtualCamera);\n        renderer.getDrawingBufferSize(_size$2);\n        this._updateResolution(renderTarget, renderer);\n\n        //\n\n        _reflectorWorldPosition.setFromMatrixPosition(target.matrixWorld);\n        _cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n        _rotationMatrix.extractRotation(target.matrixWorld);\n        _normal.set(0, 0, 1);\n        _normal.applyMatrix4(_rotationMatrix);\n        _view.subVectors(_reflectorWorldPosition, _cameraWorldPosition);\n\n        // Avoid rendering when reflector is facing away\n\n        if (_view.dot(_normal) > 0) return;\n        _view.reflect(_normal).negate();\n        _view.add(_reflectorWorldPosition);\n        _rotationMatrix.extractRotation(camera.matrixWorld);\n        _lookAtPosition.set(0, 0, -1);\n        _lookAtPosition.applyMatrix4(_rotationMatrix);\n        _lookAtPosition.add(_cameraWorldPosition);\n        _target.subVectors(_reflectorWorldPosition, _lookAtPosition);\n        _target.reflect(_normal).negate();\n        _target.add(_reflectorWorldPosition);\n\n        //\n\n        virtualCamera.coordinateSystem = camera.coordinateSystem;\n        virtualCamera.position.copy(_view);\n        virtualCamera.up.set(0, 1, 0);\n        virtualCamera.up.applyMatrix4(_rotationMatrix);\n        virtualCamera.up.reflect(_normal);\n        virtualCamera.lookAt(_target);\n        virtualCamera.near = camera.near;\n        virtualCamera.far = camera.far;\n        virtualCamera.updateMatrixWorld();\n        virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n\n        // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n        // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n        _reflectorPlane.setFromNormalAndCoplanarPoint(_normal, _reflectorWorldPosition);\n        _reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n        clipPlane.set(_reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant);\n        var projectionMatrix = virtualCamera.projectionMatrix;\n        _q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n        _q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n        _q.z = -1.0;\n        _q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n\n        // Calculate the scaled plane vector\n        clipPlane.multiplyScalar(1.0 / clipPlane.dot(_q));\n        var clipBias = 0;\n\n        // Replacing the third row of the projection matrix\n        projectionMatrix.elements[2] = clipPlane.x;\n        projectionMatrix.elements[6] = clipPlane.y;\n        projectionMatrix.elements[10] = renderer.coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem ? clipPlane.z - clipBias : clipPlane.z + 1.0 - clipBias;\n        projectionMatrix.elements[14] = clipPlane.w;\n\n        //\n\n        this.textureNode.value = renderTarget.texture;\n        if (this.depth === true) {\n          this.textureNode.getDepthNode().value = renderTarget.depthTexture;\n        }\n        material.visible = false;\n        var currentRenderTarget = renderer.getRenderTarget();\n        var currentMRT = renderer.getMRT();\n        var currentAutoClear = renderer.autoClear;\n        renderer.setMRT(null);\n        renderer.setRenderTarget(renderTarget);\n        renderer.autoClear = true;\n        renderer.render(scene, virtualCamera);\n        renderer.setMRT(currentMRT);\n        renderer.setRenderTarget(currentRenderTarget);\n        renderer.autoClear = currentAutoClear;\n        material.visible = true;\n        _inReflector = false;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ReflectorBaseNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a reflector node.\n   *\n   * @function\n   * @param {Object} [parameters={}] - An object holding configuration parameters.\n   * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\n   * @param {Number} [parameters.resolution=1] - The resolution scale.\n   * @param {Boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\n   * @param {Boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\n   * @param {Boolean} [parameters.depth=false] - Whether depth data should be generated or not.\n   * @param {TextureNode} [parameters.defaultTexture] - The default texture node.\n   * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.\n   * @returns {ReflectorNode}\n   */\n  var reflector = function reflector(parameters) {\n    return nodeObject(new ReflectorNode(parameters));\n  };\n  var _camera = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OrthographicCamera)(-1, 1, 1, -1, 0, 1);\n\n  /**\n   * The purpose of this special geometry is to fill the entire viewport with a single triangle.\n   *\n   * Reference: {@link https://github.com/mrdoob/three.js/pull/21358}\n   *\n   * @private\n   * @augments BufferGeometry\n   */\n  var QuadGeometry = /*#__PURE__*/function (_BufferGeometry) {\n    /**\n     * Constructs a new quad geometry.\n     *\n     * @param {Boolean} [flipY=false] - Whether the uv coordinates should be flipped along the vertical axis or not.\n     */\n    function QuadGeometry() {\n      var _this132;\n      var flipY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      (0, _classCallCheck2.default)(this, QuadGeometry);\n      _this132 = _callSuper(this, QuadGeometry);\n      var uv = flipY === false ? [0, -1, 0, 1, 2, 1] : [0, 2, 0, 0, 2, 0];\n      _this132.setAttribute('position', new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Float32BufferAttribute)([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n      _this132.setAttribute('uv', new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Float32BufferAttribute)(uv, 2));\n      return _this132;\n    }\n    (0, _inherits2.default)(QuadGeometry, _BufferGeometry);\n    return (0, _createClass2.default)(QuadGeometry);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferGeometry);\n  var _geometry = /*@__PURE__*/new QuadGeometry();\n\n  /**\n   * This module is a helper for passes which need to render a full\n   * screen effect which is quite common in context of post processing.\n   *\n   * The intended usage is to reuse a single quad mesh for rendering\n   * subsequent passes by just reassigning the `material` reference.\n   *\n   * @augments BufferGeometry\n   */\n  var QuadMesh = exports.QuadMesh = /*#__PURE__*/function (_Mesh) {\n    /**\n     * Constructs a new quad mesh.\n     *\n     * @param {Material?} [material=null] - The material to render the quad mesh with.\n     */\n    function QuadMesh() {\n      var _this133;\n      var material = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, QuadMesh);\n      _this133 = _callSuper(this, QuadMesh, [_geometry, material]);\n\n      /**\n       * The camera to render the quad mesh with.\n       *\n       * @type {OrthographicCamera}\n       * @readonly\n       */\n      _this133.camera = _camera;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this133.isQuadMesh = true;\n      return _this133;\n    }\n\n    /**\n     * Async version of `render()`.\n     *\n     * @async\n     * @param {Renderer} renderer - The renderer.\n     * @return {Promise} A Promise that resolves when the render has been finished.\n     */\n    (0, _inherits2.default)(QuadMesh, _Mesh);\n    return (0, _createClass2.default)(QuadMesh, [{\n      key: \"renderAsync\",\n      value: (function () {\n        var _renderAsync = (0, _asyncToGenerator2.default)(function* (renderer) {\n          return renderer.renderAsync(this, _camera);\n        });\n        function renderAsync(_x) {\n          return _renderAsync.apply(this, arguments);\n        }\n        return renderAsync;\n      }()\n      /**\n       * Renders the quad mesh\n       *\n       * @param {Renderer} renderer - The renderer.\n       */\n      )\n    }, {\n      key: \"render\",\n      value: function render(renderer) {\n        renderer.render(this, _camera);\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh);\n  /** @module RTTNode **/\n  var _size$1 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n\n  /**\n   * `RTTNode` takes another node and uses it with a `QuadMesh` to render into a texture (RTT).\n   * This module is especially relevant in context of post processing where certain nodes require\n   * texture input for their effects. With the helper function `convertToTexture()` which is based\n   * on this module, the node system can automatically ensure texture input if required.\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var RTTNode = exports.RTTNode = /*#__PURE__*/function (_TextureNode5) {\n    /**\n     * Constructs a new RTT node.\n     *\n     * @param {Node} node - The node to render a texture with.\n     * @param {Number?} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\n     * @param {Number?} [height=null] - The height of the internal render target.\n     * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\n     */\n    function RTTNode(node) {\n      var _this134;\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType\n      };\n      (0, _classCallCheck2.default)(this, RTTNode);\n      var renderTarget = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)(width, height, options);\n      _this134 = _callSuper(this, RTTNode, [renderTarget.texture, uv()]);\n\n      /**\n       * The node to render a texture with.\n       *\n       * @type {Node}\n       */\n      _this134.node = node;\n\n      /**\n       * The width of the internal render target.\n       * If not width is applied, the render target is automatically resized.\n       *\n       * @type {Number?}\n       * @default null\n       */\n      _this134.width = width;\n\n      /**\n       * The height of the internal render target.\n       *\n       * @type {Number?}\n       * @default null\n       */\n      _this134.height = height;\n\n      /**\n       * The pixel ratio\n       *\n       * @type {Number}\n       * @default 1\n       */\n      _this134.pixelRatio = 1;\n\n      /**\n       * The render target\n       *\n       * @type {RenderTarget}\n       */\n      _this134.renderTarget = renderTarget;\n\n      /**\n       * Whether the texture requires an update or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this134.textureNeedsUpdate = true;\n\n      /**\n       * Whether the texture should automatically be updated or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this134.autoUpdate = true;\n\n      /**\n       * The node which is used with the quad mesh for RTT.\n       *\n       * @private\n       * @type {Node}\n       * @default null\n       */\n      _this134._rttNode = null;\n\n      /**\n       * The internal quad mesh for RTT.\n       *\n       * @private\n       * @type {QuadMesh}\n       */\n      _this134._quadMesh = new QuadMesh(new NodeMaterial());\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.RENDER` since the node updates\n       * the texture once per render in its {@link RTTNode#updateBefore} method.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this134.updateBeforeType = NodeUpdateType.RENDER;\n      return _this134;\n    }\n\n    /**\n     * Whether the internal render target should automatically be resized or not.\n     *\n     * @type {Boolean}\n     * @readonly\n     * @default true\n     */\n    (0, _inherits2.default)(RTTNode, _TextureNode5);\n    return (0, _createClass2.default)(RTTNode, [{\n      key: \"autoSize\",\n      get: function get() {\n        return this.width === null;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this._rttNode = this.node.context(builder.getSharedContext());\n        this._quadMesh.material.name = 'RTT';\n        this._quadMesh.material.needsUpdate = true;\n        return _superPropGet(RTTNode, \"setup\", this, 3)([builder]);\n      }\n\n      /**\n       * Sets the size of the internal render target\n       *\n       * @param {Number} width - The width to set.\n       * @param {Number} height - The width to set.\n       */\n    }, {\n      key: \"setSize\",\n      value: function setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        var effectiveWidth = width * this.pixelRatio;\n        var effectiveHeight = height * this.pixelRatio;\n        this.renderTarget.setSize(effectiveWidth, effectiveHeight);\n        this.textureNeedsUpdate = true;\n      }\n\n      /**\n       * Sets the pixel ratio. This will also resize the render target.\n       *\n       * @param {Number} pixelRatio - The pixel ratio to set.\n       */\n    }, {\n      key: \"setPixelRatio\",\n      value: function setPixelRatio(pixelRatio) {\n        this.pixelRatio = pixelRatio;\n        this.setSize(this.width, this.height);\n      }\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(_ref133) {\n        var renderer = _ref133.renderer;\n        if (this.textureNeedsUpdate === false && this.autoUpdate === false) return;\n        this.textureNeedsUpdate = false;\n\n        //\n\n        if (this.autoSize === true) {\n          this.pixelRatio = renderer.getPixelRatio();\n          var size = renderer.getSize(_size$1);\n          this.setSize(size.width, size.height);\n        }\n\n        //\n\n        this._quadMesh.material.fragmentNode = this._rttNode;\n\n        //\n\n        var currentRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.renderTarget);\n        this._quadMesh.render(renderer);\n        renderer.setRenderTarget(currentRenderTarget);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var newNode = new TextureNode(this.value, this.uvNode, this.levelNode);\n        newNode.sampler = this.sampler;\n        newNode.referenceNode = this;\n        return newNode;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RTTNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * TSL function for creating a RTT node.\n   *\n   * @function\n   * @param {Node} node - The node to render a texture with.\n   * @param {Number?} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\n   * @param {Number?} [height=null] - The height of the internal render target.\n   * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\n   * @returns {RTTNode}\n   */\n  var rtt = function rtt(node) {\n    for (var _len21 = arguments.length, params = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {\n      params[_key21 - 1] = arguments[_key21];\n    }\n    return nodeObject((0, _construct2.default)(RTTNode, [nodeObject(node)].concat(params)));\n  };\n\n  /**\n   * TSL function for converting nodes to textures nodes.\n   *\n   * @function\n   * @param {Node} node - The node to render a texture with.\n   * @param {Number?} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\n   * @param {Number?} [height=null] - The height of the internal render target.\n   * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\n   * @returns {RTTNode}\n   */\n  var convertToTexture = function convertToTexture(node) {\n    if (node.isTextureNode) return node;\n    if (node.isPassNode) return node.getTextureNode();\n    for (var _len22 = arguments.length, params = new Array(_len22 > 1 ? _len22 - 1 : 0), _key22 = 1; _key22 < _len22; _key22++) {\n      params[_key22 - 1] = arguments[_key22];\n    }\n    return rtt.apply(void 0, [node].concat(params));\n  };\n\n  /** @module PostProcessingUtils **/\n\n  /**\n   * Computes a position in view space based on a fragment's screen position expressed as uv coordinates, the fragments\n   * depth value and the camera's inverse projection matrix.\n   *\n   * @method\n   * @param {Node<vec2>} screenPosition - The fragment's screen position expressed as uv coordinates.\n   * @param {Node<float>} depth - The fragment's depth value.\n   * @param {Node<mat4>} projectionMatrixInverse - The camera's inverse projection matrix.\n   * @return {Node<vec3>} The fragments position in view space.\n   */\n  var getViewPosition = /*@__PURE__*/Fn(function (_ref134, builder) {\n    var _ref135 = (0, _slicedToArray2.default)(_ref134, 3),\n      screenPosition = _ref135[0],\n      depth = _ref135[1],\n      projectionMatrixInverse = _ref135[2];\n    var clipSpacePosition;\n    if (builder.renderer.coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem) {\n      screenPosition = vec2(screenPosition.x, screenPosition.y.oneMinus()).mul(2.0).sub(1.0);\n      clipSpacePosition = vec4(vec3(screenPosition, depth), 1.0);\n    } else {\n      clipSpacePosition = vec4(vec3(screenPosition.x, screenPosition.y.oneMinus(), depth).mul(2.0).sub(1.0), 1.0);\n    }\n    var viewSpacePosition = vec4(projectionMatrixInverse.mul(clipSpacePosition));\n    return viewSpacePosition.xyz.div(viewSpacePosition.w);\n  });\n\n  /**\n   * Computes a screen position expressed as uv coordinates based on a fragment's position in view space\n   * and the camera's projection matrix\n   *\n   * @method\n   * @param {Node<vec3>} viewPosition - The fragments position in view space.\n   * @param {Node<mat4>} projectionMatrix - The camera's projection matrix.\n   * @return {Node<vec2>} The fragment's screen position expressed as uv coordinates.\n   */\n  var getScreenPosition = /*@__PURE__*/Fn(function (_ref136) {\n    var _ref137 = (0, _slicedToArray2.default)(_ref136, 2),\n      viewPosition = _ref137[0],\n      projectionMatrix = _ref137[1];\n    var sampleClipPos = projectionMatrix.mul(vec4(viewPosition, 1.0));\n    var sampleUv = sampleClipPos.xy.div(sampleClipPos.w).mul(0.5).add(0.5).toVar();\n    return vec2(sampleUv.x, sampleUv.y.oneMinus());\n  });\n\n  /**\n   * Computes a normal vector based on depth data. Can be used as a fallback when no normal render\n   * target is available or if flat surface normals are required.\n   *\n   * @method\n   * @param {Node<vec2>} uv - The texture coordinate.\n   * @param {DepthTexture} depthTexture - The depth texture.\n   * @param {Node<mat4>} projectionMatrixInverse - The camera's inverse projection matrix.\n   * @return {Node<vec3>} The computed normal vector.\n   */\n  var getNormalFromDepth = /*@__PURE__*/Fn(function (_ref138) {\n    var _ref139 = (0, _slicedToArray2.default)(_ref138, 3),\n      uv = _ref139[0],\n      depthTexture = _ref139[1],\n      projectionMatrixInverse = _ref139[2];\n    var size = textureSize(textureLoad(depthTexture));\n    var p = ivec2(uv.mul(size)).toVar();\n    var c0 = textureLoad(depthTexture, p).toVar();\n    var l2 = textureLoad(depthTexture, p.sub(ivec2(2, 0))).toVar();\n    var l1 = textureLoad(depthTexture, p.sub(ivec2(1, 0))).toVar();\n    var r1 = textureLoad(depthTexture, p.add(ivec2(1, 0))).toVar();\n    var r2 = textureLoad(depthTexture, p.add(ivec2(2, 0))).toVar();\n    var b2 = textureLoad(depthTexture, p.add(ivec2(0, 2))).toVar();\n    var b1 = textureLoad(depthTexture, p.add(ivec2(0, 1))).toVar();\n    var t1 = textureLoad(depthTexture, p.sub(ivec2(0, 1))).toVar();\n    var t2 = textureLoad(depthTexture, p.sub(ivec2(0, 2))).toVar();\n    var dl = abs(sub(float(2).mul(l1).sub(l2), c0)).toVar();\n    var dr = abs(sub(float(2).mul(r1).sub(r2), c0)).toVar();\n    var db = abs(sub(float(2).mul(b1).sub(b2), c0)).toVar();\n    var dt = abs(sub(float(2).mul(t1).sub(t2), c0)).toVar();\n    var ce = getViewPosition(uv, c0, projectionMatrixInverse).toVar();\n    var dpdx = dl.lessThan(dr).select(ce.sub(getViewPosition(uv.sub(vec2(float(1).div(size.x), 0)), l1, projectionMatrixInverse)), ce.negate().add(getViewPosition(uv.add(vec2(float(1).div(size.x), 0)), r1, projectionMatrixInverse)));\n    var dpdy = db.lessThan(dt).select(ce.sub(getViewPosition(uv.add(vec2(0, float(1).div(size.y))), b1, projectionMatrixInverse)), ce.negate().add(getViewPosition(uv.sub(vec2(0, float(1).div(size.y))), t1, projectionMatrixInverse)));\n    return normalize(cross(dpdx, dpdy));\n  });\n\n  /**\n   * This special type of instanced buffer attribute is intended for compute shaders.\n   * In earlier three.js versions it was only possible to update attribute data\n   * on the CPU via JavaScript and then upload the data to the GPU. With the\n   * new material system and renderer it is now possible to use compute shaders\n   * to compute the data for an attribute more efficiently on the GPU.\n   *\n   * The idea is to create an instance of this class and provide it as an input\n   * to {@link module:StorageBufferNode}.\n   *\n   * Note: This type of buffer attribute can only be used with `WebGPURenderer`.\n   *\n   * @augments InstancedBufferAttribute\n   */\n  var StorageInstancedBufferAttribute = exports.StorageInstancedBufferAttribute = /*#__PURE__*/function (_InstancedBufferAttri) {\n    /**\n     * Constructs a new storage instanced buffer attribute.\n     *\n     * @param {Number|TypedArray} count - The item count. It is also valid to pass a typed array as an argument.\n     * The subsequent parameters are then obsolete.\n     * @param {Number} itemSize - The item size.\n     * @param {TypedArray.contructor} [typeClass=Float32Array] - A typed array constructor.\n     */\n    function StorageInstancedBufferAttribute(count, itemSize) {\n      var _this135;\n      var typeClass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Float32Array;\n      (0, _classCallCheck2.default)(this, StorageInstancedBufferAttribute);\n      var array = ArrayBuffer.isView(count) ? count : new typeClass(count * itemSize);\n      _this135 = _callSuper(this, StorageInstancedBufferAttribute, [array, itemSize]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this135.isStorageInstancedBufferAttribute = true;\n      return _this135;\n    }\n    (0, _inherits2.default)(StorageInstancedBufferAttribute, _InstancedBufferAttri);\n    return (0, _createClass2.default)(StorageInstancedBufferAttribute);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedBufferAttribute);\n  /**\n   * This special type of buffer attribute is intended for compute shaders.\n   * In earlier three.js versions it was only possible to update attribute data\n   * on the CPU via JavaScript and then upload the data to the GPU. With the\n   * new material system and renderer it is now possible to use compute shaders\n   * to compute the data for an attribute more efficiently on the GPU.\n   *\n   * The idea is to create an instance of this class and provide it as an input\n   * to {@link module:StorageBufferNode}.\n   *\n   * Note: This type of buffer attribute can only be used with `WebGPURenderer`.\n   *\n   * @augments BufferAttribute\n   */\n  var StorageBufferAttribute = exports.StorageBufferAttribute = /*#__PURE__*/function (_BufferAttribute) {\n    /**\n     * Constructs a new storage buffer attribute.\n     *\n     * @param {Number|TypedArray} count - The item count. It is also valid to pass a typed array as an argument.\n     * The subsequent parameters are then obsolete.\n     * @param {Number} itemSize - The item size.\n     * @param {TypedArray.contructor} [typeClass=Float32Array] - A typed array constructor.\n     */\n    function StorageBufferAttribute(count, itemSize) {\n      var _this136;\n      var typeClass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Float32Array;\n      (0, _classCallCheck2.default)(this, StorageBufferAttribute);\n      var array = ArrayBuffer.isView(count) ? count : new typeClass(count * itemSize);\n      _this136 = _callSuper(this, StorageBufferAttribute, [array, itemSize]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this136.isStorageBufferAttribute = true;\n      return _this136;\n    }\n    (0, _inherits2.default)(StorageBufferAttribute, _BufferAttribute);\n    return (0, _createClass2.default)(StorageBufferAttribute);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferAttribute);\n  /** @module StorageArrayElementNode **/\n  /**\n   * This class enables element access on instances of {@link StorageBufferNode}.\n   * In most cases, it is indirectly used when accessing elements with the\n   * {@link StorageBufferNode#element} method.\n   *\n   * ```js\n   * const position = positionStorage.element( instanceIndex );\n   * ```\n   *\n   * @augments ArrayElementNode\n   */\n  var StorageArrayElementNode = exports.StorageArrayElementNode = /*#__PURE__*/function (_ArrayElementNode4) {\n    /**\n     * Constructs storage buffer element node.\n     *\n     * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\n     * @param {Node} indexNode - The index node that defines the element access.\n     */\n    function StorageArrayElementNode(storageBufferNode, indexNode) {\n      var _this137;\n      (0, _classCallCheck2.default)(this, StorageArrayElementNode);\n      _this137 = _callSuper(this, StorageArrayElementNode, [storageBufferNode, indexNode]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this137.isStorageArrayElementNode = true;\n      return _this137;\n    }\n\n    /**\n     * The storage buffer node.\n     *\n     * @param {Node} value\n     * @type {StorageBufferNode}\n     */\n    (0, _inherits2.default)(StorageArrayElementNode, _ArrayElementNode4);\n    return (0, _createClass2.default)(StorageArrayElementNode, [{\n      key: \"storageBufferNode\",\n      get: function get() {\n        return this.node;\n      },\n      set: function set(value) {\n        this.node = value;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        if (builder.isAvailable('storageBuffer') === false) {\n          if (this.node.isPBO === true) {\n            builder.setupPBO(this.node);\n          }\n        }\n        return _superPropGet(StorageArrayElementNode, \"setup\", this, 3)([builder]);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var snippet;\n        var isAssignContext = builder.context.assign;\n\n        //\n\n        if (builder.isAvailable('storageBuffer') === false) {\n          if (this.node.isPBO === true && isAssignContext !== true && (this.node.value.isInstancedBufferAttribute || builder.shaderStage !== 'compute')) {\n            snippet = builder.generatePBO(this);\n          } else {\n            snippet = this.node.build(builder);\n          }\n        } else {\n          snippet = _superPropGet(StorageArrayElementNode, \"generate\", this, 3)([builder]);\n        }\n        if (isAssignContext !== true) {\n          var type = this.getNodeType(builder);\n          snippet = builder.format(snippet, type, output);\n        }\n        return snippet;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'StorageArrayElementNode';\n      }\n    }]);\n  }(ArrayElementNode);\n  /**\n   * TSL function for creating a storage element node.\n   *\n   * @function\n   * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\n   * @param {Node} indexNode - The index node that defines the element access.\n   * @returns {StorageArrayElementNode}\n   */\n  var storageElement = /*@__PURE__*/nodeProxy(StorageArrayElementNode);\n\n  /** @module StorageBufferNode **/\n\n  /**\n   * This node is used in context of compute shaders and allows to define a\n   * storage buffer for data. A typical workflow is to create instances of\n   * this node with the convenience functions `attributeArray()` or `instancedArray()`,\n   * setup up a compute shader that writes into the buffers and then convert\n   * the storage buffers to attribute nodes for rendering.\n   *\n   * ```js\n   * const positionBuffer = instancedArray( particleCount, 'vec3' ); // the storage buffer node\n   *\n   * const computeInit = Fn( () => { // the compute shader\n   *\n   * \tconst position = positionBuffer.element( instanceIndex );\n   *\n   * \t// compute position data\n   *\n   * \tposition.x = 1;\n   * \tposition.y = 1;\n   * \tposition.z = 1;\n   *\n   * } )().compute( particleCount );\n   *\n   * const particleMaterial = new THREE.SpriteNodeMaterial();\n   * particleMaterial.positionNode = positionBuffer.toAttribute();\n   *\n   * renderer.computeAsync( computeInit );\n   *\n   * ```\n   *\n   * @augments BufferNode\n   */\n  var StorageBufferNode = exports.StorageBufferNode = /*#__PURE__*/function (_BufferNode2) {\n    /**\n     * Constructs a new storage buffer node.\n     *\n     * @param {StorageBufferAttribute|StorageInstancedBufferAttribute|BufferAttribute} value - The buffer data.\n     * @param {String?} [bufferType=null] - The buffer type (e.g. `'vec3'`).\n     * @param {Number} [bufferCount=0] - The buffer count.\n     */\n    function StorageBufferNode(value) {\n      var _this138;\n      var bufferType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var bufferCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      (0, _classCallCheck2.default)(this, StorageBufferNode);\n      if (bufferType === null && (value.isStorageBufferAttribute || value.isStorageInstancedBufferAttribute)) {\n        bufferType = _getTypeFromLength(value.itemSize);\n        bufferCount = value.count;\n      }\n      _this138 = _callSuper(this, StorageBufferNode, [value, bufferType, bufferCount]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this138.isStorageBufferNode = true;\n\n      /**\n       * The access type of the texture node.\n       *\n       * @type {String}\n       * @default 'readWrite'\n       */\n      _this138.access = NodeAccess.READ_WRITE;\n\n      /**\n       * Whether the node is atomic or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this138.isAtomic = false;\n\n      /**\n       * Whether the node represents a PBO or not.\n       * Only relevant for WebGL.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this138.isPBO = false;\n\n      /**\n       * A reference to the internal buffer attribute node.\n       *\n       * @type {BufferAttributeNode?}\n       * @default null\n       */\n      _this138._attribute = null;\n\n      /**\n       * A reference to the internal varying node.\n       *\n       * @type {VaryingNode?}\n       * @default null\n       */\n      _this138._varying = null;\n\n      /**\n       * `StorageBufferNode` sets this property to `true` by default.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this138.global = true;\n      if (value.isStorageBufferAttribute !== true && value.isStorageInstancedBufferAttribute !== true) {\n        // TODO: Improve it, possibly adding a new property to the BufferAttribute to identify it as a storage buffer read-only attribute in Renderer\n\n        if (value.isInstancedBufferAttribute) value.isStorageInstancedBufferAttribute = true;else value.isStorageBufferAttribute = true;\n      }\n      return _this138;\n    }\n\n    /**\n     * This method is overwritten since the buffer data might be shared\n     * and thus the hash should be shared as well.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The hash.\n     */\n    (0, _inherits2.default)(StorageBufferNode, _BufferNode2);\n    return (0, _createClass2.default)(StorageBufferNode, [{\n      key: \"getHash\",\n      value: function getHash(builder) {\n        if (this.bufferCount === 0) {\n          var bufferData = builder.globalCache.getData(this.value);\n          if (bufferData === undefined) {\n            bufferData = {\n              node: this\n            };\n            builder.globalCache.setData(this.value, bufferData);\n          }\n          return bufferData.node.uuid;\n        }\n        return this.uuid;\n      }\n\n      /**\n       * Overwrites the default implementation to return a fixed value `'indirectStorageBuffer'` or `'storageBuffer'`.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The input type.\n       */\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return this.value.isIndirectStorageBufferAttribute ? 'indirectStorageBuffer' : 'storageBuffer';\n      }\n\n      /**\n       * Enables element access with the given index node.\n       *\n       * @param {IndexNode} indexNode - The index node.\n       * @return {StorageArrayElementNode} A node representing the element access.\n       */\n    }, {\n      key: \"element\",\n      value: function element(indexNode) {\n        return storageElement(this, indexNode);\n      }\n\n      /**\n       * Defines whether this node is a PBO or not. Only relevant for WebGL.\n       *\n       * @param {Boolean} value - The value so set.\n       * @return {StorageBufferNode} A reference to this node.\n       */\n    }, {\n      key: \"setPBO\",\n      value: function setPBO(value) {\n        this.isPBO = value;\n        return this;\n      }\n\n      /**\n       * Returns the `isPBO` value.\n       *\n       * @return {Boolean} Whether the node represents a PBO or not.\n       */\n    }, {\n      key: \"getPBO\",\n      value: function getPBO() {\n        return this.isPBO;\n      }\n\n      /**\n       * Defines the node access.\n       *\n       * @param {String} value - The node access.\n       * @return {StorageBufferNode} A reference to this node.\n       */\n    }, {\n      key: \"setAccess\",\n      value: function setAccess(value) {\n        this.access = value;\n        return this;\n      }\n\n      /**\n       * Convenience method for configuring a read-only node access.\n       *\n       * @return {StorageBufferNode} A reference to this node.\n       */\n    }, {\n      key: \"toReadOnly\",\n      value: function toReadOnly() {\n        return this.setAccess(NodeAccess.READ_ONLY);\n      }\n\n      /**\n       * Defines whether the node is atomic or not.\n       *\n       * @param {Boolean} value - The atomic flag.\n       * @return {StorageBufferNode} A reference to this node.\n       */\n    }, {\n      key: \"setAtomic\",\n      value: function setAtomic(value) {\n        this.isAtomic = value;\n        return this;\n      }\n\n      /**\n       * Convenience method for making this node atomic.\n       *\n       * @return {StorageBufferNode} A reference to this node.\n       */\n    }, {\n      key: \"toAtomic\",\n      value: function toAtomic() {\n        return this.setAtomic(true);\n      }\n\n      /**\n       * Returns attribute data for this storage buffer node.\n       *\n       * @return {{attribute: BufferAttributeNode, varying: VaryingNode}} The attribute data.\n       */\n    }, {\n      key: \"getAttributeData\",\n      value: function getAttributeData() {\n        if (this._attribute === null) {\n          this._attribute = bufferAttribute(this.value);\n          this._varying = varying(this._attribute);\n        }\n        return {\n          attribute: this._attribute,\n          varying: this._varying\n        };\n      }\n\n      /**\n       * This method is overwritten since the node type from the availability of storage buffers\n       * and the attribute data.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        if (builder.isAvailable('storageBuffer') || builder.isAvailable('indirectStorageBuffer')) {\n          return _superPropGet(StorageBufferNode, \"getNodeType\", this, 3)([builder]);\n        }\n        var _this$getAttributeDat = this.getAttributeData(),\n          attribute = _this$getAttributeDat.attribute;\n        return attribute.getNodeType(builder);\n      }\n\n      /**\n       * Generates the code snippet of the storage buffer node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        if (builder.isAvailable('storageBuffer') || builder.isAvailable('indirectStorageBuffer')) {\n          return _superPropGet(StorageBufferNode, \"generate\", this, 3)([builder]);\n        }\n        var _this$getAttributeDat2 = this.getAttributeData(),\n          attribute = _this$getAttributeDat2.attribute,\n          varying = _this$getAttributeDat2.varying;\n        var output = varying.build(builder);\n        builder.registerTransform(output, attribute);\n        return output;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'StorageBufferNode';\n      }\n    }]);\n  }(BufferNode);\n  /**\n   * TSL function for creating a storage buffer node.\n   *\n   * @function\n   * @param {StorageBufferAttribute|StorageInstancedBufferAttribute|BufferAttribute} value - The buffer data.\n   * @param {String?} [type=null] - The buffer type (e.g. `'vec3'`).\n   * @param {Number} [count=0] - The buffer count.\n   * @returns {StorageBufferNode}\n   */\n  var storage = function storage(value) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    return nodeObject(new StorageBufferNode(value, type, count));\n  };\n  var storageObject = function storageObject(value, type, count) {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"storageObject()\" is deprecated. Use \"storage().setPBO( true )\" instead.');\n    return storage(value, type, count).setPBO(true);\n  };\n\n  /** @module Arrays **/\n\n  /**\n   * TSL function for creating a storage buffer node with a configured `StorageBufferAttribute`.\n   *\n   * @function\n   * @param {Number} count - The data count.\n   * @param {String} [type='float'] - The data type.\n   * @returns {StorageBufferNode}\n   */\n  var attributeArray = function attributeArray(count) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float';\n    var itemSize = getLengthFromType(type);\n    var typedArray = getTypedArrayFromType(type);\n    var buffer = new StorageBufferAttribute(count, itemSize, typedArray);\n    var node = storage(buffer, type, count);\n    return node;\n  };\n\n  /**\n   * TSL function for creating a storage buffer node with a configured `StorageInstancedBufferAttribute`.\n   *\n   * @function\n   * @param {Number} count - The data count.\n   * @param {String} [type='float'] - The data type.\n   * @returns {StorageBufferNode}\n   */\n  var instancedArray = function instancedArray(count) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float';\n    var itemSize = getLengthFromType(type);\n    var typedArray = getTypedArrayFromType(type);\n    var buffer = new StorageInstancedBufferAttribute(count, itemSize, typedArray);\n    var node = storage(buffer, type, count);\n    return node;\n  };\n\n  /** @module VertexColorNode **/\n\n  /**\n   * An attribute node for representing vertex colors.\n   *\n   * @augments module:AttributeNode~AttributeNode\n   */\n  var VertexColorNode = exports.VertexColorNode = /*#__PURE__*/function (_AttributeNode) {\n    /**\n     * Constructs a new vertex color node.\n     *\n     * @param {Number} [index=0] - The attribute index.\n     */\n    function VertexColorNode() {\n      var _this139;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      (0, _classCallCheck2.default)(this, VertexColorNode);\n      _this139 = _callSuper(this, VertexColorNode, [null, 'vec4']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this139.isVertexColorNode = true;\n\n      /**\n       * The attribute index to enable more than one sets of vertex colors.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this139.index = index;\n      return _this139;\n    }\n\n    /**\n     * Overwrites the default implementation by honoring the attribute index.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The attribute name.\n     */\n    (0, _inherits2.default)(VertexColorNode, _AttributeNode);\n    return (0, _createClass2.default)(VertexColorNode, [{\n      key: \"getAttributeName\",\n      value: function getAttributeName(/*builder*/\n      ) {\n        var index = this.index;\n        return 'color' + (index > 0 ? index : '');\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var attributeName = this.getAttributeName(builder);\n        var geometryAttribute = builder.hasGeometryAttribute(attributeName);\n        var result;\n        if (geometryAttribute === true) {\n          result = _superPropGet(VertexColorNode, \"generate\", this, 3)([builder]);\n        } else {\n          // Vertex color fallback should be white\n          result = builder.generateConst(this.nodeType, new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)(1, 1, 1, 1));\n        }\n        return result;\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(VertexColorNode, \"serialize\", this, 3)([data]);\n        data.index = this.index;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(VertexColorNode, \"deserialize\", this, 3)([data]);\n        this.index = data.index;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'VertexColorNode';\n      }\n    }]);\n  }(AttributeNode);\n  /**\n   * TSL function for creating a reference node.\n   *\n   * @function\n   * @param {Number} index - The attribute index.\n   * @returns {VertexColorNode}\n   */\n  var vertexColor = function vertexColor(index) {\n    return nodeObject(new VertexColorNode(index));\n  };\n\n  /** @module PointUVNode **/\n\n  /**\n   * A node for representing the uv coordinates of points.\n   *\n   * Can only be used with a WebGL backend. In WebGPU, point\n   * primitives always have the size of one pixel and can thus\n   * can't be used as sprite-like objects that display textures.\n   *\n   * @augments Node\n   */\n  var PointUVNode = exports.PointUVNode = /*#__PURE__*/function (_Node43) {\n    /**\n     * Constructs a new point uv node.\n     */\n    function PointUVNode() {\n      var _this140;\n      (0, _classCallCheck2.default)(this, PointUVNode);\n      _this140 = _callSuper(this, PointUVNode, ['vec2']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this140.isPointUVNode = true;\n      return _this140;\n    }\n    (0, _inherits2.default)(PointUVNode, _Node43);\n    return (0, _createClass2.default)(PointUVNode, [{\n      key: \"generate\",\n      value: function generate(/*builder*/\n      ) {\n        return 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PointUVNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL object that represents the uv coordinates of points.\n   *\n   * @type {PointUVNode}\n   */\n  var pointUV = /*@__PURE__*/nodeImmutable(PointUVNode);\n  var _e1 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Euler)();\n  var _m1 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n\n  /** @module SceneNode **/\n\n  /**\n   * This module allows access to a collection of scene properties. The following predefined TSL objects\n   * are available for easier use:\n   *\n   * - `backgroundBlurriness`: A node that represents the scene's background blurriness.\n   * - `backgroundIntensity`: A node that represents the scene's background intensity.\n   * - `backgroundRotation`: A node that represents the scene's background rotation.\n   *\n   * @augments Node\n   */\n  var SceneNode = exports.SceneNode = /*#__PURE__*/function (_Node44) {\n    /**\n     * Constructs a new scene node.\n     *\n     * @param {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')} scope - The scope defines the type of scene property that is accessed.\n     * @param {Scene?} [scene=null] - A reference to the scene.\n     */\n    function SceneNode() {\n      var _this141;\n      var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SceneNode.BACKGROUND_BLURRINESS;\n      var scene = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, SceneNode);\n      _this141 = _callSuper(this, SceneNode);\n\n      /**\n       * The scope defines the type of scene property that is accessed.\n       *\n       * @type {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')}\n       */\n      _this141.scope = scope;\n\n      /**\n       * A reference to the scene that is going to be accessed.\n       *\n       * @type {Scene?}\n       * @default null\n       */\n      _this141.scene = scene;\n      return _this141;\n    }\n\n    /**\n     * Depending on the scope, the method returns a different type of node that represents\n     * the respective scene property.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {Node} The output node.\n     */\n    (0, _inherits2.default)(SceneNode, _Node44);\n    return (0, _createClass2.default)(SceneNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        var scope = this.scope;\n        var scene = this.scene !== null ? this.scene : builder.scene;\n        var output;\n        if (scope === SceneNode.BACKGROUND_BLURRINESS) {\n          output = reference('backgroundBlurriness', 'float', scene);\n        } else if (scope === SceneNode.BACKGROUND_INTENSITY) {\n          output = reference('backgroundIntensity', 'float', scene);\n        } else if (scope === SceneNode.BACKGROUND_ROTATION) {\n          output = uniform('mat4').label('backgroundRotation').setGroup(renderGroup).onRenderUpdate(function () {\n            var background = scene.background;\n            if (background !== null && background.isTexture && background.mapping !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UVMapping) {\n              _e1.copy(scene.backgroundRotation);\n\n              // accommodate left-handed frame\n              _e1.x *= -1;\n              _e1.y *= -1;\n              _e1.z *= -1;\n              _m1.makeRotationFromEuler(_e1);\n            } else {\n              _m1.identity();\n            }\n            return _m1;\n          });\n        } else {\n          console.error('THREE.SceneNode: Unknown scope:', scope);\n        }\n        return output;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SceneNode';\n      }\n    }]);\n  }(Node);\n  SceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\n  SceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\n  SceneNode.BACKGROUND_ROTATION = 'backgroundRotation';\n\n  /**\n   * TSL object that represents the scene's background blurriness.\n   *\n   * @type {SceneNode}\n   */\n  var backgroundBlurriness = /*@__PURE__*/nodeImmutable(SceneNode, SceneNode.BACKGROUND_BLURRINESS);\n\n  /**\n   * TSL object that represents the scene's background intensity.\n   *\n   * @type {SceneNode}\n   */\n  var backgroundIntensity = /*@__PURE__*/nodeImmutable(SceneNode, SceneNode.BACKGROUND_INTENSITY);\n\n  /**\n   * TSL object that represents the scene's background rotation.\n   *\n   * @type {SceneNode}\n   */\n  var backgroundRotation = /*@__PURE__*/nodeImmutable(SceneNode, SceneNode.BACKGROUND_ROTATION);\n\n  /** @module StorageTextureNode **/\n\n  /**\n   * This special version of a texture node can be used to\n   * write data into a storage texture with a compute shader.\n   *\n   * ```js\n   * const storageTexture = new THREE.StorageTexture( width, height );\n   *\n   * const computeTexture = Fn( ( { storageTexture } ) => {\n   *\n   * \tconst posX = instanceIndex.modInt( width );\n   * \tconst posY = instanceIndex.div( width );\n   * \tconst indexUV = uvec2( posX, posY );\n   *\n   * \t// generate RGB values\n   *\n   * \tconst r = 1;\n   * \tconst g = 1;\n   * \tconst b = 1;\n   *\n   * \ttextureStore( storageTexture, indexUV, vec4( r, g, b, 1 ) ).toWriteOnly();\n   *\n   * } );\n   *\n   * const computeNode = computeTexture( { storageTexture } ).compute( width * height );\n   * renderer.computeAsync( computeNode );\n   * ```\n   *\n   * This node can only be used with a WebGPU backend.\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var StorageTextureNode = exports.StorageTextureNode = /*#__PURE__*/function (_TextureNode6) {\n    /**\n     * Constructs a new storage texture node.\n     *\n     * @param {StorageTexture} value - The storage texture.\n     * @param {Node<vec2|vec3>} uvNode - The uv node.\n     * @param {Node?} [storeNode=null] - The value node that should be stored in the texture.\n     */\n    function StorageTextureNode(value, uvNode) {\n      var _this142;\n      var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, StorageTextureNode);\n      _this142 = _callSuper(this, StorageTextureNode, [value, uvNode]);\n\n      /**\n       * The value node that should be stored in the texture.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this142.storeNode = storeNode;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this142.isStorageTextureNode = true;\n\n      /**\n       * The access type of the texture node.\n       *\n       * @type {String}\n       * @default 'writeOnly'\n       */\n      _this142.access = NodeAccess.WRITE_ONLY;\n      return _this142;\n    }\n\n    /**\n     * Overwrites the default implementation to return a fixed value `'storageTexture'`.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The input type.\n     */\n    (0, _inherits2.default)(StorageTextureNode, _TextureNode6);\n    return (0, _createClass2.default)(StorageTextureNode, [{\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return 'storageTexture';\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(StorageTextureNode, \"setup\", this, 3)([builder]);\n        var properties = builder.getNodeProperties(this);\n        properties.storeNode = this.storeNode;\n      }\n\n      /**\n       * Defines the node access.\n       *\n       * @param {String} value - The node access.\n       * @return {StorageTextureNode} A reference to this node.\n       */\n    }, {\n      key: \"setAccess\",\n      value: function setAccess(value) {\n        this.access = value;\n        return this;\n      }\n\n      /**\n       * Generates the code snippet of the stroge node. If no `storeNode`\n       * is defined, the texture node is generated as normal texture.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @param {String} output - The current output.\n       * @return {String} The generated code snippet.\n       */\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var snippet;\n        if (this.storeNode !== null) {\n          snippet = this.generateStore(builder);\n        } else {\n          snippet = _superPropGet(StorageTextureNode, \"generate\", this, 3)([builder, output]);\n        }\n        return snippet;\n      }\n\n      /**\n       * Convenience method for configuring a read/write node access.\n       *\n       * @return {StorageTextureNode} A reference to this node.\n       */\n    }, {\n      key: \"toReadWrite\",\n      value: function toReadWrite() {\n        return this.setAccess(NodeAccess.READ_WRITE);\n      }\n\n      /**\n       * Convenience method for configuring a read-only node access.\n       *\n       * @return {StorageTextureNode} A reference to this node.\n       */\n    }, {\n      key: \"toReadOnly\",\n      value: function toReadOnly() {\n        return this.setAccess(NodeAccess.READ_ONLY);\n      }\n\n      /**\n       * Convenience method for configuring a write-only node access.\n       *\n       * @return {StorageTextureNode} A reference to this node.\n       */\n    }, {\n      key: \"toWriteOnly\",\n      value: function toWriteOnly() {\n        return this.setAccess(NodeAccess.WRITE_ONLY);\n      }\n\n      /**\n       * Generates the code snippet of the storage texture node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"generateStore\",\n      value: function generateStore(builder) {\n        var properties = builder.getNodeProperties(this);\n        var uvNode = properties.uvNode,\n          storeNode = properties.storeNode;\n        var textureProperty = _superPropGet(StorageTextureNode, \"generate\", this, 3)([builder, 'property']);\n        var uvSnippet = uvNode.build(builder, 'uvec2');\n        var storeSnippet = storeNode.build(builder, 'vec4');\n        var snippet = builder.generateTextureStore(builder, textureProperty, uvSnippet, storeSnippet);\n        builder.addLineFlowCode(snippet, this);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'StorageTextureNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * TSL function for creating a storage texture node.\n   *\n   * @function\n   * @param {StorageTexture} value - The storage texture.\n   * @param {Node<vec2|vec3>} uvNode - The uv node.\n   * @param {Node?} [storeNode=null] - The value node that should be stored in the texture.\n   * @returns {StorageTextureNode}\n   */\n  var storageTexture = /*@__PURE__*/nodeProxy(StorageTextureNode);\n\n  /**\n   * TODO: Explain difference to `storageTexture()`.\n   *\n   * @function\n   * @param {StorageTexture} value - The storage texture.\n   * @param {Node<vec2|vec3>} uvNode - The uv node.\n   * @param {Node?} [storeNode=null] - The value node that should be stored in the texture.\n   * @returns {StorageTextureNode}\n   */\n  var textureStore = function textureStore(value, uvNode, storeNode) {\n    var node = storageTexture(value, uvNode, storeNode);\n    if (storeNode !== null) node.append();\n    return node;\n  };\n\n  /** @module UserDataNode **/\n\n  /**\n   * A special type of reference node that allows to link values in\n   * `userData` fields to node objects.\n   * ```js\n   * sprite.userData.rotation = 1; // stores individual rotation per sprite\n   *\n   * const material = new THREE.SpriteNodeMaterial();\n   * material.rotationNode = userData( 'rotation', 'float' );\n   * ```\n   * Since `UserDataNode` is extended from {@link module:ReferenceNode~ReferenceNode}, the node value\n   * will automatically be updated when the `rotation` user data field changes.\n   *\n   * @augments module:ReferenceNode~ReferenceNode\n   */\n  var UserDataNode = exports.UserDataNode = /*#__PURE__*/function (_ReferenceNode2) {\n    /**\n     * Constructs a new user data node.\n     *\n     * @param {String} property - The property name that should be referenced by the node.\n     * @param {String} inputType - The node data type of the reference.\n     * @param {Object?} [userData=null] - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.\n     */\n    function UserDataNode(property, inputType) {\n      var _this143;\n      var userData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      (0, _classCallCheck2.default)(this, UserDataNode);\n      _this143 = _callSuper(this, UserDataNode, [property, inputType, userData]);\n\n      /**\n       * A reference to the `userData` object. If not provided, the `userData`\n       * property of the 3D object that uses the node material is evaluated.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      _this143.userData = userData;\n      return _this143;\n    }\n\n    /**\n     * Overwritten to make sure {@link module:ReferenceNode~ReferenceNode#reference} points to the correct\n     * `userData` field.\n     *\n     * @param {(NodeFrame|NodeBuilder)} state - The current state to evaluate.\n     * @return {Object} A reference to the `userData` field.\n     */\n    (0, _inherits2.default)(UserDataNode, _ReferenceNode2);\n    return (0, _createClass2.default)(UserDataNode, [{\n      key: \"updateReference\",\n      value: function updateReference(state) {\n        this.reference = this.userData !== null ? this.userData : state.object.userData;\n        return this.reference;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'UserDataNode';\n      }\n    }]);\n  }(ReferenceNode);\n  /**\n   * TSL function for creating a user data node.\n   *\n   * @function\n   * @param {String} name - The property name that should be referenced by the node.\n   * @param {String} inputType - The node data type of the reference.\n   * @param {Object?} userData - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.\n   * @returns {UserDataNode}\n   */\n  var userData = function userData(name, inputType, _userData) {\n    return nodeObject(new UserDataNode(name, inputType, _userData));\n  };\n  var _objectData = new WeakMap();\n\n  /** @module VelocityNode **/\n\n  /**\n   * A node for representing motion or velocity vectors. Foundation\n   * for advanced post processing effects like motion blur or TRAA.\n   *\n   * The node keeps track of the model, view and projection matrices\n   * of the previous frame and uses them to compute offsets in NDC space.\n   * These offsets represent the final velocity.\n   *\n   * @augments TempNode\n   */\n  var VelocityNode = /*#__PURE__*/function (_TempNode18) {\n    /**\n     * Constructs a new vertex color node.\n     *\n     * @param {Number} [index=0] - The attribute index.\n     */\n    function VelocityNode() {\n      var _this144;\n      (0, _classCallCheck2.default)(this, VelocityNode);\n      _this144 = _callSuper(this, VelocityNode, ['vec2']);\n\n      /**\n       * The current projection matrix.\n       *\n       * @type {Matrix4?}\n       * @default null\n       */\n      _this144.projectionMatrix = null;\n\n      /**\n       * Overwritten since velocity nodes are updated per object.\n       *\n       * @type {String}\n       * @default 'object'\n       */\n      _this144.updateType = NodeUpdateType.OBJECT;\n\n      /**\n       * Overwritten since velocity nodes save data after the update.\n       *\n       * @type {String}\n       * @default 'object'\n       */\n      _this144.updateAfterType = NodeUpdateType.OBJECT;\n\n      /**\n       * Uniform node representing the previous model matrix in world space.\n       *\n       * @type {UniformNode<mat4>}\n       * @default null\n       */\n      _this144.previousModelWorldMatrix = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)());\n\n      /**\n       * Uniform node representing the previous projection matrix.\n       *\n       * @type {UniformNode<mat4>}\n       * @default null\n       */\n      _this144.previousProjectionMatrix = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)()).setGroup(renderGroup);\n\n      /**\n       * Uniform node representing the previous view matrix.\n       *\n       * @type {UniformNode<mat4>}\n       * @default null\n       */\n      _this144.previousCameraViewMatrix = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)());\n      return _this144;\n    }\n\n    /**\n     * Sets the given projection matrix.\n     *\n     * @param {Matrix4} projectionMatrix - The projection matrix to set.\n     */\n    (0, _inherits2.default)(VelocityNode, _TempNode18);\n    return (0, _createClass2.default)(VelocityNode, [{\n      key: \"setProjectionMatrix\",\n      value: function setProjectionMatrix(projectionMatrix) {\n        this.projectionMatrix = projectionMatrix;\n      }\n\n      /**\n       * Updates velocity specific uniforms.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(_ref140) {\n        var frameId = _ref140.frameId,\n          camera = _ref140.camera,\n          object = _ref140.object;\n        var previousModelMatrix = getPreviousMatrix(object);\n        this.previousModelWorldMatrix.value.copy(previousModelMatrix);\n\n        //\n\n        var cameraData = getData(camera);\n        if (cameraData.frameId !== frameId) {\n          cameraData.frameId = frameId;\n          if (cameraData.previousProjectionMatrix === undefined) {\n            cameraData.previousProjectionMatrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n            cameraData.previousCameraViewMatrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n            cameraData.currentProjectionMatrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n            cameraData.currentCameraViewMatrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n            cameraData.previousProjectionMatrix.copy(this.projectionMatrix || camera.projectionMatrix);\n            cameraData.previousCameraViewMatrix.copy(camera.matrixWorldInverse);\n          } else {\n            cameraData.previousProjectionMatrix.copy(cameraData.currentProjectionMatrix);\n            cameraData.previousCameraViewMatrix.copy(cameraData.currentCameraViewMatrix);\n          }\n          cameraData.currentProjectionMatrix.copy(this.projectionMatrix || camera.projectionMatrix);\n          cameraData.currentCameraViewMatrix.copy(camera.matrixWorldInverse);\n          this.previousProjectionMatrix.value.copy(cameraData.previousProjectionMatrix);\n          this.previousCameraViewMatrix.value.copy(cameraData.previousCameraViewMatrix);\n        }\n      }\n\n      /**\n       * Overwritten to updated velocity specific uniforms.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"updateAfter\",\n      value: function updateAfter(_ref141) {\n        var object = _ref141.object;\n        getPreviousMatrix(object).copy(object.matrixWorld);\n      }\n\n      /**\n       * Implements the velocity computation based on the previous and current vertex data.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @return {Node<vec2>} The motion vector.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(/*builder*/\n      ) {\n        var projectionMatrix = this.projectionMatrix === null ? cameraProjectionMatrix : uniform(this.projectionMatrix);\n        var previousModelViewMatrix = this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix);\n        var clipPositionCurrent = projectionMatrix.mul(modelViewMatrix).mul(positionLocal);\n        var clipPositionPrevious = this.previousProjectionMatrix.mul(previousModelViewMatrix).mul(positionPrevious);\n        var ndcPositionCurrent = clipPositionCurrent.xy.div(clipPositionCurrent.w);\n        var ndcPositionPrevious = clipPositionPrevious.xy.div(clipPositionPrevious.w);\n        var velocity = sub(ndcPositionCurrent, ndcPositionPrevious);\n        return velocity;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'VelocityNode';\n      }\n    }]);\n  }(TempNode);\n  function getData(object) {\n    var objectData = _objectData.get(object);\n    if (objectData === undefined) {\n      objectData = {};\n      _objectData.set(object, objectData);\n    }\n    return objectData;\n  }\n  function getPreviousMatrix(object) {\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var objectData = getData(object);\n    var matrix = objectData[index];\n    if (matrix === undefined) {\n      objectData[index] = matrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n    }\n    return matrix;\n  }\n\n  /**\n   * TSL object that represents the velocity of a render pass.\n   *\n   * @type {VelocityNode}\n   */\n  var velocity = /*@__PURE__*/nodeImmutable(VelocityNode);\n  var blendBurn = /*@__PURE__*/Fn(function (_ref142) {\n    var _ref143 = (0, _slicedToArray2.default)(_ref142, 2),\n      base = _ref143[0],\n      blend = _ref143[1];\n    return min$1(1.0, base.oneMinus().div(blend)).oneMinus();\n  }).setLayout({\n    name: 'blendBurn',\n    type: 'vec3',\n    inputs: [{\n      name: 'base',\n      type: 'vec3'\n    }, {\n      name: 'blend',\n      type: 'vec3'\n    }]\n  });\n  var blendDodge = /*@__PURE__*/Fn(function (_ref144) {\n    var _ref145 = (0, _slicedToArray2.default)(_ref144, 2),\n      base = _ref145[0],\n      blend = _ref145[1];\n    return min$1(base.div(blend.oneMinus()), 1.0);\n  }).setLayout({\n    name: 'blendDodge',\n    type: 'vec3',\n    inputs: [{\n      name: 'base',\n      type: 'vec3'\n    }, {\n      name: 'blend',\n      type: 'vec3'\n    }]\n  });\n  var blendScreen = /*@__PURE__*/Fn(function (_ref146) {\n    var _ref147 = (0, _slicedToArray2.default)(_ref146, 2),\n      base = _ref147[0],\n      blend = _ref147[1];\n    return base.oneMinus().mul(blend.oneMinus()).oneMinus();\n  }).setLayout({\n    name: 'blendScreen',\n    type: 'vec3',\n    inputs: [{\n      name: 'base',\n      type: 'vec3'\n    }, {\n      name: 'blend',\n      type: 'vec3'\n    }]\n  });\n  var blendOverlay = /*@__PURE__*/Fn(function (_ref148) {\n    var _ref149 = (0, _slicedToArray2.default)(_ref148, 2),\n      base = _ref149[0],\n      blend = _ref149[1];\n    return mix(base.mul(2.0).mul(blend), base.oneMinus().mul(2.0).mul(blend.oneMinus()).oneMinus(), step(0.5, base));\n  }).setLayout({\n    name: 'blendOverlay',\n    type: 'vec3',\n    inputs: [{\n      name: 'base',\n      type: 'vec3'\n    }, {\n      name: 'blend',\n      type: 'vec3'\n    }]\n  });\n  var blendColor = /*@__PURE__*/Fn(function (_ref150) {\n    var _ref151 = (0, _slicedToArray2.default)(_ref150, 2),\n      base = _ref151[0],\n      blend = _ref151[1];\n    var outAlpha = blend.a.add(base.a.mul(blend.a.oneMinus()));\n    return vec4(blend.rgb.mul(blend.a).add(base.rgb.mul(base.a).mul(blend.a.oneMinus())).div(outAlpha), outAlpha);\n  }).setLayout({\n    name: 'blendColor',\n    type: 'vec4',\n    inputs: [{\n      name: 'base',\n      type: 'vec4'\n    }, {\n      name: 'blend',\n      type: 'vec4'\n    }]\n  });\n\n  // deprecated\n\n  var burn = function burn() {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"burn\" has been renamed. Use \"blendBurn\" instead.');\n    for (var _len23 = arguments.length, params = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n      params[_key23] = arguments[_key23];\n    }\n    return blendBurn(params);\n  };\n  var dodge = function dodge() {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"dodge\" has been renamed. Use \"blendDodge\" instead.');\n    for (var _len24 = arguments.length, params = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n      params[_key24] = arguments[_key24];\n    }\n    return blendDodge(params);\n  };\n  var screen = function screen() {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"screen\" has been renamed. Use \"blendScreen\" instead.');\n    for (var _len25 = arguments.length, params = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n      params[_key25] = arguments[_key25];\n    }\n    return blendScreen(params);\n  };\n  var overlay = function overlay() {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"overlay\" has been renamed. Use \"blendOverlay\" instead.');\n    for (var _len26 = arguments.length, params = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n      params[_key26] = arguments[_key26];\n    }\n    return blendOverlay(params);\n  };\n\n  /** @module ColorAdjustment **/\n\n  /**\n   * Computes a grayscale value for the given RGB color value.\n   *\n   * @method\n   * @param {Node<vec3>} color - The color value to compute the grayscale for.\n   * @return {Node<vec3>} The grayscale color.\n   */\n  var grayscale = /*@__PURE__*/Fn(function (_ref152) {\n    var _ref153 = (0, _slicedToArray2.default)(_ref152, 1),\n      color = _ref153[0];\n    return luminance(color.rgb);\n  });\n\n  /**\n   * Super-saturates or desaturates the given RGB color.\n   *\n   * @method\n   * @param {Node<vec3>} color - The input color.\n   * @param {Node<float>} [adjustment=1] - Specifies the amount of the conversion. A value under `1` desaturates the color, a value over `1` super-saturates it.\n   * @return {Node<vec3>} The saturated color.\n   */\n  var saturation = /*@__PURE__*/Fn(function (_ref154) {\n    var _ref155 = (0, _slicedToArray2.default)(_ref154, 2),\n      color = _ref155[0],\n      _ref155$ = _ref155[1],\n      adjustment = _ref155$ === void 0 ? float(1) : _ref155$;\n    return adjustment.mix(luminance(color.rgb), color.rgb);\n  });\n\n  /**\n   * Selectively enhance the intensity of less saturated RGB colors. Can result\n   * in a more natural and visually appealing image with enhanced color depth\n   * compared to {@link ColorAdjustment#saturation}.\n   *\n   * @method\n   * @param {Node<vec3>} color - The input color.\n   * @param {Node<float>} [adjustment=1] - Controls the intensity of the vibrance effect.\n   * @return {Node<vec3>} The updated color.\n   */\n  var vibrance = /*@__PURE__*/Fn(function (_ref156) {\n    var _ref157 = (0, _slicedToArray2.default)(_ref156, 2),\n      color = _ref157[0],\n      _ref157$ = _ref157[1],\n      adjustment = _ref157$ === void 0 ? float(1) : _ref157$;\n    var average = add(color.r, color.g, color.b).div(3.0);\n    var mx = color.r.max(color.g.max(color.b));\n    var amt = mx.sub(average).mul(adjustment).mul(-3.0);\n    return mix(color.rgb, mx, amt);\n  });\n\n  /**\n   * Updates the hue component of the given RGB color while preserving its luminance and saturation.\n   *\n   * @method\n   * @param {Node<vec3>} color - The input color.\n   * @param {Node<float>} [adjustment=1] - Defines the degree of hue rotation in radians. A positive value rotates the hue clockwise, while a negative value rotates it counterclockwise.\n   * @return {Node<vec3>} The updated color.\n   */\n  var hue = /*@__PURE__*/Fn(function (_ref158) {\n    var _ref159 = (0, _slicedToArray2.default)(_ref158, 2),\n      color = _ref159[0],\n      _ref159$ = _ref159[1],\n      adjustment = _ref159$ === void 0 ? float(1) : _ref159$;\n    var k = vec3(0.57735, 0.57735, 0.57735);\n    var cosAngle = adjustment.cos();\n    return vec3(color.rgb.mul(cosAngle).add(k.cross(color.rgb).mul(adjustment.sin()).add(k.mul(dot(k, color.rgb).mul(cosAngle.oneMinus())))));\n  });\n\n  /**\n   * Computes the luminance for the given RGB color value.\n   *\n   * @method\n   * @param {Node<vec3>} color - The color value to compute the luminance for.\n   * @param {Node<vec3>?} luminanceCoefficients - The luminance coefficients. By default predefined values of the current working color space are used.\n   * @return {Node<vec3>} The luminance.\n   */\n  var luminance = function luminance(color) {\n    var luminanceCoefficients = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vec3(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.getLuminanceCoefficients(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()));\n    return dot(color, luminanceCoefficients);\n  };\n\n  /**\n   * Color Decision List (CDL) v1.2\n   *\n   * Compact representation of color grading information, defined by slope, offset, power, and\n   * saturation. The CDL should be typically be given input in a log space (such as LogC, ACEScc,\n   * or AgX Log), and will return output in the same space. Output may require clamping >=0.\n   *\n   * @method\n   * @param {Node<vec4>} color Input (-Infinity < input < +Infinity)\n   * @param {Node<vec3>} slope Slope (0 ≤ slope < +Infinity)\n   * @param {Node<vec3>} offset Offset (-Infinity < offset < +Infinity; typically -1 < offset < 1)\n   * @param {Node<vec3>} power Power (0 < power < +Infinity)\n   * @param {Node<float>} saturation Saturation (0 ≤ saturation < +Infinity; typically 0 ≤ saturation < 4)\n   * @param {Node<vec3>} luminanceCoefficients Luminance coefficients for saturation term, typically Rec. 709\n   * @return {Node<vec4>} Output, -Infinity < output < +Infinity\n   *\n   * References:\n   * - ASC CDL v1.2\n   * - {@link https://blender.stackexchange.com/a/55239/43930}\n   * - {@link https://docs.acescentral.com/specifications/acescc/}\n   */\n  var cdl = /*@__PURE__*/Fn(function (_ref160) {\n    var _ref161 = (0, _slicedToArray2.default)(_ref160, 6),\n      color = _ref161[0],\n      _ref161$ = _ref161[1],\n      slope = _ref161$ === void 0 ? vec3(1) : _ref161$,\n      _ref161$2 = _ref161[2],\n      offset = _ref161$2 === void 0 ? vec3(0) : _ref161$2,\n      _ref161$3 = _ref161[3],\n      power = _ref161$3 === void 0 ? vec3(1) : _ref161$3,\n      _ref161$4 = _ref161[4],\n      saturation = _ref161$4 === void 0 ? float(1) : _ref161$4,\n      _ref161$5 = _ref161[5],\n      luminanceCoefficients = _ref161$5 === void 0 ? vec3(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ColorManagement.getLuminanceCoefficients(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace)) : _ref161$5;\n    // NOTE: The ASC CDL v1.2 defines a [0, 1] clamp on the slope+offset term, and another on the\n    // saturation term. Per the ACEScc specification and Filament, limits may be omitted to support\n    // values outside [0, 1], requiring a workaround for negative values in the power expression.\n\n    var luma = color.rgb.dot(vec3(luminanceCoefficients));\n    var v = max$1(color.rgb.mul(slope).add(offset), 0.0).toVar();\n    var pv = v.pow(power).toVar();\n    If(v.r.greaterThan(0.0), function () {\n      v.r.assign(pv.r);\n    }); // eslint-disable-line\n    If(v.g.greaterThan(0.0), function () {\n      v.g.assign(pv.g);\n    }); // eslint-disable-line\n    If(v.b.greaterThan(0.0), function () {\n      v.b.assign(pv.b);\n    }); // eslint-disable-line\n\n    v.assign(luma.add(v.sub(luma).mul(saturation)));\n    return vec4(v.rgb, color.a);\n  });\n\n  /** @module PosterizeNode **/\n\n  /**\n   * Represents a posterize effect which reduces the number of colors\n   * in an image, resulting in a more blocky and stylized appearance.\n   *\n   * @augments TempNode\n   */\n  var PosterizeNode = exports.PosterizeNode = /*#__PURE__*/function (_TempNode19) {\n    /**\n     * Constructs a new posterize node.\n     *\n     * @param {Node} sourceNode - The input color.\n     * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\n     */\n    function PosterizeNode(sourceNode, stepsNode) {\n      var _this145;\n      (0, _classCallCheck2.default)(this, PosterizeNode);\n      _this145 = _callSuper(this, PosterizeNode);\n\n      /**\n       * The input color.\n       *\n       * @type {Node}\n       */\n      _this145.sourceNode = sourceNode;\n\n      /**\n       * Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\n       *\n       * @type {Node}\n       */\n      _this145.stepsNode = stepsNode;\n      return _this145;\n    }\n    (0, _inherits2.default)(PosterizeNode, _TempNode19);\n    return (0, _createClass2.default)(PosterizeNode, [{\n      key: \"setup\",\n      value: function setup() {\n        var sourceNode = this.sourceNode,\n          stepsNode = this.stepsNode;\n        return sourceNode.mul(stepsNode).floor().div(stepsNode);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PosterizeNode';\n      }\n    }]);\n  }(TempNode);\n  /**\n   * TSL function for creating a posterize node.\n   *\n   * @function\n   * @param {Node} sourceNode - The input color.\n   * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\n   * @returns {PosterizeNode}\n   */\n  var posterize = /*@__PURE__*/nodeProxy(PosterizeNode);\n\n  /** @module PassNode **/\n\n  var _size = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n\n  /**\n   * Represents the texture of a pass node.\n   *\n   * @augments module:TextureNode~TextureNode\n   */\n  var PassTextureNode = /*#__PURE__*/function (_TextureNode7) {\n    /**\n     * Constructs a new pass texture node.\n     *\n     * @param {PassNode} passNode - The pass node.\n     * @param {Texture} texture - The output texture.\n     */\n    function PassTextureNode(passNode, texture) {\n      var _this146;\n      (0, _classCallCheck2.default)(this, PassTextureNode);\n      _this146 = _callSuper(this, PassTextureNode, [texture]);\n\n      /**\n       * A reference to the pass node.\n       *\n       * @type {PassNode}\n       */\n      _this146.passNode = passNode;\n      _this146.setUpdateMatrix(false);\n      return _this146;\n    }\n    (0, _inherits2.default)(PassTextureNode, _TextureNode7);\n    return (0, _createClass2.default)(PassTextureNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        if (builder.object.isQuadMesh) this.passNode.build(builder);\n        return _superPropGet(PassTextureNode, \"setup\", this, 3)([builder]);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.passNode, this.value);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PassTextureNode';\n      }\n    }]);\n  }(TextureNode);\n  /**\n   * An extension of `PassTextureNode` which allows to manage more than one\n   * internal texture. Relevant for the `getPreviousTexture()` related API.\n   *\n   * @augments module:PassTextureNode~PassTextureNode\n   */\n  var PassMultipleTextureNode = /*#__PURE__*/function (_PassTextureNode) {\n    /**\n     * Constructs a new pass texture node.\n     *\n     * @param {PassNode} passNode - The pass node.\n     * @param {String} textureName - The output texture name.\n     * @param {Boolean} [previousTexture=false] - Whether previous frame data should be used or not.\n     */\n    function PassMultipleTextureNode(passNode, textureName) {\n      var _this147;\n      var previousTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      (0, _classCallCheck2.default)(this, PassMultipleTextureNode);\n      // null is passed to the super call since this class does not\n      // use an external texture for rendering pass data into. Instead\n      // the texture is managed by the pass node itself\n\n      _this147 = _callSuper(this, PassMultipleTextureNode, [passNode, null]);\n\n      /**\n       * The output texture name.\n       *\n       * @type {String}\n       */\n      _this147.textureName = textureName;\n\n      /**\n       * Whether previous frame data should be used or not.\n       *\n       * @type {Boolean}\n       */\n      _this147.previousTexture = previousTexture;\n      return _this147;\n    }\n\n    /**\n     * Updates the texture reference of this node.\n     */\n    (0, _inherits2.default)(PassMultipleTextureNode, _PassTextureNode);\n    return (0, _createClass2.default)(PassMultipleTextureNode, [{\n      key: \"updateTexture\",\n      value: function updateTexture() {\n        this.value = this.previousTexture ? this.passNode.getPreviousTexture(this.textureName) : this.passNode.getTexture(this.textureName);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this.updateTexture();\n        return _superPropGet(PassMultipleTextureNode, \"setup\", this, 3)([builder]);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.passNode, this.textureName, this.previousTexture);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PassMultipleTextureNode';\n      }\n    }]);\n  }(PassTextureNode);\n  /**\n   * Represents a render pass (sometimes called beauty pass) in context of post processing.\n   * This pass produces a render for the given scene and camera and can provide multiple outputs\n   * via MRT for further processing.\n   *\n   * ```js\n   * const postProcessing = new PostProcessing( renderer );\n   *\n   * const scenePass = pass( scene, camera );\n   *\n   * postProcessing.outputNode = scenePass;\n   * ```\n   *\n   * @augments TempNode\n   */\n  var PassNode = exports.PassNode = /*#__PURE__*/function (_TempNode20) {\n    /**\n     * Constructs a new pass node.\n     *\n     * @param {('color'|'depth')} scope - The scope of the pass. The scope determines whether the node outputs color or depth.\n     * @param {Scene} scene - A reference to the scene.\n     * @param {Camera} camera - A reference to the camera.\n     * @param {Object} options - Options for the internal render target.\n     */\n    function PassNode(scope, scene, camera) {\n      var _this148;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      (0, _classCallCheck2.default)(this, PassNode);\n      _this148 = _callSuper(this, PassNode, ['vec4']);\n\n      /**\n       * The scope of the pass. The scope determines whether the node outputs color or depth.\n       *\n       * @type {('color'|'depth')}\n       */\n      _this148.scope = scope;\n\n      /**\n       * A reference to the scene.\n       *\n       * @type {Scene}\n       */\n      _this148.scene = scene;\n\n      /**\n       * A reference to the camera.\n       *\n       * @type {Camera}\n       */\n      _this148.camera = camera;\n\n      /**\n       * Options for the internal render target.\n       *\n       * @type {Object}\n       */\n      _this148.options = options;\n\n      /**\n       * The pass's pixel ratio. Will be kept automatically kept in sync with the renderer's pixel ratio.\n       *\n       * @private\n       * @type {Number}\n       * @default 1\n       */\n      _this148._pixelRatio = 1;\n\n      /**\n       * The pass's pixel width. Will be kept automatically kept in sync with the renderer's width.\n       * @private\n       * @type {Number}\n       * @default 1\n       */\n      _this148._width = 1;\n\n      /**\n       * The pass's pixel height. Will be kept automatically kept in sync with the renderer's height.\n       * @private\n       * @type {Number}\n       * @default 1\n       */\n      _this148._height = 1;\n      var depthTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)();\n      depthTexture.isRenderTargetTexture = true;\n      //depthTexture.type = FloatType;\n      depthTexture.name = 'depth';\n      var renderTarget = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)(_this148._width * _this148._pixelRatio, _this148._height * _this148._pixelRatio, Object.assign({\n        type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType\n      }, options));\n      renderTarget.texture.name = 'output';\n      renderTarget.depthTexture = depthTexture;\n\n      /**\n       * The pass's render target.\n       *\n       * @type {RenderTarget}\n       */\n      _this148.renderTarget = renderTarget;\n\n      /**\n       * A dictionary holding the internal result textures.\n       *\n       * @private\n       * @type {Object<String, Texture>}\n       */\n      _this148._textures = {\n        output: renderTarget.texture,\n        depth: depthTexture\n      };\n\n      /**\n       * A dictionary holding the internal texture nodes.\n       *\n       * @private\n       * @type {Object<String, TextureNode>}\n       */\n      _this148._textureNodes = {};\n\n      /**\n       * A dictionary holding the internal depth nodes.\n       *\n       * @private\n       * @type {Object}\n       */\n      _this148._linearDepthNodes = {};\n\n      /**\n       * A dictionary holding the internal viewZ nodes.\n       *\n       * @private\n       * @type {Object}\n       */\n      _this148._viewZNodes = {};\n\n      /**\n       * A dictionary holding the texture data of the previous frame.\n       * Used for computing velocity/motion vectors.\n       *\n       * @private\n       * @type {Object<String, Texture>}\n       */\n      _this148._previousTextures = {};\n\n      /**\n       * A dictionary holding the texture nodes of the previous frame.\n       * Used for computing velocity/motion vectors.\n       *\n       * @private\n       * @type {Object<String, TextureNode>}\n       */\n      _this148._previousTextureNodes = {};\n\n      /**\n       * The `near` property of the camera as a uniform.\n       *\n       * @private\n       * @type {UniformNode}\n       */\n      _this148._cameraNear = uniform(0);\n\n      /**\n       * The `far` property of the camera as a uniform.\n       *\n       * @private\n       * @type {UniformNode}\n       */\n      _this148._cameraFar = uniform(0);\n\n      /**\n       * A MRT node configuring the MRT settings.\n       *\n       * @private\n       * @type {MRTNode?}\n       * @default null\n       */\n      _this148._mrt = null;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this148.isPassNode = true;\n\n      /**\n       * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders the\n       * scene once per frame in its {@link PassNode#updateBefore} method.\n       *\n       * @type {String}\n       * @default 'frame'\n       */\n      _this148.updateBeforeType = NodeUpdateType.FRAME;\n      return _this148;\n    }\n\n    /**\n     * Sets the given MRT node to setup MRT for this pass.\n     *\n     * @param {MRTNode} mrt - The MRT object.\n     * @return {PassNode} A reference to this pass.\n     */\n    (0, _inherits2.default)(PassNode, _TempNode20);\n    return (0, _createClass2.default)(PassNode, [{\n      key: \"setMRT\",\n      value: function setMRT(mrt) {\n        this._mrt = mrt;\n        return this;\n      }\n\n      /**\n       * Returns the current MRT node.\n       *\n       * @return {MRTNode} The current MRT node.\n       */\n    }, {\n      key: \"getMRT\",\n      value: function getMRT() {\n        return this._mrt;\n      }\n\n      /**\n       * The method is overwritten so it always returns `true`.\n       *\n       * @return {Boolean} Whether this node is global or not.\n       */\n    }, {\n      key: \"isGlobal\",\n      value: function isGlobal() {\n        return true;\n      }\n\n      /**\n       * Returns the texture for the given output name.\n       *\n       * @param {String} name - The output name to get the texture for.\n       * @return {Texture} The texture.\n       */\n    }, {\n      key: \"getTexture\",\n      value: function getTexture(name) {\n        var texture = this._textures[name];\n        if (texture === undefined) {\n          var refTexture = this.renderTarget.texture;\n          texture = refTexture.clone();\n          texture.name = name;\n          this._textures[name] = texture;\n          this.renderTarget.textures.push(texture);\n        }\n        return texture;\n      }\n\n      /**\n       * Returns the texture holding the data of the previous frame for the given output name.\n       *\n       * @param {String} name - The output name to get the texture for.\n       * @return {Texture} The texture holding the data of the previous frame.\n       */\n    }, {\n      key: \"getPreviousTexture\",\n      value: function getPreviousTexture(name) {\n        var texture = this._previousTextures[name];\n        if (texture === undefined) {\n          texture = this.getTexture(name).clone();\n          this._previousTextures[name] = texture;\n        }\n        return texture;\n      }\n\n      /**\n       * Switches current and previous textures for the given output name.\n       *\n       * @param {String} name - The output name.\n       */\n    }, {\n      key: \"toggleTexture\",\n      value: function toggleTexture(name) {\n        var prevTexture = this._previousTextures[name];\n        if (prevTexture !== undefined) {\n          var _texture5 = this._textures[name];\n          var index = this.renderTarget.textures.indexOf(_texture5);\n          this.renderTarget.textures[index] = prevTexture;\n          this._textures[name] = prevTexture;\n          this._previousTextures[name] = _texture5;\n          this._textureNodes[name].updateTexture();\n          this._previousTextureNodes[name].updateTexture();\n        }\n      }\n\n      /**\n       * Returns the texture node for the given output name.\n       *\n       * @param {String} [name='output'] - The output name to get the texture node for.\n       * @return {TextureNode} The texture node.\n       */\n    }, {\n      key: \"getTextureNode\",\n      value: function getTextureNode() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'output';\n        var textureNode = this._textureNodes[name];\n        if (textureNode === undefined) {\n          textureNode = nodeObject(new PassMultipleTextureNode(this, name));\n          textureNode.updateTexture();\n          this._textureNodes[name] = textureNode;\n        }\n        return textureNode;\n      }\n\n      /**\n       * Returns the previous texture node for the given output name.\n       *\n       * @param {String} [name='output'] - The output name to get the previous texture node for.\n       * @return {TextureNode} The previous texture node.\n       */\n    }, {\n      key: \"getPreviousTextureNode\",\n      value: function getPreviousTextureNode() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'output';\n        var textureNode = this._previousTextureNodes[name];\n        if (textureNode === undefined) {\n          if (this._textureNodes[name] === undefined) this.getTextureNode(name);\n          textureNode = nodeObject(new PassMultipleTextureNode(this, name, true));\n          textureNode.updateTexture();\n          this._previousTextureNodes[name] = textureNode;\n        }\n        return textureNode;\n      }\n\n      /**\n       * Returns a viewZ node of this pass.\n       *\n       * @param {String} [name='depth'] - The output name to get the viewZ node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.\n       * @return {Node} The viewZ node.\n       */\n    }, {\n      key: \"getViewZNode\",\n      value: function getViewZNode() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'depth';\n        var viewZNode = this._viewZNodes[name];\n        if (viewZNode === undefined) {\n          var _cameraNear = this._cameraNear;\n          var _cameraFar = this._cameraFar;\n          this._viewZNodes[name] = viewZNode = perspectiveDepthToViewZ(this.getTextureNode(name), _cameraNear, _cameraFar);\n        }\n        return viewZNode;\n      }\n\n      /**\n       * Returns a linear depth node of this pass.\n       *\n       * @param {String} [name='depth'] - The output name to get the linear depth node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.\n       * @return {Node} The linear depth node.\n       */\n    }, {\n      key: \"getLinearDepthNode\",\n      value: function getLinearDepthNode() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'depth';\n        var linearDepthNode = this._linearDepthNodes[name];\n        if (linearDepthNode === undefined) {\n          var _cameraNear2 = this._cameraNear;\n          var _cameraFar2 = this._cameraFar;\n          var viewZNode = this.getViewZNode(name);\n\n          // TODO: just if ( builder.camera.isPerspectiveCamera )\n\n          this._linearDepthNodes[name] = linearDepthNode = viewZToOrthographicDepth(viewZNode, _cameraNear2, _cameraFar2);\n        }\n        return linearDepthNode;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(_ref162) {\n        var renderer = _ref162.renderer;\n        this.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;\n\n        // Disable MSAA for WebGL backend for now\n        if (renderer.backend.isWebGLBackend === true) {\n          this.renderTarget.samples = 0;\n        }\n        return this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();\n      }\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(frame) {\n        var renderer = frame.renderer;\n        var scene = this.scene,\n          camera = this.camera;\n        this._pixelRatio = renderer.getPixelRatio();\n        var size = renderer.getSize(_size);\n        this.setSize(size.width, size.height);\n        var currentRenderTarget = renderer.getRenderTarget();\n        var currentMRT = renderer.getMRT();\n        this._cameraNear.value = camera.near;\n        this._cameraFar.value = camera.far;\n        for (var name in this._previousTextures) {\n          this.toggleTexture(name);\n        }\n        renderer.setRenderTarget(this.renderTarget);\n        renderer.setMRT(this._mrt);\n        renderer.render(scene, camera);\n        renderer.setRenderTarget(currentRenderTarget);\n        renderer.setMRT(currentMRT);\n      }\n\n      /**\n       * Sets the size of the pass's render target. Honors the pixel ratio.\n       *\n       * @param {Number} width - The width to set.\n       * @param {Number} height - The height to set.\n       */\n    }, {\n      key: \"setSize\",\n      value: function setSize(width, height) {\n        this._width = width;\n        this._height = height;\n        var effectiveWidth = this._width * this._pixelRatio;\n        var effectiveHeight = this._height * this._pixelRatio;\n        this.renderTarget.setSize(effectiveWidth, effectiveHeight);\n      }\n\n      /**\n       * Sets the pixel ratio the pass's render target and updates the size.\n       *\n       * @param {Number} pixelRatio - The pixel ratio to set.\n       */\n    }, {\n      key: \"setPixelRatio\",\n      value: function setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this.setSize(this._width, this._height);\n      }\n\n      /**\n       * Frees internal resources. Should be called when the node is no longer in use.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.renderTarget.dispose();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PassNode';\n      }\n    }]);\n  }(TempNode);\n  PassNode.COLOR = 'color';\n  PassNode.DEPTH = 'depth';\n\n  /**\n   * TSL function for creating a pass node.\n   *\n   * @function\n   * @param {Scene} scene - A reference to the scene.\n   * @param {Camera} camera - A reference to the camera.\n   * @param {Object} options - Options for the internal render target.\n   * @returns {PassNode}\n   */\n  var pass = function pass(scene, camera, options) {\n    return nodeObject(new PassNode(PassNode.COLOR, scene, camera, options));\n  };\n\n  /**\n   * TSL function for creating a pass texture node.\n   *\n   * @function\n   * @param {PassNode} pass - The pass node.\n   * @param {Texture} texture - The output texture.\n   * @returns {PassTextureNode}\n   */\n  var passTexture = function passTexture(pass, texture) {\n    return nodeObject(new PassTextureNode(pass, texture));\n  };\n\n  /**\n   * TSL function for creating a depth pass node.\n   *\n   * @function\n   * @param {Scene} scene - A reference to the scene.\n   * @param {Camera} camera - A reference to the camera.\n   * @param {Object} options - Options for the internal render target.\n   * @returns {PassNode}\n   */\n  var depthPass = function depthPass(scene, camera, options) {\n    return nodeObject(new PassNode(PassNode.DEPTH, scene, camera, options));\n  };\n\n  /** @module ToonOutlinePassNode **/\n\n  /**\n   * Represents a render pass for producing a toon outline effect on compatible objects.\n   * Only 3D objects with materials of type `MeshToonMaterial` and `MeshToonNodeMaterial`\n   * will receive the outline.\n   *\n   * ```js\n   * const postProcessing = new PostProcessing( renderer );\n   *\n   * const scenePass = toonOutlinePass( scene, camera );\n   *\n   * postProcessing.outputNode = scenePass;\n   * ```\n   * @augments PassNode\n   */\n  var ToonOutlinePassNode = exports.ToonOutlinePassNode = /*#__PURE__*/function (_PassNode) {\n    /**\n     * Constructs a new outline pass node.\n     *\n     * @param {Scene} scene - A reference to the scene.\n     * @param {Camera} camera - A reference to the camera.\n     * @param {Node} colorNode - Defines the outline's color.\n     * @param {Node} thicknessNode - Defines the outline's thickness.\n     * @param {Node} alphaNode - Defines the outline's alpha.\n     */\n    function ToonOutlinePassNode(scene, camera, colorNode, thicknessNode, alphaNode) {\n      var _this149;\n      (0, _classCallCheck2.default)(this, ToonOutlinePassNode);\n      _this149 = _callSuper(this, ToonOutlinePassNode, [PassNode.COLOR, scene, camera]);\n\n      /**\n       * Defines the outline's color.\n       *\n       * @type {Node}\n       */\n      _this149.colorNode = colorNode;\n\n      /**\n       * Defines the outline's thickness.\n       *\n       * @type {Node}\n       */\n      _this149.thicknessNode = thicknessNode;\n\n      /**\n       * Defines the outline's alpha.\n       *\n       * @type {Node}\n       */\n      _this149.alphaNode = alphaNode;\n\n      /**\n       * An internal material cache.\n       *\n       * @private\n       * @type {WeakMap<Material, NodeMaterial>}\n       */\n      _this149._materialCache = new WeakMap();\n      return _this149;\n    }\n    (0, _inherits2.default)(ToonOutlinePassNode, _PassNode);\n    return (0, _createClass2.default)(ToonOutlinePassNode, [{\n      key: \"updateBefore\",\n      value: function updateBefore(frame) {\n        var _this150 = this;\n        var renderer = frame.renderer;\n        var currentRenderObjectFunction = renderer.getRenderObjectFunction();\n        renderer.setRenderObjectFunction(function (object, scene, camera, geometry, material, group, lightsNode, clippingContext) {\n          // only render outline for supported materials\n\n          if (material.isMeshToonMaterial || material.isMeshToonNodeMaterial) {\n            if (material.wireframe === false) {\n              var outlineMaterial = _this150._getOutlineMaterial(material);\n              renderer.renderObject(object, scene, camera, geometry, outlineMaterial, group, lightsNode, clippingContext);\n            }\n          }\n\n          // default\n\n          renderer.renderObject(object, scene, camera, geometry, material, group, lightsNode, clippingContext);\n        });\n        _superPropGet(ToonOutlinePassNode, \"updateBefore\", this, 3)([frame]);\n        renderer.setRenderObjectFunction(currentRenderObjectFunction);\n      }\n\n      /**\n       * Creates the material used for outline rendering.\n       *\n       * @private\n       * @return {NodeMaterial} The outline material.\n       */\n    }, {\n      key: \"_createMaterial\",\n      value: function _createMaterial() {\n        var material = new NodeMaterial();\n        material.isMeshToonOutlineMaterial = true;\n        material.name = 'Toon_Outline';\n        material.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n\n        // vertex node\n\n        var outlineNormal = normalLocal.negate();\n        var mvp = cameraProjectionMatrix.mul(modelViewMatrix);\n        var ratio = float(1.0); // TODO: support outline thickness ratio for each vertex\n        var pos = mvp.mul(vec4(positionLocal, 1.0));\n        var pos2 = mvp.mul(vec4(positionLocal.add(outlineNormal), 1.0));\n        var norm = normalize(pos.sub(pos2)); // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n\n        material.vertexNode = pos.add(norm.mul(this.thicknessNode).mul(pos.w).mul(ratio));\n\n        // color node\n\n        material.colorNode = vec4(this.colorNode, this.alphaNode);\n        return material;\n      }\n\n      /**\n       * For the given toon material, this method returns a corresponding\n       * outline material.\n       *\n       * @private\n       * @param {(MeshToonMaterial|MeshToonNodeMaterial)} originalMaterial - The toon material.\n       * @return {NodeMaterial} The outline material.\n       */\n    }, {\n      key: \"_getOutlineMaterial\",\n      value: function _getOutlineMaterial(originalMaterial) {\n        var outlineMaterial = this._materialCache.get(originalMaterial);\n        if (outlineMaterial === undefined) {\n          outlineMaterial = this._createMaterial();\n          this._materialCache.set(originalMaterial, outlineMaterial);\n        }\n        return outlineMaterial;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ToonOutlinePassNode';\n      }\n    }]);\n  }(PassNode);\n  /**\n   * TSL function for creating a toon outline pass node.\n   *\n   * @function\n   * @param {Scene} scene - A reference to the scene.\n   * @param {Camera} camera - A reference to the camera.\n   * @param {Color} color - Defines the outline's color.\n   * @param {Number} [thickness=0.003] - Defines the outline's thickness.\n   * @param {Number} [alpha=1] - Defines the outline's alpha.\n   * @returns {ToonOutlinePassNode}\n   */\n  var toonOutlinePass = function toonOutlinePass(scene, camera) {\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)(0, 0, 0);\n    var thickness = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.003;\n    var alpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    return nodeObject(new ToonOutlinePassNode(scene, camera, nodeObject(color), nodeObject(thickness), nodeObject(alpha)));\n  };\n\n  /** @module ToneMappingFunctions **/\n\n  /**\n   * Linear tone mapping, exposure only.\n   *\n   * @method\n   * @param {Node<vec3>} color - The color that should be tone mapped.\n   * @param {Node<float>} exposure - The exposure.\n   * @return {Node<vec3>} The tone mapped color.\n   */\n  var linearToneMapping = /*@__PURE__*/Fn(function (_ref163) {\n    var _ref164 = (0, _slicedToArray2.default)(_ref163, 2),\n      color = _ref164[0],\n      exposure = _ref164[1];\n    return color.mul(exposure).clamp();\n  }).setLayout({\n    name: 'linearToneMapping',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }, {\n      name: 'exposure',\n      type: 'float'\n    }]\n  });\n\n  /**\n   * Reinhard tone mapping.\n   *\n   * Reference: {@link https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf}\n   *\n   * @method\n   * @param {Node<vec3>} color - The color that should be tone mapped.\n   * @param {Node<float>} exposure - The exposure.\n   * @return {Node<vec3>} The tone mapped color.\n   */\n  var reinhardToneMapping = /*@__PURE__*/Fn(function (_ref165) {\n    var _ref166 = (0, _slicedToArray2.default)(_ref165, 2),\n      color = _ref166[0],\n      exposure = _ref166[1];\n    color = color.mul(exposure);\n    return color.div(color.add(1.0)).clamp();\n  }).setLayout({\n    name: 'reinhardToneMapping',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }, {\n      name: 'exposure',\n      type: 'float'\n    }]\n  });\n\n  /**\n   * Cineon tone mapping.\n   *\n   * Reference: {@link http://filmicworlds.com/blog/filmic-tonemapping-operators/}\n   *\n   * @method\n   * @param {Node<vec3>} color - The color that should be tone mapped.\n   * @param {Node<float>} exposure - The exposure.\n   * @return {Node<vec3>} The tone mapped color.\n   */\n  var cineonToneMapping = /*@__PURE__*/Fn(function (_ref167) {\n    var _ref168 = (0, _slicedToArray2.default)(_ref167, 2),\n      color = _ref168[0],\n      exposure = _ref168[1];\n    // filmic operator by Jim Hejl and Richard Burgess-Dawson\n    color = color.mul(exposure);\n    color = color.sub(0.004).max(0.0);\n    var a = color.mul(color.mul(6.2).add(0.5));\n    var b = color.mul(color.mul(6.2).add(1.7)).add(0.06);\n    return a.div(b).pow(2.2);\n  }).setLayout({\n    name: 'cineonToneMapping',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }, {\n      name: 'exposure',\n      type: 'float'\n    }]\n  });\n\n  // source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n\n  var RRTAndODTFit = /*@__PURE__*/Fn(function (_ref169) {\n    var _ref170 = (0, _slicedToArray2.default)(_ref169, 1),\n      color = _ref170[0];\n    var a = color.mul(color.add(0.0245786)).sub(0.000090537);\n    var b = color.mul(color.add(0.4329510).mul(0.983729)).add(0.238081);\n    return a.div(b);\n  });\n\n  /**\n   * ACESFilmic tone mapping.\n   *\n   * Reference: {@link https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs}\n   *\n   * @method\n   * @param {Node<vec3>} color - The color that should be tone mapped.\n   * @param {Node<float>} exposure - The exposure.\n   * @return {Node<vec3>} The tone mapped color.\n   */\n  var acesFilmicToneMapping = /*@__PURE__*/Fn(function (_ref171) {\n    var _ref172 = (0, _slicedToArray2.default)(_ref171, 2),\n      color = _ref172[0],\n      exposure = _ref172[1];\n    // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n    var ACESInputMat = mat3(0.59719, 0.35458, 0.04823, 0.07600, 0.90834, 0.01566, 0.02840, 0.13383, 0.83777);\n\n    // ODT_SAT => XYZ => D60_2_D65 => sRGB\n    var ACESOutputMat = mat3(1.60475, -0.53108, -0.07367, -0.10208, 1.10813, -0.00605, -0.00327, -0.07276, 1.07602);\n    color = color.mul(exposure).div(0.6);\n    color = ACESInputMat.mul(color);\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n    color = ACESOutputMat.mul(color);\n\n    // Clamp to [0, 1]\n    return color.clamp();\n  }).setLayout({\n    name: 'acesFilmicToneMapping',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }, {\n      name: 'exposure',\n      type: 'float'\n    }]\n  });\n  var LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/mat3(vec3(1.6605, -0.1246, -0.0182), vec3(-0.5876, 1.1329, -0.1006), vec3(-0.0728, -0.0083, 1.1187));\n  var LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/mat3(vec3(0.6274, 0.0691, 0.0164), vec3(0.3293, 0.9195, 0.0880), vec3(0.0433, 0.0113, 0.8956));\n  var agxDefaultContrastApprox = /*@__PURE__*/Fn(function (_ref173) {\n    var _ref174 = (0, _slicedToArray2.default)(_ref173, 1),\n      x_immutable = _ref174[0];\n    var x = vec3(x_immutable).toVar();\n    var x2 = vec3(x.mul(x)).toVar();\n    var x4 = vec3(x2.mul(x2)).toVar();\n    return float(15.5).mul(x4.mul(x2)).sub(mul(40.14, x4.mul(x))).add(mul(31.96, x4).sub(mul(6.868, x2.mul(x))).add(mul(0.4298, x2).add(mul(0.1191, x).sub(0.00232))));\n  });\n\n  /**\n   * AgX tone mapping.\n   *\n   * @method\n   * @param {Node<vec3>} color - The color that should be tone mapped.\n   * @param {Node<float>} exposure - The exposure.\n   * @return {Node<vec3>} The tone mapped color.\n   */\n  var agxToneMapping = /*@__PURE__*/Fn(function (_ref175) {\n    var _ref176 = (0, _slicedToArray2.default)(_ref175, 2),\n      color = _ref176[0],\n      exposure = _ref176[1];\n    var colortone = vec3(color).toVar();\n    var AgXInsetMatrix = mat3(vec3(0.856627153315983, 0.137318972929847, 0.11189821299995), vec3(0.0951212405381588, 0.761241990602591, 0.0767994186031903), vec3(0.0482516061458583, 0.101439036467562, 0.811302368396859));\n    var AgXOutsetMatrix = mat3(vec3(1.1271005818144368, -0.1413297634984383, -0.14132976349843826), vec3(-0.11060664309660323, 1.157823702216272, -0.11060664309660294), vec3(-0.016493938717834573, -0.016493938717834257, 1.2519364065950405));\n    var AgxMinEv = float(-12.47393);\n    var AgxMaxEv = float(4.026069);\n    colortone.mulAssign(exposure);\n    colortone.assign(LINEAR_SRGB_TO_LINEAR_REC2020.mul(colortone));\n    colortone.assign(AgXInsetMatrix.mul(colortone));\n    colortone.assign(max$1(colortone, 1e-10));\n    colortone.assign(log2(colortone));\n    colortone.assign(colortone.sub(AgxMinEv).div(AgxMaxEv.sub(AgxMinEv)));\n    colortone.assign(clamp(colortone, 0.0, 1.0));\n    colortone.assign(agxDefaultContrastApprox(colortone));\n    colortone.assign(AgXOutsetMatrix.mul(colortone));\n    colortone.assign(pow(max$1(vec3(0.0), colortone), vec3(2.2)));\n    colortone.assign(LINEAR_REC2020_TO_LINEAR_SRGB.mul(colortone));\n    colortone.assign(clamp(colortone, 0.0, 1.0));\n    return colortone;\n  }).setLayout({\n    name: 'agxToneMapping',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }, {\n      name: 'exposure',\n      type: 'float'\n    }]\n  });\n\n  /**\n   * Neutral tone mapping.\n   *\n   * Reference: {@link https://modelviewer.dev/examples/tone-mapping}\n   *\n   * @method\n   * @param {Node<vec3>} color - The color that should be tone mapped.\n   * @param {Node<float>} exposure - The exposure.\n   * @return {Node<vec3>} The tone mapped color.\n   */\n  var neutralToneMapping = /*@__PURE__*/Fn(function (_ref177) {\n    var _ref178 = (0, _slicedToArray2.default)(_ref177, 2),\n      color = _ref178[0],\n      exposure = _ref178[1];\n    var StartCompression = float(0.8 - 0.04);\n    var Desaturation = float(0.15);\n    color = color.mul(exposure);\n    var x = min$1(color.r, min$1(color.g, color.b));\n    var offset = select(x.lessThan(0.08), x.sub(mul(6.25, x.mul(x))), 0.04);\n    color.subAssign(offset);\n    var peak = max$1(color.r, max$1(color.g, color.b));\n    If(peak.lessThan(StartCompression), function () {\n      return color;\n    });\n    var d = sub(1, StartCompression);\n    var newPeak = sub(1, d.mul(d).div(peak.add(d.sub(StartCompression))));\n    color.mulAssign(newPeak.div(peak));\n    var g = sub(1, div(1, Desaturation.mul(peak.sub(newPeak)).add(1)));\n    return mix(color, vec3(newPeak), g);\n  }).setLayout({\n    name: 'neutralToneMapping',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }, {\n      name: 'exposure',\n      type: 'float'\n    }]\n  });\n\n  /** @module CodeNode **/\n\n  /**\n   * This class represents native code sections. It is the base\n   * class for modules like {@link FunctionNode} which allows to implement\n   * functions with native shader languages.\n   *\n   * @augments Node\n   */\n  var CodeNode = exports.CodeNode = /*#__PURE__*/function (_Node45) {\n    /**\n     * Constructs a new code node.\n     *\n     * @param {String} [code=''] - The native code.\n     * @param {Array<Node>} [includes=[]] - An array of includes.\n     * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\n     */\n    function CodeNode() {\n      var _this151;\n      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      (0, _classCallCheck2.default)(this, CodeNode);\n      _this151 = _callSuper(this, CodeNode, ['code']);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this151.isCodeNode = true;\n\n      /**\n       * The native code.\n       *\n       * @type {String}\n       * @default ''\n       */\n      _this151.code = code;\n\n      /**\n       * An array of includes\n       *\n       * @type {Array<Node>}\n       * @default []\n       */\n      _this151.includes = includes;\n\n      /**\n       * The used language.\n       *\n       * @type {('js'|'wgsl'|'glsl')}\n       * @default ''\n       */\n      _this151.language = language;\n      return _this151;\n    }\n\n    /**\n     * The method is overwritten so it always returns `true`.\n     *\n     * @return {Boolean} Whether this node is global or not.\n     */\n    (0, _inherits2.default)(CodeNode, _Node45);\n    return (0, _createClass2.default)(CodeNode, [{\n      key: \"isGlobal\",\n      value: function isGlobal() {\n        return true;\n      }\n\n      /**\n       * Sets the includes of this code node.\n       *\n       * @param {Array<Node>} includes - The includes to set.\n       * @return {CodeNode} A reference to this node.\n       */\n    }, {\n      key: \"setIncludes\",\n      value: function setIncludes(includes) {\n        this.includes = includes;\n        return this;\n      }\n\n      /**\n       * Returns the includes of this code node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Array<Node>} The includes.\n       */\n    }, {\n      key: \"getIncludes\",\n      value: function getIncludes(/*builder*/\n      ) {\n        return this.includes;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var includes = this.getIncludes(builder);\n        for (var include of includes) {\n          include.build(builder);\n        }\n        var nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));\n        nodeCode.code = this.code;\n        return nodeCode.code;\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(CodeNode, \"serialize\", this, 3)([data]);\n        data.code = this.code;\n        data.language = this.language;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(CodeNode, \"deserialize\", this, 3)([data]);\n        this.code = data.code;\n        this.language = data.language;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'CodeNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a code node.\n   *\n   * @function\n   * @param {String} [code=''] - The native code.\n   * @param {Array<Node>} [includes=[]] - An array of includes.\n   * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\n   * @returns {CodeNode}\n   */\n  var code = /*@__PURE__*/nodeProxy(CodeNode);\n\n  /**\n   * TSL function for creating a JS code node.\n   *\n   * @function\n   * @param {String} src - The native code.\n   * @param {Array<Node>} includes - An array of includes.\n   * @returns {CodeNode}\n   */\n  var js = function js(src, includes) {\n    return code(src, includes, 'js');\n  };\n\n  /**\n   * TSL function for creating a WGSL code node.\n   *\n   * @function\n   * @param {String} src - The native code.\n   * @param {Array<Node>} includes - An array of includes.\n   * @returns {CodeNode}\n   */\n  var wgsl = function wgsl(src, includes) {\n    return code(src, includes, 'wgsl');\n  };\n\n  /**\n   * TSL function for creating a GLSL code node.\n   *\n   * @function\n   * @param {String} src - The native code.\n   * @param {Array<Node>} includes - An array of includes.\n   * @returns {CodeNode}\n   */\n  var glsl = function glsl(src, includes) {\n    return code(src, includes, 'glsl');\n  };\n\n  /**\n   * This class represents a native shader function. It can be used to implement\n   * certain aspects of a node material with native shader code. There are two predefined\n   * TSL functions for easier usage.\n   *\n   * - `wgslFn`: Creates a WGSL function node.\n   * - `glslFn`: Creates a GLSL function node.\n   *\n   * A basic example with one include looks like so:\n   *\n   * ```js\n   * const desaturateWGSLFn = wgslFn( `\n   *\tfn desaturate( color:vec3<f32> ) -> vec3<f32> {\n   *\t\tlet lum = vec3<f32>( 0.299, 0.587, 0.114 );\n   *\t\treturn vec3<f32>( dot( lum, color ) );\n   *\t}`\n   *);\n   * const someWGSLFn = wgslFn( `\n   *\tfn someFn( color:vec3<f32> ) -> vec3<f32> {\n   * \t\treturn desaturate( color );\n   * \t}\n   * `, [ desaturateWGSLFn ] );\n   * material.colorNode = someWGSLFn( { color: texture( map ) } );\n   *```\n   * @augments CodeNode\n   */\n  var FunctionNode = exports.FunctionNode = /*#__PURE__*/function (_CodeNode) {\n    /**\n     * Constructs a new function node.\n     *\n     * @param {String} [code=''] - The native code.\n     * @param {Array<Node>} [includes=[]] - An array of includes.\n     * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\n     */\n    function FunctionNode() {\n      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      (0, _classCallCheck2.default)(this, FunctionNode);\n      return _callSuper(this, FunctionNode, [code, includes, language]);\n    }\n    (0, _inherits2.default)(FunctionNode, _CodeNode);\n    return (0, _createClass2.default)(FunctionNode, [{\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.getNodeFunction(builder).type;\n      }\n\n      /**\n       * Returns the inputs of this function node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {Array<NodeFunctionInput>} The inputs.\n       */\n    }, {\n      key: \"getInputs\",\n      value: function getInputs(builder) {\n        return this.getNodeFunction(builder).inputs;\n      }\n\n      /**\n       * Returns the node function for this function node.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {NodeFunction} The node function.\n       */\n    }, {\n      key: \"getNodeFunction\",\n      value: function getNodeFunction(builder) {\n        var nodeData = builder.getDataFromNode(this);\n        var nodeFunction = nodeData.nodeFunction;\n        if (nodeFunction === undefined) {\n          nodeFunction = builder.parser.parseFunction(this.code);\n          nodeData.nodeFunction = nodeFunction;\n        }\n        return nodeFunction;\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        _superPropGet(FunctionNode, \"generate\", this, 3)([builder]);\n        var nodeFunction = this.getNodeFunction(builder);\n        var name = nodeFunction.name;\n        var type = nodeFunction.type;\n        var nodeCode = builder.getCodeFromNode(this, type);\n        if (name !== '') {\n          // use a custom property name\n\n          nodeCode.name = name;\n        }\n        var propertyName = builder.getPropertyName(nodeCode);\n        var code = this.getNodeFunction(builder).getCode(propertyName);\n        nodeCode.code = code + '\\n';\n        if (output === 'property') {\n          return propertyName;\n        } else {\n          return builder.format(`${propertyName}()`, type, output);\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'FunctionNode';\n      }\n    }]);\n  }(CodeNode);\n  var nativeFn = function nativeFn(code) {\n    var includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    for (var i = 0; i < includes.length; i++) {\n      var include = includes[i];\n\n      // TSL Function: glslFn, wgslFn\n\n      if (typeof include === 'function') {\n        includes[i] = include.functionNode;\n      }\n    }\n    var functionNode = nodeObject(new FunctionNode(code, includes, language));\n    var fn = function fn() {\n      return functionNode.call.apply(functionNode, arguments);\n    };\n    fn.functionNode = functionNode;\n    return fn;\n  };\n  var glslFn = function glslFn(code, includes) {\n    return nativeFn(code, includes, 'glsl');\n  };\n  var wgslFn = function wgslFn(code, includes) {\n    return nativeFn(code, includes, 'wgsl');\n  };\n\n  /** @module ScriptableValueNode **/\n\n  /**\n   * `ScriptableNode` uses this class to manage script inputs and outputs.\n   *\n   * @augments Node\n   */\n  var ScriptableValueNode = exports.ScriptableValueNode = /*#__PURE__*/function (_Node46) {\n    /**\n     * Constructs a new scriptable node.\n     *\n     * @param {Any} [value=null] - The value.\n     */\n    function ScriptableValueNode() {\n      var _this152;\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, ScriptableValueNode);\n      _this152 = _callSuper(this, ScriptableValueNode);\n\n      /**\n       * A reference to the value.\n       *\n       * @private\n       * @default null\n       */\n      _this152._value = value;\n\n      /**\n       * Depending on the type of `_value`, this property might cache parsed data.\n       *\n       * @private\n       * @default null\n       */\n      _this152._cache = null;\n\n      /**\n       * If this node represents an input, this property represents the input type.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this152.inputType = null;\n\n      /**\n       * If this node represents an output, this property represents the output type.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this152.outputType = null;\n\n      /**\n       * An event dispatcher for managing events.\n       *\n       * @type {EventDispatcher}\n       */\n      _this152.events = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EventDispatcher)();\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this152.isScriptableValueNode = true;\n      return _this152;\n    }\n\n    /**\n     * Whether this node represents an output or not.\n     *\n     * @type {Boolean}\n     * @readonly\n     * @default true\n     */\n    (0, _inherits2.default)(ScriptableValueNode, _Node46);\n    return (0, _createClass2.default)(ScriptableValueNode, [{\n      key: \"isScriptableOutputNode\",\n      get: function get() {\n        return this.outputType !== null;\n      }\n    }, {\n      key: \"value\",\n      get:\n      /**\n       * The node's value.\n       *\n       * @type {Any}\n       */\n      function get() {\n        return this._value;\n      }\n\n      /**\n       * Dispatches the `refresh` event.\n       */,\n      set: function set(val) {\n        if (this._value === val) return;\n        if (this._cache && this.inputType === 'URL' && this.value.value instanceof ArrayBuffer) {\n          URL.revokeObjectURL(this._cache);\n          this._cache = null;\n        }\n        this._value = val;\n        this.events.dispatchEvent({\n          type: 'change'\n        });\n        this.refresh();\n      }\n    }, {\n      key: \"refresh\",\n      value: function refresh() {\n        this.events.dispatchEvent({\n          type: 'refresh'\n        });\n      }\n\n      /**\n       * The `value` property usually represents a node or even binary data in form of array buffers.\n       * In this case, this method tries to return the actual value behind the complex type.\n       *\n       * @return {Any} The value.\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        var value = this.value;\n        if (value && this._cache === null && this.inputType === 'URL' && value.value instanceof ArrayBuffer) {\n          this._cache = URL.createObjectURL(new Blob([value.value]));\n        } else if (value && value.value !== null && value.value !== undefined && ((this.inputType === 'URL' || this.inputType === 'String') && typeof value.value === 'string' || this.inputType === 'Number' && typeof value.value === 'number' || this.inputType === 'Vector2' && value.value.isVector2 || this.inputType === 'Vector3' && value.value.isVector3 || this.inputType === 'Vector4' && value.value.isVector4 || this.inputType === 'Color' && value.value.isColor || this.inputType === 'Matrix3' && value.value.isMatrix3 || this.inputType === 'Matrix4' && value.value.isMatrix4)) {\n          return value.value;\n        }\n        return this._cache || value;\n      }\n\n      /**\n       * Overwritten since the node type is inferred from the value.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.value && this.value.isNode ? this.value.getNodeType(builder) : 'float';\n      }\n    }, {\n      key: \"setup\",\n      value: function setup() {\n        return this.value && this.value.isNode ? this.value : float();\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(ScriptableValueNode, \"serialize\", this, 3)([data]);\n        if (this.value !== null) {\n          if (this.inputType === 'ArrayBuffer') {\n            data.value = arrayBufferToBase64(this.value);\n          } else {\n            data.value = this.value ? this.value.toJSON(data.meta).uuid : null;\n          }\n        } else {\n          data.value = null;\n        }\n        data.inputType = this.inputType;\n        data.outputType = this.outputType;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(ScriptableValueNode, \"deserialize\", this, 3)([data]);\n        var value = null;\n        if (data.value !== null) {\n          if (data.inputType === 'ArrayBuffer') {\n            value = base64ToArrayBuffer(data.value);\n          } else if (data.inputType === 'Texture') {\n            value = data.meta.textures[data.value];\n          } else {\n            value = data.meta.nodes[data.value] || null;\n          }\n        }\n        this.value = value;\n        this.inputType = data.inputType;\n        this.outputType = data.outputType;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ScriptableValueNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a scriptable value node.\n   *\n   * @function\n   * @param {Any} [value=null] - The value.\n   * @returns {ScriptableValueNode}\n   */\n  var scriptableValue = /*@__PURE__*/nodeProxy(ScriptableValueNode);\n\n  /** @module ScriptableNode **/\n\n  /**\n   * A Map-like data structure for managing resources of scriptable nodes.\n   *\n   * @augments Map\n   */\n  var Resources = /*#__PURE__*/function (_Map) {\n    function Resources() {\n      (0, _classCallCheck2.default)(this, Resources);\n      return _callSuper(this, Resources, arguments);\n    }\n    (0, _inherits2.default)(Resources, _Map);\n    return (0, _createClass2.default)(Resources, [{\n      key: \"get\",\n      value: function get(key) {\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (this.has(key)) return _superPropGet(Resources, \"get\", this, 3)([key]);\n        if (callback !== null) {\n          for (var _len27 = arguments.length, params = new Array(_len27 > 2 ? _len27 - 2 : 0), _key27 = 2; _key27 < _len27; _key27++) {\n            params[_key27 - 2] = arguments[_key27];\n          }\n          var value = callback.apply(void 0, params);\n          this.set(key, value);\n          return value;\n        }\n      }\n    }]);\n  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Map));\n  var Parameters = /*#__PURE__*/function () {\n    function Parameters(scriptableNode) {\n      (0, _classCallCheck2.default)(this, Parameters);\n      this.scriptableNode = scriptableNode;\n    }\n    return (0, _createClass2.default)(Parameters, [{\n      key: \"parameters\",\n      get: function get() {\n        return this.scriptableNode.parameters;\n      }\n    }, {\n      key: \"layout\",\n      get: function get() {\n        return this.scriptableNode.getLayout();\n      }\n    }, {\n      key: \"getInputLayout\",\n      value: function getInputLayout(id) {\n        return this.scriptableNode.getInputLayout(id);\n      }\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        var param = this.parameters[name];\n        var value = param ? param.getValue() : null;\n        return value;\n      }\n    }]);\n  }();\n  /**\n   * Defines the resouces (e.g. namespaces) of scriptable nodes.\n   *\n   * @type {Resources}\n   */\n  var ScriptableNodeResources = new Resources();\n\n  /**\n   * This type of node allows to implement nodes with custom scripts. The script\n   * section is represented as an instance of `CodeNode` written with JavaScript.\n   * The script itself must adhere to a specific structure.\n   *\n   * - main(): Executed once by default and every time `node.needsUpdate` is set.\n   * - layout: The layout object defines the script's interface (inputs and outputs).\n   *\n   * ```js\n   * ScriptableNodeResources.set( 'TSL', TSL );\n   *\n   * const scriptableNode = scriptable( js( `\n   * \tlayout = {\n   * \t\toutputType: 'node',\n   * \t\telements: [\n   * \t\t\t{ name: 'source', inputType: 'node' },\n   * \t\t]\n   * \t};\n   *\n   * \tconst { mul, oscSine } = TSL;\n   *\n   * \tfunction main() {\n   * \t\tconst source = parameters.get( 'source' ) || float();\n   * \t\treturn mul( source, oscSine() ) );\n   * \t}\n   *\n   * ` ) );\n   *\n   * scriptableNode.setParameter( 'source', color( 1, 0, 0 ) );\n   *\n   * const material = new THREE.MeshBasicNodeMaterial();\n   * material.colorNode = scriptableNode;\n   * ```\n   *\n   * @augments Node\n   */\n  var ScriptableNode = exports.ScriptableNode = /*#__PURE__*/function (_Node47) {\n    /**\n     * Constructs a new scriptable node.\n     *\n     * @param {CodeNode?} [codeNode=null] - The code node.\n     * @param {Object} [parameters={}] - The parameters definition.\n     */\n    function ScriptableNode() {\n      var _this153;\n      var codeNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, ScriptableNode);\n      _this153 = _callSuper(this, ScriptableNode);\n\n      /**\n       * The code node.\n       *\n       * @type {CodeNode?}\n       * @default null\n       */\n      _this153.codeNode = codeNode;\n\n      /**\n       * The parameters definition.\n       *\n       * @type {Object}\n       * @default {}\n       */\n      _this153.parameters = parameters;\n      _this153._local = new Resources();\n      _this153._output = scriptableValue();\n      _this153._outputs = {};\n      _this153._source = _this153.source;\n      _this153._method = null;\n      _this153._object = null;\n      _this153._value = null;\n      _this153._needsOutputUpdate = true;\n      _this153.onRefresh = _this153.onRefresh.bind(_this153);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this153.isScriptableNode = true;\n      return _this153;\n    }\n\n    /**\n     * The source code of the scriptable node.\n     *\n     * @type {String}\n     */\n    (0, _inherits2.default)(ScriptableNode, _Node47);\n    return (0, _createClass2.default)(ScriptableNode, [{\n      key: \"source\",\n      get: function get() {\n        return this.codeNode ? this.codeNode.code : '';\n      }\n\n      /**\n       * Sets the reference of a local script variable.\n       *\n       * @param {String} name - The variable name.\n       * @param {Object} value - The reference to set.\n       * @return {Resources} The resource map\n       */\n    }, {\n      key: \"setLocal\",\n      value: function setLocal(name, value) {\n        return this._local.set(name, value);\n      }\n\n      /**\n       * Gets the value of a local script variable.\n       *\n       * @param {String} name - The variable name.\n       * @return {Object} The value.\n       */\n    }, {\n      key: \"getLocal\",\n      value: function getLocal(name) {\n        return this._local.get(name);\n      }\n\n      /**\n       * Event listener for the `refresh` event.\n       */\n    }, {\n      key: \"onRefresh\",\n      value: function onRefresh() {\n        this._refresh();\n      }\n\n      /**\n       * Returns an input from the layout with the given id/name.\n       *\n       * @param {String} id - The id/name of the input.\n       * @return {Object} The element entry.\n       */\n    }, {\n      key: \"getInputLayout\",\n      value: function getInputLayout(id) {\n        for (var _element of this.getLayout()) {\n          if (_element.inputType && (_element.id === id || _element.name === id)) {\n            return _element;\n          }\n        }\n      }\n\n      /**\n       * Returns an output from the layout with the given id/name.\n       *\n       * @param {String} id - The id/name of the output.\n       * @return {Object} The element entry.\n       */\n    }, {\n      key: \"getOutputLayout\",\n      value: function getOutputLayout(id) {\n        for (var _element2 of this.getLayout()) {\n          if (_element2.outputType && (_element2.id === id || _element2.name === id)) {\n            return _element2;\n          }\n        }\n      }\n\n      /**\n       * Defines a script output for the given name and value.\n       *\n       * @param {String} name - The name of the output.\n       * @param {Node} value - The node value.\n       * @return {ScriptableNode} A reference to this node.\n       */\n    }, {\n      key: \"setOutput\",\n      value: function setOutput(name, value) {\n        var outputs = this._outputs;\n        if (outputs[name] === undefined) {\n          outputs[name] = scriptableValue(value);\n        } else {\n          outputs[name].value = value;\n        }\n        return this;\n      }\n\n      /**\n       * Returns a script output for the given name.\n       *\n       * @param {String} name - The name of the output.\n       * @return {ScriptableValueNode} The node value.\n       */\n    }, {\n      key: \"getOutput\",\n      value: function getOutput(name) {\n        return this._outputs[name];\n      }\n\n      /**\n       * Returns a paramater for the given name\n       *\n       * @param {String} name - The name of the parameter.\n       * @return {ScriptableValueNode} The node value.\n       */\n    }, {\n      key: \"getParameter\",\n      value: function getParameter(name) {\n        return this.parameters[name];\n      }\n\n      /**\n       * Sets a value for the given parameter name.\n       *\n       * @param {String} name - The parameter name.\n       * @param {Any} value - The parameter value.\n       * @return {ScriptableNode} A reference to this node.\n       */\n    }, {\n      key: \"setParameter\",\n      value: function setParameter(name, value) {\n        var parameters = this.parameters;\n        if (value && value.isScriptableNode) {\n          this.deleteParameter(name);\n          parameters[name] = value;\n          parameters[name].getDefaultOutput().events.addEventListener('refresh', this.onRefresh);\n        } else if (value && value.isScriptableValueNode) {\n          this.deleteParameter(name);\n          parameters[name] = value;\n          parameters[name].events.addEventListener('refresh', this.onRefresh);\n        } else if (parameters[name] === undefined) {\n          parameters[name] = scriptableValue(value);\n          parameters[name].events.addEventListener('refresh', this.onRefresh);\n        } else {\n          parameters[name].value = value;\n        }\n        return this;\n      }\n\n      /**\n       * Returns the value of this node which is the value of\n       * the default output.\n       *\n       * @return {Node} The value.\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        return this.getDefaultOutput().getValue();\n      }\n\n      /**\n       * Deletes a parameter from the script.\n       *\n       * @param {String} name - The parameter to remove.\n       * @return {ScriptableNode} A reference to this node.\n       */\n    }, {\n      key: \"deleteParameter\",\n      value: function deleteParameter(name) {\n        var valueNode = this.parameters[name];\n        if (valueNode) {\n          if (valueNode.isScriptableNode) valueNode = valueNode.getDefaultOutput();\n          valueNode.events.removeEventListener('refresh', this.onRefresh);\n        }\n        return this;\n      }\n\n      /**\n       * Deletes all parameters from the script.\n       *\n       * @return {ScriptableNode} A reference to this node.\n       */\n    }, {\n      key: \"clearParameters\",\n      value: function clearParameters() {\n        for (var name of Object.keys(this.parameters)) {\n          this.deleteParameter(name);\n        }\n        this.needsUpdate = true;\n        return this;\n      }\n\n      /**\n       * Calls a function from the script.\n       *\n       * @param {String} name - The function name.\n       * @param {...Any} params - A list of parameters.\n       * @return {Any} The result of the function call.\n       */\n    }, {\n      key: \"call\",\n      value: function call(name) {\n        var object = this.getObject();\n        var method = object[name];\n        if (typeof method === 'function') {\n          for (var _len28 = arguments.length, params = new Array(_len28 > 1 ? _len28 - 1 : 0), _key28 = 1; _key28 < _len28; _key28++) {\n            params[_key28 - 1] = arguments[_key28];\n          }\n          return method.apply(void 0, params);\n        }\n      }\n\n      /**\n       * Asynchronously calls a function from the script.\n       *\n       * @param {String} name - The function name.\n       * @param {...Any} params - A list of parameters.\n       * @return {Any} The result of the function call.\n       */\n    }, {\n      key: \"callAsync\",\n      value: (function () {\n        var _callAsync = (0, _asyncToGenerator2.default)(function* (name) {\n          var object = this.getObject();\n          var method = object[name];\n          if (typeof method === 'function') {\n            for (var _len29 = arguments.length, params = new Array(_len29 > 1 ? _len29 - 1 : 0), _key29 = 1; _key29 < _len29; _key29++) {\n              params[_key29 - 1] = arguments[_key29];\n            }\n            return method.constructor.name === 'AsyncFunction' ? yield method.apply(void 0, params) : method.apply(void 0, params);\n          }\n        });\n        function callAsync(_x2) {\n          return _callAsync.apply(this, arguments);\n        }\n        return callAsync;\n      }()\n      /**\n       * Overwritten since the node types is inferred from the script's output.\n       *\n       * @param {NodeBuilder} builder - The current node builder\n       * @return {String} The node type.\n       */\n      )\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.getDefaultOutputNode().getNodeType(builder);\n      }\n\n      /**\n       * Refreshes the script node.\n       *\n       * @param {String?} [output=null] - An optional output.\n       */\n    }, {\n      key: \"refresh\",\n      value: function refresh() {\n        var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        if (output !== null) {\n          this.getOutput(output).refresh();\n        } else {\n          this._refresh();\n        }\n      }\n\n      /**\n       * Returns an object representation of the script.\n       *\n       * @return {Object} The result object.\n       */\n    }, {\n      key: \"getObject\",\n      value: function getObject() {\n        var _this154 = this;\n        if (this.needsUpdate) this.dispose();\n        if (this._object !== null) return this._object;\n\n        //\n\n        var refresh = function refresh() {\n          return _this154.refresh();\n        };\n        var setOutput = function setOutput(id, value) {\n          return _this154.setOutput(id, value);\n        };\n        var parameters = new Parameters(this);\n        var THREE = ScriptableNodeResources.get('THREE');\n        var TSL = ScriptableNodeResources.get('TSL');\n        var method = this.getMethod();\n        var params = [parameters, this._local, ScriptableNodeResources, refresh, setOutput, THREE, TSL];\n        this._object = method.apply(void 0, params);\n        var layout = this._object.layout;\n        if (layout) {\n          if (layout.cache === false) {\n            this._local.clear();\n          }\n\n          // default output\n          this._output.outputType = layout.outputType || null;\n          if (Array.isArray(layout.elements)) {\n            for (var _element3 of layout.elements) {\n              var id = _element3.id || _element3.name;\n              if (_element3.inputType) {\n                if (this.getParameter(id) === undefined) this.setParameter(id, null);\n                this.getParameter(id).inputType = _element3.inputType;\n              }\n              if (_element3.outputType) {\n                if (this.getOutput(id) === undefined) this.setOutput(id, null);\n                this.getOutput(id).outputType = _element3.outputType;\n              }\n            }\n          }\n        }\n        return this._object;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(ScriptableNode, \"deserialize\", this, 3)([data]);\n        for (var name in this.parameters) {\n          var valueNode = this.parameters[name];\n          if (valueNode.isScriptableNode) valueNode = valueNode.getDefaultOutput();\n          valueNode.events.addEventListener('refresh', this.onRefresh);\n        }\n      }\n\n      /**\n       * Returns the layout of the script.\n       *\n       * @return {Object} The script's layout.\n       */\n    }, {\n      key: \"getLayout\",\n      value: function getLayout() {\n        return this.getObject().layout;\n      }\n\n      /**\n       * Returns default node output of the script.\n       *\n       * @return {Node} The default node output.\n       */\n    }, {\n      key: \"getDefaultOutputNode\",\n      value: function getDefaultOutputNode() {\n        var output = this.getDefaultOutput().value;\n        if (output && output.isNode) {\n          return output;\n        }\n        return float();\n      }\n\n      /**\n       * Returns default output of the script.\n       *\n       * @return {ScriptableValueNode} The default output.\n       */\n    }, {\n      key: \"getDefaultOutput\",\n      value: function getDefaultOutput() {\n        return this._exec()._output;\n      }\n\n      /**\n       * Returns a function created from the node's script.\n       *\n       * @return {Function} The function representing the node's code.\n       */\n    }, {\n      key: \"getMethod\",\n      value: function getMethod() {\n        if (this.needsUpdate) this.dispose();\n        if (this._method !== null) return this._method;\n\n        //\n\n        var parametersProps = ['parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL'];\n        var interfaceProps = ['layout', 'init', 'main', 'dispose'];\n        var properties = interfaceProps.join(', ');\n        var declarations = 'var ' + properties + '; var output = {};\\n';\n        var returns = '\\nreturn { ...output, ' + properties + ' };';\n        var code = declarations + this.codeNode.code + returns;\n\n        //\n\n        this._method = (0, _construct2.default)(Function, parametersProps.concat([code]));\n        return this._method;\n      }\n\n      /**\n       * Frees all internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this._method === null) return;\n        if (this._object && typeof this._object.dispose === 'function') {\n          this._object.dispose();\n        }\n        this._method = null;\n        this._object = null;\n        this._source = null;\n        this._value = null;\n        this._needsOutputUpdate = true;\n        this._output.value = null;\n        this._outputs = {};\n      }\n    }, {\n      key: \"setup\",\n      value: function setup() {\n        return this.getDefaultOutputNode();\n      }\n    }, {\n      key: \"getCacheKey\",\n      value: function getCacheKey(force) {\n        var values = [hashString(this.source), this.getDefaultOutputNode().getCacheKey(force)];\n        for (var param in this.parameters) {\n          values.push(this.parameters[param].getCacheKey(force));\n        }\n        return hashArray(values);\n      }\n    }, {\n      key: \"needsUpdate\",\n      get: function get() {\n        return this.source !== this._source;\n      }\n\n      /**\n       * Executes the `main` function of the script.\n       *\n       * @private\n       * @return {ScriptableNode} A reference to this node.\n       */,\n      set: function set(value) {\n        if (value === true) this.dispose();\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec() {\n        if (this.codeNode === null) return this;\n        if (this._needsOutputUpdate === true) {\n          this._value = this.call('main');\n          this._needsOutputUpdate = false;\n        }\n        this._output.value = this._value;\n        return this;\n      }\n\n      /**\n       * Executes the refresh.\n       *\n       * @private\n       */\n    }, {\n      key: \"_refresh\",\n      value: function _refresh() {\n        this.needsUpdate = true;\n        this._exec();\n        this._output.refresh();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ScriptableNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a scriptable node.\n   *\n   * @function\n   * @param {CodeNode?} [codeNode=null] - The code node.\n   * @param {Object} [parameters={}] - The parameters definition.\n   * @returns {ScriptableNode}\n   */\n  var scriptable = /*@__PURE__*/nodeProxy(ScriptableNode);\n\n  /** @module Fog **/\n\n  /**\n   * Returns a node that represents the `z` coordinate in view space\n   * for the current fragment. It's a different representation of the\n   * default depth value.\n   *\n   * This value can be part of a computation that defines how the fog\n   * density increases when moving away from the camera.\n   *\n   * @param {NodeBuilder} builder - The current node builder.\n   * @return {Node} The viewZ node.\n   */\n  function getViewZNode(builder) {\n    var viewZ;\n    var getViewZ = builder.context.getViewZ;\n    if (getViewZ !== undefined) {\n      viewZ = getViewZ(this);\n    }\n    return (viewZ || positionView.z).negate();\n  }\n\n  /**\n   * Constructs a new range factor node.\n   *\n   * @function\n   * @param {Node} near - Defines the near value.\n   * @param {Node} far - Defines the far value.\n   */\n  var rangeFogFactor = Fn(function (_ref179, builder) {\n    var _ref180 = (0, _slicedToArray2.default)(_ref179, 2),\n      near = _ref180[0],\n      far = _ref180[1];\n    var viewZ = getViewZNode(builder);\n    return smoothstep(near, far, viewZ);\n  });\n\n  /**\n   * Represents an exponential squared fog. This type of fog gives\n   * a clear view near the camera and a faster than exponentially\n   * densening fog farther from the camera.\n   *\n   * @function\n   * @param {Node} density - Defines the fog density.\n   */\n  var densityFogFactor = Fn(function (_ref181, builder) {\n    var _ref182 = (0, _slicedToArray2.default)(_ref181, 1),\n      density = _ref182[0];\n    var viewZ = getViewZNode(builder);\n    return density.mul(density, viewZ, viewZ).negate().exp().oneMinus();\n  });\n\n  /**\n   * This class can be used to configure a fog for the scene.\n   * Nodes of this type are assigned to `Scene.fogNode`.\n   *\n   * @function\n   * @param {Node} color - Defines the color of the fog.\n   * @param {Node} factor - Defines how the fog is factored in the scene.\n   */\n  var fog = Fn(function (_ref183) {\n    var _ref184 = (0, _slicedToArray2.default)(_ref183, 2),\n      color = _ref184[0],\n      factor = _ref184[1];\n    return vec4(factor.toFloat().mix(output.rgb, color.toVec3()), output.a);\n  });\n\n  // Deprecated\n\n  function rangeFog(color, near, far) {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"rangeFog( color, near, far )\" is deprecated. Use \"fog( color, rangeFogFactor( near, far ) )\" instead.');\n    return fog(color, rangeFogFactor(near, far));\n  }\n  function densityFog(color, density) {\n    // @deprecated, r171\n\n    console.warn('THREE.TSL: \"densityFog( color, density )\" is deprecated. Use \"fog( color, densityFogFactor( density ) )\" instead.');\n    return fog(color, densityFogFactor(density));\n  }\n\n  /** @module RangeNode **/\n\n  var min = null;\n  var max = null;\n\n  /**\n   * `RangeNode` generates random instanced attribute data in a defined range.\n   * An exemplary use case for this utility node is to generate random per-instance\n   * colors:\n   * ```js\n   * const material = new MeshBasicNodeMaterial();\n   * material.colorNode = range( new Color( 0x000000 ), new Color( 0xFFFFFF ) );\n   * const mesh = new InstancedMesh( geometry, material, count );\n   * ```\n   * @augments Node\n   */\n  var RangeNode = exports.RangeNode = /*#__PURE__*/function (_Node48) {\n    /**\n     * Constructs a new range node.\n     *\n     * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.\n     * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.\n     */\n    function RangeNode() {\n      var _this155;\n      var minNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : float();\n      var maxNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : float();\n      (0, _classCallCheck2.default)(this, RangeNode);\n      _this155 = _callSuper(this, RangeNode);\n\n      /**\n       *  A node defining the lower bound of the range.\n       *\n       * @type {Node<any>}\n       * @default float()\n       */\n      _this155.minNode = minNode;\n\n      /**\n       *  A node defining the upper bound of the range.\n       *\n       * @type {Node<any>}\n       * @default float()\n       */\n      _this155.maxNode = maxNode;\n      return _this155;\n    }\n\n    /**\n     * Returns the vector length which is computed based on the range definition.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {Number} The vector length.\n     */\n    (0, _inherits2.default)(RangeNode, _Node48);\n    return (0, _createClass2.default)(RangeNode, [{\n      key: \"getVectorLength\",\n      value: function getVectorLength(builder) {\n        var minLength = builder.getTypeLength(getValueType(this.minNode.value));\n        var maxLength = builder.getTypeLength(getValueType(this.maxNode.value));\n        return minLength > maxLength ? minLength : maxLength;\n      }\n\n      /**\n       * This method is overwritten since the node type is inferred from range definition.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return builder.object.count > 1 ? builder.getTypeFromLength(this.getVectorLength(builder)) : 'float';\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var object = builder.object;\n        var output = null;\n        if (object.count > 1) {\n          var minValue = this.minNode.value;\n          var maxValue = this.maxNode.value;\n          var minLength = builder.getTypeLength(getValueType(minValue));\n          var maxLength = builder.getTypeLength(getValueType(maxValue));\n          min = min || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n          max = max || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n          min.setScalar(0);\n          max.setScalar(0);\n          if (minLength === 1) min.setScalar(minValue);else if (minValue.isColor) min.set(minValue.r, minValue.g, minValue.b, 1);else min.set(minValue.x, minValue.y, minValue.z || 0, minValue.w || 0);\n          if (maxLength === 1) max.setScalar(maxValue);else if (maxValue.isColor) max.set(maxValue.r, maxValue.g, maxValue.b, 1);else max.set(maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0);\n          var stride = 4;\n          var _length = stride * object.count;\n          var array = new Float32Array(_length);\n          for (var i = 0; i < _length; i++) {\n            var index = i % stride;\n            var minElementValue = min.getComponent(index);\n            var maxElementValue = max.getComponent(index);\n            array[i] = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MathUtils.lerp(minElementValue, maxElementValue, Math.random());\n          }\n          var nodeType = this.getNodeType(builder);\n          if (object.count <= 4096) {\n            output = buffer(array, 'vec4', object.count).element(instanceIndex).convert(nodeType);\n          } else {\n            // TODO: Improve anonymous buffer attribute creation removing this part\n            var _bufferAttribute3 = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InstancedBufferAttribute)(array, 4);\n            builder.geometry.setAttribute('__range' + this.id, _bufferAttribute3);\n            output = instancedBufferAttribute(_bufferAttribute3).convert(nodeType);\n          }\n        } else {\n          output = float(0);\n        }\n        return output;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RangeNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a range node.\n   *\n   * @function\n   * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.\n   * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.\n   * @returns {RangeNode}\n   */\n  var range = /*@__PURE__*/nodeProxy(RangeNode);\n\n  /** @module ComputeBuiltinNode **/\n\n  /**\n   * `ComputeBuiltinNode` represents a compute-scope builtin value that expose information\n   * about the currently running dispatch and/or the device it is running on.\n   *\n   * This node can only be used with a WebGPU backend.\n   *\n   * @augments Node\n   */\n  var ComputeBuiltinNode = /*#__PURE__*/function (_Node49) {\n    /**\n     * Constructs a new compute builtin node.\n     *\n     * @param {String} builtinName - The built-in name.\n     * @param {String} nodeType - The node type.\n     */\n    function ComputeBuiltinNode(builtinName, nodeType) {\n      var _this156;\n      (0, _classCallCheck2.default)(this, ComputeBuiltinNode);\n      _this156 = _callSuper(this, ComputeBuiltinNode, [nodeType]);\n\n      /**\n       * The built-in name.\n       *\n       * @private\n       * @type {String}\n       */\n      _this156._builtinName = builtinName;\n      return _this156;\n    }\n\n    /**\n     * This method is overwritten since hash is derived from the built-in name.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The hash.\n     */\n    (0, _inherits2.default)(ComputeBuiltinNode, _Node49);\n    return (0, _createClass2.default)(ComputeBuiltinNode, [{\n      key: \"getHash\",\n      value: function getHash(builder) {\n        return this.getBuiltinName(builder);\n      }\n\n      /**\n       * This method is overwritten since the node type is simply derived from `nodeType`..\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(/*builder*/\n      ) {\n        return this.nodeType;\n      }\n\n      /**\n       * Sets the builtin name.\n       *\n       * @param {String} builtinName - The built-in name.\n       * @return {ComputeBuiltinNode} A reference to this node.\n       */\n    }, {\n      key: \"setBuiltinName\",\n      value: function setBuiltinName(builtinName) {\n        this._builtinName = builtinName;\n        return this;\n      }\n\n      /**\n       * Returns the builtin name.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The builtin name.\n       */\n    }, {\n      key: \"getBuiltinName\",\n      value: function getBuiltinName(/*builder*/\n      ) {\n        return this._builtinName;\n      }\n\n      /**\n       * Whether the current node builder has the builtin or not.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"hasBuiltin\",\n      value: function hasBuiltin(builder) {\n        builder.hasBuiltin(this._builtinName);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var builtinName = this.getBuiltinName(builder);\n        var nodeType = this.getNodeType(builder);\n        if (builder.shaderStage === 'compute') {\n          return builder.format(builtinName, nodeType, output);\n        } else {\n          console.warn(`ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage`);\n          return builder.generateConst(nodeType);\n        }\n      }\n    }, {\n      key: \"serialize\",\n      value: function serialize(data) {\n        _superPropGet(ComputeBuiltinNode, \"serialize\", this, 3)([data]);\n        data.global = this.global;\n        data._builtinName = this._builtinName;\n      }\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(data) {\n        _superPropGet(ComputeBuiltinNode, \"deserialize\", this, 3)([data]);\n        this.global = data.global;\n        this._builtinName = data._builtinName;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ComputeBuiltinNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a compute builtin node.\n   *\n   * @function\n   * @param {String} name - The built-in name.\n   * @param {String} nodeType - The node type.\n   * @returns {ComputeBuiltinNode}\n   */\n  var computeBuiltin = function computeBuiltin(name, nodeType) {\n    return nodeObject(new ComputeBuiltinNode(name, nodeType));\n  };\n\n  /**\n   * TSL function for creating a `numWorkgroups` builtin node.\n   * Represents the number of workgroups dispatched by the compute shader.\n   * ```js\n   * // Run 512 invocations/threads with a workgroup size of 128.\n   * const computeFn = Fn(() => {\n   *\n   *     // numWorkgroups.x = 4\n   *     storageBuffer.element(0).assign(numWorkgroups.x)\n   *\n   * })().compute(512, [128]);\n   *\n   * // Run 512 invocations/threads with the default workgroup size of 64.\n   * const computeFn = Fn(() => {\n   *\n   *     // numWorkgroups.x = 8\n   *     storageBuffer.element(0).assign(numWorkgroups.x)\n   *\n   * })().compute(512);\n   * ```\n   *\n   * @function\n   * @returns {ComputeBuiltinNode<uvec3>}\n   */\n  var numWorkgroups = /*@__PURE__*/computeBuiltin('numWorkgroups', 'uvec3');\n\n  /**\n   * TSL function for creating a `workgroupId` builtin node.\n   * Represents the 3-dimensional index of the workgroup the current compute invocation belongs to.\n   * ```js\n   * // Execute 12 compute threads with a workgroup size of 3.\n   * const computeFn = Fn( () => {\n   *\n   * \tIf( workgroupId.x.modInt( 2 ).equal( 0 ), () => {\n   *\n   * \t\tstorageBuffer.element( instanceIndex ).assign( instanceIndex );\n   *\n   * \t} ).Else( () => {\n   *\n   * \t\tstorageBuffer.element( instanceIndex ).assign( 0 );\n   *\n   * \t} );\n   *\n   * } )().compute( 12, [ 3 ] );\n   *\n   * // workgroupId.x =  [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3];\n   * // Buffer Output =  [0, 1, 2, 0, 0, 0, 6, 7, 8, 0, 0, 0];\n   * ```\n   *\n   * @function\n   * @returns {ComputeBuiltinNode<uvec3>}\n   */\n  var workgroupId = /*@__PURE__*/computeBuiltin('workgroupId', 'uvec3');\n\n  /**\n   * TSL function for creating a `localId` builtin node. A non-linearized 3-dimensional\n   * representation of the current invocation's position within a 3D workgroup grid.\n   *\n   * @function\n   * @returns {ComputeBuiltinNode<uvec3>}\n   */\n  var localId = /*@__PURE__*/computeBuiltin('localId', 'uvec3');\n\n  /**\n   * TSL function for creating a `subgroupSize` builtin node. A device dependent variable\n   * that exposes the size of the current invocation's subgroup.\n   *\n   * @function\n   * @returns {ComputeBuiltinNode<uint>}\n   */\n  var subgroupSize = /*@__PURE__*/computeBuiltin('subgroupSize', 'uint');\n\n  /** @module BarrierNode **/\n\n  /**\n   * Represents a GPU control barrier that synchronizes compute operations within a given scope.\n   *\n   * This node can only be used with a WebGPU backend.\n   *\n   * @augments Node\n   */\n  var BarrierNode = /*#__PURE__*/function (_Node50) {\n    /**\n     * Constructs a new barrier node.\n     *\n     * @param {String} scope - The scope defines the behavior of the node.\n     */\n    function BarrierNode(scope) {\n      var _this157;\n      (0, _classCallCheck2.default)(this, BarrierNode);\n      _this157 = _callSuper(this, BarrierNode);\n      _this157.scope = scope;\n      return _this157;\n    }\n    (0, _inherits2.default)(BarrierNode, _Node50);\n    return (0, _createClass2.default)(BarrierNode, [{\n      key: \"generate\",\n      value: function generate(builder) {\n        var scope = this.scope;\n        var renderer = builder.renderer;\n        if (renderer.backend.isWebGLBackend === true) {\n          builder.addFlowCode(`\\t// ${scope}Barrier \\n`);\n        } else {\n          builder.addLineFlowCode(`${scope}Barrier()`, this);\n        }\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a barrier node.\n   *\n   * @function\n   * @param {String} scope - The scope defines the behavior of the node..\n   * @returns {BarrierNode}\n   */\n  var barrier = nodeProxy(BarrierNode);\n\n  /**\n   * TSL function for creating a workgroup barrier. All compute shader\n   * invocations must wait for each invocation within a workgroup to\n   * complete before the barrier can be surpassed.\n   *\n   * @function\n   * @returns {BarrierNode}\n   */\n  var workgroupBarrier = function workgroupBarrier() {\n    return barrier('workgroup').append();\n  };\n\n  /**\n   * TSL function for creating a storage barrier. All invocations must\n   * wait for each access to variables within the 'storage' address space\n   * to complete before the barrier can be passed.\n   *\n   * @function\n   * @returns {BarrierNode}\n   */\n  var storageBarrier = function storageBarrier() {\n    return barrier('storage').append();\n  };\n\n  /**\n   * TSL function for creating a texture barrier. All invocations must\n   * wait for each access to variables within the 'texture' address space\n   * to complete before the barrier can be passed.\n   *\n   * @function\n   * @returns {BarrierNode}\n   */\n  var textureBarrier = function textureBarrier() {\n    return barrier('texture').append();\n  };\n\n  /** @module WorkgroupInfoNode **/\n\n  /**\n   * Represents an element of a 'workgroup' scoped buffer.\n   *\n   * @augments ArrayElementNode\n   */\n  var WorkgroupInfoElementNode = /*#__PURE__*/function (_ArrayElementNode5) {\n    /**\n     * Constructs a new workgroup info element node.\n     *\n     * @param {Node} workgroupInfoNode - The workgroup info node.\n     * @param {Node} indexNode - The index node that defines the element access.\n     */\n    function WorkgroupInfoElementNode(workgroupInfoNode, indexNode) {\n      var _this158;\n      (0, _classCallCheck2.default)(this, WorkgroupInfoElementNode);\n      _this158 = _callSuper(this, WorkgroupInfoElementNode, [workgroupInfoNode, indexNode]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this158.isWorkgroupInfoElementNode = true;\n      return _this158;\n    }\n    (0, _inherits2.default)(WorkgroupInfoElementNode, _ArrayElementNode5);\n    return (0, _createClass2.default)(WorkgroupInfoElementNode, [{\n      key: \"generate\",\n      value: function generate(builder, output) {\n        var snippet;\n        var isAssignContext = builder.context.assign;\n        snippet = _superPropGet(WorkgroupInfoElementNode, \"generate\", this, 3)([builder]);\n        if (isAssignContext !== true) {\n          var type = this.getNodeType(builder);\n          snippet = builder.format(snippet, type, output);\n        }\n\n        // TODO: Possibly activate clip distance index on index access rather than from clipping context\n\n        return snippet;\n      }\n    }]);\n  }(ArrayElementNode);\n  /**\n   * A node allowing the user to create a 'workgroup' scoped buffer within the\n   * context of a compute shader. Typically, workgroup scoped buffers are\n   * created to hold data that is transfered from a global storage scope into\n   * a local workgroup scope. For invocations within a workgroup, data\n   * access speeds on 'workgroup' scoped buffers can be significantly faster\n   * than similar access operations on globally accessible storage buffers.\n   *\n   * This node can only be used with a WebGPU backend.\n   *\n   * @augments Node\n   */\n  var WorkgroupInfoNode = /*#__PURE__*/function (_Node51) {\n    /**\n     * Constructs a new buffer scoped to type scope.\n     *\n     * @param {String} scope - TODO.\n     * @param {String} bufferType - The data type of a 'workgroup' scoped buffer element.\n     * @param {Number} [bufferCount=0] - The number of elements in the buffer.\n     */\n    function WorkgroupInfoNode(scope, bufferType) {\n      var _this159;\n      var bufferCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      (0, _classCallCheck2.default)(this, WorkgroupInfoNode);\n      _this159 = _callSuper(this, WorkgroupInfoNode, [bufferType]);\n\n      /**\n       * The buffer type.\n       *\n       * @type {String}\n       */\n      _this159.bufferType = bufferType;\n\n      /**\n       * The buffer count.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      _this159.bufferCount = bufferCount;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this159.isWorkgroupInfoNode = true;\n\n      /**\n       * The data type of the array buffer.\n       *\n       * @type {String}\n       */\n      _this159.elementType = bufferType;\n\n      /**\n       * TODO.\n       *\n       * @type {String}\n       */\n      _this159.scope = scope;\n      return _this159;\n    }\n\n    /**\n     * Sets the name/label of this node.\n     *\n     * @param {String} name - The name to set.\n     * @return {WorkgroupInfoNode} A reference to this node.\n     */\n    (0, _inherits2.default)(WorkgroupInfoNode, _Node51);\n    return (0, _createClass2.default)(WorkgroupInfoNode, [{\n      key: \"label\",\n      value: function label(name) {\n        this.name = name;\n        return this;\n      }\n\n      /**\n       * Sets the scope of this node.\n       *\n       * @param {String} scope - The scope to set.\n       * @return {WorkgroupInfoNode} A reference to this node.\n       */\n    }, {\n      key: \"setScope\",\n      value: function setScope(scope) {\n        this.scope = scope;\n        return this;\n      }\n\n      /**\n       * The data type of the array buffer.\n       *\n       * @return {String} The element type.\n       */\n    }, {\n      key: \"getElementType\",\n      value: function getElementType() {\n        return this.elementType;\n      }\n\n      /**\n       * Overwrites the default implementation since the input type\n       * is inferred from the scope.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The input type.\n       */\n    }, {\n      key: \"getInputType\",\n      value: function getInputType(/*builder*/\n      ) {\n        return `${this.scope}Array`;\n      }\n\n      /**\n       * This method can be used to access elements via an index node.\n       *\n       * @param {IndexNode} indexNode - indexNode.\n       * @return {WorkgroupInfoElementNode} A reference to an element.\n       */\n    }, {\n      key: \"element\",\n      value: function element(indexNode) {\n        return nodeObject(new WorkgroupInfoElementNode(this, indexNode));\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        return builder.getScopedArray(this.name || `${this.scope}Array_${this.id}`, this.scope.toLowerCase(), this.bufferType, this.bufferCount);\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating a workgroup info node.\n   * Creates a new 'workgroup' scoped array buffer.\n   *\n   * @function\n   * @param {String} type - The data type of a 'workgroup' scoped buffer element.\n   * @param {Number} [count=0] - The number of elements in the buffer.\n   * @returns {WorkgroupInfoNode}\n   */\n  var workgroupArray = function workgroupArray(type, count) {\n    return nodeObject(new WorkgroupInfoNode('Workgroup', type, count));\n  };\n\n  /** @module AtomicFunctionNode **/\n\n  /**\n   * `AtomicFunctionNode` represents any function that can operate on atomic variable types\n   * within a shader. In an atomic function, any modifiation to an atomic variable will\n   * occur as an indivisble step with a defined order relative to other modifications.\n   * Accordingly, even if multiple atomic functions are modifying an atomic variable at once\n   * atomic operations will not interfer with each other.\n   *\n   * This node can only be used with a WebGPU backend.\n   *\n   * @augments TempNode\n   */\n  var AtomicFunctionNode = /*#__PURE__*/function (_TempNode21) {\n    /**\n     * Constructs a new atomic function node.\n     *\n     * @param {String} method - The signature of the atomic function to construct.\n     * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n     * @param {Node} valueNode - The value that mutates the atomic variable.\n     * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n     */\n    function AtomicFunctionNode(method, pointerNode, valueNode) {\n      var _this160;\n      var storeNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, AtomicFunctionNode);\n      _this160 = _callSuper(this, AtomicFunctionNode, ['uint']);\n\n      /**\n       * The signature of the atomic function to construct.\n       *\n       * @type {String}\n       */\n      _this160.method = method;\n\n      /**\n       * An atomic variable or element of an atomic buffer.\n       *\n       * @type {Node}\n       */\n      _this160.pointerNode = pointerNode;\n\n      /**\n       * A value that modifies the atomic variable.\n       *\n       * @type {Node}\n       */\n      _this160.valueNode = valueNode;\n\n      /**\n       * A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this160.storeNode = storeNode;\n      return _this160;\n    }\n\n    /**\n     * Overwrites the default implementation to return the type of\n     * the pointer node.\n     *\n     * @param {NodeBuilder} builder - The current node builder.\n     * @return {String} The input type.\n     */\n    (0, _inherits2.default)(AtomicFunctionNode, _TempNode21);\n    return (0, _createClass2.default)(AtomicFunctionNode, [{\n      key: \"getInputType\",\n      value: function getInputType(builder) {\n        return this.pointerNode.getNodeType(builder);\n      }\n\n      /**\n       * Overwritten since the node type is inferred from the input type.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       * @return {String} The node type.\n       */\n    }, {\n      key: \"getNodeType\",\n      value: function getNodeType(builder) {\n        return this.getInputType(builder);\n      }\n    }, {\n      key: \"generate\",\n      value: function generate(builder) {\n        var method = this.method;\n        var type = this.getNodeType(builder);\n        var inputType = this.getInputType(builder);\n        var a = this.pointerNode;\n        var b = this.valueNode;\n        var params = [];\n        params.push(`&${a.build(builder, inputType)}`);\n        params.push(b.build(builder, inputType));\n        var methodSnippet = `${builder.getMethod(method, type)}( ${params.join(', ')} )`;\n        if (this.storeNode !== null) {\n          var varSnippet = this.storeNode.build(builder, inputType);\n          builder.addLineFlowCode(`${varSnippet} = ${methodSnippet}`, this);\n        } else {\n          builder.addLineFlowCode(methodSnippet, this);\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'AtomicFunctionNode';\n      }\n    }]);\n  }(TempNode);\n  AtomicFunctionNode.ATOMIC_LOAD = 'atomicLoad';\n  AtomicFunctionNode.ATOMIC_STORE = 'atomicStore';\n  AtomicFunctionNode.ATOMIC_ADD = 'atomicAdd';\n  AtomicFunctionNode.ATOMIC_SUB = 'atomicSub';\n  AtomicFunctionNode.ATOMIC_MAX = 'atomicMax';\n  AtomicFunctionNode.ATOMIC_MIN = 'atomicMin';\n  AtomicFunctionNode.ATOMIC_AND = 'atomicAnd';\n  AtomicFunctionNode.ATOMIC_OR = 'atomicOr';\n  AtomicFunctionNode.ATOMIC_XOR = 'atomicXor';\n\n  /**\n   * TSL function for creating an atomic function node.\n   *\n   * @function\n   * @param {String} method - The signature of the atomic function to construct.\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicNode = nodeProxy(AtomicFunctionNode);\n\n  /**\n   * TSL function for appending an atomic function call into the programmatic flow of a compute shader.\n   *\n   * @function\n   * @param {String} method - The signature of the atomic function to construct.\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicFunc = function atomicFunc(method, pointerNode, valueNode) {\n    var storeNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var node = atomicNode(method, pointerNode, valueNode, storeNode);\n    node.append();\n    return node;\n  };\n\n  /**\n   * Stores a value in the atomic variable.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicStore = function atomicStore(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_STORE, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Increments the value stored in the atomic variable.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicAdd = function atomicAdd(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_ADD, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Decrements the value stored in the atomic variable.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicSub = function atomicSub(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_SUB, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Stores in an atomic variable the maximum between its current value and a parameter.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicMax = function atomicMax(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_MAX, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Stores in an atomic variable the minimum between its current value and a parameter.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicMin = function atomicMin(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_MIN, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Stores in an atomic variable the bitwise AND of its value with a parameter.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicAnd = function atomicAnd(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_AND, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Stores in an atomic variable the bitwise OR of its value with a parameter.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicOr = function atomicOr(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_OR, pointerNode, valueNode, storeNode);\n  };\n\n  /**\n   * Stores in an atomic variable the bitwise XOR of its value with a parameter.\n   *\n   * @function\n   * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n   * @param {Node} valueNode - The value that mutates the atomic variable.\n   * @param {Node?} [storeNode=null] - A variable storing the return value of an atomic operation, typically the value of the atomic variable before the operation.\n   * @returns {AtomicFunctionNode}\n   */\n  var atomicXor = function atomicXor(pointerNode, valueNode) {\n    var storeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return atomicFunc(AtomicFunctionNode.ATOMIC_XOR, pointerNode, valueNode, storeNode);\n  };\n\n  /** @module Lights **/\n\n  var uniformsLib;\n  function getLightData(light) {\n    uniformsLib = uniformsLib || new WeakMap();\n    var uniforms = uniformsLib.get(light);\n    if (uniforms === undefined) uniformsLib.set(light, uniforms = {});\n    return uniforms;\n  }\n\n  /**\n   * TSL function for getting a shadow matrix uniform node for the given light.\n   *\n   * @function\n   * @param {Light} light -The light source.\n   * @returns {UniformNode<mat4>} The shadow matrix uniform node.\n   */\n  function lightShadowMatrix(light) {\n    var data = getLightData(light);\n    return data.shadowMatrix || (data.shadowMatrix = uniform('mat4').setGroup(renderGroup).onRenderUpdate(function () {\n      if (light.castShadow !== true) {\n        light.shadow.updateMatrices(light);\n      }\n      return light.shadow.matrix;\n    }));\n  }\n\n  /**\n   * TSL function for getting projected uv coordinates for the given light.\n   * Relevant when using maps with spot lights.\n   *\n   * @function\n   * @param {Light} light -The light source.\n   * @returns {Node<vec3>} The projected uvs.\n   */\n  function lightProjectionUV(light) {\n    var data = getLightData(light);\n    if (data.projectionUV === undefined) {\n      var spotLightCoord = lightShadowMatrix(light).mul(positionWorld);\n      data.projectionUV = spotLightCoord.xyz.div(spotLightCoord.w);\n    }\n    return data.projectionUV;\n  }\n\n  /**\n   * TSL function for getting the position in world space for the given light.\n   *\n   * @function\n   * @param {Light} light -The light source.\n   * @returns {UniformNode<vec3>} The light's position in world space.\n   */\n  function lightPosition(light) {\n    var data = getLightData(light);\n    return data.position || (data.position = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()).setGroup(renderGroup).onRenderUpdate(function (_, self) {\n      return self.value.setFromMatrixPosition(light.matrixWorld);\n    }));\n  }\n\n  /**\n   * TSL function for getting the light target position in world space for the given light.\n   *\n   * @function\n   * @param {Light} light -The light source.\n   * @returns {UniformNode<vec3>} The light target position in world space.\n   */\n  function lightTargetPosition(light) {\n    var data = getLightData(light);\n    return data.targetPosition || (data.targetPosition = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()).setGroup(renderGroup).onRenderUpdate(function (_, self) {\n      return self.value.setFromMatrixPosition(light.target.matrixWorld);\n    }));\n  }\n\n  /**\n   * TSL function for getting the position in view space for the given light.\n   *\n   * @function\n   * @param {Light} light -The light source.\n   * @returns {UniformNode<vec3>} The light's position in view space.\n   */\n  function lightViewPosition(light) {\n    var data = getLightData(light);\n    return data.viewPosition || (data.viewPosition = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()).setGroup(renderGroup).onRenderUpdate(function (_ref185, self) {\n      var camera = _ref185.camera;\n      self.value = self.value || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n      self.value.setFromMatrixPosition(light.matrixWorld);\n      self.value.applyMatrix4(camera.matrixWorldInverse);\n    }));\n  }\n\n  /**\n   * TSL function for getting the light target direction for the given light.\n   *\n   * @function\n   * @param {Light} light -The light source.\n   * @returns {Node<vec3>} The light's target direction.\n   */\n  var lightTargetDirection = function lightTargetDirection(light) {\n    return cameraViewMatrix.transformDirection(lightPosition(light).sub(lightTargetPosition(light)));\n  };\n\n  /** @module LightsNode **/\n\n  var sortLights = function sortLights(lights) {\n    return lights.sort(function (a, b) {\n      return a.id - b.id;\n    });\n  };\n  var getLightNodeById = function getLightNodeById(id, lightNodes) {\n    for (var lightNode of lightNodes) {\n      if (lightNode.isAnalyticLightNode && lightNode.light.id === id) {\n        return lightNode;\n      }\n    }\n    return null;\n  };\n  var _lightsNodeRef = /*@__PURE__*/new WeakMap();\n\n  /**\n   * This node represents the scene's lighting and manages the lighting model's life cycle\n   * for the current build 3D object. It is responsible for computing the total outgoing\n   * light in a given lighting context.\n   *\n   * @augments Node\n   */\n  var LightsNode = exports.LightsNode = /*#__PURE__*/function (_Node52) {\n    /**\n     * Constructs a new lights node.\n     */\n    function LightsNode() {\n      var _this161;\n      (0, _classCallCheck2.default)(this, LightsNode);\n      _this161 = _callSuper(this, LightsNode, ['vec3']);\n\n      /**\n       * A node representing the total diffuse light.\n       *\n       * @type {Node<vec3>}\n       */\n      _this161.totalDiffuseNode = vec3().toVar('totalDiffuse');\n\n      /**\n       * A node representing the total specular light.\n       *\n       * @type {Node<vec3>}\n       */\n      _this161.totalSpecularNode = vec3().toVar('totalSpecular');\n\n      /**\n       * A node representing the outgoing light.\n       *\n       * @type {Node<vec3>}\n       */\n      _this161.outgoingLightNode = vec3().toVar('outgoingLight');\n\n      /**\n       * An array representing the lights in the scene.\n       *\n       * @private\n       * @type {Array<Light>}\n       */\n      _this161._lights = [];\n\n      /**\n       * For each light in the scene, this node will create a\n       * corresponding light node.\n       *\n       * @private\n       * @type {Array<LightingNode>?}\n       * @default null\n       */\n      _this161._lightNodes = null;\n\n      /**\n       * A hash for identifying the current light nodes setup.\n       *\n       * @private\n       * @type {String?}\n       * @default null\n       */\n      _this161._lightNodesHash = null;\n\n      /**\n       * `LightsNode` sets this property to `true` by default.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this161.global = true;\n      return _this161;\n    }\n\n    /**\n     * Overwrites the default {@link Node#customCacheKey} implementation by including the\n     * light IDs into the cache key.\n     *\n     * @return {Number} The custom cache key.\n     */\n    (0, _inherits2.default)(LightsNode, _Node52);\n    return (0, _createClass2.default)(LightsNode, [{\n      key: \"customCacheKey\",\n      value: function customCacheKey() {\n        var lightIDs = [];\n        var lights = this._lights;\n        for (var i = 0; i < lights.length; i++) {\n          lightIDs.push(lights[i].id);\n        }\n        return hashArray(lightIDs);\n      }\n\n      /**\n       * Computes a hash value for identifying the current light nodes setup.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @return {String} The computed hash.\n       */\n    }, {\n      key: \"getHash\",\n      value: function getHash(builder) {\n        if (this._lightNodesHash === null) {\n          if (this._lightNodes === null) this.setupLightsNode(builder);\n          var _hash = [];\n          for (var lightNode of this._lightNodes) {\n            _hash.push(lightNode.getSelf().getHash());\n          }\n          this._lightNodesHash = 'lights-' + _hash.join(',');\n        }\n        return this._lightNodesHash;\n      }\n    }, {\n      key: \"analyze\",\n      value: function analyze(builder) {\n        var properties = builder.getDataFromNode(this);\n        for (var node of properties.nodes) {\n          node.build(builder);\n        }\n      }\n\n      /**\n       * Creates lighting nodes for each scene light. This makes it possible to further\n       * process lights in the node system.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       */\n    }, {\n      key: \"setupLightsNode\",\n      value: function setupLightsNode(builder) {\n        var lightNodes = [];\n        var previousLightNodes = this._lightNodes;\n        var lights = sortLights(this._lights);\n        var nodeLibrary = builder.renderer.library;\n        for (var light of lights) {\n          if (light.isNode) {\n            lightNodes.push(nodeObject(light));\n          } else {\n            var lightNode = null;\n            if (previousLightNodes !== null) {\n              lightNode = getLightNodeById(light.id, previousLightNodes); // reuse existing light node\n            }\n            if (lightNode === null) {\n              // find the corresponding node type for a given light\n\n              var lightNodeClass = nodeLibrary.getLightNodeClass(light.constructor);\n              if (lightNodeClass === null) {\n                console.warn(`LightsNode.setupNodeLights: Light node not found for ${light.constructor.name}`);\n                continue;\n              }\n              var _lightNode = null;\n              if (!_lightsNodeRef.has(light)) {\n                _lightNode = nodeObject(new lightNodeClass(light));\n                _lightsNodeRef.set(light, _lightNode);\n              } else {\n                _lightNode = _lightsNodeRef.get(light);\n              }\n              lightNodes.push(_lightNode);\n            }\n          }\n        }\n        this._lightNodes = lightNodes;\n      }\n\n      /**\n       * Setups the internal lights by building all respective\n       * light nodes.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @param {Array<LightingNode>} lightNodes - An array of lighting nodes.\n       */\n    }, {\n      key: \"setupLights\",\n      value: function setupLights(builder, lightNodes) {\n        for (var lightNode of lightNodes) {\n          lightNode.build(builder);\n        }\n      }\n\n      /**\n       * The implementation makes sure that for each light in the scene\n       * there is a corresponding light node. By building the light nodes\n       * and evaluating the lighting model the outgoing light is computed.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @return {Node<vec3>} A node representing the outgoing light.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        if (this._lightNodes === null) this.setupLightsNode(builder);\n        var context = builder.context;\n        var lightingModel = context.lightingModel;\n        var outgoingLightNode = this.outgoingLightNode;\n        if (lightingModel) {\n          var _lightNodes = this._lightNodes,\n            totalDiffuseNode = this.totalDiffuseNode,\n            totalSpecularNode = this.totalSpecularNode;\n          context.outgoingLight = outgoingLightNode;\n          var _stack = builder.addStack();\n\n          //\n\n          var properties = builder.getDataFromNode(this);\n          properties.nodes = _stack.nodes;\n\n          //\n\n          lightingModel.start(context, _stack, builder);\n\n          // lights\n\n          this.setupLights(builder, _lightNodes);\n\n          //\n\n          lightingModel.indirect(context, _stack, builder);\n\n          //\n\n          var backdrop = context.backdrop,\n            backdropAlpha = context.backdropAlpha;\n          var _context$reflectedLig = context.reflectedLight,\n            directDiffuse = _context$reflectedLig.directDiffuse,\n            directSpecular = _context$reflectedLig.directSpecular,\n            indirectDiffuse = _context$reflectedLig.indirectDiffuse,\n            indirectSpecular = _context$reflectedLig.indirectSpecular;\n          var totalDiffuse = directDiffuse.add(indirectDiffuse);\n          if (backdrop !== null) {\n            if (backdropAlpha !== null) {\n              totalDiffuse = vec3(backdropAlpha.mix(totalDiffuse, backdrop));\n            } else {\n              totalDiffuse = vec3(backdrop);\n            }\n            context.material.transparent = true;\n          }\n          totalDiffuseNode.assign(totalDiffuse);\n          totalSpecularNode.assign(directSpecular.add(indirectSpecular));\n          outgoingLightNode.assign(totalDiffuseNode.add(totalSpecularNode));\n\n          //\n\n          lightingModel.finish(context, _stack, builder);\n\n          //\n\n          outgoingLightNode = outgoingLightNode.bypass(builder.removeStack());\n        }\n        return outgoingLightNode;\n      }\n\n      /**\n       * Configures this node with an array of lights.\n       *\n       * @param {Array<Light>} lights - An array of lights.\n       * @return {LightsNode} A reference to this node.\n       */\n    }, {\n      key: \"setLights\",\n      value: function setLights(lights) {\n        this._lights = lights;\n        this._lightNodes = null;\n        this._lightNodesHash = null;\n        return this;\n      }\n\n      /**\n       * Returns an array of the scene's lights.\n       *\n       * @return {Array<Light>} The scene's lights.\n       */\n    }, {\n      key: \"getLights\",\n      value: function getLights() {\n        return this._lights;\n      }\n\n      /**\n       * Whether the scene has lights or not.\n       *\n       * @type {Boolean}\n       */\n    }, {\n      key: \"hasLights\",\n      get: function get() {\n        return this._lights.length > 0;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'LightsNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL function for creating an instance of `LightsNode` and configuring\n   * it with the given array of lights.\n   *\n   * @function\n   * @param {Array<Light>} lights - An array of lights.\n   * @return {LightsNode} The created lights node.\n   */\n  var lights = function lights() {\n    var lights = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return nodeObject(new LightsNode()).setLights(lights);\n  };\n\n  /** @module ShadowBaseNode **/\n\n  /**\n   * Base class for all shadow nodes.\n   *\n   * Shadow nodes encapsulate shadow related logic and are always coupled to lighting nodes.\n   * Lighting nodes might share the same shadow node type or use specific ones depending on\n   * their requirements.\n   *\n   * @augments Node\n   */\n  var ShadowBaseNode = exports.ShadowBaseNode = /*#__PURE__*/function (_Node53) {\n    /**\n     * Constructs a new shadow base node.\n     *\n     * @param {Light} light - The shadow casting light.\n     */\n    function ShadowBaseNode(light) {\n      var _this162;\n      (0, _classCallCheck2.default)(this, ShadowBaseNode);\n      _this162 = _callSuper(this, ShadowBaseNode);\n\n      /**\n       * The shadow casting light.\n       *\n       * @type {Light}\n       */\n      _this162.light = light;\n\n      /**\n       * Overwritten since shadows are updated by default per render.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this162.updateBeforeType = NodeUpdateType.RENDER;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this162.isShadowBaseNode = true;\n      return _this162;\n    }\n\n    /**\n     * Setups the shadow position node which is by default the predefined TSL node object `shadowPositionWorld`.\n     *\n     * @param {(NodeBuilder|{Material})} object - A configuration object that must at least hold a material reference.\n     */\n    (0, _inherits2.default)(ShadowBaseNode, _Node53);\n    return (0, _createClass2.default)(ShadowBaseNode, [{\n      key: \"setupShadowPosition\",\n      value: function setupShadowPosition(_ref186) {\n        var material = _ref186.material;\n        // Use assign inside an Fn()\n\n        shadowPositionWorld.assign(material.shadowPositionNode || positionWorld);\n      }\n\n      /**\n       * Can be called when the shadow isn't required anymore. That can happen when\n       * a lighting node stops casting shadows by setting {@link Object3D#castShadow}\n       * to `false`.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.updateBeforeType = NodeUpdateType.NONE;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ShadowBaseNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * TSL object that represents the vertex position in world space during the shadow pass.\n   *\n   * @type {Node<vec3>}\n   */\n  var shadowPositionWorld = /*@__PURE__*/vec3().toVar('shadowPositionWorld');\n\n  /** @module RendererUtils **/\n\n  /**\n   * Saves the state of the given renderer and stores it into the given state object.\n   *\n   * If not state object is provided, the function creates one.\n   *\n   * @function\n   * @param {Renderer} renderer - The renderer.\n   * @param {Object} [state={}] - The state.\n   * @return {Object} The state.\n   */\n  function saveRendererState(renderer) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    state.toneMapping = renderer.toneMapping;\n    state.toneMappingExposure = renderer.toneMappingExposure;\n    state.outputColorSpace = renderer.outputColorSpace;\n    state.renderTarget = renderer.getRenderTarget();\n    state.activeCubeFace = renderer.getActiveCubeFace();\n    state.activeMipmapLevel = renderer.getActiveMipmapLevel();\n    state.renderObjectFunction = renderer.getRenderObjectFunction();\n    state.pixelRatio = renderer.getPixelRatio();\n    state.mrt = renderer.getMRT();\n    state.clearColor = renderer.getClearColor(state.clearColor || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)());\n    state.clearAlpha = renderer.getClearAlpha();\n    state.autoClear = renderer.autoClear;\n    state.scissorTest = renderer.getScissorTest();\n    return state;\n  }\n\n  /**\n   * Saves the state of the given renderer and stores it into the given state object.\n   * Besides, the function also resets the state of the renderer to its default values.\n   *\n   * If not state object is provided, the function creates one.\n   *\n   * @function\n   * @param {Renderer} renderer - The renderer.\n   * @param {Object} [state={}] - The state.\n   * @return {Object} The state.\n   */\n  function resetRendererState(renderer, state) {\n    state = saveRendererState(renderer, state);\n    renderer.setMRT(null);\n    renderer.setRenderObjectFunction(null);\n    renderer.setClearColor(0x000000, 1);\n    renderer.autoClear = true;\n    return state;\n  }\n\n  /**\n   * Restores the state of the given renderer from the given state object.\n   *\n   * @function\n   * @param {Renderer} renderer - The renderer.\n   * @param {Object} state - The state to restore.\n   */\n  function restoreRendererState(renderer, state) {\n    renderer.toneMapping = state.toneMapping;\n    renderer.toneMappingExposure = state.toneMappingExposure;\n    renderer.outputColorSpace = state.outputColorSpace;\n    renderer.setRenderTarget(state.renderTarget, state.activeCubeFace, state.activeMipmapLevel);\n    renderer.setRenderObjectFunction(state.renderObjectFunction);\n    renderer.setPixelRatio(state.pixelRatio);\n    renderer.setMRT(state.mrt);\n    renderer.setClearColor(state.clearColor, state.clearAlpha);\n    renderer.autoClear = state.autoClear;\n    renderer.setScissorTest(state.scissorTest);\n  }\n\n  /**\n   * Saves the state of the given scene and stores it into the given state object.\n   *\n   * If not state object is provided, the function creates one.\n   *\n   * @function\n   * @param {Scene} scene - The scene.\n   * @param {Object} [state={}] - The state.\n   * @return {Object} The state.\n   */\n  function saveSceneState(scene) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    state.background = scene.background;\n    state.backgroundNode = scene.backgroundNode;\n    state.overrideMaterial = scene.overrideMaterial;\n    return state;\n  }\n\n  /**\n   * Saves the state of the given scene and stores it into the given state object.\n   * Besides, the function also resets the state of the scene to its default values.\n   *\n   * If not state object is provided, the function creates one.\n   *\n   * @function\n   * @param {Scene} scene - The scene.\n   * @param {Object} [state={}] - The state.\n   * @return {Object} The state.\n   */\n  function resetSceneState(scene, state) {\n    state = saveSceneState(scene, state);\n    scene.background = null;\n    scene.backgroundNode = null;\n    scene.overrideMaterial = null;\n    return state;\n  }\n\n  /**\n   * Restores the state of the given scene from the given state object.\n   *\n   * @function\n   * @param {Scene} scene - The scene.\n   * @param {Object} state - The state to restore.\n   */\n  function restoreSceneState(scene, state) {\n    scene.background = state.background;\n    scene.backgroundNode = state.backgroundNode;\n    scene.overrideMaterial = state.overrideMaterial;\n  }\n\n  /**\n   * Saves the state of the given renderer and scene and stores it into the given state object.\n   *\n   * If not state object is provided, the function creates one.\n   *\n   * @function\n   * @param {Renderer} renderer - The renderer.\n   * @param {Scene} scene - The scene.\n   * @param {Object} [state={}] - The state.\n   * @return {Object} The state.\n   */\n  function saveRendererAndSceneState(renderer, scene) {\n    var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    state = saveRendererState(renderer, state);\n    state = saveSceneState(scene, state);\n    return state;\n  }\n\n  /**\n   * Saves the state of the given renderer and scene and stores it into the given state object.\n   * Besides, the function also resets the state of the renderer and scene to its default values.\n   *\n   * If not state object is provided, the function creates one.\n   *\n   * @function\n   * @param {Renderer} renderer - The renderer.\n   * @param {Scene} scene - The scene.\n   * @param {Object} [state={}] - The state.\n   * @return {Object} The state.\n   */\n  function resetRendererAndSceneState(renderer, scene, state) {\n    state = resetRendererState(renderer, state);\n    state = resetSceneState(scene, state);\n    return state;\n  }\n\n  /**\n   * Restores the state of the given renderer and scene from the given state object.\n   *\n   * @function\n   * @param {Renderer} renderer - The renderer.\n   * @param {Scene} scene - The scene.\n   * @param {Object} state - The state to restore.\n   */\n  function restoreRendererAndSceneState(renderer, scene, state) {\n    restoreRendererState(renderer, state);\n    restoreSceneState(scene, state);\n  }\n  var RendererUtils = exports.RendererUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    resetRendererAndSceneState: resetRendererAndSceneState,\n    resetRendererState: resetRendererState,\n    resetSceneState: resetSceneState,\n    restoreRendererAndSceneState: restoreRendererAndSceneState,\n    restoreRendererState: restoreRendererState,\n    restoreSceneState: restoreSceneState,\n    saveRendererAndSceneState: saveRendererAndSceneState,\n    saveRendererState: saveRendererState,\n    saveSceneState: saveSceneState\n  });\n\n  /** @module ShadowNode **/\n\n  var shadowMaterialLib = /*@__PURE__*/new WeakMap();\n  var linearDistance = /*@__PURE__*/Fn(function (_ref187) {\n    var _ref188 = (0, _slicedToArray2.default)(_ref187, 3),\n      position = _ref188[0],\n      cameraNear = _ref188[1],\n      cameraFar = _ref188[2];\n    var dist = positionWorld.sub(position).length();\n    dist = dist.sub(cameraNear).div(cameraFar.sub(cameraNear));\n    dist = dist.saturate(); // clamp to [ 0, 1 ]\n\n    return dist;\n  });\n  var linearShadowDistance = function linearShadowDistance(light) {\n    var camera = light.shadow.camera;\n    var nearDistance = reference('near', 'float', camera).setGroup(renderGroup);\n    var farDistance = reference('far', 'float', camera).setGroup(renderGroup);\n    var referencePosition = objectPosition(light);\n    return linearDistance(referencePosition, nearDistance, farDistance);\n  };\n  var getShadowMaterial = function getShadowMaterial(light) {\n    var material = shadowMaterialLib.get(light);\n    if (material === undefined) {\n      var depthNode = light.isPointLight ? linearShadowDistance(light) : null;\n      material = new NodeMaterial();\n      material.colorNode = vec4(0, 0, 0, 1);\n      material.depthNode = depthNode;\n      material.isShadowNodeMaterial = true; // Use to avoid other overrideMaterial override material.colorNode unintentionally when using material.shadowNode\n      material.name = 'ShadowMaterial';\n      material.fog = false;\n      shadowMaterialLib.set(light, material);\n    }\n    return material;\n  };\n\n  /**\n   * A shadow filtering function performing basic filtering. This is in fact an unfiltered version of the shadow map\n   * with a binary `[0,1]` result.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n   * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n   * @return {Node<float>} The filtering result.\n   */\n  var BasicShadowFilter = /*@__PURE__*/Fn(function (_ref189) {\n    var depthTexture = _ref189.depthTexture,\n      shadowCoord = _ref189.shadowCoord;\n    return texture(depthTexture, shadowCoord.xy).compare(shadowCoord.z);\n  });\n\n  /**\n   * A shadow filtering function performing PCF filtering.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n   * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n   * @param {LightShadow} inputs.shadow - The light shadow.\n   * @return {Node<float>} The filtering result.\n   */\n  var PCFShadowFilter = /*@__PURE__*/Fn(function (_ref190) {\n    var depthTexture = _ref190.depthTexture,\n      shadowCoord = _ref190.shadowCoord,\n      shadow = _ref190.shadow;\n    var depthCompare = function depthCompare(uv, compare) {\n      return texture(depthTexture, uv).compare(compare);\n    };\n    var mapSize = reference('mapSize', 'vec2', shadow).setGroup(renderGroup);\n    var radius = reference('radius', 'float', shadow).setGroup(renderGroup);\n    var texelSize = vec2(1).div(mapSize);\n    var dx0 = texelSize.x.negate().mul(radius);\n    var dy0 = texelSize.y.negate().mul(radius);\n    var dx1 = texelSize.x.mul(radius);\n    var dy1 = texelSize.y.mul(radius);\n    var dx2 = dx0.div(2);\n    var dy2 = dy0.div(2);\n    var dx3 = dx1.div(2);\n    var dy3 = dy1.div(2);\n    return add(depthCompare(shadowCoord.xy.add(vec2(dx0, dy0)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(0, dy0)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx1, dy0)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx2, dy2)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(0, dy2)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx3, dy2)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx0, 0)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx2, 0)), shadowCoord.z), depthCompare(shadowCoord.xy, shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx3, 0)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx1, 0)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx2, dy3)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(0, dy3)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx3, dy3)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx0, dy1)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(0, dy1)), shadowCoord.z), depthCompare(shadowCoord.xy.add(vec2(dx1, dy1)), shadowCoord.z)).mul(1 / 17);\n  });\n\n  /**\n   * A shadow filtering function performing PCF soft filtering.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n   * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n   * @param {LightShadow} inputs.shadow - The light shadow.\n   * @return {Node<float>} The filtering result.\n   */\n  var PCFSoftShadowFilter = /*@__PURE__*/Fn(function (_ref191) {\n    var depthTexture = _ref191.depthTexture,\n      shadowCoord = _ref191.shadowCoord,\n      shadow = _ref191.shadow;\n    var depthCompare = function depthCompare(uv, compare) {\n      return texture(depthTexture, uv).compare(compare);\n    };\n    var mapSize = reference('mapSize', 'vec2', shadow).setGroup(renderGroup);\n    var texelSize = vec2(1).div(mapSize);\n    var dx = texelSize.x;\n    var dy = texelSize.y;\n    var uv = shadowCoord.xy;\n    var f = fract(uv.mul(mapSize).add(0.5));\n    uv.subAssign(f.mul(texelSize));\n    return add(depthCompare(uv, shadowCoord.z), depthCompare(uv.add(vec2(dx, 0)), shadowCoord.z), depthCompare(uv.add(vec2(0, dy)), shadowCoord.z), depthCompare(uv.add(texelSize), shadowCoord.z), mix(depthCompare(uv.add(vec2(dx.negate(), 0)), shadowCoord.z), depthCompare(uv.add(vec2(dx.mul(2), 0)), shadowCoord.z), f.x), mix(depthCompare(uv.add(vec2(dx.negate(), dy)), shadowCoord.z), depthCompare(uv.add(vec2(dx.mul(2), dy)), shadowCoord.z), f.x), mix(depthCompare(uv.add(vec2(0, dy.negate())), shadowCoord.z), depthCompare(uv.add(vec2(0, dy.mul(2))), shadowCoord.z), f.y), mix(depthCompare(uv.add(vec2(dx, dy.negate())), shadowCoord.z), depthCompare(uv.add(vec2(dx, dy.mul(2))), shadowCoord.z), f.y), mix(mix(depthCompare(uv.add(vec2(dx.negate(), dy.negate())), shadowCoord.z), depthCompare(uv.add(vec2(dx.mul(2), dy.negate())), shadowCoord.z), f.x), mix(depthCompare(uv.add(vec2(dx.negate(), dy.mul(2))), shadowCoord.z), depthCompare(uv.add(vec2(dx.mul(2), dy.mul(2))), shadowCoord.z), f.x), f.y)).mul(1 / 9);\n  });\n\n  /**\n   * A shadow filtering function performing VSM filtering.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n   * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n   * @return {Node<float>} The filtering result.\n   */\n  var VSMShadowFilter = /*@__PURE__*/Fn(function (_ref192) {\n    var depthTexture = _ref192.depthTexture,\n      shadowCoord = _ref192.shadowCoord;\n    var occlusion = float(1).toVar();\n    var distribution = texture(depthTexture).sample(shadowCoord.xy).rg;\n    var hardShadow = step(shadowCoord.z, distribution.x);\n    If(hardShadow.notEqual(float(1.0)), function () {\n      var distance = shadowCoord.z.sub(distribution.x);\n      var variance = max$1(0, distribution.y.mul(distribution.y));\n      var softnessProbability = variance.div(variance.add(distance.mul(distance))); // Chebeyshevs inequality\n      softnessProbability = clamp(sub(softnessProbability, 0.3).div(0.95 - 0.3));\n      occlusion.assign(clamp(max$1(hardShadow, softnessProbability)));\n    });\n    return occlusion;\n  });\n\n  /**\n   * Represents the shader code for the first VSM render pass.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {Node<float>} inputs.samples - The number of samples\n   * @param {Node<float>} inputs.radius - The radius.\n   * @param {Node<float>} inputs.size - The size.\n   * @param {TextureNode} inputs.shadowPass - A reference to the render target's depth data.\n   * @return {Node<vec2>} The VSM output.\n   */\n  var VSMPassVertical = /*@__PURE__*/Fn(function (_ref193) {\n    var samples = _ref193.samples,\n      radius = _ref193.radius,\n      size = _ref193.size,\n      shadowPass = _ref193.shadowPass;\n    var mean = float(0).toVar();\n    var squaredMean = float(0).toVar();\n    var uvStride = samples.lessThanEqual(float(1)).select(float(0), float(2).div(samples.sub(1)));\n    var uvStart = samples.lessThanEqual(float(1)).select(float(0), float(-1));\n    Loop({\n      start: int(0),\n      end: int(samples),\n      type: 'int',\n      condition: '<'\n    }, function (_ref194) {\n      var i = _ref194.i;\n      var uvOffset = uvStart.add(float(i).mul(uvStride));\n      var depth = shadowPass.sample(add(screenCoordinate.xy, vec2(0, uvOffset).mul(radius)).div(size)).x;\n      mean.addAssign(depth);\n      squaredMean.addAssign(depth.mul(depth));\n    });\n    mean.divAssign(samples);\n    squaredMean.divAssign(samples);\n    var std_dev = sqrt(squaredMean.sub(mean.mul(mean)));\n    return vec2(mean, std_dev);\n  });\n\n  /**\n   * Represents the shader code for the second VSM render pass.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {Node<float>} inputs.samples - The number of samples\n   * @param {Node<float>} inputs.radius - The radius.\n   * @param {Node<float>} inputs.size - The size.\n   * @param {TextureNode} inputs.shadowPass - The result of the first VSM render pass.\n   * @return {Node<vec2>} The VSM output.\n   */\n  var VSMPassHorizontal = /*@__PURE__*/Fn(function (_ref195) {\n    var samples = _ref195.samples,\n      radius = _ref195.radius,\n      size = _ref195.size,\n      shadowPass = _ref195.shadowPass;\n    var mean = float(0).toVar();\n    var squaredMean = float(0).toVar();\n    var uvStride = samples.lessThanEqual(float(1)).select(float(0), float(2).div(samples.sub(1)));\n    var uvStart = samples.lessThanEqual(float(1)).select(float(0), float(-1));\n    Loop({\n      start: int(0),\n      end: int(samples),\n      type: 'int',\n      condition: '<'\n    }, function (_ref196) {\n      var i = _ref196.i;\n      var uvOffset = uvStart.add(float(i).mul(uvStride));\n      var distribution = shadowPass.sample(add(screenCoordinate.xy, vec2(uvOffset, 0).mul(radius)).div(size));\n      mean.addAssign(distribution.x);\n      squaredMean.addAssign(add(distribution.y.mul(distribution.y), distribution.x.mul(distribution.x)));\n    });\n    mean.divAssign(samples);\n    squaredMean.divAssign(samples);\n    var std_dev = sqrt(squaredMean.sub(mean.mul(mean)));\n    return vec2(mean, std_dev);\n  });\n  var _shadowFilterLib = [BasicShadowFilter, PCFShadowFilter, PCFSoftShadowFilter, VSMShadowFilter];\n\n  //\n\n  var _rendererState;\n  var _quadMesh$1 = /*@__PURE__*/new QuadMesh();\n\n  /**\n   * Represents the default shadow implementation for lighting nodes.\n   *\n   * @augments module:ShadowBaseNode~ShadowBaseNode\n   */\n  var ShadowNode = exports.ShadowNode = /*#__PURE__*/function (_ShadowBaseNode) {\n    /**\n     * Constructs a new shadow node.\n     *\n     * @param {Light} light - The shadow casting light.\n     * @param {LightShadow?} [shadow=null] - An optional light shadow.\n     */\n    function ShadowNode(light) {\n      var _this163;\n      var shadow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, ShadowNode);\n      _this163 = _callSuper(this, ShadowNode, [light]);\n\n      /**\n       * The light shadow which defines the properties light's\n       * shadow.\n       *\n       * @type {LightShadow?}\n       * @default null\n       */\n      _this163.shadow = shadow || light.shadow;\n\n      /**\n       * A reference to the shadow map which is a render target.\n       *\n       * @type {RenderTarget?}\n       * @default null\n       */\n      _this163.shadowMap = null;\n\n      /**\n       * Only relevant for VSM shadows. Render target for the\n       * first VSM render pass.\n       *\n       * @type {RenderTarget?}\n       * @default null\n       */\n      _this163.vsmShadowMapVertical = null;\n\n      /**\n       * Only relevant for VSM shadows. Render target for the\n       * second VSM render pass.\n       *\n       * @type {RenderTarget?}\n       * @default null\n       */\n      _this163.vsmShadowMapHorizontal = null;\n\n      /**\n       * Only relevant for VSM shadows. Node material which\n       * is used to render the first VSM pass.\n       *\n       * @type {NodeMaterial?}\n       * @default null\n       */\n      _this163.vsmMaterialVertical = null;\n\n      /**\n       * Only relevant for VSM shadows. Node material which\n       * is used to render the second VSM pass.\n       *\n       * @type {NodeMaterial?}\n       * @default null\n       */\n      _this163.vsmMaterialHorizontal = null;\n\n      /**\n       * A reference to the output node which defines the\n       * final result of this shadow node.\n       *\n       * @type {Node?}\n       * @private\n       * @default null\n       */\n      _this163._node = null;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this163.isShadowNode = true;\n      return _this163;\n    }\n\n    /**\n     * Setups the shadow filtering.\n     *\n     * @param {NodeBuilder} builder - A reference to the current node builder.\n     * @param {Object} inputs - A configuration object that defines the shadow filtering.\n     * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.\n     * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n     * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.\n     * @param {LightShadow} inputs.shadow - The light shadow.\n     * @return {Node<float>} The result node of the shadow filtering.\n     */\n    (0, _inherits2.default)(ShadowNode, _ShadowBaseNode);\n    return (0, _createClass2.default)(ShadowNode, [{\n      key: \"setupShadowFilter\",\n      value: function setupShadowFilter(builder, _ref197) {\n        var filterFn = _ref197.filterFn,\n          depthTexture = _ref197.depthTexture,\n          shadowCoord = _ref197.shadowCoord,\n          shadow = _ref197.shadow;\n        var frustumTest = shadowCoord.x.greaterThanEqual(0).and(shadowCoord.x.lessThanEqual(1)).and(shadowCoord.y.greaterThanEqual(0)).and(shadowCoord.y.lessThanEqual(1)).and(shadowCoord.z.lessThanEqual(1));\n        var shadowNode = filterFn({\n          depthTexture: depthTexture,\n          shadowCoord: shadowCoord,\n          shadow: shadow\n        });\n        return frustumTest.select(shadowNode, float(1));\n      }\n\n      /**\n       * Setups the shadow coordinates.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @param {Node<vec3>} shadowPosition - A node representing the shadow position.\n       * @return {Node<vec3>} The shadow coordinates.\n       */\n    }, {\n      key: \"setupShadowCoord\",\n      value: function setupShadowCoord(builder, shadowPosition) {\n        var shadow = this.shadow;\n        var renderer = builder.renderer;\n        var bias = reference('bias', 'float', shadow).setGroup(renderGroup);\n        var shadowCoord = shadowPosition;\n        var coordZ;\n        if (shadow.camera.isOrthographicCamera || renderer.logarithmicDepthBuffer !== true) {\n          shadowCoord = shadowCoord.xyz.div(shadowCoord.w);\n          coordZ = shadowCoord.z;\n          if (renderer.coordinateSystem === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem) {\n            coordZ = coordZ.mul(2).sub(1); // WebGPU: Conversion [ 0, 1 ] to [ - 1, 1 ]\n          }\n        } else {\n          var w = shadowCoord.w;\n          shadowCoord = shadowCoord.xy.div(w); // <-- Only divide X/Y coords since we don't need Z\n\n          // The normally available \"cameraNear\" and \"cameraFar\" nodes cannot be used here because they do not get\n          // updated to use the shadow camera. So, we have to declare our own \"local\" ones here.\n          // TODO: How do we get the cameraNear/cameraFar nodes to use the shadow camera so we don't have to declare local ones here?\n          var cameraNearLocal = reference('near', 'float', shadow.camera).setGroup(renderGroup);\n          var cameraFarLocal = reference('far', 'float', shadow.camera).setGroup(renderGroup);\n          coordZ = viewZToLogarithmicDepth(w.negate(), cameraNearLocal, cameraFarLocal);\n        }\n        shadowCoord = vec3(shadowCoord.x, shadowCoord.y.oneMinus(),\n        // follow webgpu standards\n        coordZ.add(bias));\n        return shadowCoord;\n      }\n\n      /**\n       * Returns the shadow filtering function for the given shadow type.\n       *\n       * @param {Number} type - The shadow type.\n       * @return {Function} The filtering function.\n       */\n    }, {\n      key: \"getShadowFilterFn\",\n      value: function getShadowFilterFn(type) {\n        return _shadowFilterLib[type];\n      }\n\n      /**\n       * Setups the shadow output node.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @return {Node<vec3>} The shadow output node.\n       */\n    }, {\n      key: \"setupShadow\",\n      value: function setupShadow(builder) {\n        var renderer = builder.renderer;\n        var light = this.light,\n          shadow = this.shadow;\n        var shadowMapType = renderer.shadowMap.type;\n        var depthTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)(shadow.mapSize.width, shadow.mapSize.height);\n        depthTexture.compareFunction = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessCompare;\n        var shadowMap = builder.createRenderTarget(shadow.mapSize.width, shadow.mapSize.height);\n        shadowMap.depthTexture = depthTexture;\n        shadow.camera.updateProjectionMatrix();\n\n        // VSM\n\n        if (shadowMapType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VSMShadowMap) {\n          depthTexture.compareFunction = null; // VSM does not use textureSampleCompare()/texture2DCompare()\n\n          this.vsmShadowMapVertical = builder.createRenderTarget(shadow.mapSize.width, shadow.mapSize.height, {\n            format: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGFormat,\n            type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType\n          });\n          this.vsmShadowMapHorizontal = builder.createRenderTarget(shadow.mapSize.width, shadow.mapSize.height, {\n            format: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGFormat,\n            type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType\n          });\n          var shadowPassVertical = texture(depthTexture);\n          var shadowPassHorizontal = texture(this.vsmShadowMapVertical.texture);\n          var samples = reference('blurSamples', 'float', shadow).setGroup(renderGroup);\n          var radius = reference('radius', 'float', shadow).setGroup(renderGroup);\n          var size = reference('mapSize', 'vec2', shadow).setGroup(renderGroup);\n          var material = this.vsmMaterialVertical || (this.vsmMaterialVertical = new NodeMaterial());\n          material.fragmentNode = VSMPassVertical({\n            samples: samples,\n            radius: radius,\n            size: size,\n            shadowPass: shadowPassVertical\n          }).context(builder.getSharedContext());\n          material.name = 'VSMVertical';\n          material = this.vsmMaterialHorizontal || (this.vsmMaterialHorizontal = new NodeMaterial());\n          material.fragmentNode = VSMPassHorizontal({\n            samples: samples,\n            radius: radius,\n            size: size,\n            shadowPass: shadowPassHorizontal\n          }).context(builder.getSharedContext());\n          material.name = 'VSMHorizontal';\n        }\n\n        //\n\n        var shadowIntensity = reference('intensity', 'float', shadow).setGroup(renderGroup);\n        var normalBias = reference('normalBias', 'float', shadow).setGroup(renderGroup);\n        var shadowPosition = lightShadowMatrix(light).mul(shadowPositionWorld.add(transformedNormalWorld.mul(normalBias)));\n        var shadowCoord = this.setupShadowCoord(builder, shadowPosition);\n\n        //\n\n        var filterFn = shadow.filterNode || this.getShadowFilterFn(renderer.shadowMap.type) || null;\n        if (filterFn === null) {\n          throw new Error('THREE.WebGPURenderer: Shadow map type not supported yet.');\n        }\n        var shadowDepthTexture = shadowMapType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VSMShadowMap ? this.vsmShadowMapHorizontal.texture : depthTexture;\n        var shadowNode = this.setupShadowFilter(builder, {\n          filterFn: filterFn,\n          shadowTexture: shadowMap.texture,\n          depthTexture: shadowDepthTexture,\n          shadowCoord: shadowCoord,\n          shadow: shadow\n        });\n        var shadowColor = texture(shadowMap.texture, shadowCoord);\n        var shadowOutput = mix(1, shadowNode.rgb.mix(shadowColor, 1), shadowIntensity.mul(shadowColor.a)).toVar();\n        this.shadowMap = shadowMap;\n        this.shadow.map = shadowMap;\n        return shadowOutput;\n      }\n\n      /**\n       * The implementation performs the setup of the output node. An output is only\n       * produces if shadow mapping is globally enabled in the renderer.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @return {ShaderCallNodeInternal} The output node.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var _this164 = this;\n        if (builder.renderer.shadowMap.enabled === false) return;\n        return Fn(function () {\n          var node = _this164._node;\n          _this164.setupShadowPosition(builder);\n          if (node === null) {\n            _this164._node = node = _this164.setupShadow(builder);\n          }\n          if (builder.material.shadowNode) {\n            // @deprecated, r171\n\n            console.warn('THREE.NodeMaterial: \".shadowNode\" is deprecated. Use \".castShadowNode\" instead.');\n          }\n          if (builder.material.receivedShadowNode) {\n            node = builder.material.receivedShadowNode(node);\n          }\n          return node;\n        })();\n      }\n\n      /**\n       * Renders the shadow. The logic of this function could be included\n       * into {@link ShadowNode#updateShadow} however more specialized shadow\n       * nodes might require a custom shadow map rendering. By having a\n       * dedicated method, it's easier to overwrite the default behavior.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"renderShadow\",\n      value: function renderShadow(frame) {\n        var shadow = this.shadow,\n          shadowMap = this.shadowMap,\n          light = this.light;\n        var renderer = frame.renderer,\n          scene = frame.scene;\n        shadow.updateMatrices(light);\n        shadowMap.setSize(shadow.mapSize.width, shadow.mapSize.height);\n        renderer.render(scene, shadow.camera);\n      }\n\n      /**\n       * Updates the shadow.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"updateShadow\",\n      value: function updateShadow(frame) {\n        var shadowMap = this.shadowMap,\n          light = this.light,\n          shadow = this.shadow;\n        var renderer = frame.renderer,\n          scene = frame.scene,\n          camera = frame.camera;\n        var shadowType = renderer.shadowMap.type;\n        var depthVersion = shadowMap.depthTexture.version;\n        this._depthVersionCached = depthVersion;\n        shadow.camera.layers.mask = camera.layers.mask;\n        var currentRenderObjectFunction = renderer.getRenderObjectFunction();\n        var currentMRT = renderer.getMRT();\n        var useVelocity = currentMRT ? currentMRT.has('velocity') : false;\n        _rendererState = resetRendererAndSceneState(renderer, scene, _rendererState);\n        scene.overrideMaterial = getShadowMaterial(light);\n        renderer.setRenderObjectFunction(function (object, scene, _camera, geometry, material, group) {\n          if (object.castShadow === true || object.receiveShadow && shadowType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VSMShadowMap) {\n            if (useVelocity) {\n              getDataFromObject(object).useVelocity = true;\n            }\n            object.onBeforeShadow(renderer, object, camera, shadow.camera, geometry, scene.overrideMaterial, group);\n            for (var _len30 = arguments.length, params = new Array(_len30 > 6 ? _len30 - 6 : 0), _key30 = 6; _key30 < _len30; _key30++) {\n              params[_key30 - 6] = arguments[_key30];\n            }\n            renderer.renderObject.apply(renderer, [object, scene, _camera, geometry, material, group].concat(params));\n            object.onAfterShadow(renderer, object, camera, shadow.camera, geometry, scene.overrideMaterial, group);\n          }\n        });\n        renderer.setRenderTarget(shadowMap);\n        this.renderShadow(frame);\n        renderer.setRenderObjectFunction(currentRenderObjectFunction);\n\n        // vsm blur pass\n\n        if (light.isPointLight !== true && shadowType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").VSMShadowMap) {\n          this.vsmPass(renderer);\n        }\n        restoreRendererAndSceneState(renderer, scene, _rendererState);\n      }\n\n      /**\n       * For VSM additional render passes are required.\n       *\n       * @param {Renderer} renderer - A reference to the current renderer.\n       */\n    }, {\n      key: \"vsmPass\",\n      value: function vsmPass(renderer) {\n        var shadow = this.shadow;\n        this.vsmShadowMapVertical.setSize(shadow.mapSize.width, shadow.mapSize.height);\n        this.vsmShadowMapHorizontal.setSize(shadow.mapSize.width, shadow.mapSize.height);\n        renderer.setRenderTarget(this.vsmShadowMapVertical);\n        _quadMesh$1.material = this.vsmMaterialVertical;\n        _quadMesh$1.render(renderer);\n        renderer.setRenderTarget(this.vsmShadowMapHorizontal);\n        _quadMesh$1.material = this.vsmMaterialHorizontal;\n        _quadMesh$1.render(renderer);\n      }\n\n      /**\n       * Frees the internal resources of this shadow node.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.shadowMap.dispose();\n        this.shadowMap = null;\n        if (this.vsmShadowMapVertical !== null) {\n          this.vsmShadowMapVertical.dispose();\n          this.vsmShadowMapVertical = null;\n          this.vsmMaterialVertical.dispose();\n          this.vsmMaterialVertical = null;\n        }\n        if (this.vsmShadowMapHorizontal !== null) {\n          this.vsmShadowMapHorizontal.dispose();\n          this.vsmShadowMapHorizontal = null;\n          this.vsmMaterialHorizontal.dispose();\n          this.vsmMaterialHorizontal = null;\n        }\n        _superPropGet(ShadowNode, \"dispose\", this, 3)([]);\n      }\n\n      /**\n       * The implementation performs the update of the shadow map if necessary.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(frame) {\n        var shadow = this.shadow;\n        var needsUpdate = shadow.needsUpdate || shadow.autoUpdate;\n        if (needsUpdate) {\n          this.updateShadow(frame);\n          if (this.shadowMap.depthTexture.version === this._depthVersionCached) {\n            shadow.needsUpdate = false;\n          }\n        }\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'ShadowNode';\n      }\n    }]);\n  }(ShadowBaseNode);\n  /**\n   * TSL function for creating an instance of `ShadowNode`.\n   *\n   * @function\n   * @param {Light} light - The shadow casting light.\n   * @param {LightShadow} shadow - The light shadow.\n   * @return {ShadowNode} The created shadow node.\n   */\n  var shadow = function shadow(light, _shadow) {\n    return nodeObject(new ShadowNode(light, _shadow));\n  };\n\n  /**\n   * Base class for analytic light nodes.\n   *\n   * @augments LightingNode\n   */\n  var AnalyticLightNode = exports.AnalyticLightNode = /*#__PURE__*/function (_LightingNode6) {\n    /**\n     * Constructs a new analytic light node.\n     *\n     * @param {Light?} [light=null] - The light source.\n     */\n    function AnalyticLightNode() {\n      var _this165;\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, AnalyticLightNode);\n      _this165 = _callSuper(this, AnalyticLightNode);\n\n      /**\n       * The light source.\n       *\n       * @type {Light?}\n       * @default null\n       */\n      _this165.light = light;\n\n      /**\n       * The light's color value.\n       *\n       * @type {Color}\n       */\n      _this165.color = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)();\n\n      /**\n       * The light's color node. Points to `colorNode` of the light source, if set. Otherwise\n       * it creates a uniform node based on {@link AnalyticLightNode#color}.\n       *\n       * @type {Node}\n       */\n      _this165.colorNode = light && light.colorNode || uniform(_this165.color).setGroup(renderGroup);\n\n      /**\n       * This property is used to retain a reference to the original value of {@link AnalyticLightNode#colorNode}.\n       * The final color node is represented by a different node when using shadows.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      _this165.baseColorNode = null;\n\n      /**\n       * Represents the light's shadow.\n       *\n       * @type {ShadowNode?}\n       \t\t * @default null\n       */\n      _this165.shadowNode = null;\n\n      /**\n       * Represents the light's shadow color.\n       *\n       * @type {Node?}\n       \t\t * @default null\n       */\n      _this165.shadowColorNode = null;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this165.isAnalyticLightNode = true;\n\n      /**\n       * Overwritten since analytic light nodes are updated\n       * once per frame.\n       *\n       * @type {String}\n       * @default 'frame'\n       */\n      _this165.updateType = NodeUpdateType.FRAME;\n      return _this165;\n    }\n\n    /**\n     * Overwrites the default {@link Node#customCacheKey} implementation by including the\n     * `light.id` and `light.castShadow` into the cache key.\n     *\n     * @return {Number} The custom cache key.\n     */\n    (0, _inherits2.default)(AnalyticLightNode, _LightingNode6);\n    return (0, _createClass2.default)(AnalyticLightNode, [{\n      key: \"customCacheKey\",\n      value: function customCacheKey() {\n        return hash$1(this.light.id, this.light.castShadow ? 1 : 0);\n      }\n    }, {\n      key: \"getHash\",\n      value: function getHash() {\n        return this.light.uuid;\n      }\n\n      /**\n       * Setups the shadow node for this light. The method exists so concrete light classes\n       * can setup different types of shadow nodes.\n       *\n       * @return {ShadowNode} The created shadow node.\n       */\n    }, {\n      key: \"setupShadowNode\",\n      value: function setupShadowNode() {\n        return shadow(this.light);\n      }\n\n      /**\n       * Setups the shadow for this light. This method is only executed if the light\n       * cast shadows and the current build object receives shadows. It incorporates\n       * shadows into the lighting computation.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setupShadow\",\n      value: function setupShadow(builder) {\n        var renderer = builder.renderer;\n        if (renderer.shadowMap.enabled === false) return;\n        var shadowColorNode = this.shadowColorNode;\n        if (shadowColorNode === null) {\n          var customShadowNode = this.light.shadow.shadowNode;\n          var shadowNode;\n          if (customShadowNode !== undefined) {\n            shadowNode = nodeObject(customShadowNode);\n          } else {\n            shadowNode = this.setupShadowNode(builder);\n          }\n          this.shadowNode = shadowNode;\n          this.shadowColorNode = shadowColorNode = this.colorNode.mul(shadowNode);\n          this.baseColorNode = this.colorNode;\n        }\n\n        //\n\n        this.colorNode = shadowColorNode;\n      }\n\n      /**\n       * Unlike most other nodes, lighting nodes do not return a output node in {@link Node#setup}.\n       * The main purpose of lighting nodes is to configure the current {@link LightingModel} and/or\n       * invocate the respective interface methods.\n       *\n       * @param {NodeBuilder} builder - The current node builder.\n       */\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        this.colorNode = this.baseColorNode || this.colorNode;\n        if (this.light.castShadow) {\n          if (builder.object.receiveShadow) {\n            this.setupShadow(builder);\n          }\n        } else if (this.shadowNode !== null) {\n          this.shadowNode.dispose();\n          this.shadowNode = null;\n          this.shadowColorNode = null;\n        }\n      }\n\n      /**\n       * The update method is used to update light uniforms per frame.\n       * Potentially overwritten in concrete light nodes to update light\n       * specific uniforms.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"update\",\n      value: function update(/*frame*/\n      ) {\n        var light = this.light;\n        this.color.copy(light.color).multiplyScalar(light.intensity);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'AnalyticLightNode';\n      }\n    }]);\n  }(LightingNode);\n  /** @module LightUtils **/\n  /**\n   * Represents a `discard` shader operation in TSL.\n   *\n   * @method\n   * @param {Object} inputs - The input parameter object.\n   * @param {Node<float>} inputs.lightDistance - The distance of the light's position to the current fragment position.\n   * @param {Node<float>} inputs.cutoffDistance - The light's cutoff distance.\n   * @param {Node<float>} inputs.decayExponent - The light's decay exponent.\n   * @return {Node<float>} The distance falloff.\n   */\n  var getDistanceAttenuation = /*@__PURE__*/Fn(function (inputs) {\n    var lightDistance = inputs.lightDistance,\n      cutoffDistance = inputs.cutoffDistance,\n      decayExponent = inputs.decayExponent;\n\n    // based upon Frostbite 3 Moving to Physically-based Rendering\n    // page 32, equation 26: E[window1]\n    // https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n    var distanceFalloff = lightDistance.pow(decayExponent).max(0.01).reciprocal();\n    return cutoffDistance.greaterThan(0).select(distanceFalloff.mul(lightDistance.div(cutoffDistance).pow4().oneMinus().clamp().pow2()), distanceFalloff);\n  }); // validated\n\n  /** @module PointShadowNode **/\n\n  var _clearColor$2 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)();\n\n  // cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n  // vector suitable for 2D texture mapping. This code uses the following layout for the\n  // 2D texture:\n  //\n  // xzXZ\n  //  y Y\n  //\n  // Y - Positive y direction\n  // y - Negative y direction\n  // X - Positive x direction\n  // x - Negative x direction\n  // Z - Positive z direction\n  // z - Negative z direction\n  //\n  // Source and test bed:\n  // https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n  var cubeToUV = /*@__PURE__*/Fn(function (_ref198) {\n    var _ref199 = (0, _slicedToArray2.default)(_ref198, 2),\n      pos = _ref199[0],\n      texelSizeY = _ref199[1];\n    var v = pos.toVar();\n\n    // Number of texels to avoid at the edge of each square\n\n    var absV = abs(v);\n\n    // Intersect unit cube\n\n    var scaleToCube = div(1.0, max$1(absV.x, max$1(absV.y, absV.z)));\n    absV.mulAssign(scaleToCube);\n\n    // Apply scale to avoid seams\n\n    // two texels less per square (one texel will do for NEAREST)\n    v.mulAssign(scaleToCube.mul(texelSizeY.mul(2).oneMinus()));\n\n    // Unwrap\n\n    // space: -1 ... 1 range for each square\n    //\n    // #X##\t\tdim    := ( 4 , 2 )\n    //  # #\t\tcenter := ( 1 , 1 )\n\n    var planar = vec2(v.xy).toVar();\n    var almostATexel = texelSizeY.mul(1.5);\n    var almostOne = almostATexel.oneMinus();\n    If(absV.z.greaterThanEqual(almostOne), function () {\n      If(v.z.greaterThan(0.0), function () {\n        planar.x.assign(sub(4.0, v.x));\n      });\n    }).ElseIf(absV.x.greaterThanEqual(almostOne), function () {\n      var signX = sign(v.x);\n      planar.x.assign(v.z.mul(signX).add(signX.mul(2.0)));\n    }).ElseIf(absV.y.greaterThanEqual(almostOne), function () {\n      var signY = sign(v.y);\n      planar.x.assign(v.x.add(signY.mul(2.0)).add(2.0));\n      planar.y.assign(v.z.mul(signY).sub(2.0));\n    });\n\n    // Transform to UV space\n\n    // scale := 0.5 / dim\n    // translate := ( center + 0.5 ) / dim\n    return vec2(0.125, 0.25).mul(planar).add(vec2(0.375, 0.75)).flipY();\n  }).setLayout({\n    name: 'cubeToUV',\n    type: 'vec2',\n    inputs: [{\n      name: 'pos',\n      type: 'vec3'\n    }, {\n      name: 'texelSizeY',\n      type: 'float'\n    }]\n  });\n  var BasicPointShadowFilter = /*@__PURE__*/Fn(function (_ref200) {\n    var depthTexture = _ref200.depthTexture,\n      bd3D = _ref200.bd3D,\n      dp = _ref200.dp,\n      texelSize = _ref200.texelSize;\n    return texture(depthTexture, cubeToUV(bd3D, texelSize.y)).compare(dp);\n  });\n  var PointShadowFilter = /*@__PURE__*/Fn(function (_ref201) {\n    var depthTexture = _ref201.depthTexture,\n      bd3D = _ref201.bd3D,\n      dp = _ref201.dp,\n      texelSize = _ref201.texelSize,\n      shadow = _ref201.shadow;\n    var radius = reference('radius', 'float', shadow).setGroup(renderGroup);\n    var offset = vec2(-1.0, 1.0).mul(radius).mul(texelSize.y);\n    return texture(depthTexture, cubeToUV(bd3D.add(offset.xyy), texelSize.y)).compare(dp).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yyy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xyx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yyx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D, texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xxy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yxy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xxx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yxx), texelSize.y)).compare(dp)).mul(1.0 / 9.0);\n  });\n  var pointShadowFilter = /*@__PURE__*/Fn(function (_ref202) {\n    var filterFn = _ref202.filterFn,\n      depthTexture = _ref202.depthTexture,\n      shadowCoord = _ref202.shadowCoord,\n      shadow = _ref202.shadow;\n    // for point lights, the uniform @vShadowCoord is re-purposed to hold\n    // the vector from the light to the world-space position of the fragment.\n    var lightToPosition = shadowCoord.xyz.toVar();\n    var lightToPositionLength = lightToPosition.length();\n    var cameraNearLocal = uniform('float').setGroup(renderGroup).onRenderUpdate(function () {\n      return shadow.camera.near;\n    });\n    var cameraFarLocal = uniform('float').setGroup(renderGroup).onRenderUpdate(function () {\n      return shadow.camera.far;\n    });\n    var bias = reference('bias', 'float', shadow).setGroup(renderGroup);\n    var mapSize = uniform(shadow.mapSize).setGroup(renderGroup);\n    var result = float(1.0).toVar();\n    If(lightToPositionLength.sub(cameraFarLocal).lessThanEqual(0.0).and(lightToPositionLength.sub(cameraNearLocal).greaterThanEqual(0.0)), function () {\n      // dp = normalized distance from light to fragment position\n      var dp = lightToPositionLength.sub(cameraNearLocal).div(cameraFarLocal.sub(cameraNearLocal)).toVar(); // need to clamp?\n      dp.addAssign(bias);\n\n      // bd3D = base direction 3D\n      var bd3D = lightToPosition.normalize();\n      var texelSize = vec2(1.0).div(mapSize.mul(vec2(4.0, 2.0)));\n\n      // percentage-closer filtering\n      result.assign(filterFn({\n        depthTexture: depthTexture,\n        bd3D: bd3D,\n        dp: dp,\n        texelSize: texelSize,\n        shadow: shadow\n      }));\n    });\n    return result;\n  });\n  var _viewport = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n  var _viewportSize = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n  var _shadowMapSize = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n\n  /**\n   * Represents the shadow implementation for point light nodes.\n   *\n   * @augments module:ShadowNode~ShadowNode\n   */\n  var PointShadowNode = /*#__PURE__*/function (_ShadowNode) {\n    /**\n     * Constructs a new point shadow node.\n     *\n     * @param {PointLight} light - The shadow casting point light.\n     * @param {PointLightShadow?} [shadow=null] - An optional point light shadow.\n     */\n    function PointShadowNode(light) {\n      var shadow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, PointShadowNode);\n      return _callSuper(this, PointShadowNode, [light, shadow]);\n    }\n\n    /**\n     * Overwrites the default implementation to return point light shadow specific\n     * filtering functions.\n     *\n     * @param {Number} type - The shadow type.\n     * @return {Function} The filtering function.\n     */\n    (0, _inherits2.default)(PointShadowNode, _ShadowNode);\n    return (0, _createClass2.default)(PointShadowNode, [{\n      key: \"getShadowFilterFn\",\n      value: function getShadowFilterFn(type) {\n        return type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BasicShadowMap ? BasicPointShadowFilter : PointShadowFilter;\n      }\n\n      /**\n       * Overwrites the default implementation so the unaltered shadow position is used.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @param {Node<vec3>} shadowPosition - A node representing the shadow position.\n       * @return {Node<vec3>} The shadow coordinates.\n       */\n    }, {\n      key: \"setupShadowCoord\",\n      value: function setupShadowCoord(builder, shadowPosition) {\n        return shadowPosition;\n      }\n\n      /**\n       * Overwrites the default implementation to only use point light specific\n       * shadow filter functions.\n       *\n       * @param {NodeBuilder} builder - A reference to the current node builder.\n       * @param {Object} inputs - A configuration object that defines the shadow filtering.\n       * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.\n       * @param {Texture} inputs.shadowTexture - A reference to the shadow map's texture.\n       * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n       * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.\n       * @param {LightShadow} inputs.shadow - The light shadow.\n       * @return {Node<float>} The result node of the shadow filtering.\n       */\n    }, {\n      key: \"setupShadowFilter\",\n      value: function setupShadowFilter(builder, _ref203) {\n        var filterFn = _ref203.filterFn,\n          shadowTexture = _ref203.shadowTexture,\n          depthTexture = _ref203.depthTexture,\n          shadowCoord = _ref203.shadowCoord,\n          shadow = _ref203.shadow;\n        return pointShadowFilter({\n          filterFn: filterFn,\n          shadowTexture: shadowTexture,\n          depthTexture: depthTexture,\n          shadowCoord: shadowCoord,\n          shadow: shadow\n        });\n      }\n\n      /**\n       * Overwrites the default implementation with point light specific\n       * rendering code.\n       *\n       * @param {NodeFrame} frame - A reference to the current node frame.\n       */\n    }, {\n      key: \"renderShadow\",\n      value: function renderShadow(frame) {\n        var shadow = this.shadow,\n          shadowMap = this.shadowMap,\n          light = this.light;\n        var renderer = frame.renderer,\n          scene = frame.scene;\n        var shadowFrameExtents = shadow.getFrameExtents();\n        _shadowMapSize.copy(shadow.mapSize);\n        _shadowMapSize.multiply(shadowFrameExtents);\n        shadowMap.setSize(_shadowMapSize.width, _shadowMapSize.height);\n        _viewportSize.copy(shadow.mapSize);\n\n        //\n\n        var previousAutoClear = renderer.autoClear;\n        var previousClearColor = renderer.getClearColor(_clearColor$2);\n        var previousClearAlpha = renderer.getClearAlpha();\n        renderer.autoClear = false;\n        renderer.setClearColor(shadow.clearColor, shadow.clearAlpha);\n        renderer.clear();\n        var viewportCount = shadow.getViewportCount();\n        for (var vp = 0; vp < viewportCount; vp++) {\n          var _viewport2 = shadow.getViewport(vp);\n          var x = _viewportSize.x * _viewport2.x;\n          var y = _shadowMapSize.y - _viewportSize.y - _viewportSize.y * _viewport2.y;\n          _viewport.set(x, y, _viewportSize.x * _viewport2.z, _viewportSize.y * _viewport2.w);\n          shadowMap.viewport.copy(_viewport);\n          shadow.updateMatrices(light, vp);\n          renderer.render(scene, shadow.camera);\n        }\n\n        //\n\n        renderer.autoClear = previousAutoClear;\n        renderer.setClearColor(previousClearColor, previousClearAlpha);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PointShadowNode';\n      }\n    }]);\n  }(ShadowNode);\n  /**\n   * TSL function for creating an instance of `PointShadowNode`.\n   *\n   * @function\n   * @param {PointLight} light - The shadow casting point light.\n   * @param {PointLightShadow?} [shadow=null] - An optional point light shadow.\n   * @return {PointShadowNode} The created point shadow node.\n   */\n  var pointShadow = function pointShadow(light, shadow) {\n    return nodeObject(new PointShadowNode(light, shadow));\n  };\n  var directPointLight = Fn(function (_ref204, builder) {\n    var color = _ref204.color,\n      lightViewPosition = _ref204.lightViewPosition,\n      cutoffDistance = _ref204.cutoffDistance,\n      decayExponent = _ref204.decayExponent;\n    var lightingModel = builder.context.lightingModel;\n    var lVector = lightViewPosition.sub(positionView); // @TODO: Add it into LightNode\n\n    var lightDirection = lVector.normalize();\n    var lightDistance = lVector.length();\n    var lightAttenuation = getDistanceAttenuation({\n      lightDistance: lightDistance,\n      cutoffDistance: cutoffDistance,\n      decayExponent: decayExponent\n    });\n    var lightColor = color.mul(lightAttenuation);\n    var reflectedLight = builder.context.reflectedLight;\n    lightingModel.direct({\n      lightDirection: lightDirection,\n      lightColor: lightColor,\n      reflectedLight: reflectedLight\n    }, builder.stack, builder);\n  });\n\n  /**\n   * Module for representing point lights as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var PointLightNode = exports.PointLightNode = /*#__PURE__*/function (_AnalyticLightNode) {\n    /**\n     * Constructs a new point light node.\n     *\n     * @param {PointLight?} [light=null] - The point light source.\n     */\n    function PointLightNode() {\n      var _this166;\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, PointLightNode);\n      _this166 = _callSuper(this, PointLightNode, [light]);\n\n      /**\n       * Uniform node representing the cutoff distance.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this166.cutoffDistanceNode = uniform(0).setGroup(renderGroup);\n\n      /**\n       * Uniform node representing the decay exponent.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this166.decayExponentNode = uniform(2).setGroup(renderGroup);\n      return _this166;\n    }\n\n    /**\n     * Overwritten to updated point light specific uniforms.\n     *\n     * @param {NodeFrame} frame - A reference to the current node frame.\n     */\n    (0, _inherits2.default)(PointLightNode, _AnalyticLightNode);\n    return (0, _createClass2.default)(PointLightNode, [{\n      key: \"update\",\n      value: function update(frame) {\n        var light = this.light;\n        _superPropGet(PointLightNode, \"update\", this, 3)([frame]);\n        this.cutoffDistanceNode.value = light.distance;\n        this.decayExponentNode.value = light.decay;\n      }\n\n      /**\n       * Overwritten to setup point light specific shadow.\n       *\n       * @return {PointShadowNode}\n       */\n    }, {\n      key: \"setupShadowNode\",\n      value: function setupShadowNode() {\n        return pointShadow(this.light);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(PointLightNode, \"setup\", this, 3)([builder]);\n        directPointLight({\n          color: this.colorNode,\n          lightViewPosition: lightViewPosition(this.light),\n          cutoffDistance: this.cutoffDistanceNode,\n          decayExponent: this.decayExponentNode\n        }).append();\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'PointLightNode';\n      }\n    }]);\n  }(AnalyticLightNode);\n  /** @module Procedural **/\n  /**\n   * Creates a 2x2 checkerboard pattern that can be used as procedural texture data.\n   *\n   * @method\n   * @param {Node<vec2>} coord - The uv coordinates.\n   * @return {Node<float>} The result data.\n   */\n  var checker = /*@__PURE__*/Fn(function (_ref205) {\n    var _ref206 = (0, _slicedToArray2.default)(_ref205, 1),\n      _ref206$ = _ref206[0],\n      coord = _ref206$ === void 0 ? uv() : _ref206$;\n    return function () {\n      var uv = coord.mul(2.0);\n      var cx = uv.x.floor();\n      var cy = uv.y.floor();\n      var result = cx.add(cy).mod(2.0);\n      return result.sign();\n    }();\n  });\n\n  // Three.js Transpiler\n  // https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\n\n  var mx_select = /*@__PURE__*/Fn(function (_ref207) {\n    var _ref208 = (0, _slicedToArray2.default)(_ref207, 3),\n      b_immutable = _ref208[0],\n      t_immutable = _ref208[1],\n      f_immutable = _ref208[2];\n    var f = float(f_immutable).toVar();\n    var t = float(t_immutable).toVar();\n    var b = bool(b_immutable).toVar();\n    return select(b, t, f);\n  }).setLayout({\n    name: 'mx_select',\n    type: 'float',\n    inputs: [{\n      name: 'b',\n      type: 'bool'\n    }, {\n      name: 't',\n      type: 'float'\n    }, {\n      name: 'f',\n      type: 'float'\n    }]\n  });\n  var mx_negate_if = /*@__PURE__*/Fn(function (_ref209) {\n    var _ref210 = (0, _slicedToArray2.default)(_ref209, 2),\n      val_immutable = _ref210[0],\n      b_immutable = _ref210[1];\n    var b = bool(b_immutable).toVar();\n    var val = float(val_immutable).toVar();\n    return select(b, val.negate(), val);\n  }).setLayout({\n    name: 'mx_negate_if',\n    type: 'float',\n    inputs: [{\n      name: 'val',\n      type: 'float'\n    }, {\n      name: 'b',\n      type: 'bool'\n    }]\n  });\n  var mx_floor = /*@__PURE__*/Fn(function (_ref211) {\n    var _ref212 = (0, _slicedToArray2.default)(_ref211, 1),\n      x_immutable = _ref212[0];\n    var x = float(x_immutable).toVar();\n    return int(floor(x));\n  }).setLayout({\n    name: 'mx_floor',\n    type: 'int',\n    inputs: [{\n      name: 'x',\n      type: 'float'\n    }]\n  });\n  var mx_floorfrac = /*@__PURE__*/Fn(function (_ref213) {\n    var _ref214 = (0, _slicedToArray2.default)(_ref213, 2),\n      x_immutable = _ref214[0],\n      i = _ref214[1];\n    var x = float(x_immutable).toVar();\n    i.assign(mx_floor(x));\n    return x.sub(float(i));\n  });\n  var mx_bilerp_0 = /*@__PURE__*/Fn(function (_ref215) {\n    var _ref216 = (0, _slicedToArray2.default)(_ref215, 6),\n      v0_immutable = _ref216[0],\n      v1_immutable = _ref216[1],\n      v2_immutable = _ref216[2],\n      v3_immutable = _ref216[3],\n      s_immutable = _ref216[4],\n      t_immutable = _ref216[5];\n    var t = float(t_immutable).toVar();\n    var s = float(s_immutable).toVar();\n    var v3 = float(v3_immutable).toVar();\n    var v2 = float(v2_immutable).toVar();\n    var v1 = float(v1_immutable).toVar();\n    var v0 = float(v0_immutable).toVar();\n    var s1 = float(sub(1.0, s)).toVar();\n    return sub(1.0, t).mul(v0.mul(s1).add(v1.mul(s))).add(t.mul(v2.mul(s1).add(v3.mul(s))));\n  }).setLayout({\n    name: 'mx_bilerp_0',\n    type: 'float',\n    inputs: [{\n      name: 'v0',\n      type: 'float'\n    }, {\n      name: 'v1',\n      type: 'float'\n    }, {\n      name: 'v2',\n      type: 'float'\n    }, {\n      name: 'v3',\n      type: 'float'\n    }, {\n      name: 's',\n      type: 'float'\n    }, {\n      name: 't',\n      type: 'float'\n    }]\n  });\n  var mx_bilerp_1 = /*@__PURE__*/Fn(function (_ref217) {\n    var _ref218 = (0, _slicedToArray2.default)(_ref217, 6),\n      v0_immutable = _ref218[0],\n      v1_immutable = _ref218[1],\n      v2_immutable = _ref218[2],\n      v3_immutable = _ref218[3],\n      s_immutable = _ref218[4],\n      t_immutable = _ref218[5];\n    var t = float(t_immutable).toVar();\n    var s = float(s_immutable).toVar();\n    var v3 = vec3(v3_immutable).toVar();\n    var v2 = vec3(v2_immutable).toVar();\n    var v1 = vec3(v1_immutable).toVar();\n    var v0 = vec3(v0_immutable).toVar();\n    var s1 = float(sub(1.0, s)).toVar();\n    return sub(1.0, t).mul(v0.mul(s1).add(v1.mul(s))).add(t.mul(v2.mul(s1).add(v3.mul(s))));\n  }).setLayout({\n    name: 'mx_bilerp_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'v0',\n      type: 'vec3'\n    }, {\n      name: 'v1',\n      type: 'vec3'\n    }, {\n      name: 'v2',\n      type: 'vec3'\n    }, {\n      name: 'v3',\n      type: 'vec3'\n    }, {\n      name: 's',\n      type: 'float'\n    }, {\n      name: 't',\n      type: 'float'\n    }]\n  });\n  var mx_bilerp = /*@__PURE__*/overloadingFn([mx_bilerp_0, mx_bilerp_1]);\n  var mx_trilerp_0 = /*@__PURE__*/Fn(function (_ref219) {\n    var _ref220 = (0, _slicedToArray2.default)(_ref219, 11),\n      v0_immutable = _ref220[0],\n      v1_immutable = _ref220[1],\n      v2_immutable = _ref220[2],\n      v3_immutable = _ref220[3],\n      v4_immutable = _ref220[4],\n      v5_immutable = _ref220[5],\n      v6_immutable = _ref220[6],\n      v7_immutable = _ref220[7],\n      s_immutable = _ref220[8],\n      t_immutable = _ref220[9],\n      r_immutable = _ref220[10];\n    var r = float(r_immutable).toVar();\n    var t = float(t_immutable).toVar();\n    var s = float(s_immutable).toVar();\n    var v7 = float(v7_immutable).toVar();\n    var v6 = float(v6_immutable).toVar();\n    var v5 = float(v5_immutable).toVar();\n    var v4 = float(v4_immutable).toVar();\n    var v3 = float(v3_immutable).toVar();\n    var v2 = float(v2_immutable).toVar();\n    var v1 = float(v1_immutable).toVar();\n    var v0 = float(v0_immutable).toVar();\n    var s1 = float(sub(1.0, s)).toVar();\n    var t1 = float(sub(1.0, t)).toVar();\n    var r1 = float(sub(1.0, r)).toVar();\n    return r1.mul(t1.mul(v0.mul(s1).add(v1.mul(s))).add(t.mul(v2.mul(s1).add(v3.mul(s))))).add(r.mul(t1.mul(v4.mul(s1).add(v5.mul(s))).add(t.mul(v6.mul(s1).add(v7.mul(s))))));\n  }).setLayout({\n    name: 'mx_trilerp_0',\n    type: 'float',\n    inputs: [{\n      name: 'v0',\n      type: 'float'\n    }, {\n      name: 'v1',\n      type: 'float'\n    }, {\n      name: 'v2',\n      type: 'float'\n    }, {\n      name: 'v3',\n      type: 'float'\n    }, {\n      name: 'v4',\n      type: 'float'\n    }, {\n      name: 'v5',\n      type: 'float'\n    }, {\n      name: 'v6',\n      type: 'float'\n    }, {\n      name: 'v7',\n      type: 'float'\n    }, {\n      name: 's',\n      type: 'float'\n    }, {\n      name: 't',\n      type: 'float'\n    }, {\n      name: 'r',\n      type: 'float'\n    }]\n  });\n  var mx_trilerp_1 = /*@__PURE__*/Fn(function (_ref221) {\n    var _ref222 = (0, _slicedToArray2.default)(_ref221, 11),\n      v0_immutable = _ref222[0],\n      v1_immutable = _ref222[1],\n      v2_immutable = _ref222[2],\n      v3_immutable = _ref222[3],\n      v4_immutable = _ref222[4],\n      v5_immutable = _ref222[5],\n      v6_immutable = _ref222[6],\n      v7_immutable = _ref222[7],\n      s_immutable = _ref222[8],\n      t_immutable = _ref222[9],\n      r_immutable = _ref222[10];\n    var r = float(r_immutable).toVar();\n    var t = float(t_immutable).toVar();\n    var s = float(s_immutable).toVar();\n    var v7 = vec3(v7_immutable).toVar();\n    var v6 = vec3(v6_immutable).toVar();\n    var v5 = vec3(v5_immutable).toVar();\n    var v4 = vec3(v4_immutable).toVar();\n    var v3 = vec3(v3_immutable).toVar();\n    var v2 = vec3(v2_immutable).toVar();\n    var v1 = vec3(v1_immutable).toVar();\n    var v0 = vec3(v0_immutable).toVar();\n    var s1 = float(sub(1.0, s)).toVar();\n    var t1 = float(sub(1.0, t)).toVar();\n    var r1 = float(sub(1.0, r)).toVar();\n    return r1.mul(t1.mul(v0.mul(s1).add(v1.mul(s))).add(t.mul(v2.mul(s1).add(v3.mul(s))))).add(r.mul(t1.mul(v4.mul(s1).add(v5.mul(s))).add(t.mul(v6.mul(s1).add(v7.mul(s))))));\n  }).setLayout({\n    name: 'mx_trilerp_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'v0',\n      type: 'vec3'\n    }, {\n      name: 'v1',\n      type: 'vec3'\n    }, {\n      name: 'v2',\n      type: 'vec3'\n    }, {\n      name: 'v3',\n      type: 'vec3'\n    }, {\n      name: 'v4',\n      type: 'vec3'\n    }, {\n      name: 'v5',\n      type: 'vec3'\n    }, {\n      name: 'v6',\n      type: 'vec3'\n    }, {\n      name: 'v7',\n      type: 'vec3'\n    }, {\n      name: 's',\n      type: 'float'\n    }, {\n      name: 't',\n      type: 'float'\n    }, {\n      name: 'r',\n      type: 'float'\n    }]\n  });\n  var mx_trilerp = /*@__PURE__*/overloadingFn([mx_trilerp_0, mx_trilerp_1]);\n  var mx_gradient_float_0 = /*@__PURE__*/Fn(function (_ref223) {\n    var _ref224 = (0, _slicedToArray2.default)(_ref223, 3),\n      hash_immutable = _ref224[0],\n      x_immutable = _ref224[1],\n      y_immutable = _ref224[2];\n    var y = float(y_immutable).toVar();\n    var x = float(x_immutable).toVar();\n    var hash = uint(hash_immutable).toVar();\n    var h = uint(hash.bitAnd(uint(7))).toVar();\n    var u = float(mx_select(h.lessThan(uint(4)), x, y)).toVar();\n    var v = float(mul(2.0, mx_select(h.lessThan(uint(4)), y, x))).toVar();\n    return mx_negate_if(u, bool(h.bitAnd(uint(1)))).add(mx_negate_if(v, bool(h.bitAnd(uint(2)))));\n  }).setLayout({\n    name: 'mx_gradient_float_0',\n    type: 'float',\n    inputs: [{\n      name: 'hash',\n      type: 'uint'\n    }, {\n      name: 'x',\n      type: 'float'\n    }, {\n      name: 'y',\n      type: 'float'\n    }]\n  });\n  var mx_gradient_float_1 = /*@__PURE__*/Fn(function (_ref225) {\n    var _ref226 = (0, _slicedToArray2.default)(_ref225, 4),\n      hash_immutable = _ref226[0],\n      x_immutable = _ref226[1],\n      y_immutable = _ref226[2],\n      z_immutable = _ref226[3];\n    var z = float(z_immutable).toVar();\n    var y = float(y_immutable).toVar();\n    var x = float(x_immutable).toVar();\n    var hash = uint(hash_immutable).toVar();\n    var h = uint(hash.bitAnd(uint(15))).toVar();\n    var u = float(mx_select(h.lessThan(uint(8)), x, y)).toVar();\n    var v = float(mx_select(h.lessThan(uint(4)), y, mx_select(h.equal(uint(12)).or(h.equal(uint(14))), x, z))).toVar();\n    return mx_negate_if(u, bool(h.bitAnd(uint(1)))).add(mx_negate_if(v, bool(h.bitAnd(uint(2)))));\n  }).setLayout({\n    name: 'mx_gradient_float_1',\n    type: 'float',\n    inputs: [{\n      name: 'hash',\n      type: 'uint'\n    }, {\n      name: 'x',\n      type: 'float'\n    }, {\n      name: 'y',\n      type: 'float'\n    }, {\n      name: 'z',\n      type: 'float'\n    }]\n  });\n  var mx_gradient_float = /*@__PURE__*/overloadingFn([mx_gradient_float_0, mx_gradient_float_1]);\n  var mx_gradient_vec3_0 = /*@__PURE__*/Fn(function (_ref227) {\n    var _ref228 = (0, _slicedToArray2.default)(_ref227, 3),\n      hash_immutable = _ref228[0],\n      x_immutable = _ref228[1],\n      y_immutable = _ref228[2];\n    var y = float(y_immutable).toVar();\n    var x = float(x_immutable).toVar();\n    var hash = uvec3(hash_immutable).toVar();\n    return vec3(mx_gradient_float(hash.x, x, y), mx_gradient_float(hash.y, x, y), mx_gradient_float(hash.z, x, y));\n  }).setLayout({\n    name: 'mx_gradient_vec3_0',\n    type: 'vec3',\n    inputs: [{\n      name: 'hash',\n      type: 'uvec3'\n    }, {\n      name: 'x',\n      type: 'float'\n    }, {\n      name: 'y',\n      type: 'float'\n    }]\n  });\n  var mx_gradient_vec3_1 = /*@__PURE__*/Fn(function (_ref229) {\n    var _ref230 = (0, _slicedToArray2.default)(_ref229, 4),\n      hash_immutable = _ref230[0],\n      x_immutable = _ref230[1],\n      y_immutable = _ref230[2],\n      z_immutable = _ref230[3];\n    var z = float(z_immutable).toVar();\n    var y = float(y_immutable).toVar();\n    var x = float(x_immutable).toVar();\n    var hash = uvec3(hash_immutable).toVar();\n    return vec3(mx_gradient_float(hash.x, x, y, z), mx_gradient_float(hash.y, x, y, z), mx_gradient_float(hash.z, x, y, z));\n  }).setLayout({\n    name: 'mx_gradient_vec3_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'hash',\n      type: 'uvec3'\n    }, {\n      name: 'x',\n      type: 'float'\n    }, {\n      name: 'y',\n      type: 'float'\n    }, {\n      name: 'z',\n      type: 'float'\n    }]\n  });\n  var mx_gradient_vec3 = /*@__PURE__*/overloadingFn([mx_gradient_vec3_0, mx_gradient_vec3_1]);\n  var mx_gradient_scale2d_0 = /*@__PURE__*/Fn(function (_ref231) {\n    var _ref232 = (0, _slicedToArray2.default)(_ref231, 1),\n      v_immutable = _ref232[0];\n    var v = float(v_immutable).toVar();\n    return mul(0.6616, v);\n  }).setLayout({\n    name: 'mx_gradient_scale2d_0',\n    type: 'float',\n    inputs: [{\n      name: 'v',\n      type: 'float'\n    }]\n  });\n  var mx_gradient_scale3d_0 = /*@__PURE__*/Fn(function (_ref233) {\n    var _ref234 = (0, _slicedToArray2.default)(_ref233, 1),\n      v_immutable = _ref234[0];\n    var v = float(v_immutable).toVar();\n    return mul(0.9820, v);\n  }).setLayout({\n    name: 'mx_gradient_scale3d_0',\n    type: 'float',\n    inputs: [{\n      name: 'v',\n      type: 'float'\n    }]\n  });\n  var mx_gradient_scale2d_1 = /*@__PURE__*/Fn(function (_ref235) {\n    var _ref236 = (0, _slicedToArray2.default)(_ref235, 1),\n      v_immutable = _ref236[0];\n    var v = vec3(v_immutable).toVar();\n    return mul(0.6616, v);\n  }).setLayout({\n    name: 'mx_gradient_scale2d_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'v',\n      type: 'vec3'\n    }]\n  });\n  var mx_gradient_scale2d = /*@__PURE__*/overloadingFn([mx_gradient_scale2d_0, mx_gradient_scale2d_1]);\n  var mx_gradient_scale3d_1 = /*@__PURE__*/Fn(function (_ref237) {\n    var _ref238 = (0, _slicedToArray2.default)(_ref237, 1),\n      v_immutable = _ref238[0];\n    var v = vec3(v_immutable).toVar();\n    return mul(0.9820, v);\n  }).setLayout({\n    name: 'mx_gradient_scale3d_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'v',\n      type: 'vec3'\n    }]\n  });\n  var mx_gradient_scale3d = /*@__PURE__*/overloadingFn([mx_gradient_scale3d_0, mx_gradient_scale3d_1]);\n  var mx_rotl32 = /*@__PURE__*/Fn(function (_ref239) {\n    var _ref240 = (0, _slicedToArray2.default)(_ref239, 2),\n      x_immutable = _ref240[0],\n      k_immutable = _ref240[1];\n    var k = int(k_immutable).toVar();\n    var x = uint(x_immutable).toVar();\n    return x.shiftLeft(k).bitOr(x.shiftRight(int(32).sub(k)));\n  }).setLayout({\n    name: 'mx_rotl32',\n    type: 'uint',\n    inputs: [{\n      name: 'x',\n      type: 'uint'\n    }, {\n      name: 'k',\n      type: 'int'\n    }]\n  });\n  var mx_bjmix = /*@__PURE__*/Fn(function (_ref241) {\n    var _ref242 = (0, _slicedToArray2.default)(_ref241, 3),\n      a = _ref242[0],\n      b = _ref242[1],\n      c = _ref242[2];\n    a.subAssign(c);\n    a.bitXorAssign(mx_rotl32(c, int(4)));\n    c.addAssign(b);\n    b.subAssign(a);\n    b.bitXorAssign(mx_rotl32(a, int(6)));\n    a.addAssign(c);\n    c.subAssign(b);\n    c.bitXorAssign(mx_rotl32(b, int(8)));\n    b.addAssign(a);\n    a.subAssign(c);\n    a.bitXorAssign(mx_rotl32(c, int(16)));\n    c.addAssign(b);\n    b.subAssign(a);\n    b.bitXorAssign(mx_rotl32(a, int(19)));\n    a.addAssign(c);\n    c.subAssign(b);\n    c.bitXorAssign(mx_rotl32(b, int(4)));\n    b.addAssign(a);\n  });\n  var mx_bjfinal = /*@__PURE__*/Fn(function (_ref243) {\n    var _ref244 = (0, _slicedToArray2.default)(_ref243, 3),\n      a_immutable = _ref244[0],\n      b_immutable = _ref244[1],\n      c_immutable = _ref244[2];\n    var c = uint(c_immutable).toVar();\n    var b = uint(b_immutable).toVar();\n    var a = uint(a_immutable).toVar();\n    c.bitXorAssign(b);\n    c.subAssign(mx_rotl32(b, int(14)));\n    a.bitXorAssign(c);\n    a.subAssign(mx_rotl32(c, int(11)));\n    b.bitXorAssign(a);\n    b.subAssign(mx_rotl32(a, int(25)));\n    c.bitXorAssign(b);\n    c.subAssign(mx_rotl32(b, int(16)));\n    a.bitXorAssign(c);\n    a.subAssign(mx_rotl32(c, int(4)));\n    b.bitXorAssign(a);\n    b.subAssign(mx_rotl32(a, int(14)));\n    c.bitXorAssign(b);\n    c.subAssign(mx_rotl32(b, int(24)));\n    return c;\n  }).setLayout({\n    name: 'mx_bjfinal',\n    type: 'uint',\n    inputs: [{\n      name: 'a',\n      type: 'uint'\n    }, {\n      name: 'b',\n      type: 'uint'\n    }, {\n      name: 'c',\n      type: 'uint'\n    }]\n  });\n  var mx_bits_to_01 = /*@__PURE__*/Fn(function (_ref245) {\n    var _ref246 = (0, _slicedToArray2.default)(_ref245, 1),\n      bits_immutable = _ref246[0];\n    var bits = uint(bits_immutable).toVar();\n    return float(bits).div(float(uint(int(0xffffffff))));\n  }).setLayout({\n    name: 'mx_bits_to_01',\n    type: 'float',\n    inputs: [{\n      name: 'bits',\n      type: 'uint'\n    }]\n  });\n  var mx_fade = /*@__PURE__*/Fn(function (_ref247) {\n    var _ref248 = (0, _slicedToArray2.default)(_ref247, 1),\n      t_immutable = _ref248[0];\n    var t = float(t_immutable).toVar();\n    return t.mul(t).mul(t).mul(t.mul(t.mul(6.0).sub(15.0)).add(10.0));\n  }).setLayout({\n    name: 'mx_fade',\n    type: 'float',\n    inputs: [{\n      name: 't',\n      type: 'float'\n    }]\n  });\n  var mx_hash_int_0 = /*@__PURE__*/Fn(function (_ref249) {\n    var _ref250 = (0, _slicedToArray2.default)(_ref249, 1),\n      x_immutable = _ref250[0];\n    var x = int(x_immutable).toVar();\n    var len = uint(uint(1)).toVar();\n    var seed = uint(uint(int(0xdeadbeef)).add(len.shiftLeft(uint(2))).add(uint(13))).toVar();\n    return mx_bjfinal(seed.add(uint(x)), seed, seed);\n  }).setLayout({\n    name: 'mx_hash_int_0',\n    type: 'uint',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }]\n  });\n  var mx_hash_int_1 = /*@__PURE__*/Fn(function (_ref251) {\n    var _ref252 = (0, _slicedToArray2.default)(_ref251, 2),\n      x_immutable = _ref252[0],\n      y_immutable = _ref252[1];\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var len = uint(uint(2)).toVar();\n    var a = uint().toVar(),\n      b = uint().toVar(),\n      c = uint().toVar();\n    a.assign(b.assign(c.assign(uint(int(0xdeadbeef)).add(len.shiftLeft(uint(2))).add(uint(13)))));\n    a.addAssign(uint(x));\n    b.addAssign(uint(y));\n    return mx_bjfinal(a, b, c);\n  }).setLayout({\n    name: 'mx_hash_int_1',\n    type: 'uint',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }]\n  });\n  var mx_hash_int_2 = /*@__PURE__*/Fn(function (_ref253) {\n    var _ref254 = (0, _slicedToArray2.default)(_ref253, 3),\n      x_immutable = _ref254[0],\n      y_immutable = _ref254[1],\n      z_immutable = _ref254[2];\n    var z = int(z_immutable).toVar();\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var len = uint(uint(3)).toVar();\n    var a = uint().toVar(),\n      b = uint().toVar(),\n      c = uint().toVar();\n    a.assign(b.assign(c.assign(uint(int(0xdeadbeef)).add(len.shiftLeft(uint(2))).add(uint(13)))));\n    a.addAssign(uint(x));\n    b.addAssign(uint(y));\n    c.addAssign(uint(z));\n    return mx_bjfinal(a, b, c);\n  }).setLayout({\n    name: 'mx_hash_int_2',\n    type: 'uint',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }, {\n      name: 'z',\n      type: 'int'\n    }]\n  });\n  var mx_hash_int_3 = /*@__PURE__*/Fn(function (_ref255) {\n    var _ref256 = (0, _slicedToArray2.default)(_ref255, 4),\n      x_immutable = _ref256[0],\n      y_immutable = _ref256[1],\n      z_immutable = _ref256[2],\n      xx_immutable = _ref256[3];\n    var xx = int(xx_immutable).toVar();\n    var z = int(z_immutable).toVar();\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var len = uint(uint(4)).toVar();\n    var a = uint().toVar(),\n      b = uint().toVar(),\n      c = uint().toVar();\n    a.assign(b.assign(c.assign(uint(int(0xdeadbeef)).add(len.shiftLeft(uint(2))).add(uint(13)))));\n    a.addAssign(uint(x));\n    b.addAssign(uint(y));\n    c.addAssign(uint(z));\n    mx_bjmix(a, b, c);\n    a.addAssign(uint(xx));\n    return mx_bjfinal(a, b, c);\n  }).setLayout({\n    name: 'mx_hash_int_3',\n    type: 'uint',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }, {\n      name: 'z',\n      type: 'int'\n    }, {\n      name: 'xx',\n      type: 'int'\n    }]\n  });\n  var mx_hash_int_4 = /*@__PURE__*/Fn(function (_ref257) {\n    var _ref258 = (0, _slicedToArray2.default)(_ref257, 5),\n      x_immutable = _ref258[0],\n      y_immutable = _ref258[1],\n      z_immutable = _ref258[2],\n      xx_immutable = _ref258[3],\n      yy_immutable = _ref258[4];\n    var yy = int(yy_immutable).toVar();\n    var xx = int(xx_immutable).toVar();\n    var z = int(z_immutable).toVar();\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var len = uint(uint(5)).toVar();\n    var a = uint().toVar(),\n      b = uint().toVar(),\n      c = uint().toVar();\n    a.assign(b.assign(c.assign(uint(int(0xdeadbeef)).add(len.shiftLeft(uint(2))).add(uint(13)))));\n    a.addAssign(uint(x));\n    b.addAssign(uint(y));\n    c.addAssign(uint(z));\n    mx_bjmix(a, b, c);\n    a.addAssign(uint(xx));\n    b.addAssign(uint(yy));\n    return mx_bjfinal(a, b, c);\n  }).setLayout({\n    name: 'mx_hash_int_4',\n    type: 'uint',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }, {\n      name: 'z',\n      type: 'int'\n    }, {\n      name: 'xx',\n      type: 'int'\n    }, {\n      name: 'yy',\n      type: 'int'\n    }]\n  });\n  var mx_hash_int = /*@__PURE__*/overloadingFn([mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4]);\n  var mx_hash_vec3_0 = /*@__PURE__*/Fn(function (_ref259) {\n    var _ref260 = (0, _slicedToArray2.default)(_ref259, 2),\n      x_immutable = _ref260[0],\n      y_immutable = _ref260[1];\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var h = uint(mx_hash_int(x, y)).toVar();\n    var result = uvec3().toVar();\n    result.x.assign(h.bitAnd(int(0xFF)));\n    result.y.assign(h.shiftRight(int(8)).bitAnd(int(0xFF)));\n    result.z.assign(h.shiftRight(int(16)).bitAnd(int(0xFF)));\n    return result;\n  }).setLayout({\n    name: 'mx_hash_vec3_0',\n    type: 'uvec3',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }]\n  });\n  var mx_hash_vec3_1 = /*@__PURE__*/Fn(function (_ref261) {\n    var _ref262 = (0, _slicedToArray2.default)(_ref261, 3),\n      x_immutable = _ref262[0],\n      y_immutable = _ref262[1],\n      z_immutable = _ref262[2];\n    var z = int(z_immutable).toVar();\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var h = uint(mx_hash_int(x, y, z)).toVar();\n    var result = uvec3().toVar();\n    result.x.assign(h.bitAnd(int(0xFF)));\n    result.y.assign(h.shiftRight(int(8)).bitAnd(int(0xFF)));\n    result.z.assign(h.shiftRight(int(16)).bitAnd(int(0xFF)));\n    return result;\n  }).setLayout({\n    name: 'mx_hash_vec3_1',\n    type: 'uvec3',\n    inputs: [{\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }, {\n      name: 'z',\n      type: 'int'\n    }]\n  });\n  var mx_hash_vec3 = /*@__PURE__*/overloadingFn([mx_hash_vec3_0, mx_hash_vec3_1]);\n  var mx_perlin_noise_float_0 = /*@__PURE__*/Fn(function (_ref263) {\n    var _ref264 = (0, _slicedToArray2.default)(_ref263, 1),\n      p_immutable = _ref264[0];\n    var p = vec2(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar();\n    var fx = float(mx_floorfrac(p.x, X)).toVar();\n    var fy = float(mx_floorfrac(p.y, Y)).toVar();\n    var u = float(mx_fade(fx)).toVar();\n    var v = float(mx_fade(fy)).toVar();\n    var result = float(mx_bilerp(mx_gradient_float(mx_hash_int(X, Y), fx, fy), mx_gradient_float(mx_hash_int(X.add(int(1)), Y), fx.sub(1.0), fy), mx_gradient_float(mx_hash_int(X, Y.add(int(1))), fx, fy.sub(1.0)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1))), fx.sub(1.0), fy.sub(1.0)), u, v)).toVar();\n    return mx_gradient_scale2d(result);\n  }).setLayout({\n    name: 'mx_perlin_noise_float_0',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }]\n  });\n  var mx_perlin_noise_float_1 = /*@__PURE__*/Fn(function (_ref265) {\n    var _ref266 = (0, _slicedToArray2.default)(_ref265, 1),\n      p_immutable = _ref266[0];\n    var p = vec3(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar(),\n      Z = int().toVar();\n    var fx = float(mx_floorfrac(p.x, X)).toVar();\n    var fy = float(mx_floorfrac(p.y, Y)).toVar();\n    var fz = float(mx_floorfrac(p.z, Z)).toVar();\n    var u = float(mx_fade(fx)).toVar();\n    var v = float(mx_fade(fy)).toVar();\n    var w = float(mx_fade(fz)).toVar();\n    var result = float(mx_trilerp(mx_gradient_float(mx_hash_int(X, Y, Z), fx, fy, fz), mx_gradient_float(mx_hash_int(X.add(int(1)), Y, Z), fx.sub(1.0), fy, fz), mx_gradient_float(mx_hash_int(X, Y.add(int(1)), Z), fx, fy.sub(1.0), fz), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1)), Z), fx.sub(1.0), fy.sub(1.0), fz), mx_gradient_float(mx_hash_int(X, Y, Z.add(int(1))), fx, fy, fz.sub(1.0)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y, Z.add(int(1))), fx.sub(1.0), fy, fz.sub(1.0)), mx_gradient_float(mx_hash_int(X, Y.add(int(1)), Z.add(int(1))), fx, fy.sub(1.0), fz.sub(1.0)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1)), Z.add(int(1))), fx.sub(1.0), fy.sub(1.0), fz.sub(1.0)), u, v, w)).toVar();\n    return mx_gradient_scale3d(result);\n  }).setLayout({\n    name: 'mx_perlin_noise_float_1',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }]\n  });\n  var mx_perlin_noise_float = /*@__PURE__*/overloadingFn([mx_perlin_noise_float_0, mx_perlin_noise_float_1]);\n  var mx_perlin_noise_vec3_0 = /*@__PURE__*/Fn(function (_ref267) {\n    var _ref268 = (0, _slicedToArray2.default)(_ref267, 1),\n      p_immutable = _ref268[0];\n    var p = vec2(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar();\n    var fx = float(mx_floorfrac(p.x, X)).toVar();\n    var fy = float(mx_floorfrac(p.y, Y)).toVar();\n    var u = float(mx_fade(fx)).toVar();\n    var v = float(mx_fade(fy)).toVar();\n    var result = vec3(mx_bilerp(mx_gradient_vec3(mx_hash_vec3(X, Y), fx, fy), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y), fx.sub(1.0), fy), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1))), fx, fy.sub(1.0)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1))), fx.sub(1.0), fy.sub(1.0)), u, v)).toVar();\n    return mx_gradient_scale2d(result);\n  }).setLayout({\n    name: 'mx_perlin_noise_vec3_0',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }]\n  });\n  var mx_perlin_noise_vec3_1 = /*@__PURE__*/Fn(function (_ref269) {\n    var _ref270 = (0, _slicedToArray2.default)(_ref269, 1),\n      p_immutable = _ref270[0];\n    var p = vec3(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar(),\n      Z = int().toVar();\n    var fx = float(mx_floorfrac(p.x, X)).toVar();\n    var fy = float(mx_floorfrac(p.y, Y)).toVar();\n    var fz = float(mx_floorfrac(p.z, Z)).toVar();\n    var u = float(mx_fade(fx)).toVar();\n    var v = float(mx_fade(fy)).toVar();\n    var w = float(mx_fade(fz)).toVar();\n    var result = vec3(mx_trilerp(mx_gradient_vec3(mx_hash_vec3(X, Y, Z), fx, fy, fz), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y, Z), fx.sub(1.0), fy, fz), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1)), Z), fx, fy.sub(1.0), fz), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1)), Z), fx.sub(1.0), fy.sub(1.0), fz), mx_gradient_vec3(mx_hash_vec3(X, Y, Z.add(int(1))), fx, fy, fz.sub(1.0)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y, Z.add(int(1))), fx.sub(1.0), fy, fz.sub(1.0)), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1)), Z.add(int(1))), fx, fy.sub(1.0), fz.sub(1.0)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1)), Z.add(int(1))), fx.sub(1.0), fy.sub(1.0), fz.sub(1.0)), u, v, w)).toVar();\n    return mx_gradient_scale3d(result);\n  }).setLayout({\n    name: 'mx_perlin_noise_vec3_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }]\n  });\n  var mx_perlin_noise_vec3 = /*@__PURE__*/overloadingFn([mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1]);\n  var mx_cell_noise_float_0 = /*@__PURE__*/Fn(function (_ref271) {\n    var _ref272 = (0, _slicedToArray2.default)(_ref271, 1),\n      p_immutable = _ref272[0];\n    var p = float(p_immutable).toVar();\n    var ix = int(mx_floor(p)).toVar();\n    return mx_bits_to_01(mx_hash_int(ix));\n  }).setLayout({\n    name: 'mx_cell_noise_float_0',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'float'\n    }]\n  });\n  var mx_cell_noise_float_1 = /*@__PURE__*/Fn(function (_ref273) {\n    var _ref274 = (0, _slicedToArray2.default)(_ref273, 1),\n      p_immutable = _ref274[0];\n    var p = vec2(p_immutable).toVar();\n    var ix = int(mx_floor(p.x)).toVar();\n    var iy = int(mx_floor(p.y)).toVar();\n    return mx_bits_to_01(mx_hash_int(ix, iy));\n  }).setLayout({\n    name: 'mx_cell_noise_float_1',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }]\n  });\n  var mx_cell_noise_float_2 = /*@__PURE__*/Fn(function (_ref275) {\n    var _ref276 = (0, _slicedToArray2.default)(_ref275, 1),\n      p_immutable = _ref276[0];\n    var p = vec3(p_immutable).toVar();\n    var ix = int(mx_floor(p.x)).toVar();\n    var iy = int(mx_floor(p.y)).toVar();\n    var iz = int(mx_floor(p.z)).toVar();\n    return mx_bits_to_01(mx_hash_int(ix, iy, iz));\n  }).setLayout({\n    name: 'mx_cell_noise_float_2',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }]\n  });\n  var mx_cell_noise_float_3 = /*@__PURE__*/Fn(function (_ref277) {\n    var _ref278 = (0, _slicedToArray2.default)(_ref277, 1),\n      p_immutable = _ref278[0];\n    var p = vec4(p_immutable).toVar();\n    var ix = int(mx_floor(p.x)).toVar();\n    var iy = int(mx_floor(p.y)).toVar();\n    var iz = int(mx_floor(p.z)).toVar();\n    var iw = int(mx_floor(p.w)).toVar();\n    return mx_bits_to_01(mx_hash_int(ix, iy, iz, iw));\n  }).setLayout({\n    name: 'mx_cell_noise_float_3',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec4'\n    }]\n  });\n  var mx_cell_noise_float$1 = /*@__PURE__*/overloadingFn([mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3]);\n  var mx_cell_noise_vec3_0 = /*@__PURE__*/Fn(function (_ref279) {\n    var _ref280 = (0, _slicedToArray2.default)(_ref279, 1),\n      p_immutable = _ref280[0];\n    var p = float(p_immutable).toVar();\n    var ix = int(mx_floor(p)).toVar();\n    return vec3(mx_bits_to_01(mx_hash_int(ix, int(0))), mx_bits_to_01(mx_hash_int(ix, int(1))), mx_bits_to_01(mx_hash_int(ix, int(2))));\n  }).setLayout({\n    name: 'mx_cell_noise_vec3_0',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'float'\n    }]\n  });\n  var mx_cell_noise_vec3_1 = /*@__PURE__*/Fn(function (_ref281) {\n    var _ref282 = (0, _slicedToArray2.default)(_ref281, 1),\n      p_immutable = _ref282[0];\n    var p = vec2(p_immutable).toVar();\n    var ix = int(mx_floor(p.x)).toVar();\n    var iy = int(mx_floor(p.y)).toVar();\n    return vec3(mx_bits_to_01(mx_hash_int(ix, iy, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, int(2))));\n  }).setLayout({\n    name: 'mx_cell_noise_vec3_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }]\n  });\n  var mx_cell_noise_vec3_2 = /*@__PURE__*/Fn(function (_ref283) {\n    var _ref284 = (0, _slicedToArray2.default)(_ref283, 1),\n      p_immutable = _ref284[0];\n    var p = vec3(p_immutable).toVar();\n    var ix = int(mx_floor(p.x)).toVar();\n    var iy = int(mx_floor(p.y)).toVar();\n    var iz = int(mx_floor(p.z)).toVar();\n    return vec3(mx_bits_to_01(mx_hash_int(ix, iy, iz, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, iz, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, iz, int(2))));\n  }).setLayout({\n    name: 'mx_cell_noise_vec3_2',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }]\n  });\n  var mx_cell_noise_vec3_3 = /*@__PURE__*/Fn(function (_ref285) {\n    var _ref286 = (0, _slicedToArray2.default)(_ref285, 1),\n      p_immutable = _ref286[0];\n    var p = vec4(p_immutable).toVar();\n    var ix = int(mx_floor(p.x)).toVar();\n    var iy = int(mx_floor(p.y)).toVar();\n    var iz = int(mx_floor(p.z)).toVar();\n    var iw = int(mx_floor(p.w)).toVar();\n    return vec3(mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(2))));\n  }).setLayout({\n    name: 'mx_cell_noise_vec3_3',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec4'\n    }]\n  });\n  var mx_cell_noise_vec3 = /*@__PURE__*/overloadingFn([mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3]);\n  var mx_fractal_noise_float$1 = /*@__PURE__*/Fn(function (_ref287) {\n    var _ref288 = (0, _slicedToArray2.default)(_ref287, 4),\n      p_immutable = _ref288[0],\n      octaves_immutable = _ref288[1],\n      lacunarity_immutable = _ref288[2],\n      diminish_immutable = _ref288[3];\n    var diminish = float(diminish_immutable).toVar();\n    var lacunarity = float(lacunarity_immutable).toVar();\n    var octaves = int(octaves_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var result = float(0.0).toVar();\n    var amplitude = float(1.0).toVar();\n    Loop(octaves, function () {\n      result.addAssign(amplitude.mul(mx_perlin_noise_float(p)));\n      amplitude.mulAssign(diminish);\n      p.mulAssign(lacunarity);\n    });\n    return result;\n  }).setLayout({\n    name: 'mx_fractal_noise_float',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'octaves',\n      type: 'int'\n    }, {\n      name: 'lacunarity',\n      type: 'float'\n    }, {\n      name: 'diminish',\n      type: 'float'\n    }]\n  });\n  var mx_fractal_noise_vec3$1 = /*@__PURE__*/Fn(function (_ref289) {\n    var _ref290 = (0, _slicedToArray2.default)(_ref289, 4),\n      p_immutable = _ref290[0],\n      octaves_immutable = _ref290[1],\n      lacunarity_immutable = _ref290[2],\n      diminish_immutable = _ref290[3];\n    var diminish = float(diminish_immutable).toVar();\n    var lacunarity = float(lacunarity_immutable).toVar();\n    var octaves = int(octaves_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var result = vec3(0.0).toVar();\n    var amplitude = float(1.0).toVar();\n    Loop(octaves, function () {\n      result.addAssign(amplitude.mul(mx_perlin_noise_vec3(p)));\n      amplitude.mulAssign(diminish);\n      p.mulAssign(lacunarity);\n    });\n    return result;\n  }).setLayout({\n    name: 'mx_fractal_noise_vec3',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'octaves',\n      type: 'int'\n    }, {\n      name: 'lacunarity',\n      type: 'float'\n    }, {\n      name: 'diminish',\n      type: 'float'\n    }]\n  });\n  var mx_fractal_noise_vec2$1 = /*@__PURE__*/Fn(function (_ref291) {\n    var _ref292 = (0, _slicedToArray2.default)(_ref291, 4),\n      p_immutable = _ref292[0],\n      octaves_immutable = _ref292[1],\n      lacunarity_immutable = _ref292[2],\n      diminish_immutable = _ref292[3];\n    var diminish = float(diminish_immutable).toVar();\n    var lacunarity = float(lacunarity_immutable).toVar();\n    var octaves = int(octaves_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    return vec2(mx_fractal_noise_float$1(p, octaves, lacunarity, diminish), mx_fractal_noise_float$1(p.add(vec3(int(19), int(193), int(17))), octaves, lacunarity, diminish));\n  }).setLayout({\n    name: 'mx_fractal_noise_vec2',\n    type: 'vec2',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'octaves',\n      type: 'int'\n    }, {\n      name: 'lacunarity',\n      type: 'float'\n    }, {\n      name: 'diminish',\n      type: 'float'\n    }]\n  });\n  var mx_fractal_noise_vec4$1 = /*@__PURE__*/Fn(function (_ref293) {\n    var _ref294 = (0, _slicedToArray2.default)(_ref293, 4),\n      p_immutable = _ref294[0],\n      octaves_immutable = _ref294[1],\n      lacunarity_immutable = _ref294[2],\n      diminish_immutable = _ref294[3];\n    var diminish = float(diminish_immutable).toVar();\n    var lacunarity = float(lacunarity_immutable).toVar();\n    var octaves = int(octaves_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var c = vec3(mx_fractal_noise_vec3$1(p, octaves, lacunarity, diminish)).toVar();\n    var f = float(mx_fractal_noise_float$1(p.add(vec3(int(19), int(193), int(17))), octaves, lacunarity, diminish)).toVar();\n    return vec4(c, f);\n  }).setLayout({\n    name: 'mx_fractal_noise_vec4',\n    type: 'vec4',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'octaves',\n      type: 'int'\n    }, {\n      name: 'lacunarity',\n      type: 'float'\n    }, {\n      name: 'diminish',\n      type: 'float'\n    }]\n  });\n  var mx_worley_distance_0 = /*@__PURE__*/Fn(function (_ref295) {\n    var _ref296 = (0, _slicedToArray2.default)(_ref295, 7),\n      p_immutable = _ref296[0],\n      x_immutable = _ref296[1],\n      y_immutable = _ref296[2],\n      xoff_immutable = _ref296[3],\n      yoff_immutable = _ref296[4],\n      jitter_immutable = _ref296[5],\n      metric_immutable = _ref296[6];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var yoff = int(yoff_immutable).toVar();\n    var xoff = int(xoff_immutable).toVar();\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var p = vec2(p_immutable).toVar();\n    var tmp = vec3(mx_cell_noise_vec3(vec2(x.add(xoff), y.add(yoff)))).toVar();\n    var off = vec2(tmp.x, tmp.y).toVar();\n    off.subAssign(0.5);\n    off.mulAssign(jitter);\n    off.addAssign(0.5);\n    var cellpos = vec2(vec2(float(x), float(y)).add(off)).toVar();\n    var diff = vec2(cellpos.sub(p)).toVar();\n    If(metric.equal(int(2)), function () {\n      return abs(diff.x).add(abs(diff.y));\n    });\n    If(metric.equal(int(3)), function () {\n      return max$1(abs(diff.x), abs(diff.y));\n    });\n    return dot(diff, diff);\n  }).setLayout({\n    name: 'mx_worley_distance_0',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }, {\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }, {\n      name: 'xoff',\n      type: 'int'\n    }, {\n      name: 'yoff',\n      type: 'int'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_distance_1 = /*@__PURE__*/Fn(function (_ref297) {\n    var _ref298 = (0, _slicedToArray2.default)(_ref297, 9),\n      p_immutable = _ref298[0],\n      x_immutable = _ref298[1],\n      y_immutable = _ref298[2],\n      z_immutable = _ref298[3],\n      xoff_immutable = _ref298[4],\n      yoff_immutable = _ref298[5],\n      zoff_immutable = _ref298[6],\n      jitter_immutable = _ref298[7],\n      metric_immutable = _ref298[8];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var zoff = int(zoff_immutable).toVar();\n    var yoff = int(yoff_immutable).toVar();\n    var xoff = int(xoff_immutable).toVar();\n    var z = int(z_immutable).toVar();\n    var y = int(y_immutable).toVar();\n    var x = int(x_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var off = vec3(mx_cell_noise_vec3(vec3(x.add(xoff), y.add(yoff), z.add(zoff)))).toVar();\n    off.subAssign(0.5);\n    off.mulAssign(jitter);\n    off.addAssign(0.5);\n    var cellpos = vec3(vec3(float(x), float(y), float(z)).add(off)).toVar();\n    var diff = vec3(cellpos.sub(p)).toVar();\n    If(metric.equal(int(2)), function () {\n      return abs(diff.x).add(abs(diff.y)).add(abs(diff.z));\n    });\n    If(metric.equal(int(3)), function () {\n      return max$1(max$1(abs(diff.x), abs(diff.y)), abs(diff.z));\n    });\n    return dot(diff, diff);\n  }).setLayout({\n    name: 'mx_worley_distance_1',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'x',\n      type: 'int'\n    }, {\n      name: 'y',\n      type: 'int'\n    }, {\n      name: 'z',\n      type: 'int'\n    }, {\n      name: 'xoff',\n      type: 'int'\n    }, {\n      name: 'yoff',\n      type: 'int'\n    }, {\n      name: 'zoff',\n      type: 'int'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_distance = /*@__PURE__*/overloadingFn([mx_worley_distance_0, mx_worley_distance_1]);\n  var mx_worley_noise_float_0 = /*@__PURE__*/Fn(function (_ref299) {\n    var _ref300 = (0, _slicedToArray2.default)(_ref299, 3),\n      p_immutable = _ref300[0],\n      jitter_immutable = _ref300[1],\n      metric_immutable = _ref300[2];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var p = vec2(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar();\n    var localpos = vec2(mx_floorfrac(p.x, X), mx_floorfrac(p.y, Y)).toVar();\n    var sqdist = float(1e6).toVar();\n    Loop({\n      start: -1,\n      end: int(1),\n      name: 'x',\n      condition: '<='\n    }, function (_ref301) {\n      var x = _ref301.x;\n      Loop({\n        start: -1,\n        end: int(1),\n        name: 'y',\n        condition: '<='\n      }, function (_ref302) {\n        var y = _ref302.y;\n        var dist = float(mx_worley_distance(localpos, x, y, X, Y, jitter, metric)).toVar();\n        sqdist.assign(min$1(sqdist, dist));\n      });\n    });\n    If(metric.equal(int(0)), function () {\n      sqdist.assign(sqrt(sqdist));\n    });\n    return sqdist;\n  }).setLayout({\n    name: 'mx_worley_noise_float_0',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_noise_vec2_0 = /*@__PURE__*/Fn(function (_ref303) {\n    var _ref304 = (0, _slicedToArray2.default)(_ref303, 3),\n      p_immutable = _ref304[0],\n      jitter_immutable = _ref304[1],\n      metric_immutable = _ref304[2];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var p = vec2(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar();\n    var localpos = vec2(mx_floorfrac(p.x, X), mx_floorfrac(p.y, Y)).toVar();\n    var sqdist = vec2(1e6, 1e6).toVar();\n    Loop({\n      start: -1,\n      end: int(1),\n      name: 'x',\n      condition: '<='\n    }, function (_ref305) {\n      var x = _ref305.x;\n      Loop({\n        start: -1,\n        end: int(1),\n        name: 'y',\n        condition: '<='\n      }, function (_ref306) {\n        var y = _ref306.y;\n        var dist = float(mx_worley_distance(localpos, x, y, X, Y, jitter, metric)).toVar();\n        If(dist.lessThan(sqdist.x), function () {\n          sqdist.y.assign(sqdist.x);\n          sqdist.x.assign(dist);\n        }).ElseIf(dist.lessThan(sqdist.y), function () {\n          sqdist.y.assign(dist);\n        });\n      });\n    });\n    If(metric.equal(int(0)), function () {\n      sqdist.assign(sqrt(sqdist));\n    });\n    return sqdist;\n  }).setLayout({\n    name: 'mx_worley_noise_vec2_0',\n    type: 'vec2',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_noise_vec3_0 = /*@__PURE__*/Fn(function (_ref307) {\n    var _ref308 = (0, _slicedToArray2.default)(_ref307, 3),\n      p_immutable = _ref308[0],\n      jitter_immutable = _ref308[1],\n      metric_immutable = _ref308[2];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var p = vec2(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar();\n    var localpos = vec2(mx_floorfrac(p.x, X), mx_floorfrac(p.y, Y)).toVar();\n    var sqdist = vec3(1e6, 1e6, 1e6).toVar();\n    Loop({\n      start: -1,\n      end: int(1),\n      name: 'x',\n      condition: '<='\n    }, function (_ref309) {\n      var x = _ref309.x;\n      Loop({\n        start: -1,\n        end: int(1),\n        name: 'y',\n        condition: '<='\n      }, function (_ref310) {\n        var y = _ref310.y;\n        var dist = float(mx_worley_distance(localpos, x, y, X, Y, jitter, metric)).toVar();\n        If(dist.lessThan(sqdist.x), function () {\n          sqdist.z.assign(sqdist.y);\n          sqdist.y.assign(sqdist.x);\n          sqdist.x.assign(dist);\n        }).ElseIf(dist.lessThan(sqdist.y), function () {\n          sqdist.z.assign(sqdist.y);\n          sqdist.y.assign(dist);\n        }).ElseIf(dist.lessThan(sqdist.z), function () {\n          sqdist.z.assign(dist);\n        });\n      });\n    });\n    If(metric.equal(int(0)), function () {\n      sqdist.assign(sqrt(sqdist));\n    });\n    return sqdist;\n  }).setLayout({\n    name: 'mx_worley_noise_vec3_0',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec2'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_noise_float_1 = /*@__PURE__*/Fn(function (_ref311) {\n    var _ref312 = (0, _slicedToArray2.default)(_ref311, 3),\n      p_immutable = _ref312[0],\n      jitter_immutable = _ref312[1],\n      metric_immutable = _ref312[2];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar(),\n      Z = int().toVar();\n    var localpos = vec3(mx_floorfrac(p.x, X), mx_floorfrac(p.y, Y), mx_floorfrac(p.z, Z)).toVar();\n    var sqdist = float(1e6).toVar();\n    Loop({\n      start: -1,\n      end: int(1),\n      name: 'x',\n      condition: '<='\n    }, function (_ref313) {\n      var x = _ref313.x;\n      Loop({\n        start: -1,\n        end: int(1),\n        name: 'y',\n        condition: '<='\n      }, function (_ref314) {\n        var y = _ref314.y;\n        Loop({\n          start: -1,\n          end: int(1),\n          name: 'z',\n          condition: '<='\n        }, function (_ref315) {\n          var z = _ref315.z;\n          var dist = float(mx_worley_distance(localpos, x, y, z, X, Y, Z, jitter, metric)).toVar();\n          sqdist.assign(min$1(sqdist, dist));\n        });\n      });\n    });\n    If(metric.equal(int(0)), function () {\n      sqdist.assign(sqrt(sqdist));\n    });\n    return sqdist;\n  }).setLayout({\n    name: 'mx_worley_noise_float_1',\n    type: 'float',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_noise_float$1 = /*@__PURE__*/overloadingFn([mx_worley_noise_float_0, mx_worley_noise_float_1]);\n  var mx_worley_noise_vec2_1 = /*@__PURE__*/Fn(function (_ref316) {\n    var _ref317 = (0, _slicedToArray2.default)(_ref316, 3),\n      p_immutable = _ref317[0],\n      jitter_immutable = _ref317[1],\n      metric_immutable = _ref317[2];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar(),\n      Z = int().toVar();\n    var localpos = vec3(mx_floorfrac(p.x, X), mx_floorfrac(p.y, Y), mx_floorfrac(p.z, Z)).toVar();\n    var sqdist = vec2(1e6, 1e6).toVar();\n    Loop({\n      start: -1,\n      end: int(1),\n      name: 'x',\n      condition: '<='\n    }, function (_ref318) {\n      var x = _ref318.x;\n      Loop({\n        start: -1,\n        end: int(1),\n        name: 'y',\n        condition: '<='\n      }, function (_ref319) {\n        var y = _ref319.y;\n        Loop({\n          start: -1,\n          end: int(1),\n          name: 'z',\n          condition: '<='\n        }, function (_ref320) {\n          var z = _ref320.z;\n          var dist = float(mx_worley_distance(localpos, x, y, z, X, Y, Z, jitter, metric)).toVar();\n          If(dist.lessThan(sqdist.x), function () {\n            sqdist.y.assign(sqdist.x);\n            sqdist.x.assign(dist);\n          }).ElseIf(dist.lessThan(sqdist.y), function () {\n            sqdist.y.assign(dist);\n          });\n        });\n      });\n    });\n    If(metric.equal(int(0)), function () {\n      sqdist.assign(sqrt(sqdist));\n    });\n    return sqdist;\n  }).setLayout({\n    name: 'mx_worley_noise_vec2_1',\n    type: 'vec2',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_noise_vec2$1 = /*@__PURE__*/overloadingFn([mx_worley_noise_vec2_0, mx_worley_noise_vec2_1]);\n  var mx_worley_noise_vec3_1 = /*@__PURE__*/Fn(function (_ref321) {\n    var _ref322 = (0, _slicedToArray2.default)(_ref321, 3),\n      p_immutable = _ref322[0],\n      jitter_immutable = _ref322[1],\n      metric_immutable = _ref322[2];\n    var metric = int(metric_immutable).toVar();\n    var jitter = float(jitter_immutable).toVar();\n    var p = vec3(p_immutable).toVar();\n    var X = int().toVar(),\n      Y = int().toVar(),\n      Z = int().toVar();\n    var localpos = vec3(mx_floorfrac(p.x, X), mx_floorfrac(p.y, Y), mx_floorfrac(p.z, Z)).toVar();\n    var sqdist = vec3(1e6, 1e6, 1e6).toVar();\n    Loop({\n      start: -1,\n      end: int(1),\n      name: 'x',\n      condition: '<='\n    }, function (_ref323) {\n      var x = _ref323.x;\n      Loop({\n        start: -1,\n        end: int(1),\n        name: 'y',\n        condition: '<='\n      }, function (_ref324) {\n        var y = _ref324.y;\n        Loop({\n          start: -1,\n          end: int(1),\n          name: 'z',\n          condition: '<='\n        }, function (_ref325) {\n          var z = _ref325.z;\n          var dist = float(mx_worley_distance(localpos, x, y, z, X, Y, Z, jitter, metric)).toVar();\n          If(dist.lessThan(sqdist.x), function () {\n            sqdist.z.assign(sqdist.y);\n            sqdist.y.assign(sqdist.x);\n            sqdist.x.assign(dist);\n          }).ElseIf(dist.lessThan(sqdist.y), function () {\n            sqdist.z.assign(sqdist.y);\n            sqdist.y.assign(dist);\n          }).ElseIf(dist.lessThan(sqdist.z), function () {\n            sqdist.z.assign(dist);\n          });\n        });\n      });\n    });\n    If(metric.equal(int(0)), function () {\n      sqdist.assign(sqrt(sqdist));\n    });\n    return sqdist;\n  }).setLayout({\n    name: 'mx_worley_noise_vec3_1',\n    type: 'vec3',\n    inputs: [{\n      name: 'p',\n      type: 'vec3'\n    }, {\n      name: 'jitter',\n      type: 'float'\n    }, {\n      name: 'metric',\n      type: 'int'\n    }]\n  });\n  var mx_worley_noise_vec3$1 = /*@__PURE__*/overloadingFn([mx_worley_noise_vec3_0, mx_worley_noise_vec3_1]);\n\n  // Three.js Transpiler\n  // https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_hsv.glsl\n\n  var mx_hsvtorgb = /*@__PURE__*/Fn(function (_ref326) {\n    var _ref327 = (0, _slicedToArray2.default)(_ref326, 1),\n      hsv = _ref327[0];\n    var s = hsv.y;\n    var v = hsv.z;\n    var result = vec3().toVar();\n    If(s.lessThan(0.0001), function () {\n      result.assign(vec3(v, v, v));\n    }).Else(function () {\n      var h = hsv.x;\n      h = h.sub(floor(h)).mul(6.0).toVar(); // TODO: check what .toVar() is needed in node system cache\n      var hi = int(trunc(h));\n      var f = h.sub(float(hi));\n      var p = v.mul(s.oneMinus());\n      var q = v.mul(s.mul(f).oneMinus());\n      var t = v.mul(s.mul(f.oneMinus()).oneMinus());\n      If(hi.equal(int(0)), function () {\n        result.assign(vec3(v, t, p));\n      }).ElseIf(hi.equal(int(1)), function () {\n        result.assign(vec3(q, v, p));\n      }).ElseIf(hi.equal(int(2)), function () {\n        result.assign(vec3(p, v, t));\n      }).ElseIf(hi.equal(int(3)), function () {\n        result.assign(vec3(p, q, v));\n      }).ElseIf(hi.equal(int(4)), function () {\n        result.assign(vec3(t, p, v));\n      }).Else(function () {\n        result.assign(vec3(v, p, q));\n      });\n    });\n    return result;\n  }).setLayout({\n    name: 'mx_hsvtorgb',\n    type: 'vec3',\n    inputs: [{\n      name: 'hsv',\n      type: 'vec3'\n    }]\n  });\n  var mx_rgbtohsv = /*@__PURE__*/Fn(function (_ref328) {\n    var _ref329 = (0, _slicedToArray2.default)(_ref328, 1),\n      c_immutable = _ref329[0];\n    var c = vec3(c_immutable).toVar();\n    var r = float(c.x).toVar();\n    var g = float(c.y).toVar();\n    var b = float(c.z).toVar();\n    var mincomp = float(min$1(r, min$1(g, b))).toVar();\n    var maxcomp = float(max$1(r, max$1(g, b))).toVar();\n    var delta = float(maxcomp.sub(mincomp)).toVar();\n    var h = float().toVar(),\n      s = float().toVar(),\n      v = float().toVar();\n    v.assign(maxcomp);\n    If(maxcomp.greaterThan(0.0), function () {\n      s.assign(delta.div(maxcomp));\n    }).Else(function () {\n      s.assign(0.0);\n    });\n    If(s.lessThanEqual(0.0), function () {\n      h.assign(0.0);\n    }).Else(function () {\n      If(r.greaterThanEqual(maxcomp), function () {\n        h.assign(g.sub(b).div(delta));\n      }).ElseIf(g.greaterThanEqual(maxcomp), function () {\n        h.assign(add(2.0, b.sub(r).div(delta)));\n      }).Else(function () {\n        h.assign(add(4.0, r.sub(g).div(delta)));\n      });\n      h.mulAssign(1.0 / 6.0);\n      If(h.lessThan(0.0), function () {\n        h.addAssign(1.0);\n      });\n    });\n    return vec3(h, s, v);\n  }).setLayout({\n    name: 'mx_rgbtohsv',\n    type: 'vec3',\n    inputs: [{\n      name: 'c',\n      type: 'vec3'\n    }]\n  });\n\n  // Three.js Transpiler\n  // https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_transform_color.glsl\n\n  var mx_srgb_texture_to_lin_rec709 = /*@__PURE__*/Fn(function (_ref330) {\n    var _ref331 = (0, _slicedToArray2.default)(_ref330, 1),\n      color_immutable = _ref331[0];\n    var color = vec3(color_immutable).toVar();\n    var isAbove = bvec3(greaterThan(color, vec3(0.04045))).toVar();\n    var linSeg = vec3(color.div(12.92)).toVar();\n    var powSeg = vec3(pow(max$1(color.add(vec3(0.055)), vec3(0.0)).div(1.055), vec3(2.4))).toVar();\n    return mix(linSeg, powSeg, isAbove);\n  }).setLayout({\n    name: 'mx_srgb_texture_to_lin_rec709',\n    type: 'vec3',\n    inputs: [{\n      name: 'color',\n      type: 'vec3'\n    }]\n  });\n  var mx_aastep = function mx_aastep(threshold, value) {\n    threshold = float(threshold);\n    value = float(value);\n    var afwidth = vec2(value.dFdx(), value.dFdy()).length().mul(0.70710678118654757);\n    return smoothstep(threshold.sub(afwidth), threshold.add(afwidth), value);\n  };\n  var _ramp = function _ramp(a, b, uv, p) {\n    return mix(a, b, uv[p].clamp());\n  };\n  var mx_ramplr = function mx_ramplr(valuel, valuer) {\n    var texcoord = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uv();\n    return _ramp(valuel, valuer, texcoord, 'x');\n  };\n  var mx_ramptb = function mx_ramptb(valuet, valueb) {\n    var texcoord = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uv();\n    return _ramp(valuet, valueb, texcoord, 'y');\n  };\n  var _split = function _split(a, b, center, uv, p) {\n    return mix(a, b, mx_aastep(center, uv[p]));\n  };\n  var mx_splitlr = function mx_splitlr(valuel, valuer, center) {\n    var texcoord = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : uv();\n    return _split(valuel, valuer, center, texcoord, 'x');\n  };\n  var mx_splittb = function mx_splittb(valuet, valueb, center) {\n    var texcoord = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : uv();\n    return _split(valuet, valueb, center, texcoord, 'y');\n  };\n  var mx_transform_uv = function mx_transform_uv() {\n    var uv_scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var uv_offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var uv_geo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uv();\n    return uv_geo.mul(uv_scale).add(uv_offset);\n  };\n  var mx_safepower = function mx_safepower(in1) {\n    var in2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    in1 = float(in1);\n    return in1.abs().pow(in2).mul(in1.sign());\n  };\n  var mx_contrast = function mx_contrast(input) {\n    var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var pivot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .5;\n    return float(input).sub(pivot).mul(amount).add(pivot);\n  };\n  var mx_noise_float = function mx_noise_float() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var amplitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var pivot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    return mx_perlin_noise_float(texcoord.convert('vec2|vec3')).mul(amplitude).add(pivot);\n  };\n  //export const mx_noise_vec2 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\n  var mx_noise_vec3 = function mx_noise_vec3() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var amplitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var pivot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    return mx_perlin_noise_vec3(texcoord.convert('vec2|vec3')).mul(amplitude).add(pivot);\n  };\n  var mx_noise_vec4 = function mx_noise_vec4() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var amplitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var pivot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    texcoord = texcoord.convert('vec2|vec3'); // overloading type\n\n    var noise_vec4 = vec4(mx_perlin_noise_vec3(texcoord), mx_perlin_noise_float(texcoord.add(vec2(19, 73))));\n    return noise_vec4.mul(amplitude).add(pivot);\n  };\n  var mx_worley_noise_float = function mx_worley_noise_float() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var jitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return mx_worley_noise_float$1(texcoord.convert('vec2|vec3'), jitter, int(1));\n  };\n  var mx_worley_noise_vec2 = function mx_worley_noise_vec2() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var jitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return mx_worley_noise_vec2$1(texcoord.convert('vec2|vec3'), jitter, int(1));\n  };\n  var mx_worley_noise_vec3 = function mx_worley_noise_vec3() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var jitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return mx_worley_noise_vec3$1(texcoord.convert('vec2|vec3'), jitter, int(1));\n  };\n  var mx_cell_noise_float = function mx_cell_noise_float() {\n    var texcoord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    return mx_cell_noise_float$1(texcoord.convert('vec2|vec3'));\n  };\n  var mx_fractal_noise_float = function mx_fractal_noise_float() {\n    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var octaves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    var lacunarity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    var diminish = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : .5;\n    var amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    return mx_fractal_noise_float$1(position, int(octaves), lacunarity, diminish).mul(amplitude);\n  };\n  var mx_fractal_noise_vec2 = function mx_fractal_noise_vec2() {\n    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var octaves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    var lacunarity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    var diminish = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : .5;\n    var amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    return mx_fractal_noise_vec2$1(position, int(octaves), lacunarity, diminish).mul(amplitude);\n  };\n  var mx_fractal_noise_vec3 = function mx_fractal_noise_vec3() {\n    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var octaves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    var lacunarity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    var diminish = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : .5;\n    var amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    return mx_fractal_noise_vec3$1(position, int(octaves), lacunarity, diminish).mul(amplitude);\n  };\n  var mx_fractal_noise_vec4 = function mx_fractal_noise_vec4() {\n    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uv();\n    var octaves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    var lacunarity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    var diminish = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : .5;\n    var amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    return mx_fractal_noise_vec4$1(position, int(octaves), lacunarity, diminish).mul(amplitude);\n  };\n\n  /** @module getParallaxCorrectNormal **/\n\n  /**\n   * This computes a parallax corrected normal which is used for box-projected cube mapping (BPCEM).\n   *\n   * Reference: {@link https://devlog-martinsh.blogspot.com/2011/09/box-projected-cube-environment-mapping.html}\n   *\n   * ```js\n   * const uvNode = getParallaxCorrectNormal( reflectVector, vec3( 200, 100, 100 ), vec3( 0, - 50, 0 ) );\n   * material.envNode = pmremTexture( renderTarget.texture, uvNode );\n   * ```\n   * @function\n   * @param {Node<vec3>} normal - The normal to correct.\n   * @param {Node<vec3>} cubeSize - The cube size should reflect the size of the environment (BPCEM is usually applied in closed environments like rooms).\n   * @param {Node<vec3>} cubePos - The cube position.\n   * @return {Node<vec3>} The parallax corrected normal.\n   */\n  var getParallaxCorrectNormal = /*@__PURE__*/Fn(function (_ref332) {\n    var _ref333 = (0, _slicedToArray2.default)(_ref332, 3),\n      normal = _ref333[0],\n      cubeSize = _ref333[1],\n      cubePos = _ref333[2];\n    var nDir = normalize(normal).toVar('nDir');\n    var rbmax = sub(float(0.5).mul(cubeSize.sub(cubePos)), positionWorld).div(nDir).toVar('rbmax');\n    var rbmin = sub(float(-0.5).mul(cubeSize.sub(cubePos)), positionWorld).div(nDir).toVar('rbmin');\n    var rbminmax = vec3().toVar('rbminmax');\n    rbminmax.x = nDir.x.greaterThan(float(0)).select(rbmax.x, rbmin.x);\n    rbminmax.y = nDir.y.greaterThan(float(0)).select(rbmax.y, rbmin.y);\n    rbminmax.z = nDir.z.greaterThan(float(0)).select(rbmax.z, rbmin.z);\n    var correction = min$1(min$1(rbminmax.x, rbminmax.y), rbminmax.z).toVar('correction');\n    var boxIntersection = positionWorld.add(nDir.mul(correction)).toVar('boxIntersection');\n    return boxIntersection.sub(cubePos);\n  });\n  var getShIrradianceAt = /*@__PURE__*/Fn(function (_ref334) {\n    var _ref335 = (0, _slicedToArray2.default)(_ref334, 2),\n      normal = _ref335[0],\n      shCoefficients = _ref335[1];\n    // normal is assumed to have unit length\n\n    var x = normal.x,\n      y = normal.y,\n      z = normal.z;\n\n    // band 0\n    var result = shCoefficients.element(0).mul(0.886227);\n\n    // band 1\n    result = result.add(shCoefficients.element(1).mul(2.0 * 0.511664).mul(y));\n    result = result.add(shCoefficients.element(2).mul(2.0 * 0.511664).mul(z));\n    result = result.add(shCoefficients.element(3).mul(2.0 * 0.511664).mul(x));\n\n    // band 2\n    result = result.add(shCoefficients.element(4).mul(2.0 * 0.429043).mul(x).mul(y));\n    result = result.add(shCoefficients.element(5).mul(2.0 * 0.429043).mul(y).mul(z));\n    result = result.add(shCoefficients.element(6).mul(z.mul(z).mul(0.743125).sub(0.247708)));\n    result = result.add(shCoefficients.element(7).mul(2.0 * 0.429043).mul(x).mul(z));\n    result = result.add(shCoefficients.element(8).mul(0.429043).mul(mul(x, x).sub(mul(y, y))));\n    return result;\n  });\n\n  // constants\n\n  var TSL = exports.TSL = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BRDF_GGX: BRDF_GGX,\n    BRDF_Lambert: BRDF_Lambert,\n    BasicShadowFilter: BasicShadowFilter,\n    Break: Break,\n    Continue: Continue,\n    DFGApprox: DFGApprox,\n    D_GGX: D_GGX,\n    Discard: Discard,\n    EPSILON: EPSILON,\n    F_Schlick: F_Schlick,\n    Fn: Fn,\n    INFINITY: INFINITY,\n    If: If,\n    Loop: Loop,\n    NodeAccess: NodeAccess,\n    NodeShaderStage: NodeShaderStage,\n    NodeType: NodeType,\n    NodeUpdateType: NodeUpdateType,\n    PCFShadowFilter: PCFShadowFilter,\n    PCFSoftShadowFilter: PCFSoftShadowFilter,\n    PI: PI,\n    PI2: PI2,\n    Return: Return,\n    Schlick_to_F0: Schlick_to_F0,\n    ScriptableNodeResources: ScriptableNodeResources,\n    ShaderNode: ShaderNode,\n    TBNViewMatrix: TBNViewMatrix,\n    VSMShadowFilter: VSMShadowFilter,\n    V_GGX_SmithCorrelated: V_GGX_SmithCorrelated,\n    abs: abs,\n    acesFilmicToneMapping: acesFilmicToneMapping,\n    acos: acos,\n    add: add,\n    addMethodChaining: addMethodChaining,\n    addNodeElement: addNodeElement,\n    agxToneMapping: agxToneMapping,\n    all: all,\n    alphaT: alphaT,\n    and: and,\n    anisotropy: anisotropy,\n    anisotropyB: anisotropyB,\n    anisotropyT: anisotropyT,\n    any: any,\n    append: append,\n    arrayBuffer: arrayBuffer,\n    asin: asin,\n    assign: assign,\n    atan: atan,\n    atan2: atan2,\n    atomicAdd: atomicAdd,\n    atomicAnd: atomicAnd,\n    atomicFunc: atomicFunc,\n    atomicMax: atomicMax,\n    atomicMin: atomicMin,\n    atomicOr: atomicOr,\n    atomicStore: atomicStore,\n    atomicSub: atomicSub,\n    atomicXor: atomicXor,\n    attenuationColor: attenuationColor,\n    attenuationDistance: attenuationDistance,\n    attribute: attribute,\n    attributeArray: attributeArray,\n    backgroundBlurriness: backgroundBlurriness,\n    backgroundIntensity: backgroundIntensity,\n    backgroundRotation: backgroundRotation,\n    batch: batch,\n    billboarding: billboarding,\n    bitAnd: bitAnd,\n    bitNot: bitNot,\n    bitOr: bitOr,\n    bitXor: bitXor,\n    bitangentGeometry: bitangentGeometry,\n    bitangentLocal: bitangentLocal,\n    bitangentView: bitangentView,\n    bitangentWorld: bitangentWorld,\n    bitcast: bitcast,\n    blendBurn: blendBurn,\n    blendColor: blendColor,\n    blendDodge: blendDodge,\n    blendOverlay: blendOverlay,\n    blendScreen: blendScreen,\n    blur: blur,\n    bool: bool,\n    buffer: buffer,\n    bufferAttribute: bufferAttribute,\n    bumpMap: bumpMap,\n    burn: burn,\n    bvec2: bvec2,\n    bvec3: bvec3,\n    bvec4: bvec4,\n    bypass: bypass,\n    cache: cache,\n    call: call,\n    cameraFar: cameraFar,\n    cameraNear: cameraNear,\n    cameraNormalMatrix: cameraNormalMatrix,\n    cameraPosition: cameraPosition,\n    cameraProjectionMatrix: cameraProjectionMatrix,\n    cameraProjectionMatrixInverse: cameraProjectionMatrixInverse,\n    cameraViewMatrix: cameraViewMatrix,\n    cameraWorldMatrix: cameraWorldMatrix,\n    cbrt: cbrt,\n    cdl: cdl,\n    ceil: ceil,\n    checker: checker,\n    cineonToneMapping: cineonToneMapping,\n    clamp: clamp,\n    clearcoat: clearcoat,\n    clearcoatRoughness: clearcoatRoughness,\n    code: code,\n    color: color,\n    colorSpaceToWorking: colorSpaceToWorking,\n    colorToDirection: colorToDirection,\n    compute: compute,\n    cond: cond,\n    context: context,\n    convert: convert,\n    convertColorSpace: convertColorSpace,\n    convertToTexture: convertToTexture,\n    cos: cos,\n    cross: cross,\n    cubeTexture: cubeTexture,\n    dFdx: dFdx,\n    dFdy: dFdy,\n    dashSize: dashSize,\n    defaultBuildStages: defaultBuildStages,\n    defaultShaderStages: defaultShaderStages,\n    defined: defined,\n    degrees: degrees,\n    deltaTime: deltaTime,\n    densityFog: densityFog,\n    densityFogFactor: densityFogFactor,\n    depth: depth,\n    depthPass: depthPass,\n    difference: difference,\n    diffuseColor: diffuseColor,\n    directPointLight: directPointLight,\n    directionToColor: directionToColor,\n    dispersion: dispersion,\n    distance: distance,\n    div: div,\n    dodge: dodge,\n    dot: dot,\n    drawIndex: drawIndex,\n    dynamicBufferAttribute: dynamicBufferAttribute,\n    element: element,\n    emissive: emissive,\n    equal: equal,\n    equals: equals,\n    equirectUV: equirectUV,\n    exp: exp,\n    exp2: exp2,\n    expression: expression,\n    faceDirection: faceDirection,\n    faceForward: faceForward,\n    faceforward: faceforward,\n    float: float,\n    floor: floor,\n    fog: fog,\n    fract: fract,\n    frameGroup: frameGroup,\n    frameId: frameId,\n    frontFacing: frontFacing,\n    fwidth: fwidth,\n    gain: gain,\n    gapSize: gapSize,\n    getConstNodeType: getConstNodeType,\n    getCurrentStack: getCurrentStack,\n    getDirection: getDirection,\n    getDistanceAttenuation: getDistanceAttenuation,\n    getGeometryRoughness: getGeometryRoughness,\n    getNormalFromDepth: getNormalFromDepth,\n    getParallaxCorrectNormal: getParallaxCorrectNormal,\n    getRoughness: getRoughness,\n    getScreenPosition: getScreenPosition,\n    getShIrradianceAt: getShIrradianceAt,\n    getTextureIndex: getTextureIndex,\n    getViewPosition: getViewPosition,\n    glsl: glsl,\n    glslFn: glslFn,\n    grayscale: grayscale,\n    greaterThan: greaterThan,\n    greaterThanEqual: greaterThanEqual,\n    hash: hash,\n    highpModelNormalViewMatrix: highpModelNormalViewMatrix,\n    highpModelViewMatrix: highpModelViewMatrix,\n    hue: hue,\n    instance: instance,\n    instanceIndex: instanceIndex,\n    instancedArray: instancedArray,\n    instancedBufferAttribute: instancedBufferAttribute,\n    instancedDynamicBufferAttribute: instancedDynamicBufferAttribute,\n    instancedMesh: instancedMesh,\n    int: int,\n    inverseSqrt: inverseSqrt,\n    inversesqrt: inversesqrt,\n    invocationLocalIndex: invocationLocalIndex,\n    invocationSubgroupIndex: invocationSubgroupIndex,\n    ior: ior,\n    iridescence: iridescence,\n    iridescenceIOR: iridescenceIOR,\n    iridescenceThickness: iridescenceThickness,\n    ivec2: ivec2,\n    ivec3: ivec3,\n    ivec4: ivec4,\n    js: js,\n    label: label,\n    length: length,\n    lengthSq: lengthSq,\n    lessThan: lessThan,\n    lessThanEqual: lessThanEqual,\n    lightPosition: lightPosition,\n    lightProjectionUV: lightProjectionUV,\n    lightShadowMatrix: lightShadowMatrix,\n    lightTargetDirection: lightTargetDirection,\n    lightTargetPosition: lightTargetPosition,\n    lightViewPosition: lightViewPosition,\n    lightingContext: lightingContext,\n    lights: lights,\n    linearDepth: linearDepth,\n    linearToneMapping: linearToneMapping,\n    localId: localId,\n    log: log,\n    log2: log2,\n    logarithmicDepthToViewZ: logarithmicDepthToViewZ,\n    loop: loop,\n    luminance: luminance,\n    mat2: mat2,\n    mat3: mat3,\n    mat4: mat4,\n    matcapUV: matcapUV,\n    materialAO: materialAO,\n    materialAlphaTest: materialAlphaTest,\n    materialAnisotropy: materialAnisotropy,\n    materialAnisotropyVector: materialAnisotropyVector,\n    materialAttenuationColor: materialAttenuationColor,\n    materialAttenuationDistance: materialAttenuationDistance,\n    materialClearcoat: materialClearcoat,\n    materialClearcoatNormal: materialClearcoatNormal,\n    materialClearcoatRoughness: materialClearcoatRoughness,\n    materialColor: materialColor,\n    materialDispersion: materialDispersion,\n    materialEmissive: materialEmissive,\n    materialIOR: materialIOR,\n    materialIridescence: materialIridescence,\n    materialIridescenceIOR: materialIridescenceIOR,\n    materialIridescenceThickness: materialIridescenceThickness,\n    materialLightMap: materialLightMap,\n    materialLineDashOffset: materialLineDashOffset,\n    materialLineDashSize: materialLineDashSize,\n    materialLineGapSize: materialLineGapSize,\n    materialLineScale: materialLineScale,\n    materialLineWidth: materialLineWidth,\n    materialMetalness: materialMetalness,\n    materialNormal: materialNormal,\n    materialOpacity: materialOpacity,\n    materialPointWidth: materialPointWidth,\n    materialReference: materialReference,\n    materialReflectivity: materialReflectivity,\n    materialRefractionRatio: materialRefractionRatio,\n    materialRotation: materialRotation,\n    materialRoughness: materialRoughness,\n    materialSheen: materialSheen,\n    materialSheenRoughness: materialSheenRoughness,\n    materialShininess: materialShininess,\n    materialSpecular: materialSpecular,\n    materialSpecularColor: materialSpecularColor,\n    materialSpecularIntensity: materialSpecularIntensity,\n    materialSpecularStrength: materialSpecularStrength,\n    materialThickness: materialThickness,\n    materialTransmission: materialTransmission,\n    max: max$1,\n    maxMipLevel: maxMipLevel,\n    mediumpModelViewMatrix: mediumpModelViewMatrix,\n    metalness: metalness,\n    min: min$1,\n    mix: mix,\n    mixElement: mixElement,\n    mod: mod,\n    modInt: modInt,\n    modelDirection: modelDirection,\n    modelNormalMatrix: modelNormalMatrix,\n    modelPosition: modelPosition,\n    modelScale: modelScale,\n    modelViewMatrix: modelViewMatrix,\n    modelViewPosition: modelViewPosition,\n    modelViewProjection: modelViewProjection,\n    modelWorldMatrix: modelWorldMatrix,\n    modelWorldMatrixInverse: modelWorldMatrixInverse,\n    morphReference: morphReference,\n    mrt: mrt,\n    mul: mul,\n    mx_aastep: mx_aastep,\n    mx_cell_noise_float: mx_cell_noise_float,\n    mx_contrast: mx_contrast,\n    mx_fractal_noise_float: mx_fractal_noise_float,\n    mx_fractal_noise_vec2: mx_fractal_noise_vec2,\n    mx_fractal_noise_vec3: mx_fractal_noise_vec3,\n    mx_fractal_noise_vec4: mx_fractal_noise_vec4,\n    mx_hsvtorgb: mx_hsvtorgb,\n    mx_noise_float: mx_noise_float,\n    mx_noise_vec3: mx_noise_vec3,\n    mx_noise_vec4: mx_noise_vec4,\n    mx_ramplr: mx_ramplr,\n    mx_ramptb: mx_ramptb,\n    mx_rgbtohsv: mx_rgbtohsv,\n    mx_safepower: mx_safepower,\n    mx_splitlr: mx_splitlr,\n    mx_splittb: mx_splittb,\n    mx_srgb_texture_to_lin_rec709: mx_srgb_texture_to_lin_rec709,\n    mx_transform_uv: mx_transform_uv,\n    mx_worley_noise_float: mx_worley_noise_float,\n    mx_worley_noise_vec2: mx_worley_noise_vec2,\n    mx_worley_noise_vec3: mx_worley_noise_vec3,\n    negate: negate,\n    neutralToneMapping: neutralToneMapping,\n    nodeArray: nodeArray,\n    nodeImmutable: nodeImmutable,\n    nodeObject: nodeObject,\n    nodeObjects: nodeObjects,\n    nodeProxy: nodeProxy,\n    normalFlat: normalFlat,\n    normalGeometry: normalGeometry,\n    normalLocal: normalLocal,\n    normalMap: normalMap,\n    normalView: normalView,\n    normalWorld: normalWorld,\n    normalize: normalize,\n    not: not,\n    notEqual: notEqual,\n    numWorkgroups: numWorkgroups,\n    objectDirection: objectDirection,\n    objectGroup: objectGroup,\n    objectPosition: objectPosition,\n    objectScale: objectScale,\n    objectViewPosition: objectViewPosition,\n    objectWorldMatrix: objectWorldMatrix,\n    oneMinus: oneMinus,\n    or: or,\n    orthographicDepthToViewZ: orthographicDepthToViewZ,\n    oscSawtooth: oscSawtooth,\n    oscSine: oscSine,\n    oscSquare: oscSquare,\n    oscTriangle: oscTriangle,\n    output: output,\n    outputStruct: outputStruct,\n    overlay: overlay,\n    overloadingFn: overloadingFn,\n    parabola: parabola,\n    parallaxDirection: parallaxDirection,\n    parallaxUV: parallaxUV,\n    parameter: parameter,\n    pass: pass,\n    passTexture: passTexture,\n    pcurve: pcurve,\n    perspectiveDepthToViewZ: perspectiveDepthToViewZ,\n    pmremTexture: pmremTexture,\n    pointUV: pointUV,\n    pointWidth: pointWidth,\n    positionGeometry: positionGeometry,\n    positionLocal: positionLocal,\n    positionPrevious: positionPrevious,\n    positionView: positionView,\n    positionViewDirection: positionViewDirection,\n    positionWorld: positionWorld,\n    positionWorldDirection: positionWorldDirection,\n    posterize: posterize,\n    pow: pow,\n    pow2: pow2,\n    pow3: pow3,\n    pow4: pow4,\n    property: property,\n    radians: radians,\n    rand: rand,\n    range: range,\n    rangeFog: rangeFog,\n    rangeFogFactor: rangeFogFactor,\n    reciprocal: reciprocal,\n    reference: reference,\n    referenceBuffer: referenceBuffer,\n    reflect: reflect,\n    reflectVector: reflectVector,\n    reflectView: reflectView,\n    reflector: reflector,\n    refract: refract,\n    refractVector: refractVector,\n    refractView: refractView,\n    reinhardToneMapping: reinhardToneMapping,\n    remainder: remainder,\n    remap: remap,\n    remapClamp: remapClamp,\n    renderGroup: renderGroup,\n    renderOutput: renderOutput,\n    rendererReference: rendererReference,\n    rotate: rotate,\n    rotateUV: rotateUV,\n    roughness: roughness,\n    round: round,\n    rtt: rtt,\n    sRGBTransferEOTF: sRGBTransferEOTF,\n    sRGBTransferOETF: sRGBTransferOETF,\n    sampler: sampler,\n    saturate: saturate,\n    saturation: saturation,\n    screen: screen,\n    screenCoordinate: screenCoordinate,\n    screenSize: screenSize,\n    screenUV: screenUV,\n    scriptable: scriptable,\n    scriptableValue: scriptableValue,\n    select: select,\n    setCurrentStack: setCurrentStack,\n    shaderStages: shaderStages,\n    shadow: shadow,\n    shadowPositionWorld: shadowPositionWorld,\n    sharedUniformGroup: sharedUniformGroup,\n    sheen: sheen,\n    sheenRoughness: sheenRoughness,\n    shiftLeft: shiftLeft,\n    shiftRight: shiftRight,\n    shininess: shininess,\n    sign: sign,\n    sin: sin,\n    sinc: sinc,\n    skinning: skinning,\n    skinningReference: skinningReference,\n    smoothstep: smoothstep,\n    smoothstepElement: smoothstepElement,\n    specularColor: specularColor,\n    specularF90: specularF90,\n    spherizeUV: spherizeUV,\n    split: split,\n    spritesheetUV: spritesheetUV,\n    sqrt: sqrt,\n    stack: stack,\n    step: step,\n    storage: storage,\n    storageBarrier: storageBarrier,\n    storageObject: storageObject,\n    storageTexture: storageTexture,\n    string: string,\n    sub: sub,\n    subgroupIndex: subgroupIndex,\n    subgroupSize: subgroupSize,\n    tan: tan,\n    tangentGeometry: tangentGeometry,\n    tangentLocal: tangentLocal,\n    tangentView: tangentView,\n    tangentWorld: tangentWorld,\n    temp: temp,\n    texture: texture,\n    texture3D: texture3D,\n    textureBarrier: textureBarrier,\n    textureBicubic: textureBicubic,\n    textureCubeUV: textureCubeUV,\n    textureLoad: textureLoad,\n    textureSize: textureSize,\n    textureStore: textureStore,\n    thickness: thickness,\n    time: time,\n    timerDelta: timerDelta,\n    timerGlobal: timerGlobal,\n    timerLocal: timerLocal,\n    toOutputColorSpace: toOutputColorSpace,\n    toWorkingColorSpace: toWorkingColorSpace,\n    toneMapping: toneMapping,\n    toneMappingExposure: toneMappingExposure,\n    toonOutlinePass: toonOutlinePass,\n    transformDirection: transformDirection,\n    transformNormal: transformNormal,\n    transformNormalToView: transformNormalToView,\n    transformedBentNormalView: transformedBentNormalView,\n    transformedBitangentView: transformedBitangentView,\n    transformedBitangentWorld: transformedBitangentWorld,\n    transformedClearcoatNormalView: transformedClearcoatNormalView,\n    transformedNormalView: transformedNormalView,\n    transformedNormalWorld: transformedNormalWorld,\n    transformedTangentView: transformedTangentView,\n    transformedTangentWorld: transformedTangentWorld,\n    transmission: transmission,\n    transpose: transpose,\n    triNoise3D: triNoise3D,\n    triplanarTexture: triplanarTexture,\n    triplanarTextures: triplanarTextures,\n    trunc: trunc,\n    tslFn: tslFn,\n    uint: uint,\n    uniform: uniform,\n    uniformArray: uniformArray,\n    uniformGroup: uniformGroup,\n    uniforms: uniforms,\n    userData: userData,\n    uv: uv,\n    uvec2: uvec2,\n    uvec3: uvec3,\n    uvec4: uvec4,\n    varying: varying,\n    varyingProperty: varyingProperty,\n    vec2: vec2,\n    vec3: vec3,\n    vec4: vec4,\n    vectorComponents: vectorComponents,\n    velocity: velocity,\n    vertexColor: vertexColor,\n    vertexIndex: vertexIndex,\n    vertexStage: vertexStage,\n    vibrance: vibrance,\n    viewZToLogarithmicDepth: viewZToLogarithmicDepth,\n    viewZToOrthographicDepth: viewZToOrthographicDepth,\n    viewZToPerspectiveDepth: viewZToPerspectiveDepth,\n    viewport: viewport,\n    viewportBottomLeft: viewportBottomLeft,\n    viewportCoordinate: viewportCoordinate,\n    viewportDepthTexture: viewportDepthTexture,\n    viewportLinearDepth: viewportLinearDepth,\n    viewportMipTexture: viewportMipTexture,\n    viewportResolution: viewportResolution,\n    viewportSafeUV: viewportSafeUV,\n    viewportSharedTexture: viewportSharedTexture,\n    viewportSize: viewportSize,\n    viewportTexture: viewportTexture,\n    viewportTopLeft: viewportTopLeft,\n    viewportUV: viewportUV,\n    wgsl: wgsl,\n    wgslFn: wgslFn,\n    workgroupArray: workgroupArray,\n    workgroupBarrier: workgroupBarrier,\n    workgroupId: workgroupId,\n    workingToColorSpace: workingToColorSpace,\n    xor: xor\n  });\n  var _clearColor$1 = /*@__PURE__*/new Color4();\n\n  /**\n   * This renderer module manages the background.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Background = /*#__PURE__*/function (_DataMap6) {\n    /**\n     * Constructs a new background management component.\n     *\n     * @param {Renderer} renderer - The renderer.\n     * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n     */\n    function Background(renderer, nodes) {\n      var _this167;\n      (0, _classCallCheck2.default)(this, Background);\n      _this167 = _callSuper(this, Background);\n\n      /**\n       * The renderer.\n       *\n       * @type {Renderer}\n       */\n      _this167.renderer = renderer;\n\n      /**\n       * Renderer component for managing nodes related logic.\n       *\n       * @type {Nodes}\n       */\n      _this167.nodes = nodes;\n      return _this167;\n    }\n\n    /**\n     * Updates the background for the given scene. Depending on how `Scene.background`\n     * or `Scene.backgroundNode` are configured, this method might configure a simple clear\n     * or add a mesh to the render list for rendering the background as a textured plane\n     * or skybox.\n     *\n     * @param {Scene} scene - The scene.\n     * @param {RenderList} renderList - The current render list.\n     * @param {RenderContext} renderContext - The current render context.\n     */\n    (0, _inherits2.default)(Background, _DataMap6);\n    return (0, _createClass2.default)(Background, [{\n      key: \"update\",\n      value: function update(scene, renderList, renderContext) {\n        var renderer = this.renderer;\n        var background = this.nodes.getBackgroundNode(scene) || scene.background;\n        var forceClear = false;\n        if (background === null) {\n          // no background settings, use clear color configuration from the renderer\n\n          renderer._clearColor.getRGB(_clearColor$1, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace);\n          _clearColor$1.a = renderer._clearColor.a;\n        } else if (background.isColor === true) {\n          // background is an opaque color\n\n          background.getRGB(_clearColor$1, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace);\n          _clearColor$1.a = 1;\n          forceClear = true;\n        } else if (background.isNode === true) {\n          var sceneData = this.get(scene);\n          var backgroundNode = background;\n          _clearColor$1.copy(renderer._clearColor);\n          var backgroundMesh = sceneData.backgroundMesh;\n          if (backgroundMesh === undefined) {\n            var backgroundMeshNode = context(vec4(backgroundNode).mul(backgroundIntensity), {\n              // @TODO: Add Texture2D support using node context\n              getUV: function getUV() {\n                return backgroundRotation.mul(normalWorld);\n              },\n              getTextureLevel: function getTextureLevel() {\n                return backgroundBlurriness;\n              }\n            });\n            var viewProj = modelViewProjection;\n            viewProj = viewProj.setZ(viewProj.w);\n            var nodeMaterial = new NodeMaterial();\n            nodeMaterial.name = 'Background.material';\n            nodeMaterial.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n            nodeMaterial.depthTest = false;\n            nodeMaterial.depthWrite = false;\n            nodeMaterial.fog = false;\n            nodeMaterial.lights = false;\n            nodeMaterial.vertexNode = viewProj;\n            nodeMaterial.colorNode = backgroundMeshNode;\n            sceneData.backgroundMeshNode = backgroundMeshNode;\n            sceneData.backgroundMesh = backgroundMesh = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh)(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SphereGeometry)(1, 32, 32), nodeMaterial);\n            backgroundMesh.frustumCulled = false;\n            backgroundMesh.name = 'Background.mesh';\n            backgroundMesh.onBeforeRender = function (renderer, scene, camera) {\n              this.matrixWorld.copyPosition(camera.matrixWorld);\n            };\n          }\n          var backgroundCacheKey = backgroundNode.getCacheKey();\n          if (sceneData.backgroundCacheKey !== backgroundCacheKey) {\n            sceneData.backgroundMeshNode.node = vec4(backgroundNode).mul(backgroundIntensity);\n            sceneData.backgroundMeshNode.needsUpdate = true;\n            backgroundMesh.material.needsUpdate = true;\n            sceneData.backgroundCacheKey = backgroundCacheKey;\n          }\n          renderList.unshift(backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null, null);\n        } else {\n          console.error('THREE.Renderer: Unsupported background configuration.', background);\n        }\n\n        //\n\n        if (renderer.autoClear === true || forceClear === true) {\n          var clearColorValue = renderContext.clearColorValue;\n          clearColorValue.r = _clearColor$1.r;\n          clearColorValue.g = _clearColor$1.g;\n          clearColorValue.b = _clearColor$1.b;\n          clearColorValue.a = _clearColor$1.a;\n\n          // premultiply alpha\n\n          if (renderer.backend.isWebGLBackend === true || renderer.alpha === true) {\n            clearColorValue.r *= clearColorValue.a;\n            clearColorValue.g *= clearColorValue.a;\n            clearColorValue.b *= clearColorValue.a;\n          }\n\n          //\n\n          renderContext.depthClearValue = renderer._clearDepth;\n          renderContext.stencilClearValue = renderer._clearStencil;\n          renderContext.clearColor = renderer.autoClearColor === true;\n          renderContext.clearDepth = renderer.autoClearDepth === true;\n          renderContext.clearStencil = renderer.autoClearStencil === true;\n        } else {\n          renderContext.clearColor = false;\n          renderContext.clearDepth = false;\n          renderContext.clearStencil = false;\n        }\n      }\n    }]);\n  }(DataMap);\n  var _id$6 = 0;\n\n  /**\n   * A bind group represents a collection of bindings and thus a collection\n   * or resources. Bind groups are assigned to pipelines to provide them\n   * with the required resources (like uniform buffers or textures).\n   *\n   * @private\n   */\n  var BindGroup = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new bind group.\n   *\n   * @param {String} name - The bind group's name.\n   * @param {Array<Binding>} bindings - An array of bindings.\n   * @param {Number} index - The group index.\n   * @param {Array<Binding>} bindingsReference - An array of reference bindings.\n   */\n  function BindGroup() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var bindings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var bindingsReference = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    (0, _classCallCheck2.default)(this, BindGroup);\n    /**\n     * The bind group's name.\n     *\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * An array of bindings.\n     *\n     * @type {Array<Binding>}\n     */\n    this.bindings = bindings;\n\n    /**\n     * The group index.\n     *\n     * @type {Number}\n     */\n    this.index = index;\n\n    /**\n     * An array of reference bindings.\n     *\n     * @type {Array<Binding>}\n     */\n    this.bindingsReference = bindingsReference;\n\n    /**\n     * The group's ID.\n     *\n     * @type {Number}\n     */\n    this.id = _id$6++;\n  });\n  /**\n   * This module represents the state of a node builder after it was\n   * used to build the nodes for a render object. The state holds the\n   * results of the build for further processing in the renderer.\n   *\n   * Render objects with identical cache keys share the same node builder state.\n   *\n   * @private\n   */\n  var NodeBuilderState = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node builder state.\n     *\n     * @param {String?} vertexShader - The native vertex shader code.\n     * @param {String?} fragmentShader - The native fragment shader code.\n     * @param {String?} computeShader - The native compute shader code.\n     * @param {Array<NodeAttribute>} nodeAttributes - An array of node attributes.\n     * @param {Array<BindGroup>} bindings - An array of bind groups.\n     * @param {Array<Node>} updateNodes - An array of nodes that implement their `update()` method.\n     * @param {Array<Node>} updateBeforeNodes - An array of nodes that implement their `updateBefore()` method.\n     * @param {Array<Node>} updateAfterNodes - An array of nodes that implement their `updateAfter()` method.\n     * @param {NodeMaterialObserver} monitor - A node material observer.\n     * @param {Array<Object>} transforms - An array with transform attribute objects. Only relevant when using compute shaders with WebGL 2.\n     */\n    function NodeBuilderState(vertexShader, fragmentShader, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, monitor) {\n      var transforms = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n      (0, _classCallCheck2.default)(this, NodeBuilderState);\n      /**\n       * The native vertex shader code.\n       *\n       * @type {String}\n       */\n      this.vertexShader = vertexShader;\n\n      /**\n       * The native fragment shader code.\n       *\n       * @type {String}\n       */\n      this.fragmentShader = fragmentShader;\n\n      /**\n       * The native compute shader code.\n       *\n       * @type {String}\n       */\n      this.computeShader = computeShader;\n\n      /**\n       * An array with transform attribute objects.\n       * Only relevant when using compute shaders with WebGL 2.\n       *\n       * @type {Array<Object>}\n       */\n      this.transforms = transforms;\n\n      /**\n       * An array of node attributes representing\n       * the attributes of the shaders.\n       *\n       * @type {Array<NodeAttribute>}\n       */\n      this.nodeAttributes = nodeAttributes;\n\n      /**\n       * An array of bind groups representing the uniform or storage\n       * buffers, texture or samplers of the shader.\n       *\n       * @type {Array<BindGroup>}\n       */\n      this.bindings = bindings;\n\n      /**\n       * An array of nodes that implement their `update()` method.\n       *\n       * @type {Array<Node>}\n       */\n      this.updateNodes = updateNodes;\n\n      /**\n       * An array of nodes that implement their `updateBefore()` method.\n       *\n       * @type {Array<Node>}\n       */\n      this.updateBeforeNodes = updateBeforeNodes;\n\n      /**\n       * An array of nodes that implement their `updateAfter()` method.\n       *\n       * @type {Array<Node>}\n       */\n      this.updateAfterNodes = updateAfterNodes;\n\n      /**\n       * A node material observer.\n       *\n       * @type {NodeMaterialObserver}\n       */\n      this.monitor = monitor;\n\n      /**\n       * How often this state is used by render objects.\n       *\n       * @type {Number}\n       */\n      this.usedTimes = 0;\n    }\n\n    /**\n     * This method is used to create a array of bind groups based\n     * on the existing bind groups of this state. Shared groups are\n     * not cloned.\n     *\n     * @return {Array<BindGroup>} A array of bind groups.\n     */\n    return (0, _createClass2.default)(NodeBuilderState, [{\n      key: \"createBindings\",\n      value: function createBindings() {\n        var bindings = [];\n        for (var instanceGroup of this.bindings) {\n          var shared = instanceGroup.bindings[0].groupNode.shared; // TODO: Is it safe to always check the first binding in the group?\n\n          if (shared !== true) {\n            var bindingsGroup = new BindGroup(instanceGroup.name, [], instanceGroup.index, instanceGroup);\n            bindings.push(bindingsGroup);\n            for (var instanceBinding of instanceGroup.bindings) {\n              bindingsGroup.bindings.push(instanceBinding.clone());\n            }\n          } else {\n            bindings.push(instanceGroup);\n          }\n        }\n        return bindings;\n      }\n    }]);\n  }();\n  /**\n   * {@link NodeBuilder} is going to create instances of this class during the build process\n   * of nodes. They represent the final shader attributes that are going to be generated\n   * by the builder. Arrays of node attributes is maintained in {@link NodeBuilder#attributes}\n   * and {@link NodeBuilder#bufferAttributes} for this purpose.\n   */\n  var NodeAttribute = exports.NodeAttribute = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new node attribute.\n   *\n   * @param {String} name - The name of the attribute.\n   * @param {String} type - The type of the attribute.\n   * @param {Node?} node - An optional reference to the node.\n   */\n  function NodeAttribute(name, type) {\n    var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    (0, _classCallCheck2.default)(this, NodeAttribute);\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {Boolean}\n     * @readonly\n     * @default true\n     */\n    this.isNodeAttribute = true;\n\n    /**\n     * The name of the attribute.\n     *\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * The type of the attribute.\n     *\n     * @type {String}\n     */\n    this.type = type;\n\n    /**\n     * An optional reference to the node.\n     *\n     * @type {Node?}\n     * @default null\n     */\n    this.node = node;\n  });\n  /**\n   * {@link NodeBuilder} is going to create instances of this class during the build process\n   * of nodes. They represent the final shader uniforms that are going to be generated\n   * by the builder. A dictionary of node uniforms is maintained in {@link NodeBuilder#uniforms}\n   * for this purpose.\n   */\n  var NodeUniform = exports.NodeUniform = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node uniform.\n     *\n     * @param {String} name - The name of the uniform.\n     * @param {String} type - The type of the uniform.\n     * @param {UniformNode} node - An reference to the node.\n     */\n    function NodeUniform(name, type, node) {\n      (0, _classCallCheck2.default)(this, NodeUniform);\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      this.isNodeUniform = true;\n\n      /**\n       * The name of the uniform.\n       *\n       * @type {String}\n       */\n      this.name = name;\n\n      /**\n       * The type of the uniform.\n       *\n       * @type {String}\n       */\n      this.type = type;\n\n      /**\n       * An reference to the node.\n       *\n       * @type {UniformNode}\n       */\n      this.node = node.getSelf();\n    }\n\n    /**\n     * The value of the uniform node.\n     *\n     * @type {Any}\n     */\n    return (0, _createClass2.default)(NodeUniform, [{\n      key: \"value\",\n      get: function get() {\n        return this.node.value;\n      },\n      set: function set(val) {\n        this.node.value = val;\n      }\n\n      /**\n       * The id of the uniform node.\n       *\n       * @type {Number}\n       */\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this.node.id;\n      }\n\n      /**\n       * The uniform node's group.\n       *\n       * @type {UniformGroupNode}\n       */\n    }, {\n      key: \"groupNode\",\n      get: function get() {\n        return this.node.groupNode;\n      }\n    }]);\n  }();\n  /**\n   * {@link NodeBuilder} is going to create instances of this class during the build process\n   * of nodes. They represent the final shader variables that are going to be generated\n   * by the builder. A dictionary of node variables is maintained in {@link NodeBuilder#vars} for\n   * this purpose.\n   */\n  var NodeVar = exports.NodeVar = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new node variable.\n   *\n   * @param {String} name - The name of the variable.\n   * @param {String} type - The type of the variable.\n   */\n  function NodeVar(name, type) {\n    (0, _classCallCheck2.default)(this, NodeVar);\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {Boolean}\n     * @readonly\n     * @default true\n     */\n    this.isNodeVar = true;\n\n    /**\n     * The name of the variable.\n     *\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * The type of the variable.\n     *\n     * @type {String}\n     */\n    this.type = type;\n  });\n  /**\n   * {@link NodeBuilder} is going to create instances of this class during the build process\n   * of nodes. They represent the final shader varyings that are going to be generated\n   * by the builder. An array of node varyings is maintained in {@link NodeBuilder#varyings} for\n   * this purpose.\n   *\n   * @augments NodeVar\n   */\n  var NodeVarying = exports.NodeVarying = /*#__PURE__*/function (_NodeVar) {\n    /**\n     * Constructs a new node varying.\n     *\n     * @param {String} name - The name of the varying.\n     * @param {String} type - The type of the varying.\n     */\n    function NodeVarying(name, type) {\n      var _this168;\n      (0, _classCallCheck2.default)(this, NodeVarying);\n      _this168 = _callSuper(this, NodeVarying, [name, type]);\n\n      /**\n       * Whether this varying requires interpolation or not. This property can be used\n       * to check if the varying can be optimized for a variable.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this168.needsInterpolation = false;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this168.isNodeVarying = true;\n      return _this168;\n    }\n    (0, _inherits2.default)(NodeVarying, _NodeVar);\n    return (0, _createClass2.default)(NodeVarying);\n  }(NodeVar);\n  /**\n   * {@link NodeBuilder} is going to create instances of this class during the build process\n   * of nodes. They represent user-defined, native shader code portions that are going to be\n   * injected by the builder. A dictionary of node codes is maintained in {@link NodeBuilder#codes}\n   * for this purpose.\n   */\n  var NodeCode = exports.NodeCode = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new code node.\n   *\n   * @param {String} name - The name of the code.\n   * @param {String} type - The node type.\n   * @param {String} [code=''] - The native shader code.\n   */\n  function NodeCode(name, type) {\n    var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    (0, _classCallCheck2.default)(this, NodeCode);\n    /**\n     * The name of the code.\n     *\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * The node type.\n     *\n     * @type {String}\n     */\n    this.type = type;\n\n    /**\n     * The native shader code.\n     *\n     * @type {String}\n     * @default ''\n     */\n    this.code = code;\n    Object.defineProperty(this, 'isNodeCode', {\n      value: true\n    });\n  });\n  var _id$5 = 0;\n\n  /**\n   * This utility class is used in {@link NodeBuilder} as an internal\n   * cache data structure for node data.\n   */\n  var NodeCache = exports.NodeCache = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node cache.\n     *\n     * @param {NodeCache?} parent - A reference to a parent cache.\n     */\n    function NodeCache() {\n      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, NodeCache);\n      /**\n       * The id of the cache.\n       *\n       * @type {Number}\n       * @readonly\n       */\n      this.id = _id$5++;\n\n      /**\n       * A weak map for managing node data.\n       *\n       * @type {WeakMap<Node, Object>}\n       */\n      this.nodesData = new WeakMap();\n\n      /**\n       * Reference to a parent node cache.\n       *\n       * @type {NodeCache?}\n       * @default null\n       */\n      this.parent = parent;\n    }\n\n    /**\n     * Returns the data for the given node.\n     *\n     * @param {Node} node - The node.\n     * @return {Object?} The data for the node.\n     */\n    return (0, _createClass2.default)(NodeCache, [{\n      key: \"getData\",\n      value: function getData(node) {\n        var data = this.nodesData.get(node);\n        if (data === undefined && this.parent !== null) {\n          data = this.parent.getData(node);\n        }\n        return data;\n      }\n\n      /**\n       * Sets the data for a given node.\n       *\n       * @param {Node} node - The node.\n       * @param {Object} data - The data that should be cached.\n       */\n    }, {\n      key: \"setData\",\n      value: function setData(node, data) {\n        this.nodesData.set(node, data);\n      }\n    }]);\n  }();\n  /**\n   * {@link NodeBuilder} is going to create instances of this class during the build process\n   * of nodes. They represent the final shader struct data that are going to be generated\n   * by the builder. A dictionary of struct types is maintained in {@link NodeBuilder#structs}\n   * for this purpose.\n   */\n  var StructTypeNode = /*#__PURE__*/function (_Node54) {\n    /**\n     * Constructs a new struct type node.\n     *\n     * @param {String} name - The name of the struct.\n     * @param {Array<String>} types - An array of types.\n     */\n    function StructTypeNode(name, types) {\n      var _this169;\n      (0, _classCallCheck2.default)(this, StructTypeNode);\n      _this169 = _callSuper(this, StructTypeNode);\n\n      /**\n       * The name of the struct.\n       *\n       * @type {String}\n       */\n      _this169.name = name;\n\n      /**\n       * An array of types.\n       *\n       * @type {Array<String>}\n       */\n      _this169.types = types;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this169.isStructTypeNode = true;\n      return _this169;\n    }\n\n    /**\n     * Returns the member types.\n     *\n     * @return {Array<String>} The types.\n     */\n    (0, _inherits2.default)(StructTypeNode, _Node54);\n    return (0, _createClass2.default)(StructTypeNode, [{\n      key: \"getMemberTypes\",\n      value: function getMemberTypes() {\n        return this.types;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'StructTypeNode';\n      }\n    }]);\n  }(Node);\n  /**\n   * Abstract base class for uniforms.\n   *\n   * @abstract\n   * @private\n   */\n  var Uniform = /*#__PURE__*/function () {\n    /**\n     * Constructs a new uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Any} value - The uniform's value.\n     */\n    function Uniform(name, value) {\n      (0, _classCallCheck2.default)(this, Uniform);\n      /**\n       * The uniform's name.\n       *\n       * @type {String}\n       */\n      this.name = name;\n\n      /**\n       * The uniform's value.\n       *\n       * @type {Any}\n       */\n      this.value = value;\n\n      /**\n       * Used to build the uniform buffer according to the STD140 layout.\n       * Derived uniforms will set this property to a data type specific\n       * value.\n       *\n       * @type {Number}\n       */\n      this.boundary = 0;\n\n      /**\n       * The item size. Derived uniforms will set this property to a data\n       * type specific value.\n       *\n       * @type {Number}\n       */\n      this.itemSize = 0;\n\n      /**\n       * This property is set by {@link UniformsGroup} and marks\n       * the start position in the uniform buffer.\n       *\n       * @type {Number}\n       */\n      this.offset = 0;\n    }\n\n    /**\n     * Sets the uniform's value.\n     *\n     * @param {Any} value - The value to set.\n     */\n    return (0, _createClass2.default)(Uniform, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        this.value = value;\n      }\n\n      /**\n       * Returns the uniform's value.\n       *\n       * @return {Any} The value.\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        return this.value;\n      }\n    }]);\n  }();\n  /**\n   * Represents a Number uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var NumberUniform = /*#__PURE__*/function (_Uniform) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Number} value - The uniform's value.\n     */\n    function NumberUniform(name) {\n      var _this170;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, NumberUniform);\n      _this170 = _callSuper(this, NumberUniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this170.isNumberUniform = true;\n      _this170.boundary = 4;\n      _this170.itemSize = 1;\n      return _this170;\n    }\n    (0, _inherits2.default)(NumberUniform, _Uniform);\n    return (0, _createClass2.default)(NumberUniform);\n  }(Uniform);\n  /**\n   * Represents a Vector2 uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var Vector2Uniform = /*#__PURE__*/function (_Uniform2) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Vector2} value - The uniform's value.\n     */\n    function Vector2Uniform(name) {\n      var _this171;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n      (0, _classCallCheck2.default)(this, Vector2Uniform);\n      _this171 = _callSuper(this, Vector2Uniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this171.isVector2Uniform = true;\n      _this171.boundary = 8;\n      _this171.itemSize = 2;\n      return _this171;\n    }\n    (0, _inherits2.default)(Vector2Uniform, _Uniform2);\n    return (0, _createClass2.default)(Vector2Uniform);\n  }(Uniform);\n  /**\n   * Represents a Vector3 uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var Vector3Uniform = /*#__PURE__*/function (_Uniform3) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Vector3} value - The uniform's value.\n     */\n    function Vector3Uniform(name) {\n      var _this172;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();\n      (0, _classCallCheck2.default)(this, Vector3Uniform);\n      _this172 = _callSuper(this, Vector3Uniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this172.isVector3Uniform = true;\n      _this172.boundary = 16;\n      _this172.itemSize = 3;\n      return _this172;\n    }\n    (0, _inherits2.default)(Vector3Uniform, _Uniform3);\n    return (0, _createClass2.default)(Vector3Uniform);\n  }(Uniform);\n  /**\n   * Represents a Vector4 uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var Vector4Uniform = /*#__PURE__*/function (_Uniform4) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Vector4} value - The uniform's value.\n     */\n    function Vector4Uniform(name) {\n      var _this173;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n      (0, _classCallCheck2.default)(this, Vector4Uniform);\n      _this173 = _callSuper(this, Vector4Uniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this173.isVector4Uniform = true;\n      _this173.boundary = 16;\n      _this173.itemSize = 4;\n      return _this173;\n    }\n    (0, _inherits2.default)(Vector4Uniform, _Uniform4);\n    return (0, _createClass2.default)(Vector4Uniform);\n  }(Uniform);\n  /**\n   * Represents a Color uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var ColorUniform = /*#__PURE__*/function (_Uniform5) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Color} value - The uniform's value.\n     */\n    function ColorUniform(name) {\n      var _this174;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)();\n      (0, _classCallCheck2.default)(this, ColorUniform);\n      _this174 = _callSuper(this, ColorUniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this174.isColorUniform = true;\n      _this174.boundary = 16;\n      _this174.itemSize = 3;\n      return _this174;\n    }\n    (0, _inherits2.default)(ColorUniform, _Uniform5);\n    return (0, _createClass2.default)(ColorUniform);\n  }(Uniform);\n  /**\n   * Represents a Matrix3 uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var Matrix3Uniform = /*#__PURE__*/function (_Uniform6) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Matrix3} value - The uniform's value.\n     */\n    function Matrix3Uniform(name) {\n      var _this175;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix3)();\n      (0, _classCallCheck2.default)(this, Matrix3Uniform);\n      _this175 = _callSuper(this, Matrix3Uniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this175.isMatrix3Uniform = true;\n      _this175.boundary = 48;\n      _this175.itemSize = 12;\n      return _this175;\n    }\n    (0, _inherits2.default)(Matrix3Uniform, _Uniform6);\n    return (0, _createClass2.default)(Matrix3Uniform);\n  }(Uniform);\n  /**\n   * Represents a Matrix4 uniform.\n   *\n   * @private\n   * @augments Uniform\n   */\n  var Matrix4Uniform = /*#__PURE__*/function (_Uniform7) {\n    /**\n     * Constructs a new Number uniform.\n     *\n     * @param {String} name - The uniform's name.\n     * @param {Matrix4} value - The uniform's value.\n     */\n    function Matrix4Uniform(name) {\n      var _this176;\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n      (0, _classCallCheck2.default)(this, Matrix4Uniform);\n      _this176 = _callSuper(this, Matrix4Uniform, [name, value]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this176.isMatrix4Uniform = true;\n      _this176.boundary = 64;\n      _this176.itemSize = 16;\n      return _this176;\n    }\n    (0, _inherits2.default)(Matrix4Uniform, _Uniform7);\n    return (0, _createClass2.default)(Matrix4Uniform);\n  }(Uniform);\n  /**\n   * A special form of Number uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments NumberUniform\n   */\n  var NumberNodeUniform = /*#__PURE__*/function (_NumberUniform) {\n    /**\n     * Constructs a new node-based Number uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function NumberNodeUniform(nodeUniform) {\n      var _this177;\n      (0, _classCallCheck2.default)(this, NumberNodeUniform);\n      _this177 = _callSuper(this, NumberNodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this177.nodeUniform = nodeUniform;\n      return _this177;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Number} The value.\n     */\n    (0, _inherits2.default)(NumberNodeUniform, _NumberUniform);\n    return (0, _createClass2.default)(NumberNodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(NumberUniform);\n  /**\n   * A special form of Vector2 uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments Vector2Uniform\n   */\n  var Vector2NodeUniform = /*#__PURE__*/function (_Vector2Uniform) {\n    /**\n     * Constructs a new node-based Vector2 uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function Vector2NodeUniform(nodeUniform) {\n      var _this178;\n      (0, _classCallCheck2.default)(this, Vector2NodeUniform);\n      _this178 = _callSuper(this, Vector2NodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this178.nodeUniform = nodeUniform;\n      return _this178;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Vector2} The value.\n     */\n    (0, _inherits2.default)(Vector2NodeUniform, _Vector2Uniform);\n    return (0, _createClass2.default)(Vector2NodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(Vector2Uniform);\n  /**\n   * A special form of Vector3 uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments Vector3Uniform\n   */\n  var Vector3NodeUniform = /*#__PURE__*/function (_Vector3Uniform) {\n    /**\n     * Constructs a new node-based Vector3 uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function Vector3NodeUniform(nodeUniform) {\n      var _this179;\n      (0, _classCallCheck2.default)(this, Vector3NodeUniform);\n      _this179 = _callSuper(this, Vector3NodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this179.nodeUniform = nodeUniform;\n      return _this179;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Vector3} The value.\n     */\n    (0, _inherits2.default)(Vector3NodeUniform, _Vector3Uniform);\n    return (0, _createClass2.default)(Vector3NodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(Vector3Uniform);\n  /**\n   * A special form of Vector4 uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments Vector4Uniform\n   */\n  var Vector4NodeUniform = /*#__PURE__*/function (_Vector4Uniform) {\n    /**\n     * Constructs a new node-based Vector4 uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function Vector4NodeUniform(nodeUniform) {\n      var _this180;\n      (0, _classCallCheck2.default)(this, Vector4NodeUniform);\n      _this180 = _callSuper(this, Vector4NodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this180.nodeUniform = nodeUniform;\n      return _this180;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Vector4} The value.\n     */\n    (0, _inherits2.default)(Vector4NodeUniform, _Vector4Uniform);\n    return (0, _createClass2.default)(Vector4NodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(Vector4Uniform);\n  /**\n   * A special form of Color uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments ColorUniform\n   */\n  var ColorNodeUniform = /*#__PURE__*/function (_ColorUniform) {\n    /**\n     * Constructs a new node-based Color uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function ColorNodeUniform(nodeUniform) {\n      var _this181;\n      (0, _classCallCheck2.default)(this, ColorNodeUniform);\n      _this181 = _callSuper(this, ColorNodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this181.nodeUniform = nodeUniform;\n      return _this181;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Color} The value.\n     */\n    (0, _inherits2.default)(ColorNodeUniform, _ColorUniform);\n    return (0, _createClass2.default)(ColorNodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(ColorUniform);\n  /**\n   * A special form of Matrix3 uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments Matrix3Uniform\n   */\n  var Matrix3NodeUniform = /*#__PURE__*/function (_Matrix3Uniform) {\n    /**\n     * Constructs a new node-based Matrix3 uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function Matrix3NodeUniform(nodeUniform) {\n      var _this182;\n      (0, _classCallCheck2.default)(this, Matrix3NodeUniform);\n      _this182 = _callSuper(this, Matrix3NodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this182.nodeUniform = nodeUniform;\n      return _this182;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Matrix3} The value.\n     */\n    (0, _inherits2.default)(Matrix3NodeUniform, _Matrix3Uniform);\n    return (0, _createClass2.default)(Matrix3NodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(Matrix3Uniform);\n  /**\n   * A special form of Matrix4 uniform binding type.\n   * It's value is managed by a node object.\n   *\n   * @private\n   * @augments Matrix4Uniform\n   */\n  var Matrix4NodeUniform = /*#__PURE__*/function (_Matrix4Uniform) {\n    /**\n     * Constructs a new node-based Matrix4 uniform.\n     *\n     * @param {NodeUniform} nodeUniform - The node uniform.\n     */\n    function Matrix4NodeUniform(nodeUniform) {\n      var _this183;\n      (0, _classCallCheck2.default)(this, Matrix4NodeUniform);\n      _this183 = _callSuper(this, Matrix4NodeUniform, [nodeUniform.name, nodeUniform.value]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {NodeUniform}\n       */\n      _this183.nodeUniform = nodeUniform;\n      return _this183;\n    }\n\n    /**\n     * Overwritten to return the value of the node uniform.\n     *\n     * @return {Matrix4} The value.\n     */\n    (0, _inherits2.default)(Matrix4NodeUniform, _Matrix4Uniform);\n    return (0, _createClass2.default)(Matrix4NodeUniform, [{\n      key: \"getValue\",\n      value: function getValue() {\n        return this.nodeUniform.value;\n      }\n\n      /**\n       * Returns the node uniform data type.\n       *\n       * @return {String} The data type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this.nodeUniform.type;\n      }\n    }]);\n  }(Matrix4Uniform);\n  var LOD_MIN = 4;\n\n  // The standard deviations (radians) associated with the extra mips. These are\n  // chosen to approximate a Trowbridge-Reitz distribution function times the\n  // geometric shadowing function. These sigma values squared must match the\n  // variance #defines in cube_uv_reflection_fragment.glsl.js.\n  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\n  // The maximum length of the blur for loop. Smaller sigmas will use fewer\n  // samples and exit early, but not recompile the shader.\n  var MAX_SAMPLES = 20;\n  var _flatCamera = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OrthographicCamera)(-1, 1, 1, -1, 0, 1);\n  var _cubeCamera = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PerspectiveCamera)(90, 1);\n  var _clearColor = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)();\n  var _oldTarget = null;\n  var _oldActiveCubeFace = 0;\n  var _oldActiveMipmapLevel = 0;\n\n  // Golden Ratio\n  var PHI = (1 + Math.sqrt(5)) / 2;\n  var INV_PHI = 1 / PHI;\n\n  // Vertices of a dodecahedron (except the opposites, which represent the\n  // same axis), used as axis directions evenly spread on a sphere.\n  var _axisDirections = [/*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(-PHI, INV_PHI, 0), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(PHI, INV_PHI, 0), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(-INV_PHI, 0, PHI), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(INV_PHI, 0, PHI), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(0, PHI, -INV_PHI), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(0, PHI, INV_PHI), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(-1, 1, -1), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(1, 1, -1), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(-1, 1, 1), /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(1, 1, 1)];\n\n  //\n\n  // WebGPU Face indices\n  var _faceLib = [3, 1, 5, 0, 4, 2];\n  var direction = getDirection(uv(), attribute('faceIndex')).normalize();\n  var outputDirection = vec3(direction.x, direction.y, direction.z);\n\n  /**\n   * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n   * (PMREM) from a cubeMap environment texture. This allows different levels of\n   * blur to be quickly accessed based on material roughness. It is packed into a\n   * special CubeUV format that allows us to perform custom interpolation so that\n   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n   * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n   * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n   * higher roughness levels. In this way we maintain resolution to smoothly\n   * interpolate diffuse lighting while limiting sampling computation.\n   *\n   * Paper: Fast, Accurate Image-Based Lighting\n   * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n  */\n  var PMREMGenerator = exports.PMREMGenerator = /*#__PURE__*/function () {\n    function PMREMGenerator(renderer) {\n      (0, _classCallCheck2.default)(this, PMREMGenerator);\n      this._renderer = renderer;\n      this._pingPongRenderTarget = null;\n      this._lodMax = 0;\n      this._cubeSize = 0;\n      this._lodPlanes = [];\n      this._sizeLods = [];\n      this._sigmas = [];\n      this._lodMeshes = [];\n      this._blurMaterial = null;\n      this._cubemapMaterial = null;\n      this._equirectMaterial = null;\n      this._backgroundBox = null;\n    }\n    return (0, _createClass2.default)(PMREMGenerator, [{\n      key: \"_hasInitialized\",\n      get: function get() {\n        return this._renderer.hasInitialized();\n      }\n\n      /**\n       * Generates a PMREM from a supplied Scene, which can be faster than using an\n       * image if networking bandwidth is low. Optional sigma specifies a blur radius\n       * in radians to be applied to the scene before PMREM generation. Optional near\n       * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n       * is placed at the origin).\n       *\n       * @param {Scene} scene - The scene to be captured.\n       * @param {Number} [sigma=0] - The blur radius in radians.\n       * @param {Number} [near=0.1] - The near plane distance.\n       * @param {Number} [far=100] - The far plane distance.\n       * @param {RenderTarget?} [renderTarget=null] - The render target to use.\n       * @return {RenderTarget} The resulting PMREM.\n       */\n    }, {\n      key: \"fromScene\",\n      value: function fromScene(scene) {\n        var sigma = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n        var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n        var renderTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n        this._setSize(256);\n        if (this._hasInitialized === false) {\n          console.warn('THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.');\n          var _cubeUVRenderTarget = renderTarget || this._allocateTargets();\n          this.fromSceneAsync(scene, sigma, near, far, _cubeUVRenderTarget);\n          return _cubeUVRenderTarget;\n        }\n        _oldTarget = this._renderer.getRenderTarget();\n        _oldActiveCubeFace = this._renderer.getActiveCubeFace();\n        _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n        var cubeUVRenderTarget = renderTarget || this._allocateTargets();\n        cubeUVRenderTarget.depthBuffer = true;\n        this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n        if (sigma > 0) {\n          this._blur(cubeUVRenderTarget, 0, 0, sigma);\n        }\n        this._applyPMREM(cubeUVRenderTarget);\n        this._cleanup(cubeUVRenderTarget);\n        return cubeUVRenderTarget;\n      }\n    }, {\n      key: \"fromSceneAsync\",\n      value: function () {\n        var _fromSceneAsync = (0, _asyncToGenerator2.default)(function* (scene) {\n          var sigma = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n          var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n          var renderTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n          if (this._hasInitialized === false) yield this._renderer.init();\n          return this.fromScene(scene, sigma, near, far, renderTarget);\n        });\n        function fromSceneAsync(_x3) {\n          return _fromSceneAsync.apply(this, arguments);\n        }\n        return fromSceneAsync;\n      }()\n      /**\n       * Generates a PMREM from an equirectangular texture, which can be either LDR\n       * or HDR. The ideal input image size is 1k (1024 x 512),\n       * as this matches best with the 256 x 256 cubemap output.\n       *\n       * @param {Texture} equirectangular - The equirectangular texture to be converted.\n       * @param {RenderTarget?} [renderTarget=null] - The render target to use.\n       * @return {RenderTarget} The resulting PMREM.\n       */\n    }, {\n      key: \"fromEquirectangular\",\n      value: function fromEquirectangular(equirectangular) {\n        var renderTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (this._hasInitialized === false) {\n          console.warn('THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead.');\n          this._setSizeFromTexture(equirectangular);\n          var cubeUVRenderTarget = renderTarget || this._allocateTargets();\n          this.fromEquirectangularAsync(equirectangular, cubeUVRenderTarget);\n          return cubeUVRenderTarget;\n        }\n        return this._fromTexture(equirectangular, renderTarget);\n      }\n    }, {\n      key: \"fromEquirectangularAsync\",\n      value: function () {\n        var _fromEquirectangularAsync = (0, _asyncToGenerator2.default)(function* (equirectangular) {\n          var renderTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          if (this._hasInitialized === false) yield this._renderer.init();\n          return this._fromTexture(equirectangular, renderTarget);\n        });\n        function fromEquirectangularAsync(_x4) {\n          return _fromEquirectangularAsync.apply(this, arguments);\n        }\n        return fromEquirectangularAsync;\n      }()\n      /**\n       * Generates a PMREM from an cubemap texture, which can be either LDR\n       * or HDR. The ideal input cube size is 256 x 256,\n       * as this matches best with the 256 x 256 cubemap output.\n       *\n       * @param {Texture} cubemap - The cubemap texture to be converted.\n       * @param {RenderTarget?} [renderTarget=null] - The render target to use.\n       * @return {RenderTarget} The resulting PMREM.\n       */\n    }, {\n      key: \"fromCubemap\",\n      value: function fromCubemap(cubemap) {\n        var renderTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (this._hasInitialized === false) {\n          console.warn('THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead.');\n          this._setSizeFromTexture(cubemap);\n          var cubeUVRenderTarget = renderTarget || this._allocateTargets();\n          this.fromCubemapAsync(cubemap, renderTarget);\n          return cubeUVRenderTarget;\n        }\n        return this._fromTexture(cubemap, renderTarget);\n      }\n    }, {\n      key: \"fromCubemapAsync\",\n      value: function () {\n        var _fromCubemapAsync = (0, _asyncToGenerator2.default)(function* (cubemap) {\n          var renderTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          if (this._hasInitialized === false) yield this._renderer.init();\n          return this._fromTexture(cubemap, renderTarget);\n        });\n        function fromCubemapAsync(_x5) {\n          return _fromCubemapAsync.apply(this, arguments);\n        }\n        return fromCubemapAsync;\n      }()\n      /**\n       * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n       * your texture's network fetch for increased concurrency.\n       */\n    }, {\n      key: \"compileCubemapShader\",\n      value: (function () {\n        var _compileCubemapShader = (0, _asyncToGenerator2.default)(function* () {\n          if (this._cubemapMaterial === null) {\n            this._cubemapMaterial = _getCubemapMaterial();\n            yield this._compileMaterial(this._cubemapMaterial);\n          }\n        });\n        function compileCubemapShader() {\n          return _compileCubemapShader.apply(this, arguments);\n        }\n        return compileCubemapShader;\n      }()\n      /**\n       * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n       * your texture's network fetch for increased concurrency.\n       */\n      )\n    }, {\n      key: \"compileEquirectangularShader\",\n      value: (function () {\n        var _compileEquirectangularShader = (0, _asyncToGenerator2.default)(function* () {\n          if (this._equirectMaterial === null) {\n            this._equirectMaterial = _getEquirectMaterial();\n            yield this._compileMaterial(this._equirectMaterial);\n          }\n        });\n        function compileEquirectangularShader() {\n          return _compileEquirectangularShader.apply(this, arguments);\n        }\n        return compileEquirectangularShader;\n      }()\n      /**\n       * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n       * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n       * one of them will cause any others to also become unusable.\n       */\n      )\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this._dispose();\n        if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();\n        if (this._equirectMaterial !== null) this._equirectMaterial.dispose();\n        if (this._backgroundBox !== null) {\n          this._backgroundBox.geometry.dispose();\n          this._backgroundBox.material.dispose();\n        }\n      }\n\n      // private interface\n    }, {\n      key: \"_setSizeFromTexture\",\n      value: function _setSizeFromTexture(texture) {\n        if (texture.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping || texture.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping) {\n          this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);\n        } else {\n          // Equirectangular\n\n          this._setSize(texture.image.width / 4);\n        }\n      }\n    }, {\n      key: \"_setSize\",\n      value: function _setSize(cubeSize) {\n        this._lodMax = Math.floor(Math.log2(cubeSize));\n        this._cubeSize = Math.pow(2, this._lodMax);\n      }\n    }, {\n      key: \"_dispose\",\n      value: function _dispose() {\n        if (this._blurMaterial !== null) this._blurMaterial.dispose();\n        if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();\n        for (var i = 0; i < this._lodPlanes.length; i++) {\n          this._lodPlanes[i].dispose();\n        }\n      }\n    }, {\n      key: \"_cleanup\",\n      value: function _cleanup(outputTarget) {\n        this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);\n        outputTarget.scissorTest = false;\n        _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n      }\n    }, {\n      key: \"_fromTexture\",\n      value: function _fromTexture(texture, renderTarget) {\n        this._setSizeFromTexture(texture);\n        _oldTarget = this._renderer.getRenderTarget();\n        _oldActiveCubeFace = this._renderer.getActiveCubeFace();\n        _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n        var cubeUVRenderTarget = renderTarget || this._allocateTargets();\n        this._textureToCubeUV(texture, cubeUVRenderTarget);\n        this._applyPMREM(cubeUVRenderTarget);\n        this._cleanup(cubeUVRenderTarget);\n        return cubeUVRenderTarget;\n      }\n    }, {\n      key: \"_allocateTargets\",\n      value: function _allocateTargets() {\n        var width = 3 * Math.max(this._cubeSize, 16 * 7);\n        var height = 4 * this._cubeSize;\n        var params = {\n          magFilter: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter,\n          minFilter: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter,\n          generateMipmaps: false,\n          type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType,\n          format: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat,\n          colorSpace: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace\n          //depthBuffer: false\n        };\n        var cubeUVRenderTarget = _createRenderTarget(width, height, params);\n        if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {\n          if (this._pingPongRenderTarget !== null) {\n            this._dispose();\n          }\n          this._pingPongRenderTarget = _createRenderTarget(width, height, params);\n          var _lodMax = this._lodMax;\n          var _createPlanes2 = _createPlanes(_lodMax);\n          this._sizeLods = _createPlanes2.sizeLods;\n          this._lodPlanes = _createPlanes2.lodPlanes;\n          this._sigmas = _createPlanes2.sigmas;\n          this._lodMeshes = _createPlanes2.lodMeshes;\n          this._blurMaterial = _getBlurShader(_lodMax, width, height);\n        }\n        return cubeUVRenderTarget;\n      }\n    }, {\n      key: \"_compileMaterial\",\n      value: function () {\n        var _compileMaterial2 = (0, _asyncToGenerator2.default)(function* (material) {\n          var tmpMesh = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh)(this._lodPlanes[0], material);\n          yield this._renderer.compile(tmpMesh, _flatCamera);\n        });\n        function _compileMaterial(_x6) {\n          return _compileMaterial2.apply(this, arguments);\n        }\n        return _compileMaterial;\n      }()\n    }, {\n      key: \"_sceneToCubeUV\",\n      value: function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n        var cubeCamera = _cubeCamera;\n        cubeCamera.near = near;\n        cubeCamera.far = far;\n\n        // px, py, pz, nx, ny, nz\n        var upSign = [1, 1, 1, 1, -1, 1];\n        var forwardSign = [1, -1, 1, -1, 1, -1];\n        var renderer = this._renderer;\n        var originalAutoClear = renderer.autoClear;\n        renderer.getClearColor(_clearColor);\n        renderer.autoClear = false;\n        var backgroundBox = this._backgroundBox;\n        if (backgroundBox === null) {\n          var backgroundMaterial = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MeshBasicMaterial)({\n            name: 'PMREM.Background',\n            side: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide,\n            depthWrite: false,\n            depthTest: false\n          });\n          backgroundBox = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh)(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BoxGeometry)(), backgroundMaterial);\n        }\n        var useSolidColor = false;\n        var background = scene.background;\n        if (background) {\n          if (background.isColor) {\n            backgroundBox.material.color.copy(background);\n            scene.background = null;\n            useSolidColor = true;\n          }\n        } else {\n          backgroundBox.material.color.copy(_clearColor);\n          useSolidColor = true;\n        }\n        renderer.setRenderTarget(cubeUVRenderTarget);\n        renderer.clear();\n        if (useSolidColor) {\n          renderer.render(backgroundBox, cubeCamera);\n        }\n        for (var i = 0; i < 6; i++) {\n          var col = i % 3;\n          if (col === 0) {\n            cubeCamera.up.set(0, upSign[i], 0);\n            cubeCamera.lookAt(forwardSign[i], 0, 0);\n          } else if (col === 1) {\n            cubeCamera.up.set(0, 0, upSign[i]);\n            cubeCamera.lookAt(0, forwardSign[i], 0);\n          } else {\n            cubeCamera.up.set(0, upSign[i], 0);\n            cubeCamera.lookAt(0, 0, forwardSign[i]);\n          }\n          var size = this._cubeSize;\n          _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);\n          renderer.render(scene, cubeCamera);\n        }\n        renderer.autoClear = originalAutoClear;\n        scene.background = background;\n      }\n    }, {\n      key: \"_textureToCubeUV\",\n      value: function _textureToCubeUV(texture, cubeUVRenderTarget) {\n        var renderer = this._renderer;\n        var isCubeTexture = texture.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping || texture.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping;\n        if (isCubeTexture) {\n          if (this._cubemapMaterial === null) {\n            this._cubemapMaterial = _getCubemapMaterial(texture);\n          }\n        } else {\n          if (this._equirectMaterial === null) {\n            this._equirectMaterial = _getEquirectMaterial(texture);\n          }\n        }\n        var material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n        material.fragmentNode.value = texture;\n        var mesh = this._lodMeshes[0];\n        mesh.material = material;\n        var size = this._cubeSize;\n        _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);\n        renderer.setRenderTarget(cubeUVRenderTarget);\n        renderer.render(mesh, _flatCamera);\n      }\n    }, {\n      key: \"_applyPMREM\",\n      value: function _applyPMREM(cubeUVRenderTarget) {\n        var renderer = this._renderer;\n        var autoClear = renderer.autoClear;\n        renderer.autoClear = false;\n        var n = this._lodPlanes.length;\n        for (var i = 1; i < n; i++) {\n          var sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);\n          var poleAxis = _axisDirections[(n - i - 1) % _axisDirections.length];\n          this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n        }\n        renderer.autoClear = autoClear;\n      }\n\n      /**\n       * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n       * vertically and horizontally, but this breaks down on a cube. Here we apply\n       * the blur latitudinally (around the poles), and then longitudinally (towards\n       * the poles) to approximate the orthogonally-separable blur. It is least\n       * accurate at the poles, but still does a decent job.\n       *\n       * @param {RenderTarget} cubeUVRenderTarget - The cubemap render target.\n       * @param {Number} lodIn - The input level-of-detail.\n       * @param {Number} lodOut - The output level-of-detail.\n       * @param {Number} sigma - The blur radius in radians.\n       * @param {Vector3} [poleAxis] - The pole axis.\n       */\n    }, {\n      key: \"_blur\",\n      value: function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n        var pingPongRenderTarget = this._pingPongRenderTarget;\n        this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n        this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n      }\n    }, {\n      key: \"_halfBlur\",\n      value: function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n        var renderer = this._renderer;\n        var blurMaterial = this._blurMaterial;\n        if (direction !== 'latitudinal' && direction !== 'longitudinal') {\n          console.error('blur direction must be either latitudinal or longitudinal!');\n        }\n\n        // Number of standard deviations at which to cut off the discrete approximation.\n        var STANDARD_DEVIATIONS = 3;\n        var blurMesh = this._lodMeshes[lodOut];\n        blurMesh.material = blurMaterial;\n        var blurUniforms = blurMaterial.uniforms;\n        var pixels = this._sizeLods[lodIn] - 1;\n        var radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n        var sigmaPixels = sigmaRadians / radiansPerPixel;\n        var samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n        if (samples > MAX_SAMPLES) {\n          console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n        }\n        var weights = [];\n        var sum = 0;\n        for (var i = 0; i < MAX_SAMPLES; ++i) {\n          var _x7 = i / sigmaPixels;\n          var weight = Math.exp(-_x7 * _x7 / 2);\n          weights.push(weight);\n          if (i === 0) {\n            sum += weight;\n          } else if (i < samples) {\n            sum += 2 * weight;\n          }\n        }\n        for (var _i11 = 0; _i11 < weights.length; _i11++) {\n          weights[_i11] = weights[_i11] / sum;\n        }\n        targetIn.texture.frame = (targetIn.texture.frame || 0) + 1;\n        blurUniforms.envMap.value = targetIn.texture;\n        blurUniforms.samples.value = samples;\n        blurUniforms.weights.array = weights;\n        blurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;\n        if (poleAxis) {\n          blurUniforms.poleAxis.value = poleAxis;\n        }\n        var _lodMax = this._lodMax;\n        blurUniforms.dTheta.value = radiansPerPixel;\n        blurUniforms.mipInt.value = _lodMax - lodIn;\n        var outputSize = this._sizeLods[lodOut];\n        var x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);\n        var y = 4 * (this._cubeSize - outputSize);\n        _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n        renderer.setRenderTarget(targetOut);\n        renderer.render(blurMesh, _flatCamera);\n      }\n    }]);\n  }();\n  function _createPlanes(lodMax) {\n    var lodPlanes = [];\n    var sizeLods = [];\n    var sigmas = [];\n    var lodMeshes = [];\n    var lod = lodMax;\n    var totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n    for (var i = 0; i < totalLods; i++) {\n      var sizeLod = Math.pow(2, lod);\n      sizeLods.push(sizeLod);\n      var sigma = 1.0 / sizeLod;\n      if (i > lodMax - LOD_MIN) {\n        sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];\n      } else if (i === 0) {\n        sigma = 0;\n      }\n      sigmas.push(sigma);\n      var texelSize = 1.0 / (sizeLod - 2);\n      var _min = -texelSize;\n      var _max = 1 + texelSize;\n      var uv1 = [_min, _min, _max, _min, _max, _max, _min, _min, _max, _max, _min, _max];\n      var cubeFaces = 6;\n      var vertices = 6;\n      var positionSize = 3;\n      var uvSize = 2;\n      var faceIndexSize = 1;\n      var position = new Float32Array(positionSize * vertices * cubeFaces);\n      var _uv = new Float32Array(uvSize * vertices * cubeFaces);\n      var faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n      for (var face = 0; face < cubeFaces; face++) {\n        var x = face % 3 * 2 / 3 - 1;\n        var y = face > 2 ? 0 : -1;\n        var coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n        var faceIdx = _faceLib[face];\n        position.set(coordinates, positionSize * vertices * faceIdx);\n        _uv.set(uv1, uvSize * vertices * faceIdx);\n        var fill = [faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx];\n        faceIndex.set(fill, faceIndexSize * vertices * faceIdx);\n      }\n      var planes = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferGeometry)();\n      planes.setAttribute('position', new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferAttribute)(position, positionSize));\n      planes.setAttribute('uv', new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferAttribute)(_uv, uvSize));\n      planes.setAttribute('faceIndex', new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BufferAttribute)(faceIndex, faceIndexSize));\n      lodPlanes.push(planes);\n      lodMeshes.push(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Mesh)(planes, null));\n      if (lod > LOD_MIN) {\n        lod--;\n      }\n    }\n    return {\n      lodPlanes: lodPlanes,\n      sizeLods: sizeLods,\n      sigmas: sigmas,\n      lodMeshes: lodMeshes\n    };\n  }\n  function _createRenderTarget(width, height, params) {\n    var cubeUVRenderTarget = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)(width, height, params);\n    cubeUVRenderTarget.texture.mapping = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeUVReflectionMapping;\n    cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n    cubeUVRenderTarget.texture.isPMREMTexture = true;\n    cubeUVRenderTarget.scissorTest = true;\n    return cubeUVRenderTarget;\n  }\n  function _setViewport(target, x, y, width, height) {\n    target.viewport.set(x, y, width, height);\n    target.scissor.set(x, y, width, height);\n  }\n  function _getMaterial(type) {\n    var material = new NodeMaterial();\n    material.depthTest = false;\n    material.depthWrite = false;\n    material.blending = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending;\n    material.name = `PMREM_${type}`;\n    return material;\n  }\n  function _getBlurShader(lodMax, width, height) {\n    var weights = uniformArray(new Array(MAX_SAMPLES).fill(0));\n    var poleAxis = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)(0, 1, 0));\n    var dTheta = uniform(0);\n    var n = float(MAX_SAMPLES);\n    var latitudinal = uniform(0); // false, bool\n    var samples = uniform(1); // int\n    var envMap = texture(null);\n    var mipInt = uniform(0); // int\n    var CUBEUV_TEXEL_WIDTH = float(1 / width);\n    var CUBEUV_TEXEL_HEIGHT = float(1 / height);\n    var CUBEUV_MAX_MIP = float(lodMax);\n    var materialUniforms = {\n      n: n,\n      latitudinal: latitudinal,\n      weights: weights,\n      poleAxis: poleAxis,\n      outputDirection: outputDirection,\n      dTheta: dTheta,\n      samples: samples,\n      envMap: envMap,\n      mipInt: mipInt,\n      CUBEUV_TEXEL_WIDTH: CUBEUV_TEXEL_WIDTH,\n      CUBEUV_TEXEL_HEIGHT: CUBEUV_TEXEL_HEIGHT,\n      CUBEUV_MAX_MIP: CUBEUV_MAX_MIP\n    };\n    var material = _getMaterial('blur');\n    material.uniforms = materialUniforms; // TODO: Move to outside of the material\n    material.fragmentNode = blur(Object.assign({}, materialUniforms, {\n      latitudinal: latitudinal.equal(1)\n    }));\n    return material;\n  }\n  function _getCubemapMaterial(envTexture) {\n    var material = _getMaterial('cubemap');\n    material.fragmentNode = cubeTexture(envTexture, outputDirection);\n    return material;\n  }\n  function _getEquirectMaterial(envTexture) {\n    var material = _getMaterial('equirect');\n    material.fragmentNode = texture(envTexture, equirectUV(outputDirection), 0);\n    return material;\n  }\n  var rendererCache = new WeakMap();\n  var typeFromArray = new Map([[Int8Array, 'int'], [Int16Array, 'int'], [Int32Array, 'int'], [Uint8Array, 'uint'], [Uint16Array, 'uint'], [Uint32Array, 'uint'], [Float32Array, 'float']]);\n  var toFloat = function toFloat(value) {\n    if (/e/g.test(value)) {\n      return String(value).replace(/\\+/g, '');\n    } else {\n      value = Number(value);\n      return value + (value % 1 ? '' : '.0');\n    }\n  };\n\n  /**\n   * Base class for builders which generate a shader program based\n   * on a 3D object and its node material definition.\n   */\n  var NodeBuilder = exports.NodeBuilder = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node builder.\n     *\n     * @param {Object3D} object - The 3D object.\n     * @param {Renderer} renderer - The current renderer.\n     * @param {NodeParser} parser - A reference to a node parser.\n     */\n    function NodeBuilder(object, renderer, parser) {\n      (0, _classCallCheck2.default)(this, NodeBuilder);\n      /**\n       * The 3D object.\n       *\n       * @type {Object3D}\n       */\n      this.object = object;\n\n      /**\n       * The material of the 3D object.\n       *\n       * @type {Material?}\n       */\n      this.material = object && object.material || null;\n\n      /**\n       * The geometry of the 3D object.\n       *\n       * @type {BufferGeometry?}\n       */\n      this.geometry = object && object.geometry || null;\n\n      /**\n       * The current renderer.\n       *\n       * @type {Renderer}\n       */\n      this.renderer = renderer;\n\n      /**\n       * A reference to a node parser.\n       *\n       * @type {NodeParser}\n       */\n      this.parser = parser;\n\n      /**\n       * The scene the 3D object belongs to.\n       *\n       * @type {Scene?}\n       * @default null\n       */\n      this.scene = null;\n\n      /**\n       * The camera the 3D object is rendered with.\n       *\n       * @type {Camera?}\n       * @default null\n       */\n      this.camera = null;\n\n      /**\n       * A list of all nodes the builder is processing\n       * for this 3D object.\n       *\n       * @type {Array<Node>}\n       */\n      this.nodes = [];\n\n      /**\n       * A list of all sequential nodes.\n       *\n       * @type {Array<Node>}\n       */\n      this.sequentialNodes = [];\n\n      /**\n       * A list of all nodes which {@link Node#update} method should be executed.\n       *\n       * @type {Array<Node>}\n       */\n      this.updateNodes = [];\n\n      /**\n       * A list of all nodes which {@link Node#updateBefore} method should be executed.\n       *\n       * @type {Array<Node>}\n       */\n      this.updateBeforeNodes = [];\n\n      /**\n       * A list of all nodes which {@link Node#updateAfter} method should be executed.\n       *\n       * @type {Array<Node>}\n       */\n      this.updateAfterNodes = [];\n\n      /**\n       * A dictionary that assigns each node to a unique hash.\n       *\n       * @type {Object<Number,Node>}\n       */\n      this.hashNodes = {};\n\n      /**\n       * A reference to a node material observer.\n       *\n       * @type {NodeMaterialObserver?}\n       * @default null\n       */\n      this.monitor = null;\n\n      /**\n       * A reference to the current lights node.\n       *\n       * @type {LightsNode?}\n       * @default null\n       */\n      this.lightsNode = null;\n\n      /**\n       * A reference to the current environment node.\n       *\n       * @type {Node?}\n       * @default null\n       */\n      this.environmentNode = null;\n\n      /**\n       * A reference to the current fog node.\n       *\n       * @type {FogNode?}\n       * @default null\n       */\n      this.fogNode = null;\n\n      /**\n       * The current clipping context.\n       *\n       * @type {ClippingContext?}\n       */\n      this.clippingContext = null;\n\n      /**\n       * The generated vertex shader.\n       *\n       * @type {String?}\n       */\n      this.vertexShader = null;\n\n      /**\n       * The generated fragment shader.\n       *\n       * @type {String?}\n       */\n      this.fragmentShader = null;\n\n      /**\n       * The generated compute shader.\n       *\n       * @type {String?}\n       */\n      this.computeShader = null;\n\n      /**\n       * Nodes used in the primary flow of code generation.\n       *\n       * @type {Object<String,Array<Node>>}\n       */\n      this.flowNodes = {\n        vertex: [],\n        fragment: [],\n        compute: []\n      };\n\n      /**\n       * Nodes code from `.flowNodes`.\n       *\n       * @type {Object<String,String>}\n       */\n      this.flowCode = {\n        vertex: '',\n        fragment: '',\n        compute: ''\n      };\n\n      /**\n       * This dictionary holds the node uniforms of the builder.\n       * The uniforms are maintained in an array for each shader stage.\n       *\n       * @type {Object}\n       */\n      this.uniforms = {\n        vertex: [],\n        fragment: [],\n        compute: [],\n        index: 0\n      };\n\n      /**\n       * This dictionary holds the output structs of the builder.\n       * The structs are maintained in an array for each shader stage.\n       *\n       * @type {Object}\n       */\n      this.structs = {\n        vertex: [],\n        fragment: [],\n        compute: [],\n        index: 0\n      };\n\n      /**\n       * This dictionary holds the bindings for each shader stage.\n       *\n       * @type {Object}\n       */\n      this.bindings = {\n        vertex: {},\n        fragment: {},\n        compute: {}\n      };\n\n      /**\n       * This dictionary maintains the binding indices per bind group.\n       *\n       * @type {Object}\n       */\n      this.bindingsIndexes = {};\n\n      /**\n       * Reference to the array of bind groups.\n       *\n       * @type {Array<BindGroup>?}\n       */\n      this.bindGroups = null;\n\n      /**\n       * This array holds the node attributes of this builder\n       * created via {@link AttributeNode}.\n       *\n       * @type {Array<NodeAttribute>}\n       */\n      this.attributes = [];\n\n      /**\n       * This array holds the node attributes of this builder\n       * created via {@link BufferAttributeNode}.\n       *\n       * @type {Array<NodeAttribute>}\n       */\n      this.bufferAttributes = [];\n\n      /**\n       * This array holds the node varyings of this builder.\n       *\n       * @type {Array<NodeVarying>}\n       */\n      this.varyings = [];\n\n      /**\n       * This dictionary holds the (native) node codes of this builder.\n       * The codes are maintained in an array for each shader stage.\n       *\n       * @type {Object<String,Array<NodeCode>>}\n       */\n      this.codes = {};\n\n      /**\n       * This dictionary holds the node variables of this builder.\n       * The variables are maintained in an array for each shader stage.\n       *\n       * @type {Object<String,Array<NodeVar>>}\n       */\n      this.vars = {};\n\n      /**\n       * Current code flow.\n       * All code generated in this stack will be stored in `.flow`.\n       *\n       * @type {{code: String}}\n       */\n      this.flow = {\n        code: ''\n      };\n\n      /**\n       * A chain of nodes.\n       * Used to check recursive calls in node-graph.\n       *\n       * @type {Array<Node>}\n       */\n      this.chaining = [];\n\n      /**\n       * The current stack.\n       * This reflects the current process in the code block hierarchy,\n       * it is useful to know if the current process is inside a conditional for example.\n       *\n       * @type {StackNode}\n       */\n      this.stack = stack();\n\n      /**\n       * List of stack nodes.\n       * The current stack hierarchy is stored in an array.\n       *\n       * @type {Array<StackNode>}\n       */\n      this.stacks = [];\n\n      /**\n       * A tab value. Used for shader string generation.\n       *\n       * @type {String}\n       * @default '\\t'\n       */\n      this.tab = '\\t';\n\n      /**\n       * Reference to the current function node.\n       *\n       * @type {FunctionNode?}\n       * @default null\n       */\n      this.currentFunctionNode = null;\n\n      /**\n       * The builder's context.\n       *\n       * @type {Object}\n       */\n      this.context = {\n        material: this.material\n      };\n\n      /**\n       * The builder's cache.\n       *\n       * @type {NodeCache}\n       */\n      this.cache = new NodeCache();\n\n      /**\n       * Since the {@link NodeBuilder#cache} might be temporarily\n       * overwritten by other caches, this member retains the reference\n       * to the builder's own cache.\n       *\n       * @type {NodeCache}\n       * @default this.cache\n       */\n      this.globalCache = this.cache;\n      this.flowsData = new WeakMap();\n\n      /**\n       * The current shader stage.\n       *\n       * @type {('vertex'|'fragment'|'compute'|'any')?}\n       */\n      this.shaderStage = null;\n\n      /**\n       * The current build stage.\n       *\n       * @type {('setup'|'analyze'|'generate')?}\n       */\n      this.buildStage = null;\n\n      /**\n       * Whether comparison in shader code are generated with methods or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.useComparisonMethod = false;\n    }\n\n    /**\n     * Returns the bind groups of the current renderer.\n     *\n     * @return {ChainMap} The cache.\n     */\n    return (0, _createClass2.default)(NodeBuilder, [{\n      key: \"getBindGroupsCache\",\n      value: function getBindGroupsCache() {\n        var bindGroupsCache = rendererCache.get(this.renderer);\n        if (bindGroupsCache === undefined) {\n          bindGroupsCache = new ChainMap();\n          rendererCache.set(this.renderer, bindGroupsCache);\n        }\n        return bindGroupsCache;\n      }\n\n      /**\n       * Factory method for creating an instance of {@link RenderTarget} with the given\n       * dimensions and options.\n       *\n       * @param {Number} width - The width of the render target.\n       * @param {Number} height - The height of the render target.\n       * @param {Object} options - The options of the render target.\n       * @return {RenderTarget} The render target.\n       */\n    }, {\n      key: \"createRenderTarget\",\n      value: function createRenderTarget(width, height, options) {\n        return new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)(width, height, options);\n      }\n\n      /**\n       * Factory method for creating an instance of {@link CubeRenderTarget} with the given\n       * dimensions and options.\n       *\n       * @param {Number} size - The size of the cube render target.\n       * @param {Object} options - The options of the cube render target.\n       * @return {CubeRenderTarget} The cube render target.\n       */\n    }, {\n      key: \"createCubeRenderTarget\",\n      value: function createCubeRenderTarget(size, options) {\n        return new CubeRenderTarget(size, options);\n      }\n\n      /**\n       * Factory method for creating an instance of {@link PMREMGenerator}.\n       *\n       * @return {PMREMGenerator} The PMREM generator.\n       */\n    }, {\n      key: \"createPMREMGenerator\",\n      value: function createPMREMGenerator() {\n        // TODO: Move Materials.js to outside of the Nodes.js in order to remove this function and improve tree-shaking support\n\n        return new PMREMGenerator(this.renderer);\n      }\n\n      /**\n       * Whether the given node is included in the internal array of nodes or not.\n       *\n       * @param {Node} node - The node to test.\n       * @return {Boolean} Whether the given node is included in the internal array of nodes or not.\n       */\n    }, {\n      key: \"includes\",\n      value: function includes(node) {\n        return this.nodes.includes(node);\n      }\n\n      /**\n       * Returns a bind group for the given group name and binding.\n       *\n       * @private\n       * @param {String} groupName - The group name.\n       * @param {Array<NodeUniformsGroup>} bindings - List of bindings.\n       * @return {BindGroup} The bind group\n       */\n    }, {\n      key: \"_getBindGroup\",\n      value: function _getBindGroup(groupName, bindings) {\n        var bindGroupsCache = this.getBindGroupsCache();\n\n        //\n\n        var bindingsArray = [];\n        var sharedGroup = true;\n        for (var binding of bindings) {\n          bindingsArray.push(binding);\n          sharedGroup = sharedGroup && binding.groupNode.shared !== true;\n        }\n\n        //\n\n        var bindGroup;\n        if (sharedGroup) {\n          bindGroup = bindGroupsCache.get(bindingsArray);\n          if (bindGroup === undefined) {\n            bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);\n            bindGroupsCache.set(bindingsArray, bindGroup);\n          }\n        } else {\n          bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);\n        }\n        return bindGroup;\n      }\n\n      /**\n       * Returns an array of node uniform groups for the given group name and shader stage.\n       *\n       * @param {String} groupName - The group name.\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {Array<NodeUniformsGroup>} The array of node uniform groups.\n       */\n    }, {\n      key: \"getBindGroupArray\",\n      value: function getBindGroupArray(groupName, shaderStage) {\n        var bindings = this.bindings[shaderStage];\n        var bindGroup = bindings[groupName];\n        if (bindGroup === undefined) {\n          if (this.bindingsIndexes[groupName] === undefined) {\n            this.bindingsIndexes[groupName] = {\n              binding: 0,\n              group: Object.keys(this.bindingsIndexes).length\n            };\n          }\n          bindings[groupName] = bindGroup = [];\n        }\n        return bindGroup;\n      }\n\n      /**\n       * Returns a list bindings of all shader stages separated by groups.\n       *\n       * @return {Array<BindGroup>} The list of bindings.\n       */\n    }, {\n      key: \"getBindings\",\n      value: function getBindings() {\n        var bindingsGroups = this.bindGroups;\n        if (bindingsGroups === null) {\n          var groups = {};\n          var bindings = this.bindings;\n          for (var shaderStage of shaderStages) {\n            for (var groupName in bindings[shaderStage]) {\n              var _uniforms = bindings[shaderStage][groupName];\n              var groupUniforms = groups[groupName] || (groups[groupName] = []);\n              groupUniforms.push.apply(groupUniforms, (0, _toConsumableArray2.default)(_uniforms));\n            }\n          }\n          bindingsGroups = [];\n          for (var _groupName in groups) {\n            var group = groups[_groupName];\n            var bindingsGroup = this._getBindGroup(_groupName, group);\n            bindingsGroups.push(bindingsGroup);\n          }\n          this.bindGroups = bindingsGroups;\n        }\n        return bindingsGroups;\n      }\n\n      /**\n       * Sorts the bind groups and updates {@link NodeBuilder#bindingsIndexes}.\n       */\n    }, {\n      key: \"sortBindingGroups\",\n      value: function sortBindingGroups() {\n        var bindingsGroups = this.getBindings();\n        bindingsGroups.sort(function (a, b) {\n          return a.bindings[0].groupNode.order - b.bindings[0].groupNode.order;\n        });\n        for (var i = 0; i < bindingsGroups.length; i++) {\n          var bindingGroup = bindingsGroups[i];\n          this.bindingsIndexes[bindingGroup.name].group = i;\n          bindingGroup.index = i;\n        }\n      }\n\n      /**\n       * The builder maintains each node in a hash-based dictionary.\n       * This method sets the given node (value) with the given hash (key) into this dictionary.\n       *\n       * @param {Node} node - The node to add.\n       * @param {Number} hash - The hash of the node.\n       */\n    }, {\n      key: \"setHashNode\",\n      value: function setHashNode(node, hash) {\n        this.hashNodes[hash] = node;\n      }\n\n      /**\n       * Adds a node to this builder.\n       *\n       * @param {Node} node - The node to add.\n       */\n    }, {\n      key: \"addNode\",\n      value: function addNode(node) {\n        if (this.nodes.includes(node) === false) {\n          this.nodes.push(node);\n          this.setHashNode(node, node.getHash(this));\n        }\n      }\n\n      /**\n       * It is used to add Nodes that will be used as FRAME and RENDER events,\n       * and need to follow a certain sequence in the calls to work correctly.\n       * This function should be called after 'setup()' in the 'build()' process to ensure that the child nodes are processed first.\n       *\n       * @param {Node} node - The node to add.\n       */\n    }, {\n      key: \"addSequentialNode\",\n      value: function addSequentialNode(node) {\n        if (this.sequentialNodes.includes(node) === false) {\n          this.sequentialNodes.push(node);\n        }\n      }\n\n      /**\n       * Checks the update types of nodes\n       */\n    }, {\n      key: \"buildUpdateNodes\",\n      value: function buildUpdateNodes() {\n        for (var node of this.nodes) {\n          var updateType = node.getUpdateType();\n          if (updateType !== NodeUpdateType.NONE) {\n            this.updateNodes.push(node.getSelf());\n          }\n        }\n        for (var _node of this.sequentialNodes) {\n          var updateBeforeType = _node.getUpdateBeforeType();\n          var updateAfterType = _node.getUpdateAfterType();\n          if (updateBeforeType !== NodeUpdateType.NONE) {\n            this.updateBeforeNodes.push(_node.getSelf());\n          }\n          if (updateAfterType !== NodeUpdateType.NONE) {\n            this.updateAfterNodes.push(_node.getSelf());\n          }\n        }\n      }\n\n      /**\n       * A reference the current node which is the\n       * last node in the chain of nodes.\n       *\n       * @type {Node}\n       */\n    }, {\n      key: \"currentNode\",\n      get: function get() {\n        return this.chaining[this.chaining.length - 1];\n      }\n\n      /**\n       * Whether the given texture is filtered or not.\n       *\n       * @param {Texture} texture - The texture to check.\n       * @return {Boolean} Whether the given texture is filtered or not.\n       */\n    }, {\n      key: \"isFilteredTexture\",\n      value: function isFilteredTexture(texture) {\n        return texture.magFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter || texture.magFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapNearestFilter || texture.magFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter || texture.magFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter || texture.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter || texture.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapNearestFilter || texture.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter || texture.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter;\n      }\n\n      /**\n       * Adds the given node to the internal node chain.\n       * This is used to check recursive calls in node-graph.\n       *\n       * @param {Node} node - The node to add.\n       */\n    }, {\n      key: \"addChain\",\n      value: function addChain(node) {\n        /*\n        if ( this.chaining.indexOf( node ) !== - 1 ) {\n        \t\tconsole.warn( 'Recursive node: ', node );\n        \t}\n        */\n\n        this.chaining.push(node);\n      }\n\n      /**\n       * Removes the given node from the internal node chain.\n       *\n       * @param {Node} node - The node to remove.\n       */\n    }, {\n      key: \"removeChain\",\n      value: function removeChain(node) {\n        var lastChain = this.chaining.pop();\n        if (lastChain !== node) {\n          throw new Error('NodeBuilder: Invalid node chaining!');\n        }\n      }\n\n      /**\n       * Returns the native shader method name for a given generic name. E.g.\n       * the method name `textureDimensions` matches the WGSL name but must be\n       * resolved to `textureSize` in GLSL.\n       *\n       * @abstract\n       * @param {String} method - The method name to resolve.\n       * @return {String} The resolved method name.\n       */\n    }, {\n      key: \"getMethod\",\n      value: function getMethod(method) {\n        return method;\n      }\n\n      /**\n       * Returns a node for the given hash, see {@link NodeBuilder#setHashNode}.\n       *\n       * @param {Number} hash - The hash of the node.\n       * @return {Node} The found node.\n       */\n    }, {\n      key: \"getNodeFromHash\",\n      value: function getNodeFromHash(hash) {\n        return this.hashNodes[hash];\n      }\n\n      /**\n       * Adds the Node to a target flow so that it can generate code in the 'generate' process.\n       *\n       * @param {('vertex'|'fragment'|'compute')} shaderStage - The shader stage.\n       * @param {Node} node - The node to add.\n       * @return {Node} The node.\n       */\n    }, {\n      key: \"addFlow\",\n      value: function addFlow(shaderStage, node) {\n        this.flowNodes[shaderStage].push(node);\n        return node;\n      }\n\n      /**\n       * Sets builder's context.\n       *\n       * @param {Object} context - The context to set.\n       */\n    }, {\n      key: \"setContext\",\n      value: function setContext(context) {\n        this.context = context;\n      }\n\n      /**\n       * Returns the builder's current context.\n       *\n       * @return {Object} The builder's current context.\n       */\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.context;\n      }\n\n      /**\n       * Gets a context used in shader construction that can be shared across different materials.\n       * This is necessary since the renderer cache can reuse shaders generated in one material and use them in another.\n       *\n       * @return {Object} The builder's current context without material.\n       */\n    }, {\n      key: \"getSharedContext\",\n      value: function getSharedContext() {\n        Object.assign({}, this.context);\n        return this.context;\n      }\n\n      /**\n       * Sets builder's cache.\n       *\n       * @param {NodeCache} cache - The cache to set.\n       */\n    }, {\n      key: \"setCache\",\n      value: function setCache(cache) {\n        this.cache = cache;\n      }\n\n      /**\n       * Returns the builder's current cache.\n       *\n       * @return {NodeCache} The builder's current cache.\n       */\n    }, {\n      key: \"getCache\",\n      value: function getCache() {\n        return this.cache;\n      }\n\n      /**\n       * Returns a cache for the given node.\n       *\n       * @param {Node} node - The node.\n       * @param {Boolean} [parent=true] - Whether this node refers to a shared parent cache or not.\n       * @return {NodeCache} The cache.\n       */\n    }, {\n      key: \"getCacheFromNode\",\n      value: function getCacheFromNode(node) {\n        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var data = this.getDataFromNode(node);\n        if (data.cache === undefined) data.cache = new NodeCache(parent ? this.getCache() : null);\n        return data.cache;\n      }\n\n      /**\n       * Whether the requested feature is available or not.\n       *\n       * @abstract\n       * @param {String} name - The requested feature.\n       * @return {Boolean} Whether the requested feature is supported or not.\n       */\n    }, {\n      key: \"isAvailable\",\n      value: function isAvailable(/*name*/\n      ) {\n        return false;\n      }\n\n      /**\n       * Returns the vertexIndex input variable as a native shader string.\n       *\n       * @abstract\n       * @return {String} The instanceIndex shader string.\n       */\n    }, {\n      key: \"getVertexIndex\",\n      value: function getVertexIndex() {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns the instanceIndex input variable as a native shader string.\n       *\n       * @abstract\n       * @return {String} The instanceIndex shader string.\n       */\n    }, {\n      key: \"getInstanceIndex\",\n      value: function getInstanceIndex() {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns the drawIndex input variable as a native shader string.\n       * Only relevant for WebGL and its `WEBGL_multi_draw` extension.\n       *\n       * @abstract\n       * @return {String} The drawIndex shader string.\n       */\n    }, {\n      key: \"getDrawIndex\",\n      value: function getDrawIndex() {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns the frontFacing input variable as a native shader string.\n       *\n       * @abstract\n       * @return {String} The frontFacing shader string.\n       */\n    }, {\n      key: \"getFrontFacing\",\n      value: function getFrontFacing() {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns the fragCoord input variable as a native shader string.\n       *\n       * @abstract\n       * @return {String} The fragCoord shader string.\n       */\n    }, {\n      key: \"getFragCoord\",\n      value: function getFragCoord() {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Whether to flip texture data along its vertical axis or not. WebGL needs\n       * this method evaluate to `true`, WebGPU to `false`.\n       *\n       * @abstract\n       * @return {Boolean} Whether to flip texture data along its vertical axis or not.\n       */\n    }, {\n      key: \"isFlipY\",\n      value: function isFlipY() {\n        return false;\n      }\n\n      /**\n       * Calling this method increases the usage count for the given node by one.\n       *\n       * @param {Node} node - The node to increase the usage count for.\n       * @return {Number} The updated usage count.\n       */\n    }, {\n      key: \"increaseUsage\",\n      value: function increaseUsage(node) {\n        var nodeData = this.getDataFromNode(node);\n        nodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;\n        return nodeData.usageCount;\n      }\n\n      /**\n       * Generates a texture sample shader string for the given texture data.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture.\n       * @param {String} textureProperty - The texture property name.\n       * @param {String} uvSnippet - Snippet defining the texture coordinates.\n       * @return {String} The generated shader string.\n       */\n    }, {\n      key: \"generateTexture\",\n      value: function generateTexture(/* texture, textureProperty, uvSnippet */\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Generates a texture LOD shader string for the given texture data.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture.\n       * @param {String} textureProperty - The texture property name.\n       * @param {String} uvSnippet - Snippet defining the texture coordinates.\n       * @param {String} levelSnippet - Snippet defining the mip level.\n       * @return {String} The generated shader string.\n       */\n    }, {\n      key: \"generateTextureLod\",\n      value: function generateTextureLod(/* texture, textureProperty, uvSnippet, levelSnippet */\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Generates the shader string for the given type and value.\n       *\n       * @param {String} type - The type.\n       * @param {Any?} [value=null] - The value.\n       * @return {String} The generated value as a shader string.\n       */\n    }, {\n      key: \"generateConst\",\n      value: function generateConst(type) {\n        var _this184 = this;\n        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (value === null) {\n          if (type === 'float' || type === 'int' || type === 'uint') value = 0;else if (type === 'bool') value = false;else if (type === 'color') value = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)();else if (type === 'vec2') value = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();else if (type === 'vec3') value = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)();else if (type === 'vec4') value = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n        }\n        if (type === 'float') return toFloat(value);\n        if (type === 'int') return `${Math.round(value)}`;\n        if (type === 'uint') return value >= 0 ? `${Math.round(value)}u` : '0u';\n        if (type === 'bool') return value ? 'true' : 'false';\n        if (type === 'color') return `${this.getType('vec3')}( ${toFloat(value.r)}, ${toFloat(value.g)}, ${toFloat(value.b)} )`;\n        var typeLength = this.getTypeLength(type);\n        var componentType = this.getComponentType(type);\n        var generateConst = function generateConst(value) {\n          return _this184.generateConst(componentType, value);\n        };\n        if (typeLength === 2) {\n          return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)} )`;\n        } else if (typeLength === 3) {\n          return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)} )`;\n        } else if (typeLength === 4) {\n          return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)}, ${generateConst(value.w)} )`;\n        } else if (typeLength > 4 && value && (value.isMatrix3 || value.isMatrix4)) {\n          return `${this.getType(type)}( ${value.elements.map(generateConst).join(', ')} )`;\n        } else if (typeLength > 4) {\n          return `${this.getType(type)}()`;\n        }\n        throw new Error(`NodeBuilder: Type '${type}' not found in generate constant attempt.`);\n      }\n\n      /**\n       * It might be necessary to convert certain data types to different ones\n       * so this method can be used to hide the conversion.\n       *\n       * @param {String} type - The type.\n       * @return {String} The updated type.\n       */\n    }, {\n      key: \"getType\",\n      value: function getType(type) {\n        if (type === 'color') return 'vec3';\n        return type;\n      }\n\n      /**\n       * Whether the given attribute name is defined in the geometry or not.\n       *\n       * @param {String} name - The attribute name.\n       * @return {Boolean} Whether the given attribute name is defined in the geometry.\n       */\n    }, {\n      key: \"hasGeometryAttribute\",\n      value: function hasGeometryAttribute(name) {\n        return this.geometry && this.geometry.getAttribute(name) !== undefined;\n      }\n\n      /**\n       * Returns a node attribute for the given name and type.\n       *\n       * @param {String} name - The attribute's name.\n       * @param {String} type - The attribute's type.\n       * @return {NodeAttribute} The node attribute.\n       */\n    }, {\n      key: \"getAttribute\",\n      value: function getAttribute(name, type) {\n        var attributes = this.attributes;\n\n        // find attribute\n\n        for (var _attribute9 of attributes) {\n          if (_attribute9.name === name) {\n            return _attribute9;\n          }\n        }\n\n        // create a new if no exist\n\n        var attribute = new NodeAttribute(name, type);\n        attributes.push(attribute);\n        return attribute;\n      }\n\n      /**\n       * Returns for the given node and shader stage the property name for the shader.\n       *\n       * @param {Node} node - The node.\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {String} The property name.\n       */\n    }, {\n      key: \"getPropertyName\",\n      value: function getPropertyName(node /*, shaderStage*/) {\n        return node.name;\n      }\n\n      /**\n       * Whether the given type is a vector type or not.\n       *\n       * @param {String} type - The type to check.\n       * @return {Boolean} Whether the given type is a vector type or not.\n       */\n    }, {\n      key: \"isVector\",\n      value: function isVector(type) {\n        return /vec\\d/.test(type);\n      }\n\n      /**\n       * Whether the given type is a matrix type or not.\n       *\n       * @param {String} type - The type to check.\n       * @return {Boolean} Whether the given type is a matrix type or not.\n       */\n    }, {\n      key: \"isMatrix\",\n      value: function isMatrix(type) {\n        return /mat\\d/.test(type);\n      }\n\n      /**\n       * Whether the given type is a reference type or not.\n       *\n       * @param {String} type - The type to check.\n       * @return {Boolean} Whether the given type is a reference type or not.\n       */\n    }, {\n      key: \"isReference\",\n      value: function isReference(type) {\n        return type === 'void' || type === 'property' || type === 'sampler' || type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'depthTexture' || type === 'texture3D';\n      }\n\n      /**\n       * Whether the given texture needs a conversion to working color space.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture to check.\n       * @return {Boolean} Whether a color space conversion is required or not.\n       */\n    }, {\n      key: \"needsToWorkingColorSpace\",\n      value: function needsToWorkingColorSpace(/*texture*/\n      ) {\n        return false;\n      }\n\n      /**\n       * Returns the component type of a given texture.\n       *\n       * @param {Texture} texture - The texture.\n       * @return {String} The component type.\n       */\n    }, {\n      key: \"getComponentTypeFromTexture\",\n      value: function getComponentTypeFromTexture(texture) {\n        var type = texture.type;\n        if (texture.isDataTexture) {\n          if (type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) return 'int';\n          if (type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType) return 'uint';\n        }\n        return 'float';\n      }\n\n      /**\n       * Returns the element type for a given type.\n       *\n       * @param {String} type - The type.\n       * @return {String} The element type.\n       */\n    }, {\n      key: \"getElementType\",\n      value: function getElementType(type) {\n        if (type === 'mat2') return 'vec2';\n        if (type === 'mat3') return 'vec3';\n        if (type === 'mat4') return 'vec4';\n        return this.getComponentType(type);\n      }\n\n      /**\n       * Returns the component type for a given type.\n       *\n       * @param {String} type - The type.\n       * @return {String} The component type.\n       */\n    }, {\n      key: \"getComponentType\",\n      value: function getComponentType(type) {\n        type = this.getVectorType(type);\n        if (type === 'float' || type === 'bool' || type === 'int' || type === 'uint') return type;\n        var componentType = /(b|i|u|)(vec|mat)([2-4])/.exec(type);\n        if (componentType === null) return null;\n        if (componentType[1] === 'b') return 'bool';\n        if (componentType[1] === 'i') return 'int';\n        if (componentType[1] === 'u') return 'uint';\n        return 'float';\n      }\n\n      /**\n       * Returns the vector type for a given type.\n       *\n       * @param {String} type - The type.\n       * @return {String} The vector type.\n       */\n    }, {\n      key: \"getVectorType\",\n      value: function getVectorType(type) {\n        if (type === 'color') return 'vec3';\n        if (type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D') return 'vec4';\n        return type;\n      }\n\n      /**\n       * Returns the data type for the given the length and component type.\n       *\n       * @param {Number} length - The length.\n       * @param {String} [componentType='float'] - The component type.\n       * @return {String} The type.\n       */\n    }, {\n      key: \"getTypeFromLength\",\n      value: function getTypeFromLength(length) {\n        var componentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float';\n        if (length === 1) return componentType;\n        var baseType = _getTypeFromLength(length);\n        var prefix = componentType === 'float' ? '' : componentType[0];\n        return prefix + baseType;\n      }\n\n      /**\n       * Returns the type for a given typed array.\n       *\n       * @param {TypedArray} array - The typed array.\n       * @return {String} The type.\n       */\n    }, {\n      key: \"getTypeFromArray\",\n      value: function getTypeFromArray(array) {\n        return typeFromArray.get(array.constructor);\n      }\n\n      /**\n       * Returns the type for a given buffer attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       * @return {String} The type.\n       */\n    }, {\n      key: \"getTypeFromAttribute\",\n      value: function getTypeFromAttribute(attribute) {\n        var dataAttribute = attribute;\n        if (attribute.isInterleavedBufferAttribute) dataAttribute = attribute.data;\n        var array = dataAttribute.array;\n        var itemSize = attribute.itemSize;\n        var normalized = attribute.normalized;\n        var arrayType;\n        if (!(attribute instanceof _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Float16BufferAttribute) && normalized !== true) {\n          arrayType = this.getTypeFromArray(array);\n        }\n        return this.getTypeFromLength(itemSize, arrayType);\n      }\n\n      /**\n       * Returns the length for the given data type.\n       *\n       * @param {String} type - The data type.\n       * @return {Number} The length.\n       */\n    }, {\n      key: \"getTypeLength\",\n      value: function getTypeLength(type) {\n        var vecType = this.getVectorType(type);\n        var vecNum = /vec([2-4])/.exec(vecType);\n        if (vecNum !== null) return Number(vecNum[1]);\n        if (vecType === 'float' || vecType === 'bool' || vecType === 'int' || vecType === 'uint') return 1;\n        if (/mat2/.test(type) === true) return 4;\n        if (/mat3/.test(type) === true) return 9;\n        if (/mat4/.test(type) === true) return 16;\n        return 0;\n      }\n\n      /**\n       * Returns the vector type for a given matrix type.\n       *\n       * @param {String} type - The matrix type.\n       * @return {String} The vector type.\n       */\n    }, {\n      key: \"getVectorFromMatrix\",\n      value: function getVectorFromMatrix(type) {\n        return type.replace('mat', 'vec');\n      }\n\n      /**\n       * For a given type this method changes the component type to the\n       * given value. E.g. `vec4` should be changed to the new component type\n       * `uint` which results in `uvec4`.\n       *\n       * @param {String} type - The type.\n       * @param {String} newComponentType - The new component type.\n       * @return {String} The new type.\n       */\n    }, {\n      key: \"changeComponentType\",\n      value: function changeComponentType(type, newComponentType) {\n        return this.getTypeFromLength(this.getTypeLength(type), newComponentType);\n      }\n\n      /**\n       * Returns the integer type pendant for the given type.\n       *\n       * @param {String} type - The type.\n       * @return {String} The integer type.\n       */\n    }, {\n      key: \"getIntegerType\",\n      value: function getIntegerType(type) {\n        var componentType = this.getComponentType(type);\n        if (componentType === 'int' || componentType === 'uint') return type;\n        return this.changeComponentType(type, 'int');\n      }\n\n      /**\n       * Adds a stack node to the internal stack.\n       *\n       * @return {StackNode} The added stack node.\n       */\n    }, {\n      key: \"addStack\",\n      value: function addStack() {\n        this.stack = stack(this.stack);\n        this.stacks.push(getCurrentStack() || this.stack);\n        setCurrentStack(this.stack);\n        return this.stack;\n      }\n\n      /**\n       * Removes the last stack node from the internal stack.\n       *\n       * @return {StackNode} The removed stack node.\n       */\n    }, {\n      key: \"removeStack\",\n      value: function removeStack() {\n        var lastStack = this.stack;\n        this.stack = lastStack.parent;\n        setCurrentStack(this.stacks.pop());\n        return lastStack;\n      }\n\n      /**\n       * The builder maintains (cached) data for each node during the building process. This method\n       * can be used to get these data for a specific shader stage and cache.\n       *\n       * @param {Node} node - The node to get the data for.\n       * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n       * @param {NodeCache?} cache - An optional cache.\n       * @return {Object} The node data.\n       */\n    }, {\n      key: \"getDataFromNode\",\n      value: function getDataFromNode(node) {\n        var shaderStage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.shaderStage;\n        var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        cache = cache === null ? node.isGlobal(this) ? this.globalCache : this.cache : cache;\n        var nodeData = cache.getData(node);\n        if (nodeData === undefined) {\n          nodeData = {};\n          cache.setData(node, nodeData);\n        }\n        if (nodeData[shaderStage] === undefined) nodeData[shaderStage] = {};\n        return nodeData[shaderStage];\n      }\n\n      /**\n       * Returns the properties for the given node and shader stage.\n       *\n       * @param {Node} node - The node to get the properties for.\n       * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage='any'] - The shader stage.\n       * @return {Object} The node properties.\n       */\n    }, {\n      key: \"getNodeProperties\",\n      value: function getNodeProperties(node) {\n        var shaderStage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n        var nodeData = this.getDataFromNode(node, shaderStage);\n        return nodeData.properties || (nodeData.properties = {\n          outputNode: null\n        });\n      }\n\n      /**\n       * Returns an instance of {@link NodeAttribute} for the given buffer attribute node.\n       *\n       * @param {BufferAttributeNode} node - The buffer attribute node.\n       * @param {String} type - The node type.\n       * @return {NodeAttribute} The node attribute.\n       */\n    }, {\n      key: \"getBufferAttributeFromNode\",\n      value: function getBufferAttributeFromNode(node, type) {\n        var nodeData = this.getDataFromNode(node);\n        var bufferAttribute = nodeData.bufferAttribute;\n        if (bufferAttribute === undefined) {\n          var index = this.uniforms.index++;\n          bufferAttribute = new NodeAttribute('nodeAttribute' + index, type, node);\n          this.bufferAttributes.push(bufferAttribute);\n          nodeData.bufferAttribute = bufferAttribute;\n        }\n        return bufferAttribute;\n      }\n\n      /**\n       * Returns an instance of {@link StructTypeNode} for the given output struct node.\n       *\n       * @param {OutputStructNode} node - The output struct node.\n       * @param {Array<String>} types - The output struct types.\n       * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n       * @return {StructTypeNode} The struct type attribute.\n       */\n    }, {\n      key: \"getStructTypeFromNode\",\n      value: function getStructTypeFromNode(node, types) {\n        var shaderStage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.shaderStage;\n        var nodeData = this.getDataFromNode(node, shaderStage);\n        var structType = nodeData.structType;\n        if (structType === undefined) {\n          var index = this.structs.index++;\n          structType = new StructTypeNode('StructType' + index, types);\n          this.structs[shaderStage].push(structType);\n          nodeData.structType = structType;\n        }\n        return structType;\n      }\n\n      /**\n       * Returns an instance of {@link NodeUniform} for the given uniform node.\n       *\n       * @param {UniformNode} node - The uniform node.\n       * @param {String} type - The uniform type.\n       * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n       * @param {String?} name - The name of the uniform.\n       * @return {NodeUniform} The node uniform.\n       */\n    }, {\n      key: \"getUniformFromNode\",\n      value: function getUniformFromNode(node, type) {\n        var shaderStage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.shaderStage;\n        var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);\n        var nodeUniform = nodeData.uniform;\n        if (nodeUniform === undefined) {\n          var index = this.uniforms.index++;\n          nodeUniform = new NodeUniform(name || 'nodeUniform' + index, type, node);\n          this.uniforms[shaderStage].push(nodeUniform);\n          nodeData.uniform = nodeUniform;\n        }\n        return nodeUniform;\n      }\n\n      /**\n       * Returns an instance of {@link NodeVar} for the given variable node.\n       *\n       * @param {VarNode} node - The variable node.\n       * @param {String?} name - The variable's name.\n       * @param {String} [type=node.getNodeType( this )] - The variable's type.\n       * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n       * @return {NodeVar} The node variable.\n       */\n    }, {\n      key: \"getVarFromNode\",\n      value: function getVarFromNode(node) {\n        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : node.getNodeType(this);\n        var shaderStage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.shaderStage;\n        var nodeData = this.getDataFromNode(node, shaderStage);\n        var nodeVar = nodeData.variable;\n        if (nodeVar === undefined) {\n          var vars = this.vars[shaderStage] || (this.vars[shaderStage] = []);\n          if (name === null) name = 'nodeVar' + vars.length;\n          nodeVar = new NodeVar(name, type);\n          vars.push(nodeVar);\n          nodeData.variable = nodeVar;\n        }\n        return nodeVar;\n      }\n\n      /**\n       * Returns an instance of {@link NodeVarying} for the given varying node.\n       *\n       * @param {(VaryingNode|PropertyNode)} node - The varying node.\n       * @param {String?} name - The varying's name.\n       * @param {String} [type=node.getNodeType( this )] - The varying's type.\n       * @return {NodeVar} The node varying.\n       */\n    }, {\n      key: \"getVaryingFromNode\",\n      value: function getVaryingFromNode(node) {\n        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : node.getNodeType(this);\n        var nodeData = this.getDataFromNode(node, 'any');\n        var nodeVarying = nodeData.varying;\n        if (nodeVarying === undefined) {\n          var varyings = this.varyings;\n          var index = varyings.length;\n          if (name === null) name = 'nodeVarying' + index;\n          nodeVarying = new NodeVarying(name, type);\n          varyings.push(nodeVarying);\n          nodeData.varying = nodeVarying;\n        }\n        return nodeVarying;\n      }\n\n      /**\n       * Returns an instance of {@link NodeCode} for the given code node.\n       *\n       * @param {CodeNode} node - The code node.\n       * @param {String} type - The node type.\n       * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n       * @return {NodeCode} The node code.\n       */\n    }, {\n      key: \"getCodeFromNode\",\n      value: function getCodeFromNode(node, type) {\n        var shaderStage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.shaderStage;\n        var nodeData = this.getDataFromNode(node);\n        var nodeCode = nodeData.code;\n        if (nodeCode === undefined) {\n          var codes = this.codes[shaderStage] || (this.codes[shaderStage] = []);\n          var index = codes.length;\n          nodeCode = new NodeCode('nodeCode' + index, type);\n          codes.push(nodeCode);\n          nodeData.code = nodeCode;\n        }\n        return nodeCode;\n      }\n\n      /**\n       * Adds a code flow based on the code-block hierarchy.\n      \t * This is used so that code-blocks like If,Else create their variables locally if the Node\n       * is only used inside one of these conditionals in the current shader stage.\n       *\n       * @param {Node} node - The node to add.\n       * @param {Node} nodeBlock - Node-based code-block. Usually 'ConditionalNode'.\n       */\n    }, {\n      key: \"addFlowCodeHierarchy\",\n      value: function addFlowCodeHierarchy(node, nodeBlock) {\n        var _this$getDataFromNode = this.getDataFromNode(node),\n          flowCodes = _this$getDataFromNode.flowCodes,\n          flowCodeBlock = _this$getDataFromNode.flowCodeBlock;\n        var needsFlowCode = true;\n        var nodeBlockHierarchy = nodeBlock;\n        while (nodeBlockHierarchy) {\n          if (flowCodeBlock.get(nodeBlockHierarchy) === true) {\n            needsFlowCode = false;\n            break;\n          }\n          nodeBlockHierarchy = this.getDataFromNode(nodeBlockHierarchy).parentNodeBlock;\n        }\n        if (needsFlowCode) {\n          for (var flowCode of flowCodes) {\n            this.addLineFlowCode(flowCode);\n          }\n        }\n      }\n\n      /**\n       * Add a inline-code to the current flow code-block.\n       *\n       * @param {Node} node - The node to add.\n       * @param {String} code - The code to add.\n       * @param {Node} nodeBlock - Current ConditionalNode\n       */\n    }, {\n      key: \"addLineFlowCodeBlock\",\n      value: function addLineFlowCodeBlock(node, code, nodeBlock) {\n        var nodeData = this.getDataFromNode(node);\n        var flowCodes = nodeData.flowCodes || (nodeData.flowCodes = []);\n        var codeBlock = nodeData.flowCodeBlock || (nodeData.flowCodeBlock = new WeakMap());\n        flowCodes.push(code);\n        codeBlock.set(nodeBlock, true);\n      }\n\n      /**\n       * Add a inline-code to the current flow.\n       *\n       * @param {String} code - The code to add.\n       * @param {Node?} [node= null] - Optional Node, can help the system understand if the Node is part of a code-block.\n       * @return {NodeBuilder} A reference to this node builder.\n       */\n    }, {\n      key: \"addLineFlowCode\",\n      value: function addLineFlowCode(code) {\n        var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (code === '') return this;\n        if (node !== null && this.context.nodeBlock) {\n          this.addLineFlowCodeBlock(node, code, this.context.nodeBlock);\n        }\n        code = this.tab + code;\n        if (!/;\\s*$/.test(code)) {\n          code = code + ';\\n';\n        }\n        this.flow.code += code;\n        return this;\n      }\n\n      /**\n       * Adds a code to the current code flow.\n       *\n       * @param {String} code - Shader code.\n       * @return {NodeBuilder} A reference to this node builder.\n       */\n    }, {\n      key: \"addFlowCode\",\n      value: function addFlowCode(code) {\n        this.flow.code += code;\n        return this;\n      }\n\n      /**\n       * Add tab in the code that will be generated so that other snippets respect the current tabulation.\n       * Typically used in codes with If,Else.\n       *\n       * @return {NodeBuilder} A reference to this node builder.\n       */\n    }, {\n      key: \"addFlowTab\",\n      value: function addFlowTab() {\n        this.tab += '\\t';\n        return this;\n      }\n\n      /**\n       * Removes a tab.\n       *\n       * @return {NodeBuilder} A reference to this node builder.\n       */\n    }, {\n      key: \"removeFlowTab\",\n      value: function removeFlowTab() {\n        this.tab = this.tab.slice(0, -1);\n        return this;\n      }\n\n      /**\n       * Gets the current flow data based on a Node.\n       *\n       * @param {Node} node - Node that the flow was started.\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {Object} The flow data.\n       */\n    }, {\n      key: \"getFlowData\",\n      value: function getFlowData(node /*, shaderStage*/) {\n        return this.flowsData.get(node);\n      }\n\n      /**\n       * Executes the node flow based on a root node to generate the final shader code.\n       *\n       * @param {Node} node - The node to execute.\n       * @return {Object} The code flow.\n       */\n    }, {\n      key: \"flowNode\",\n      value: function flowNode(node) {\n        var output = node.getNodeType(this);\n        var flowData = this.flowChildNode(node, output);\n        this.flowsData.set(node, flowData);\n        return flowData;\n      }\n\n      /**\n       * Returns the native shader operator name for a given generic name.\n       * It is a similar type of method like {@link NodeBuilder#getMethod}.\n       *\n       * @param {ShaderNodeInternal} shaderNode - The shader node to build the function node with.\n       * @return {FunctionNode} The build function node.\n       */\n    }, {\n      key: \"buildFunctionNode\",\n      value: function buildFunctionNode(shaderNode) {\n        var fn = new FunctionNode();\n        var previous = this.currentFunctionNode;\n        this.currentFunctionNode = fn;\n        fn.code = this.buildFunctionCode(shaderNode);\n        this.currentFunctionNode = previous;\n        return fn;\n      }\n\n      /**\n       * Generates a code flow based on a TSL function: Fn().\n       *\n       * @param {ShaderNodeInternal} shaderNode - A function code will be generated based on the input.\n       * @return {Object}\n       */\n    }, {\n      key: \"flowShaderNode\",\n      value: function flowShaderNode(shaderNode) {\n        var layout = shaderNode.layout;\n        var inputs = (0, _defineProperty2.default)({}, Symbol.iterator, function () {\n          var index = 0;\n          var values = Object.values(this);\n          return {\n            next: function next() {\n              return {\n                value: values[index],\n                done: index++ >= values.length\n              };\n            }\n          };\n        });\n        for (var input of layout.inputs) {\n          inputs[input.name] = new ParameterNode(input.type, input.name);\n        }\n\n        //\n\n        shaderNode.layout = null;\n        var callNode = shaderNode.call(inputs);\n        var flowData = this.flowStagesNode(callNode, layout.type);\n        shaderNode.layout = layout;\n        return flowData;\n      }\n\n      /**\n       * Runs the node flow through all the steps of creation, 'setup', 'analyze', 'generate'.\n       *\n       * @param {Node} node - The node to execute.\n       * @param {String?} output - Expected output type. For example 'vec3'.\n       * @return {Object}\n       */\n    }, {\n      key: \"flowStagesNode\",\n      value: function flowStagesNode(node) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var previousFlow = this.flow;\n        var previousVars = this.vars;\n        var previousCache = this.cache;\n        var previousBuildStage = this.buildStage;\n        var previousStack = this.stack;\n        var flow = {\n          code: ''\n        };\n        this.flow = flow;\n        this.vars = {};\n        this.cache = new NodeCache();\n        this.stack = stack();\n        for (var buildStage of defaultBuildStages) {\n          this.setBuildStage(buildStage);\n          flow.result = node.build(this, output);\n        }\n        flow.vars = this.getVars(this.shaderStage);\n        this.flow = previousFlow;\n        this.vars = previousVars;\n        this.cache = previousCache;\n        this.stack = previousStack;\n        this.setBuildStage(previousBuildStage);\n        return flow;\n      }\n\n      /**\n       * Returns the native shader operator name for a given generic name.\n       * It is a similar type of method like {@link NodeBuilder#getMethod}.\n       *\n       * @abstract\n       * @param {String} op - The operator name to resolve.\n       * @return {String} The resolved operator name.\n       */\n    }, {\n      key: \"getFunctionOperator\",\n      value: function getFunctionOperator(/* op */\n      ) {\n        return null;\n      }\n\n      /**\n       * Generates a code flow based on a child Node.\n       *\n       * @param {Node} node - The node to execute.\n       * @param {String?} output - Expected output type. For example 'vec3'.\n       * @return {Object} The code flow.\n       */\n    }, {\n      key: \"flowChildNode\",\n      value: function flowChildNode(node) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var previousFlow = this.flow;\n        var flow = {\n          code: ''\n        };\n        this.flow = flow;\n        flow.result = node.build(this, output);\n        this.flow = previousFlow;\n        return flow;\n      }\n\n      /**\n       * Executes a flow of code in a different stage.\n       *\n       * Some nodes like `varying()` have the ability to compute code in vertex-stage and\n       * return the value in fragment-stage even if it is being executed in an input fragment.\n       *\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @param {Node} node - The node to execute.\n       * @param {String?} output - Expected output type. For example 'vec3'.\n       * @param {String?} propertyName - The property name to assign the result.\n       * @return {Object}\n       */\n    }, {\n      key: \"flowNodeFromShaderStage\",\n      value: function flowNodeFromShaderStage(shaderStage, node) {\n        var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var propertyName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var previousShaderStage = this.shaderStage;\n        this.setShaderStage(shaderStage);\n        var flowData = this.flowChildNode(node, output);\n        if (propertyName !== null) {\n          flowData.code += `${this.tab + propertyName} = ${flowData.result};\\n`;\n        }\n        this.flowCode[shaderStage] = this.flowCode[shaderStage] + flowData.code;\n        this.setShaderStage(previousShaderStage);\n        return flowData;\n      }\n\n      /**\n       * Returns an array holding all node attributes of this node builder.\n       *\n       * @return {Array<NodeAttribute>} The node attributes of this builder.\n       */\n    }, {\n      key: \"getAttributesArray\",\n      value: function getAttributesArray() {\n        return this.attributes.concat(this.bufferAttributes);\n      }\n\n      /**\n       * Returns the attribute definitions as a shader string for the given shader stage.\n       *\n       * @abstract\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {String} The attribute code section.\n       */\n    }, {\n      key: \"getAttributes\",\n      value: function getAttributes(/*shaderStage*/\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns the varying definitions as a shader string for the given shader stage.\n       *\n       * @abstract\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {String} The varying code section.\n       */\n    }, {\n      key: \"getVaryings\",\n      value: function getVaryings(/*shaderStage*/\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns a single variable definition as a shader string for the given variable type and name.\n       *\n       * @param {String} type - The variable's type.\n       * @param {String} name - The variable's name.\n       * @return {String} The shader string.\n       */\n    }, {\n      key: \"getVar\",\n      value: function getVar(type, name) {\n        return `${this.getType(type)} ${name}`;\n      }\n\n      /**\n       * Returns the variable definitions as a shader string for the given shader stage.\n       *\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {String} The variable code section.\n       */\n    }, {\n      key: \"getVars\",\n      value: function getVars(shaderStage) {\n        var snippet = '';\n        var vars = this.vars[shaderStage];\n        if (vars !== undefined) {\n          for (var variable of vars) {\n            snippet += `${this.getVar(variable.type, variable.name)}; `;\n          }\n        }\n        return snippet;\n      }\n\n      /**\n       * Returns the uniform definitions as a shader string for the given shader stage.\n       *\n       * @abstract\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {String} The uniform code section.\n       */\n    }, {\n      key: \"getUniforms\",\n      value: function getUniforms(/*shaderStage*/\n      ) {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Returns the native code definitions as a shader string for the given shader stage.\n       *\n       * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n       * @return {String} The native code section.\n       */\n    }, {\n      key: \"getCodes\",\n      value: function getCodes(shaderStage) {\n        var codes = this.codes[shaderStage];\n        var code = '';\n        if (codes !== undefined) {\n          for (var nodeCode of codes) {\n            code += nodeCode.code + '\\n';\n          }\n        }\n        return code;\n      }\n\n      /**\n       * Returns the hash of this node builder.\n       *\n       * @return {String} The hash.\n       */\n    }, {\n      key: \"getHash\",\n      value: function getHash() {\n        return this.vertexShader + this.fragmentShader + this.computeShader;\n      }\n\n      /**\n       * Sets the current shader stage.\n       *\n       * @param {('vertex'|'fragment'|'compute'|'any')?} shaderStage - The shader stage to set.\n       */\n    }, {\n      key: \"setShaderStage\",\n      value: function setShaderStage(shaderStage) {\n        this.shaderStage = shaderStage;\n      }\n\n      /**\n       * Returns the current shader stage.\n       *\n       * @return {('vertex'|'fragment'|'compute'|'any')?} The current shader stage.\n       */\n    }, {\n      key: \"getShaderStage\",\n      value: function getShaderStage() {\n        return this.shaderStage;\n      }\n\n      /**\n       * Sets the current build stage.\n       *\n       * @param {('setup'|'analyze'|'generate')?} buildStage - The build stage to set.\n       */\n    }, {\n      key: \"setBuildStage\",\n      value: function setBuildStage(buildStage) {\n        this.buildStage = buildStage;\n      }\n\n      /**\n       * Returns the current build stage.\n       *\n       * @return {('setup'|'analyze'|'generate')?} The current build stage.\n       */\n    }, {\n      key: \"getBuildStage\",\n      value: function getBuildStage() {\n        return this.buildStage;\n      }\n\n      /**\n       * Controls the code build of the shader stages.\n       *\n       * @abstract\n       */\n    }, {\n      key: \"buildCode\",\n      value: function buildCode() {\n        console.warn('Abstract function.');\n      }\n\n      /**\n       * Central build method which controls the build for the given object.\n       *\n       * @return {NodeBuilder} A reference to this node builder.\n       */\n    }, {\n      key: \"build\",\n      value: function build() {\n        var object = this.object,\n          material = this.material,\n          renderer = this.renderer;\n        if (material !== null) {\n          var nodeMaterial = renderer.library.fromMaterial(material);\n          if (nodeMaterial === null) {\n            console.error(`NodeMaterial: Material \"${material.type}\" is not compatible.`);\n            nodeMaterial = new NodeMaterial();\n          }\n          nodeMaterial.build(this);\n        } else {\n          this.addFlow('compute', object);\n        }\n\n        // setup() -> stage 1: create possible new nodes and returns an output reference node\n        // analyze()   -> stage 2: analyze nodes to possible optimization and validation\n        // generate()  -> stage 3: generate shader\n\n        for (var buildStage of defaultBuildStages) {\n          this.setBuildStage(buildStage);\n          if (this.context.vertex && this.context.vertex.isNode) {\n            this.flowNodeFromShaderStage('vertex', this.context.vertex);\n          }\n          for (var shaderStage of shaderStages) {\n            this.setShaderStage(shaderStage);\n            var flowNodes = this.flowNodes[shaderStage];\n            for (var node of flowNodes) {\n              if (buildStage === 'generate') {\n                this.flowNode(node);\n              } else {\n                node.build(this);\n              }\n            }\n          }\n        }\n        this.setBuildStage(null);\n        this.setShaderStage(null);\n\n        // stage 4: build code for a specific output\n\n        this.buildCode();\n        this.buildUpdateNodes();\n        return this;\n      }\n\n      /**\n       * Returns a uniform representation which is later used for UBO generation and rendering.\n       *\n       * @param {NodeUniform} uniformNode - The uniform node.\n       * @param {String} type - The requested type.\n       * @return {Uniform} The uniform.\n       */\n    }, {\n      key: \"getNodeUniform\",\n      value: function getNodeUniform(uniformNode, type) {\n        if (type === 'float' || type === 'int' || type === 'uint') return new NumberNodeUniform(uniformNode);\n        if (type === 'vec2' || type === 'ivec2' || type === 'uvec2') return new Vector2NodeUniform(uniformNode);\n        if (type === 'vec3' || type === 'ivec3' || type === 'uvec3') return new Vector3NodeUniform(uniformNode);\n        if (type === 'vec4' || type === 'ivec4' || type === 'uvec4') return new Vector4NodeUniform(uniformNode);\n        if (type === 'color') return new ColorNodeUniform(uniformNode);\n        if (type === 'mat3') return new Matrix3NodeUniform(uniformNode);\n        if (type === 'mat4') return new Matrix4NodeUniform(uniformNode);\n        throw new Error(`Uniform \"${type}\" not declared.`);\n      }\n\n      /**\n       * Formats the given shader snippet from a given type into another one. E.g.\n       * this method might be used to convert a simple float string `\"1.0\"` into a\n       * `vec3` representation: `\"vec3<f32>( 1.0 )\"`.\n       *\n       * @param {String} snippet - The shader snippet.\n       * @param {String} fromType - The source type.\n       * @param {String} toType - The target type.\n       * @return {String} The updated shader string.\n       */\n    }, {\n      key: \"format\",\n      value: function format(snippet, fromType, toType) {\n        fromType = this.getVectorType(fromType);\n        toType = this.getVectorType(toType);\n        if (fromType === toType || toType === null || this.isReference(toType)) {\n          return snippet;\n        }\n        var fromTypeLength = this.getTypeLength(fromType);\n        var toTypeLength = this.getTypeLength(toType);\n        if (fromTypeLength === 16 && toTypeLength === 9) {\n          return `${this.getType(toType)}(${snippet}[0].xyz, ${snippet}[1].xyz, ${snippet}[2].xyz)`;\n        }\n        if (fromTypeLength === 9 && toTypeLength === 4) {\n          return `${this.getType(toType)}(${snippet}[0].xy, ${snippet}[1].xy)`;\n        }\n        if (fromTypeLength > 4) {\n          // fromType is matrix-like\n\n          // @TODO: ignore for now\n\n          return snippet;\n        }\n        if (toTypeLength > 4 || toTypeLength === 0) {\n          // toType is matrix-like or unknown\n\n          // @TODO: ignore for now\n\n          return snippet;\n        }\n        if (fromTypeLength === toTypeLength) {\n          return `${this.getType(toType)}( ${snippet} )`;\n        }\n        if (fromTypeLength > toTypeLength) {\n          return this.format(`${snippet}.${'xyz'.slice(0, toTypeLength)}`, this.getTypeFromLength(toTypeLength, this.getComponentType(fromType)), toType);\n        }\n        if (toTypeLength === 4 && fromTypeLength > 1) {\n          // toType is vec4-like\n\n          return `${this.getType(toType)}( ${this.format(snippet, fromType, 'vec3')}, 1.0 )`;\n        }\n        if (fromTypeLength === 2) {\n          // fromType is vec2-like and toType is vec3-like\n\n          return `${this.getType(toType)}( ${this.format(snippet, fromType, 'vec2')}, 0.0 )`;\n        }\n        if (fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType(toType)) {\n          // fromType is float-like\n\n          // convert a number value to vector type, e.g:\n          // vec3( 1u ) -> vec3( float( 1u ) )\n\n          snippet = `${this.getType(this.getComponentType(toType))}( ${snippet} )`;\n        }\n        return `${this.getType(toType)}( ${snippet} )`; // fromType is float-like\n      }\n\n      /**\n       * Returns a signature with the engine's current revision.\n       *\n       * @return {String} The signature.\n       */\n    }, {\n      key: \"getSignature\",\n      value: function getSignature() {\n        return `// Three.js r${_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").REVISION} - Node System\\n`;\n      }\n\n      // deprecated\n    }, {\n      key: \"createNodeMaterial\",\n      value: function createNodeMaterial() {\n        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'NodeMaterial';\n        // @deprecated, r168\n\n        throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${type}() instead.`);\n      }\n    }]);\n  }();\n  /**\n   * Management class for updating nodes. The module tracks metrics like\n   * the elapsed time, delta time, the render and frame ID to correctly\n   * call the node update methods {@link Node#updateBefore}, {@link Node#update}\n   * and {@link Node#updateAfter} depending on the node's configuration.\n   */\n  var NodeFrame = exports.NodeFrame = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node fame.\n     */\n    function NodeFrame() {\n      (0, _classCallCheck2.default)(this, NodeFrame);\n      /**\n       * The elapsed time in seconds.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.time = 0;\n\n      /**\n       * The delta time in seconds.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.deltaTime = 0;\n\n      /**\n       * The frame ID.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.frameId = 0;\n\n      /**\n       * The render ID.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.renderId = 0;\n\n      /**\n       * Used to control the {@link Node#update} call.\n       *\n       * @type {WeakMap<Node, Object>}\n       */\n      this.updateMap = new WeakMap();\n\n      /**\n       * Used to control the {@link Node#updateBefore} call.\n       *\n       * @type {WeakMap<Node, Object>}\n       */\n      this.updateBeforeMap = new WeakMap();\n\n      /**\n       * Used to control the {@link Node#updateAfter} call.\n       *\n       * @type {WeakMap<Node, Object>}\n       */\n      this.updateAfterMap = new WeakMap();\n\n      /**\n       * A reference to the current renderer.\n       *\n       * @type {Renderer?}\n       * @default null\n       */\n      this.renderer = null;\n\n      /**\n       * A reference to the current material.\n       *\n       * @type {Material?}\n       * @default null\n       */\n      this.material = null;\n\n      /**\n       * A reference to the current camera.\n       *\n       * @type {Camera?}\n       * @default null\n       */\n      this.camera = null;\n\n      /**\n       * A reference to the current 3D object.\n       *\n       * @type {Object3D?}\n       * @default null\n       */\n      this.object = null;\n\n      /**\n       * A reference to the current scene.\n       *\n       * @type {Scene?}\n       * @default null\n       */\n      this.scene = null;\n    }\n\n    /**\n     * Returns a dictionary for a given node and update map which\n     * is used to correctly call node update methods per frame or render.\n     *\n     * @private\n     * @param {WeakMap<Node, Object>} referenceMap - The reference weak map.\n     * @param {Node} nodeRef - The reference to the current node.\n     * @return {Object<String,WeakMap>} The dictionary.\n     */\n    return (0, _createClass2.default)(NodeFrame, [{\n      key: \"_getMaps\",\n      value: function _getMaps(referenceMap, nodeRef) {\n        var maps = referenceMap.get(nodeRef);\n        if (maps === undefined) {\n          maps = {\n            renderMap: new WeakMap(),\n            frameMap: new WeakMap()\n          };\n          referenceMap.set(nodeRef, maps);\n        }\n        return maps;\n      }\n\n      /**\n       * This method executes the {@link Node#updateBefore} for the given node.\n       * It makes sure {@link Node#updateBeforeType} is honored meaning the update\n       * is only executed once per frame, render or object depending on the update\n       * type.\n       *\n       * @param {Node} node - The node that should be updated.\n       */\n    }, {\n      key: \"updateBeforeNode\",\n      value: function updateBeforeNode(node) {\n        var updateType = node.getUpdateBeforeType();\n        var reference = node.updateReference(this);\n        if (updateType === NodeUpdateType.FRAME) {\n          var _this$_getMaps = this._getMaps(this.updateBeforeMap, reference),\n            frameMap = _this$_getMaps.frameMap;\n          if (frameMap.get(reference) !== this.frameId) {\n            if (node.updateBefore(this) !== false) {\n              frameMap.set(reference, this.frameId);\n            }\n          }\n        } else if (updateType === NodeUpdateType.RENDER) {\n          var _this$_getMaps2 = this._getMaps(this.updateBeforeMap, reference),\n            renderMap = _this$_getMaps2.renderMap;\n          if (renderMap.get(reference) !== this.renderId) {\n            if (node.updateBefore(this) !== false) {\n              renderMap.set(reference, this.renderId);\n            }\n          }\n        } else if (updateType === NodeUpdateType.OBJECT) {\n          node.updateBefore(this);\n        }\n      }\n\n      /**\n       * This method executes the {@link Node#updateAfter} for the given node.\n       * It makes sure {@link Node#updateAfterType} is honored meaning the update\n       * is only executed once per frame, render or object depending on the update\n       * type.\n       *\n       * @param {Node} node - The node that should be updated.\n       */\n    }, {\n      key: \"updateAfterNode\",\n      value: function updateAfterNode(node) {\n        var updateType = node.getUpdateAfterType();\n        var reference = node.updateReference(this);\n        if (updateType === NodeUpdateType.FRAME) {\n          var _this$_getMaps3 = this._getMaps(this.updateAfterMap, reference),\n            frameMap = _this$_getMaps3.frameMap;\n          if (frameMap.get(reference) !== this.frameId) {\n            if (node.updateAfter(this) !== false) {\n              frameMap.set(reference, this.frameId);\n            }\n          }\n        } else if (updateType === NodeUpdateType.RENDER) {\n          var _this$_getMaps4 = this._getMaps(this.updateAfterMap, reference),\n            renderMap = _this$_getMaps4.renderMap;\n          if (renderMap.get(reference) !== this.renderId) {\n            if (node.updateAfter(this) !== false) {\n              renderMap.set(reference, this.renderId);\n            }\n          }\n        } else if (updateType === NodeUpdateType.OBJECT) {\n          node.updateAfter(this);\n        }\n      }\n\n      /**\n       * This method executes the {@link Node#update} for the given node.\n       * It makes sure {@link Node#updateType} is honored meaning the update\n       * is only executed once per frame, render or object depending on the update\n       * type.\n       *\n       * @param {Node} node - The node that should be updated.\n       */\n    }, {\n      key: \"updateNode\",\n      value: function updateNode(node) {\n        var updateType = node.getUpdateType();\n        var reference = node.updateReference(this);\n        if (updateType === NodeUpdateType.FRAME) {\n          var _this$_getMaps5 = this._getMaps(this.updateMap, reference),\n            frameMap = _this$_getMaps5.frameMap;\n          if (frameMap.get(reference) !== this.frameId) {\n            if (node.update(this) !== false) {\n              frameMap.set(reference, this.frameId);\n            }\n          }\n        } else if (updateType === NodeUpdateType.RENDER) {\n          var _this$_getMaps6 = this._getMaps(this.updateMap, reference),\n            renderMap = _this$_getMaps6.renderMap;\n          if (renderMap.get(reference) !== this.renderId) {\n            if (node.update(this) !== false) {\n              renderMap.set(reference, this.renderId);\n            }\n          }\n        } else if (updateType === NodeUpdateType.OBJECT) {\n          node.update(this);\n        }\n      }\n\n      /**\n       * Updates the internal state of the node frame. This method is\n       * called by the renderer in its internal animation loop.\n       */\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.frameId++;\n        if (this.lastTime === undefined) this.lastTime = performance.now();\n        this.deltaTime = (performance.now() - this.lastTime) / 1000;\n        this.lastTime = performance.now();\n        this.time += this.deltaTime;\n      }\n    }]);\n  }();\n  /**\n   * Describes the input of a {@link NodeFunction}.\n   */\n  var NodeFunctionInput = exports.NodeFunctionInput = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new node function input.\n   *\n   * @param {String} type - The input type.\n   * @param {String} name - The input name.\n   * @param {Number?} [count=null] - If the input is an Array, count will be the length.\n   * @param {('in'|'out'|'inout')} [qualifier=''] - The parameter qualifier (only relevant for GLSL).\n   * @param {Boolean} [isConst=false] - Whether the input uses a const qualifier or not (only relevant for GLSL).\n   */\n  function NodeFunctionInput(type, name) {\n    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var qualifier = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var isConst = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    (0, _classCallCheck2.default)(this, NodeFunctionInput);\n    /**\n     *  The input type.\n     *\n     * @type {String}\n     */\n    this.type = type;\n\n    /**\n     * The input name.\n     *\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * If the input is an Array, count will be the length.\n     *\n     * @type {Number?}\n     * @default null\n     */\n    this.count = count;\n\n    /**\n     *The parameter qualifier (only relevant for GLSL).\n     *\n     * @type {('in'|'out'|'inout')}\n     * @default ''\n     */\n    this.qualifier = qualifier;\n\n    /**\n     * Whether the input uses a const qualifier or not (only relevant for GLSL).\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    this.isConst = isConst;\n  });\n  NodeFunctionInput.isNodeFunctionInput = true;\n\n  /**\n   * Module for representing directional lights as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var DirectionalLightNode = exports.DirectionalLightNode = /*#__PURE__*/function (_AnalyticLightNode2) {\n    /**\n     * Constructs a new directional light node.\n     *\n     * @param {DirectionalLight?} [light=null] - The directional light source.\n     */\n    function DirectionalLightNode() {\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, DirectionalLightNode);\n      return _callSuper(this, DirectionalLightNode, [light]);\n    }\n    (0, _inherits2.default)(DirectionalLightNode, _AnalyticLightNode2);\n    return (0, _createClass2.default)(DirectionalLightNode, [{\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(DirectionalLightNode, \"setup\", this, 3)([builder]);\n        var lightingModel = builder.context.lightingModel;\n        var lightColor = this.colorNode;\n        var lightDirection = lightTargetDirection(this.light);\n        var reflectedLight = builder.context.reflectedLight;\n        lightingModel.direct({\n          lightDirection: lightDirection,\n          lightColor: lightColor,\n          reflectedLight: reflectedLight\n        }, builder.stack, builder);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'DirectionalLightNode';\n      }\n    }]);\n  }(AnalyticLightNode);\n  var _matrix41 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n  var _matrix42 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n  var _ltcLib = null;\n\n  /**\n   * Module for representing rect area lights as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var RectAreaLightNode = exports.RectAreaLightNode = /*#__PURE__*/function (_AnalyticLightNode3) {\n    /**\n     * Constructs a new rect area light node.\n     *\n     * @param {RectAreaLight?} [light=null] - The rect area light source.\n     */\n    function RectAreaLightNode() {\n      var _this185;\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, RectAreaLightNode);\n      _this185 = _callSuper(this, RectAreaLightNode, [light]);\n\n      /**\n       * Uniform node representing the half height of the are light.\n       *\n       * @type {UniformNode<vec3>}\n       */\n      _this185.halfHeight = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()).setGroup(renderGroup);\n\n      /**\n       * Uniform node representing the half width of the are light.\n       *\n       * @type {UniformNode<vec3>}\n       */\n      _this185.halfWidth = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)()).setGroup(renderGroup);\n\n      /**\n       * The `updateType` is set to `NodeUpdateType.RENDER` since the light\n       * relies on `viewMatrix` which might vary per render call.\n       *\n       * @type {String}\n       * @default 'render'\n       */\n      _this185.updateType = NodeUpdateType.RENDER;\n      return _this185;\n    }\n\n    /**\n     * Overwritten to updated rect area light specific uniforms.\n     *\n     * @param {NodeFrame} frame - A reference to the current node frame.\n     */\n    (0, _inherits2.default)(RectAreaLightNode, _AnalyticLightNode3);\n    return (0, _createClass2.default)(RectAreaLightNode, [{\n      key: \"update\",\n      value: function update(frame) {\n        _superPropGet(RectAreaLightNode, \"update\", this, 3)([frame]);\n        var light = this.light;\n        var viewMatrix = frame.camera.matrixWorldInverse;\n        _matrix42.identity();\n        _matrix41.copy(light.matrixWorld);\n        _matrix41.premultiply(viewMatrix);\n        _matrix42.extractRotation(_matrix41);\n        this.halfWidth.value.set(light.width * 0.5, 0.0, 0.0);\n        this.halfHeight.value.set(0.0, light.height * 0.5, 0.0);\n        this.halfWidth.value.applyMatrix4(_matrix42);\n        this.halfHeight.value.applyMatrix4(_matrix42);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(RectAreaLightNode, \"setup\", this, 3)([builder]);\n        var ltc_1, ltc_2;\n        if (builder.isAvailable('float32Filterable')) {\n          ltc_1 = texture(_ltcLib.LTC_FLOAT_1);\n          ltc_2 = texture(_ltcLib.LTC_FLOAT_2);\n        } else {\n          ltc_1 = texture(_ltcLib.LTC_HALF_1);\n          ltc_2 = texture(_ltcLib.LTC_HALF_2);\n        }\n        var colorNode = this.colorNode,\n          light = this.light;\n        var lightingModel = builder.context.lightingModel;\n        var lightPosition = lightViewPosition(light);\n        var reflectedLight = builder.context.reflectedLight;\n        lightingModel.directRectArea({\n          lightColor: colorNode,\n          lightPosition: lightPosition,\n          halfWidth: this.halfWidth,\n          halfHeight: this.halfHeight,\n          reflectedLight: reflectedLight,\n          ltc_1: ltc_1,\n          ltc_2: ltc_2\n        }, builder.stack, builder);\n      }\n\n      /**\n       * Used to configure the internal BRDF approximation texture data.\n       *\n       * @param {RectAreaLightTexturesLib} ltc - The BRDF approximation texture data.\n       */\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'RectAreaLightNode';\n      }\n    }, {\n      key: \"setLTC\",\n      value: function setLTC(ltc) {\n        _ltcLib = ltc;\n      }\n    }]);\n  }(AnalyticLightNode);\n  /**\n   * Module for representing spot lights as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var SpotLightNode = exports.SpotLightNode = /*#__PURE__*/function (_AnalyticLightNode4) {\n    /**\n     * Constructs a new spot light node.\n     *\n     * @param {SpotLight?} [light=null] - The spot light source.\n     */\n    function SpotLightNode() {\n      var _this186;\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, SpotLightNode);\n      _this186 = _callSuper(this, SpotLightNode, [light]);\n\n      /**\n       * Uniform node representing the cone cosine.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this186.coneCosNode = uniform(0).setGroup(renderGroup);\n\n      /**\n       * Uniform node representing the penumbra cosine.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this186.penumbraCosNode = uniform(0).setGroup(renderGroup);\n\n      /**\n       * Uniform node representing the cutoff distance.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this186.cutoffDistanceNode = uniform(0).setGroup(renderGroup);\n\n      /**\n       * Uniform node representing the decay exponent.\n       *\n       * @type {UniformNode<float>}\n       */\n      _this186.decayExponentNode = uniform(0).setGroup(renderGroup);\n      return _this186;\n    }\n\n    /**\n     * Overwritten to updated spot light specific uniforms.\n     *\n     * @param {NodeFrame} frame - A reference to the current node frame.\n     */\n    (0, _inherits2.default)(SpotLightNode, _AnalyticLightNode4);\n    return (0, _createClass2.default)(SpotLightNode, [{\n      key: \"update\",\n      value: function update(frame) {\n        _superPropGet(SpotLightNode, \"update\", this, 3)([frame]);\n        var light = this.light;\n        this.coneCosNode.value = Math.cos(light.angle);\n        this.penumbraCosNode.value = Math.cos(light.angle * (1 - light.penumbra));\n        this.cutoffDistanceNode.value = light.distance;\n        this.decayExponentNode.value = light.decay;\n      }\n\n      /**\n       * Computes the spot attenuation for the given angle.\n       *\n       * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.\n       * @return {Node<float>} The spot attenuation.\n       */\n    }, {\n      key: \"getSpotAttenuation\",\n      value: function getSpotAttenuation(angleCosine) {\n        var coneCosNode = this.coneCosNode,\n          penumbraCosNode = this.penumbraCosNode;\n        return smoothstep(coneCosNode, penumbraCosNode, angleCosine);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        _superPropGet(SpotLightNode, \"setup\", this, 3)([builder]);\n        var lightingModel = builder.context.lightingModel;\n        var colorNode = this.colorNode,\n          cutoffDistanceNode = this.cutoffDistanceNode,\n          decayExponentNode = this.decayExponentNode,\n          light = this.light;\n        var lVector = lightViewPosition(light).sub(positionView); // @TODO: Add it into LightNode\n\n        var lightDirection = lVector.normalize();\n        var angleCos = lightDirection.dot(lightTargetDirection(light));\n        var spotAttenuation = this.getSpotAttenuation(angleCos);\n        var lightDistance = lVector.length();\n        var lightAttenuation = getDistanceAttenuation({\n          lightDistance: lightDistance,\n          cutoffDistance: cutoffDistanceNode,\n          decayExponent: decayExponentNode\n        });\n        var lightColor = colorNode.mul(spotAttenuation).mul(lightAttenuation);\n        if (light.map) {\n          var spotLightCoord = lightProjectionUV(light);\n          var projectedTexture = texture(light.map, spotLightCoord.xy).onRenderUpdate(function () {\n            return light.map;\n          });\n          var inSpotLightMap = spotLightCoord.mul(2.).sub(1.).abs().lessThan(1.).all();\n          lightColor = inSpotLightMap.select(lightColor.mul(projectedTexture), lightColor);\n        }\n        var reflectedLight = builder.context.reflectedLight;\n        lightingModel.direct({\n          lightDirection: lightDirection,\n          lightColor: lightColor,\n          reflectedLight: reflectedLight\n        }, builder.stack, builder);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'SpotLightNode';\n      }\n    }]);\n  }(AnalyticLightNode);\n  /**\n   * An IES version of the default spot light node.\n   *\n   * @augments SpotLightNode\n   */\n  var IESSpotLightNode = exports.IESSpotLightNode = /*#__PURE__*/function (_SpotLightNode) {\n    function IESSpotLightNode() {\n      (0, _classCallCheck2.default)(this, IESSpotLightNode);\n      return _callSuper(this, IESSpotLightNode, arguments);\n    }\n    (0, _inherits2.default)(IESSpotLightNode, _SpotLightNode);\n    return (0, _createClass2.default)(IESSpotLightNode, [{\n      key: \"getSpotAttenuation\",\n      value:\n      /**\n       * Overwrites the default implementation to compute an IES conform spot attenuation.\n       *\n       * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.\n       * @return {Node<float>} The spot attenuation.\n       */\n      function getSpotAttenuation(angleCosine) {\n        var iesMap = this.light.iesMap;\n        var spotAttenuation = null;\n        if (iesMap && iesMap.isTexture === true) {\n          var angle = angleCosine.acos().mul(1.0 / Math.PI);\n          spotAttenuation = texture(iesMap, vec2(angle, 0), 0).r;\n        } else {\n          spotAttenuation = _superPropGet(IESSpotLightNode, \"getSpotAttenuation\", this, 3)([angleCosine]);\n        }\n        return spotAttenuation;\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'IESSpotLightNode';\n      }\n    }]);\n  }(SpotLightNode);\n  /**\n   * Module for representing ambient lights as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var AmbientLightNode = exports.AmbientLightNode = /*#__PURE__*/function (_AnalyticLightNode5) {\n    /**\n     * Constructs a new ambient light node.\n     *\n     * @param {AmbientLight?} [light=null] - The ambient light source.\n     */\n    function AmbientLightNode() {\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, AmbientLightNode);\n      return _callSuper(this, AmbientLightNode, [light]);\n    }\n    (0, _inherits2.default)(AmbientLightNode, _AnalyticLightNode5);\n    return (0, _createClass2.default)(AmbientLightNode, [{\n      key: \"setup\",\n      value: function setup(_ref336) {\n        var context = _ref336.context;\n        context.irradiance.addAssign(this.colorNode);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'AmbientLightNode';\n      }\n    }]);\n  }(AnalyticLightNode);\n  /**\n   * Module for representing hemisphere lights as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var HemisphereLightNode = exports.HemisphereLightNode = /*#__PURE__*/function (_AnalyticLightNode6) {\n    /**\n     * Constructs a new hemisphere light node.\n     *\n     * @param {HemisphereLight?} [light=null] - The hemisphere light source.\n     */\n    function HemisphereLightNode() {\n      var _this187;\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, HemisphereLightNode);\n      _this187 = _callSuper(this, HemisphereLightNode, [light]);\n\n      /**\n       * Uniform node representing the light's position.\n       *\n       * @type {UniformNode<vec3>}\n       */\n      _this187.lightPositionNode = lightPosition(light);\n\n      /**\n       * A node representing the light's direction.\n       *\n       * @type {Node<vec3>}\n       */\n      _this187.lightDirectionNode = _this187.lightPositionNode.normalize();\n\n      /**\n       * Uniform node representing the light's ground color.\n       *\n       * @type {UniformNode<vec3>}\n       */\n      _this187.groundColorNode = uniform(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Color)()).setGroup(renderGroup);\n      return _this187;\n    }\n\n    /**\n     * Overwritten to updated hemisphere light specific uniforms.\n     *\n     * @param {NodeFrame} frame - A reference to the current node frame.\n     */\n    (0, _inherits2.default)(HemisphereLightNode, _AnalyticLightNode6);\n    return (0, _createClass2.default)(HemisphereLightNode, [{\n      key: \"update\",\n      value: function update(frame) {\n        var light = this.light;\n        _superPropGet(HemisphereLightNode, \"update\", this, 3)([frame]);\n        this.lightPositionNode.object3d = light;\n        this.groundColorNode.value.copy(light.groundColor).multiplyScalar(light.intensity);\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var colorNode = this.colorNode,\n          groundColorNode = this.groundColorNode,\n          lightDirectionNode = this.lightDirectionNode;\n        var dotNL = normalView.dot(lightDirectionNode);\n        var hemiDiffuseWeight = dotNL.mul(0.5).add(0.5);\n        var irradiance = mix(groundColorNode, colorNode, hemiDiffuseWeight);\n        builder.context.irradiance.addAssign(irradiance);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'HemisphereLightNode';\n      }\n    }]);\n  }(AnalyticLightNode);\n  /**\n   * Module for representing light probes as nodes.\n   *\n   * @augments AnalyticLightNode\n   */\n  var LightProbeNode = exports.LightProbeNode = /*#__PURE__*/function (_AnalyticLightNode7) {\n    /**\n     * Constructs a new light probe node.\n     *\n     * @param {LightProbe?} [light=null] - The light probe.\n     */\n    function LightProbeNode() {\n      var _this188;\n      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, LightProbeNode);\n      _this188 = _callSuper(this, LightProbeNode, [light]);\n      var array = [];\n      for (var i = 0; i < 9; i++) array.push(new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector3)());\n\n      /**\n       * Light probe represented as a uniform of spherical harmonics.\n       *\n       * @type {UniformArrayNode}\n       */\n      _this188.lightProbe = uniformArray(array);\n      return _this188;\n    }\n\n    /**\n     * Overwritten to updated light probe specific uniforms.\n     *\n     * @param {NodeFrame} frame - A reference to the current node frame.\n     */\n    (0, _inherits2.default)(LightProbeNode, _AnalyticLightNode7);\n    return (0, _createClass2.default)(LightProbeNode, [{\n      key: \"update\",\n      value: function update(frame) {\n        var light = this.light;\n        _superPropGet(LightProbeNode, \"update\", this, 3)([frame]);\n\n        //\n\n        for (var i = 0; i < 9; i++) {\n          this.lightProbe.array[i].copy(light.sh.coefficients[i]).multiplyScalar(light.intensity);\n        }\n      }\n    }, {\n      key: \"setup\",\n      value: function setup(builder) {\n        var irradiance = getShIrradianceAt(normalWorld, this.lightProbe);\n        builder.context.irradiance.addAssign(irradiance);\n      }\n    }], [{\n      key: \"type\",\n      get: function get() {\n        return 'LightProbeNode';\n      }\n    }]);\n  }(AnalyticLightNode);\n  /**\n   * Base class for node parsers. A derived parser must be implemented\n   * for each supported native shader language.\n   */\n  var NodeParser = /*#__PURE__*/function () {\n    function NodeParser() {\n      (0, _classCallCheck2.default)(this, NodeParser);\n    }\n    return (0, _createClass2.default)(NodeParser, [{\n      key: \"parseFunction\",\n      value:\n      /**\n       * The method parses the given native code an returns a node function.\n       *\n       * @abstract\n       * @param {String} source - The native shader code.\n       * @return {NodeFunction} A node function.\n       */\n      function parseFunction(/*source*/\n      ) {\n        console.warn('Abstract function.');\n      }\n    }]);\n  }();\n  /**\n   * Base class for node functions. A derived module must be implemented\n   * for each supported native shader language. Similar to other `Node*` modules,\n   * this class is only relevant during the building process and not used\n   * in user-level code.\n   */\n  var NodeFunction = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node function.\n     *\n     * @param {String} type - The node type. This type is the return type of the node function.\n     * @param {Array<NodeFunctionInput>} inputs - The function's inputs.\n     * @param {String} [name=''] - The function's name.\n     * @param {String} [precision=''] - The precision qualifier.\n     */\n    function NodeFunction(type, inputs) {\n      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var precision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n      (0, _classCallCheck2.default)(this, NodeFunction);\n      /**\n       * The node type. This type is the return type of the node function.\n       *\n       * @type {String}\n       */\n      this.type = type;\n\n      /**\n       * The function's inputs.\n       *\n       * @type {Array<NodeFunctionInput>}\n       */\n      this.inputs = inputs;\n\n      /**\n       * The name of the uniform.\n       *\n       * @type {String}\n       * @default ''\n       */\n      this.name = name;\n\n      /**\n       * The precision qualifier.\n       *\n       * @type {String}\n       * @default ''\n       */\n      this.precision = precision;\n    }\n\n    /**\n     * This method returns the native code of the node function.\n     *\n     * @abstract\n     * @param {String} name - The function's name.\n     * @return {String} A shader code.\n     */\n    return (0, _createClass2.default)(NodeFunction, [{\n      key: \"getCode\",\n      value: function getCode(/*name = this.name*/\n      ) {\n        console.warn('Abstract function.');\n      }\n    }]);\n  }();\n  NodeFunction.isNodeFunction = true;\n  var declarationRegexp$1 = /^\\s*(highp|mediump|lowp)?\\s*([a-z_0-9]+)\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)/i;\n  var propertiesRegexp$1 = /[a-z_0-9]+/ig;\n  var pragmaMain = '#pragma main';\n  var parse$1 = function parse$1(source) {\n    source = source.trim();\n    var pragmaMainIndex = source.indexOf(pragmaMain);\n    var mainCode = pragmaMainIndex !== -1 ? source.slice(pragmaMainIndex + pragmaMain.length) : source;\n    var declaration = mainCode.match(declarationRegexp$1);\n    if (declaration !== null && declaration.length === 5) {\n      // tokenizer\n\n      var inputsCode = declaration[4];\n      var propsMatches = [];\n      var nameMatch = null;\n      while ((nameMatch = propertiesRegexp$1.exec(inputsCode)) !== null) {\n        propsMatches.push(nameMatch);\n      }\n\n      // parser\n\n      var inputs = [];\n      var i = 0;\n      while (i < propsMatches.length) {\n        var isConst = propsMatches[i][0] === 'const';\n        if (isConst === true) {\n          i++;\n        }\n        var qualifier = propsMatches[i][0];\n        if (qualifier === 'in' || qualifier === 'out' || qualifier === 'inout') {\n          i++;\n        } else {\n          qualifier = '';\n        }\n        var _type = propsMatches[i++][0];\n        var count = Number.parseInt(propsMatches[i][0]);\n        if (Number.isNaN(count) === false) i++;else count = null;\n        var _name = propsMatches[i++][0];\n        inputs.push(new NodeFunctionInput(_type, _name, count, qualifier, isConst));\n      }\n\n      //\n\n      var blockCode = mainCode.substring(declaration[0].length);\n      var name = declaration[3] !== undefined ? declaration[3] : '';\n      var type = declaration[2];\n      var precision = declaration[1] !== undefined ? declaration[1] : '';\n      var headerCode = pragmaMainIndex !== -1 ? source.slice(0, pragmaMainIndex) : '';\n      return {\n        type: type,\n        inputs: inputs,\n        name: name,\n        precision: precision,\n        inputsCode: inputsCode,\n        blockCode: blockCode,\n        headerCode: headerCode\n      };\n    } else {\n      throw new Error('FunctionNode: Function is not a GLSL code.');\n    }\n  };\n\n  /**\n   * This class represents a GLSL node function.\n   *\n   * @augments NodeFunction\n   */\n  var GLSLNodeFunction = /*#__PURE__*/function (_NodeFunction) {\n    /**\n     * Constructs a new GLSL node function.\n     *\n     * @param {String} source - The GLSL source.\n     */\n    function GLSLNodeFunction(source) {\n      var _this189;\n      (0, _classCallCheck2.default)(this, GLSLNodeFunction);\n      var _parse$ = parse$1(source),\n        type = _parse$.type,\n        inputs = _parse$.inputs,\n        name = _parse$.name,\n        precision = _parse$.precision,\n        inputsCode = _parse$.inputsCode,\n        blockCode = _parse$.blockCode,\n        headerCode = _parse$.headerCode;\n      _this189 = _callSuper(this, GLSLNodeFunction, [type, inputs, name, precision]);\n      _this189.inputsCode = inputsCode;\n      _this189.blockCode = blockCode;\n      _this189.headerCode = headerCode;\n      return _this189;\n    }\n\n    /**\n     * This method returns the GLSL code of the node function.\n     *\n     * @param {String} [name=this.name] - The function's name.\n     * @return {String} The shader code.\n     */\n    (0, _inherits2.default)(GLSLNodeFunction, _NodeFunction);\n    return (0, _createClass2.default)(GLSLNodeFunction, [{\n      key: \"getCode\",\n      value: function getCode() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.name;\n        var code;\n        var blockCode = this.blockCode;\n        if (blockCode !== '') {\n          var type = this.type,\n            inputsCode = this.inputsCode,\n            headerCode = this.headerCode,\n            precision = this.precision;\n          var declarationCode = `${type} ${name} ( ${inputsCode.trim()} )`;\n          if (precision !== '') {\n            declarationCode = `${precision} ${declarationCode}`;\n          }\n          code = headerCode + declarationCode + blockCode;\n        } else {\n          // interface function\n\n          code = '';\n        }\n        return code;\n      }\n    }]);\n  }(NodeFunction);\n  /**\n   * A GLSL node parser.\n   *\n   * @augments NodeParser\n   */\n  var GLSLNodeParser = exports.GLSLNodeParser = /*#__PURE__*/function (_NodeParser) {\n    function GLSLNodeParser() {\n      (0, _classCallCheck2.default)(this, GLSLNodeParser);\n      return _callSuper(this, GLSLNodeParser, arguments);\n    }\n    (0, _inherits2.default)(GLSLNodeParser, _NodeParser);\n    return (0, _createClass2.default)(GLSLNodeParser, [{\n      key: \"parseFunction\",\n      value:\n      /**\n       * The method parses the given GLSL code an returns a node function.\n       *\n       * @param {String} source - The GLSL code.\n       * @return {GLSLNodeFunction} A node function.\n       */\n      function parseFunction(source) {\n        return new GLSLNodeFunction(source);\n      }\n    }]);\n  }(NodeParser);\n  var _outputNodeMap = new WeakMap();\n\n  /**\n   * This renderer module manages node-related objects and is the\n   * primary interface between the renderer and the node system.\n   *\n   * @private\n   * @augments DataMap\n   */\n  var Nodes = /*#__PURE__*/function (_DataMap7) {\n    /**\n     * Constructs a new nodes management component.\n     *\n     * @param {Renderer} renderer - The renderer.\n     * @param {Backend} backend - The renderer's backend.\n     */\n    function Nodes(renderer, backend) {\n      var _this190;\n      (0, _classCallCheck2.default)(this, Nodes);\n      _this190 = _callSuper(this, Nodes);\n\n      /**\n       * The renderer.\n       *\n       * @type {Renderer}\n       */\n      _this190.renderer = renderer;\n\n      /**\n       * The renderer's backend.\n       *\n       * @type {Backend}\n       */\n      _this190.backend = backend;\n\n      /**\n       * The node frame.\n       *\n       * @type {Renderer}\n       */\n      _this190.nodeFrame = new NodeFrame();\n\n      /**\n       * A cache for managing node builder states.\n       *\n       * @type {Map<Number,NodeBuilderState>}\n       */\n      _this190.nodeBuilderCache = new Map();\n\n      /**\n       * A cache for managing data cache key data.\n       *\n       * @type {ChainMap}\n       */\n      _this190.callHashCache = new ChainMap();\n\n      /**\n       * A cache for managing node uniforms group data.\n       *\n       * @type {ChainMap}\n       */\n      _this190.groupsData = new ChainMap();\n\n      /**\n       * A cache for managing node objects of\n       * scene properties like fog or environments.\n       *\n       * @type {Object<String,WeakMap>}\n       */\n      _this190.cacheLib = {};\n      return _this190;\n    }\n\n    /**\n     * Returns `true` if the given node uniforms group must be updated or not.\n     *\n     * @param {NodeUniformsGroup} nodeUniformsGroup - The node uniforms group.\n     * @return {Boolean} Whether the node uniforms group requires an update or not.\n     */\n    (0, _inherits2.default)(Nodes, _DataMap7);\n    return (0, _createClass2.default)(Nodes, [{\n      key: \"updateGroup\",\n      value: function updateGroup(nodeUniformsGroup) {\n        var groupNode = nodeUniformsGroup.groupNode;\n        var name = groupNode.name;\n\n        // objectGroup is always updated\n\n        if (name === objectGroup.name) return true;\n\n        // renderGroup is updated once per render/compute call\n\n        if (name === renderGroup.name) {\n          var uniformsGroupData = this.get(nodeUniformsGroup);\n          var renderId = this.nodeFrame.renderId;\n          if (uniformsGroupData.renderId !== renderId) {\n            uniformsGroupData.renderId = renderId;\n            return true;\n          }\n          return false;\n        }\n\n        // frameGroup is updated once per frame\n\n        if (name === frameGroup.name) {\n          var _uniformsGroupData = this.get(nodeUniformsGroup);\n          var _frameId2 = this.nodeFrame.frameId;\n          if (_uniformsGroupData.frameId !== _frameId2) {\n            _uniformsGroupData.frameId = _frameId2;\n            return true;\n          }\n          return false;\n        }\n\n        // other groups are updated just when groupNode.needsUpdate is true\n\n        var groupChain = [groupNode, nodeUniformsGroup];\n        var groupData = this.groupsData.get(groupChain);\n        if (groupData === undefined) this.groupsData.set(groupChain, groupData = {});\n        if (groupData.version !== groupNode.version) {\n          groupData.version = groupNode.version;\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Returns the cache key for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Number} The cache key.\n       */\n    }, {\n      key: \"getForRenderCacheKey\",\n      value: function getForRenderCacheKey(renderObject) {\n        return renderObject.initialCacheKey;\n      }\n\n      /**\n       * Returns a node builder state for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {NodeBuilderState} The node builder state.\n       */\n    }, {\n      key: \"getForRender\",\n      value: function getForRender(renderObject) {\n        var renderObjectData = this.get(renderObject);\n        var nodeBuilderState = renderObjectData.nodeBuilderState;\n        if (nodeBuilderState === undefined) {\n          var nodeBuilderCache = this.nodeBuilderCache;\n          var cacheKey = this.getForRenderCacheKey(renderObject);\n          nodeBuilderState = nodeBuilderCache.get(cacheKey);\n          if (nodeBuilderState === undefined) {\n            var nodeBuilder = this.backend.createNodeBuilder(renderObject.object, this.renderer);\n            nodeBuilder.scene = renderObject.scene;\n            nodeBuilder.material = renderObject.material;\n            nodeBuilder.camera = renderObject.camera;\n            nodeBuilder.context.material = renderObject.material;\n            nodeBuilder.lightsNode = renderObject.lightsNode;\n            nodeBuilder.environmentNode = this.getEnvironmentNode(renderObject.scene);\n            nodeBuilder.fogNode = this.getFogNode(renderObject.scene);\n            nodeBuilder.clippingContext = renderObject.clippingContext;\n            nodeBuilder.build();\n            nodeBuilderState = this._createNodeBuilderState(nodeBuilder);\n            nodeBuilderCache.set(cacheKey, nodeBuilderState);\n          }\n          nodeBuilderState.usedTimes++;\n          renderObjectData.nodeBuilderState = nodeBuilderState;\n        }\n        return nodeBuilderState;\n      }\n\n      /**\n       * Deletes the given object from the internal data map\n       *\n       * @param {Any} object - The object to delete.\n       * @return {Object?} The deleted dictionary.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete(object) {\n        if (object.isRenderObject) {\n          var nodeBuilderState = this.get(object).nodeBuilderState;\n          nodeBuilderState.usedTimes--;\n          if (nodeBuilderState.usedTimes === 0) {\n            this.nodeBuilderCache.delete(this.getForRenderCacheKey(object));\n          }\n        }\n        return _superPropGet(Nodes, \"delete\", this, 3)([object]);\n      }\n\n      /**\n       * Returns a node builder state for the given compute node.\n       *\n       * @param {Node} computeNode - The compute node.\n       * @return {NodeBuilderState} The node builder state.\n       */\n    }, {\n      key: \"getForCompute\",\n      value: function getForCompute(computeNode) {\n        var computeData = this.get(computeNode);\n        var nodeBuilderState = computeData.nodeBuilderState;\n        if (nodeBuilderState === undefined) {\n          var nodeBuilder = this.backend.createNodeBuilder(computeNode, this.renderer);\n          nodeBuilder.build();\n          nodeBuilderState = this._createNodeBuilderState(nodeBuilder);\n          computeData.nodeBuilderState = nodeBuilderState;\n        }\n        return nodeBuilderState;\n      }\n\n      /**\n       * Creates a node builder state for the given node builder.\n       *\n       * @private\n       * @param {NodeBuilder} nodeBuilder - The node builder.\n       * @return {NodeBuilderState} The node builder state.\n       */\n    }, {\n      key: \"_createNodeBuilderState\",\n      value: function _createNodeBuilderState(nodeBuilder) {\n        return new NodeBuilderState(nodeBuilder.vertexShader, nodeBuilder.fragmentShader, nodeBuilder.computeShader, nodeBuilder.getAttributesArray(), nodeBuilder.getBindings(), nodeBuilder.updateNodes, nodeBuilder.updateBeforeNodes, nodeBuilder.updateAfterNodes, nodeBuilder.monitor, nodeBuilder.transforms);\n      }\n\n      /**\n       * Returns an environment node for the current configured\n       * scene environment.\n       *\n       * @param {Scene} scene - The scene.\n       * @return {Node} A node representing the current scene environment.\n       */\n    }, {\n      key: \"getEnvironmentNode\",\n      value: function getEnvironmentNode(scene) {\n        this.updateEnvironment(scene);\n        var environmentNode = null;\n        if (scene.environmentNode && scene.environmentNode.isNode) {\n          environmentNode = scene.environmentNode;\n        } else {\n          var sceneData = this.get(scene);\n          if (sceneData.environmentNode) {\n            environmentNode = sceneData.environmentNode;\n          }\n        }\n        return environmentNode;\n      }\n\n      /**\n       * Returns a background node for the current configured\n       * scene background.\n       *\n       * @param {Scene} scene - The scene.\n       * @return {Node} A node representing the current scene background.\n       */\n    }, {\n      key: \"getBackgroundNode\",\n      value: function getBackgroundNode(scene) {\n        this.updateBackground(scene);\n        var backgroundNode = null;\n        if (scene.backgroundNode && scene.backgroundNode.isNode) {\n          backgroundNode = scene.backgroundNode;\n        } else {\n          var sceneData = this.get(scene);\n          if (sceneData.backgroundNode) {\n            backgroundNode = sceneData.backgroundNode;\n          }\n        }\n        return backgroundNode;\n      }\n\n      /**\n       * Returns a fog node for the current configured scene fog.\n       *\n       * @param {Scene} scene - The scene.\n       * @return {Node} A node representing the current scene fog.\n       */\n    }, {\n      key: \"getFogNode\",\n      value: function getFogNode(scene) {\n        this.updateFog(scene);\n        return scene.fogNode || this.get(scene).fogNode || null;\n      }\n\n      /**\n       * Returns a cache key for the given scene and lights node.\n       * This key is used by `RenderObject` as a part of the dynamic\n       * cache key (a key that must be checked every time the render\n       * objects is drawn).\n       *\n       * @param {Scene} scene - The scene.\n       * @param {LightsNode} lightsNode - The lights node.\n       * @return {Number} The cache key.\n       */\n    }, {\n      key: \"getCacheKey\",\n      value: function getCacheKey(scene, lightsNode) {\n        var chain = [scene, lightsNode];\n        var callId = this.renderer.info.calls;\n        var cacheKeyData = this.callHashCache.get(chain);\n        if (cacheKeyData === undefined || cacheKeyData.callId !== callId) {\n          var environmentNode = this.getEnvironmentNode(scene);\n          var fogNode = this.getFogNode(scene);\n          var values = [];\n          if (lightsNode) values.push(lightsNode.getCacheKey(true));\n          if (environmentNode) values.push(environmentNode.getCacheKey());\n          if (fogNode) values.push(fogNode.getCacheKey());\n          values.push(this.renderer.shadowMap.enabled ? 1 : 0);\n          cacheKeyData = {\n            callId: callId,\n            cacheKey: hashArray(values)\n          };\n          this.callHashCache.set(chain, cacheKeyData);\n        }\n        return cacheKeyData.cacheKey;\n      }\n\n      /**\n       * A boolean that indicates whether tone mapping should be enabled\n       * or not.\n       *\n       * @type {Boolean}\n       */\n    }, {\n      key: \"isToneMappingState\",\n      get: function get() {\n        return this.renderer.getRenderTarget() ? false : true;\n      }\n\n      /**\n       * If a scene background is configured, this method makes sure to\n       * represent the background with a corresponding node-based implementation.\n       *\n       * @param {Scene} scene - The scene.\n       */\n    }, {\n      key: \"updateBackground\",\n      value: function updateBackground(scene) {\n        var sceneData = this.get(scene);\n        var background = scene.background;\n        if (background) {\n          var forceUpdate = scene.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 || scene.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0;\n          if (sceneData.background !== background || forceUpdate) {\n            var backgroundNode = this.getCacheNode('background', background, function () {\n              if (background.isCubeTexture === true || background.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularReflectionMapping || background.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularRefractionMapping || background.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeUVReflectionMapping) {\n                if (scene.backgroundBlurriness > 0 || background.mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeUVReflectionMapping) {\n                  return pmremTexture(background);\n                } else {\n                  var envMap;\n                  if (background.isCubeTexture === true) {\n                    envMap = cubeTexture(background);\n                  } else {\n                    envMap = texture(background);\n                  }\n                  return cubeMapNode(envMap);\n                }\n              } else if (background.isTexture === true) {\n                return texture(background, screenUV.flipY()).setUpdateMatrix(true);\n              } else if (background.isColor !== true) {\n                console.error('WebGPUNodes: Unsupported background configuration.', background);\n              }\n            }, forceUpdate);\n            sceneData.backgroundNode = backgroundNode;\n            sceneData.background = background;\n            sceneData.backgroundBlurriness = scene.backgroundBlurriness;\n          }\n        } else if (sceneData.backgroundNode) {\n          delete sceneData.backgroundNode;\n          delete sceneData.background;\n        }\n      }\n\n      /**\n       * This method is part of the caching of nodes which are used to represents the\n       * scene's background, fog or environment.\n       *\n       * @param {String} type - The type of object to cache.\n       * @param {Object} object - The object.\n       * @param {Function} callback - A callback that produces a node representation for the given object.\n       * @param {Boolean} [forceUpdate=false] - Whether an update should be enforced or not.\n       * @return {Node} The node representation.\n       */\n    }, {\n      key: \"getCacheNode\",\n      value: function getCacheNode(type, object, callback) {\n        var forceUpdate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        var nodeCache = this.cacheLib[type] || (this.cacheLib[type] = new WeakMap());\n        var node = nodeCache.get(object);\n        if (node === undefined || forceUpdate) {\n          node = callback();\n          nodeCache.set(object, node);\n        }\n        return node;\n      }\n\n      /**\n       * If a scene fog is configured, this method makes sure to\n       * represent the fog with a corresponding node-based implementation.\n       *\n       * @param {Scene} scene - The scene.\n       */\n    }, {\n      key: \"updateFog\",\n      value: function updateFog(scene) {\n        var sceneData = this.get(scene);\n        var sceneFog = scene.fog;\n        if (sceneFog) {\n          if (sceneData.fog !== sceneFog) {\n            var fogNode = this.getCacheNode('fog', sceneFog, function () {\n              if (sceneFog.isFogExp2) {\n                var _color2 = reference('color', 'color', sceneFog).setGroup(renderGroup);\n                var density = reference('density', 'float', sceneFog).setGroup(renderGroup);\n                return fog(_color2, densityFogFactor(density));\n              } else if (sceneFog.isFog) {\n                var _color3 = reference('color', 'color', sceneFog).setGroup(renderGroup);\n                var near = reference('near', 'float', sceneFog).setGroup(renderGroup);\n                var far = reference('far', 'float', sceneFog).setGroup(renderGroup);\n                return fog(_color3, rangeFogFactor(near, far));\n              } else {\n                console.error('THREE.Renderer: Unsupported fog configuration.', sceneFog);\n              }\n            });\n            sceneData.fogNode = fogNode;\n            sceneData.fog = sceneFog;\n          }\n        } else {\n          delete sceneData.fogNode;\n          delete sceneData.fog;\n        }\n      }\n\n      /**\n       * If a scene environment is configured, this method makes sure to\n       * represent the environment with a corresponding node-based implementation.\n       *\n       * @param {Scene} scene - The scene.\n       */\n    }, {\n      key: \"updateEnvironment\",\n      value: function updateEnvironment(scene) {\n        var sceneData = this.get(scene);\n        var environment = scene.environment;\n        if (environment) {\n          if (sceneData.environment !== environment) {\n            var environmentNode = this.getCacheNode('environment', environment, function () {\n              if (environment.isCubeTexture === true) {\n                return cubeTexture(environment);\n              } else if (environment.isTexture === true) {\n                return texture(environment);\n              } else {\n                console.error('Nodes: Unsupported environment configuration.', environment);\n              }\n            });\n            sceneData.environmentNode = environmentNode;\n            sceneData.environment = environment;\n          }\n        } else if (sceneData.environmentNode) {\n          delete sceneData.environmentNode;\n          delete sceneData.environment;\n        }\n      }\n    }, {\n      key: \"getNodeFrame\",\n      value: function getNodeFrame() {\n        var renderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.renderer;\n        var scene = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var camera = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var material = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n        var nodeFrame = this.nodeFrame;\n        nodeFrame.renderer = renderer;\n        nodeFrame.scene = scene;\n        nodeFrame.object = object;\n        nodeFrame.camera = camera;\n        nodeFrame.material = material;\n        return nodeFrame;\n      }\n    }, {\n      key: \"getNodeFrameForRender\",\n      value: function getNodeFrameForRender(renderObject) {\n        return this.getNodeFrame(renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material);\n      }\n\n      /**\n       * Returns the current output cache key.\n       *\n       * @return {String} The output cache key.\n       */\n    }, {\n      key: \"getOutputCacheKey\",\n      value: function getOutputCacheKey() {\n        var renderer = this.renderer;\n        return renderer.toneMapping + ',' + renderer.currentColorSpace;\n      }\n\n      /**\n       * Checks if the output configuration (tone mapping and color space) for\n       * the given target has changed.\n       *\n       * @param {Texture} outputTarget - The output target.\n       * @return {Boolean} Whether the output configuration has changed or not.\n       */\n    }, {\n      key: \"hasOutputChange\",\n      value: function hasOutputChange(outputTarget) {\n        var cacheKey = _outputNodeMap.get(outputTarget);\n        return cacheKey !== this.getOutputCacheKey();\n      }\n\n      /**\n       * Returns a node that represents the output configuration (tone mapping and\n       * color space) for the current target.\n       *\n       * @param {Texture} outputTarget - The output target.\n       * @return {Node} The output node.\n       */\n    }, {\n      key: \"getOutputNode\",\n      value: function getOutputNode(outputTarget) {\n        var renderer = this.renderer;\n        var cacheKey = this.getOutputCacheKey();\n        var output = texture(outputTarget, screenUV).renderOutput(renderer.toneMapping, renderer.currentColorSpace);\n        _outputNodeMap.set(outputTarget, cacheKey);\n        return output;\n      }\n\n      /**\n       * Triggers the call of `updateBefore()` methods\n       * for all nodes of the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateBefore\",\n      value: function updateBefore(renderObject) {\n        var nodeBuilder = renderObject.getNodeBuilderState();\n        for (var node of nodeBuilder.updateBeforeNodes) {\n          // update frame state for each node\n\n          this.getNodeFrameForRender(renderObject).updateBeforeNode(node);\n        }\n      }\n\n      /**\n       * Triggers the call of `updateAfter()` methods\n       * for all nodes of the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateAfter\",\n      value: function updateAfter(renderObject) {\n        var nodeBuilder = renderObject.getNodeBuilderState();\n        for (var node of nodeBuilder.updateAfterNodes) {\n          // update frame state for each node\n\n          this.getNodeFrameForRender(renderObject).updateAfterNode(node);\n        }\n      }\n\n      /**\n       * Triggers the call of `update()` methods\n       * for all nodes of the given compute node.\n       *\n       * @param {Node} computeNode - The compute node.\n       */\n    }, {\n      key: \"updateForCompute\",\n      value: function updateForCompute(computeNode) {\n        var nodeFrame = this.getNodeFrame();\n        var nodeBuilder = this.getForCompute(computeNode);\n        for (var node of nodeBuilder.updateNodes) {\n          nodeFrame.updateNode(node);\n        }\n      }\n\n      /**\n       * Triggers the call of `update()` methods\n       * for all nodes of the given compute node.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       */\n    }, {\n      key: \"updateForRender\",\n      value: function updateForRender(renderObject) {\n        var nodeFrame = this.getNodeFrameForRender(renderObject);\n        var nodeBuilder = renderObject.getNodeBuilderState();\n        for (var node of nodeBuilder.updateNodes) {\n          nodeFrame.updateNode(node);\n        }\n      }\n\n      /**\n       * Returns `true` if the given render object requires a refresh.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Boolean} Whether the given render object requires a refresh or not.\n       */\n    }, {\n      key: \"needsRefresh\",\n      value: function needsRefresh(renderObject) {\n        var nodeFrame = this.getNodeFrameForRender(renderObject);\n        var monitor = renderObject.getMonitor();\n        return monitor.needsRefresh(renderObject, nodeFrame);\n      }\n\n      /**\n       * Frees the intenral resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        _superPropGet(Nodes, \"dispose\", this, 3)([]);\n        this.nodeFrame = new NodeFrame();\n        this.nodeBuilderCache = new Map();\n        this.cacheLib = {};\n      }\n    }]);\n  }(DataMap);\n  var _plane = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Plane)();\n\n  /**\n   * Represents the state that is used to perform clipping via clipping planes.\n   * There is a default clipping context for each render context. When the\n   * scene holds instances of `ClippingGroup`, there will be a context for each\n   * group.\n   *\n   * @private\n   */\n  var ClippingContext = /*#__PURE__*/function () {\n    /**\n     * Constructs a new clipping context.\n     *\n     * @param {ClippingContext?} [parentContext=null] - A reference to the parent clipping context.\n     */\n    function ClippingContext() {\n      var parentContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, ClippingContext);\n      /**\n       * The clipping context's version.\n       *\n       * @type {Number}\n       * @readonly\n       */\n      this.version = 0;\n\n      /**\n       * Whether the intersection of the clipping planes is used to clip objects, rather than their union.\n       *\n       * @type {Boolean?}\n       * @default null\n       */\n      this.clipIntersection = null;\n\n      /**\n       * The clipping context's cache key.\n       *\n       * @type {String}\n       */\n      this.cacheKey = '';\n\n      /**\n       * Whether the shadow pass is active or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.shadowPass = false;\n\n      /**\n       * The view normal matrix.\n       *\n       * @type {Matrix3}\n       */\n      this.viewNormalMatrix = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix3)();\n\n      /**\n       * Internal cache for maintaining clipping contexts.\n       *\n       * @type {WeakMap<ClippingGroup,ClippingContext>}\n       */\n      this.clippingGroupContexts = new WeakMap();\n\n      /**\n       * The intersection planes.\n       *\n       * @type {Array<Vector4>}\n       */\n      this.intersectionPlanes = [];\n\n      /**\n       * The intersection planes.\n       *\n       * @type {Array<Vector4>}\n       */\n      this.unionPlanes = [];\n\n      /**\n       * The version of the clipping context's parent context.\n       *\n       * @type {Number?}\n       * @readonly\n       */\n      this.parentVersion = null;\n      if (parentContext !== null) {\n        this.viewNormalMatrix = parentContext.viewNormalMatrix;\n        this.clippingGroupContexts = parentContext.clippingGroupContexts;\n        this.shadowPass = parentContext.shadowPass;\n        this.viewMatrix = parentContext.viewMatrix;\n      }\n    }\n\n    /**\n     * Projects the given source clipping planes and writes the result into the\n     * destination array.\n     *\n     * @param {Array<Plane>} source - The source clipping planes.\n     * @param {Array<Vector4>} destination - The destination.\n     * @param {Number} offset - The offset.\n     */\n    return (0, _createClass2.default)(ClippingContext, [{\n      key: \"projectPlanes\",\n      value: function projectPlanes(source, destination, offset) {\n        var l = source.length;\n        for (var i = 0; i < l; i++) {\n          _plane.copy(source[i]).applyMatrix4(this.viewMatrix, this.viewNormalMatrix);\n          var v = destination[offset + i];\n          var normal = _plane.normal;\n          v.x = -normal.x;\n          v.y = -normal.y;\n          v.z = -normal.z;\n          v.w = _plane.constant;\n        }\n      }\n\n      /**\n       * Updates the root clipping context of a scene.\n       *\n       * @param {Scene} scene - The scene.\n       * @param {Camera} camera - The camera that is used to render the scene.\n       */\n    }, {\n      key: \"updateGlobal\",\n      value: function updateGlobal(scene, camera) {\n        this.shadowPass = scene.overrideMaterial !== null && scene.overrideMaterial.isShadowNodeMaterial;\n        this.viewMatrix = camera.matrixWorldInverse;\n        this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);\n      }\n\n      /**\n       * Updates the clipping context.\n       *\n       * @param {ClippingContext} parentContext - The parent context.\n       * @param {ClippingGroup} clippingGroup - The clipping group this context belongs to.\n       */\n    }, {\n      key: \"update\",\n      value: function update(parentContext, clippingGroup) {\n        var update = false;\n        if (parentContext.version !== this.parentVersion) {\n          this.intersectionPlanes = Array.from(parentContext.intersectionPlanes);\n          this.unionPlanes = Array.from(parentContext.unionPlanes);\n          this.parentVersion = parentContext.version;\n        }\n        if (this.clipIntersection !== clippingGroup.clipIntersection) {\n          this.clipIntersection = clippingGroup.clipIntersection;\n          if (this.clipIntersection) {\n            this.unionPlanes.length = parentContext.unionPlanes.length;\n          } else {\n            this.intersectionPlanes.length = parentContext.intersectionPlanes.length;\n          }\n        }\n        var srcClippingPlanes = clippingGroup.clippingPlanes;\n        var l = srcClippingPlanes.length;\n        var dstClippingPlanes;\n        var offset;\n        if (this.clipIntersection) {\n          dstClippingPlanes = this.intersectionPlanes;\n          offset = parentContext.intersectionPlanes.length;\n        } else {\n          dstClippingPlanes = this.unionPlanes;\n          offset = parentContext.unionPlanes.length;\n        }\n        if (dstClippingPlanes.length !== offset + l) {\n          dstClippingPlanes.length = offset + l;\n          for (var i = 0; i < l; i++) {\n            dstClippingPlanes[offset + i] = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n          }\n          update = true;\n        }\n        this.projectPlanes(srcClippingPlanes, dstClippingPlanes, offset);\n        if (update) {\n          this.version++;\n          this.cacheKey = `${this.intersectionPlanes.length}:${this.unionPlanes.length}`;\n        }\n      }\n\n      /**\n       * Returns a clipping context for the given clipping group.\n       *\n       * @param {ClippingGroup} clippingGroup - The clipping group.\n       * @return {ClippingContext} The clipping context.\n       */\n    }, {\n      key: \"getGroupContext\",\n      value: function getGroupContext(clippingGroup) {\n        if (this.shadowPass && !clippingGroup.clipShadows) return this;\n        var context = this.clippingGroupContexts.get(clippingGroup);\n        if (context === undefined) {\n          context = new ClippingContext(this);\n          this.clippingGroupContexts.set(clippingGroup, context);\n        }\n        context.update(this, clippingGroup);\n        return context;\n      }\n\n      /**\n       * The count of union clipping planes.\n       *\n       * @type {Number}\n       * @readonly\n       */\n    }, {\n      key: \"unionClippingCount\",\n      get: function get() {\n        return this.unionPlanes.length;\n      }\n    }]);\n  }();\n  /**\n   * This module is used to represent render bundles inside the renderer\n   * for further processing.\n   *\n   * @private\n   */\n  var RenderBundle = /*#__PURE__*/(0, _createClass2.default)(\n  /**\n   * Constructs a new bundle group.\n   *\n   * @param {BundleGroup} bundleGroup - The bundle group.\n   * @param {Camera} camera - The camera the bundle group is rendered with.\n   */\n  function RenderBundle(bundleGroup, camera) {\n    (0, _classCallCheck2.default)(this, RenderBundle);\n    this.bundleGroup = bundleGroup;\n    this.camera = camera;\n  });\n  /**\n   * This renderer module manages render bundles.\n   *\n   * @private\n   */\n  var RenderBundles = /*#__PURE__*/function () {\n    /**\n     * Constructs a new render bundle management component.\n     */\n    function RenderBundles() {\n      (0, _classCallCheck2.default)(this, RenderBundles);\n      /**\n       * A chain map for maintaining the render bundles.\n       *\n       * @type {ChainMap}\n       */\n      this.bundles = new ChainMap();\n    }\n\n    /**\n     * Returns a render bundle for the given bundle group and camera.\n     *\n     * @param {BundleGroup} bundleGroup - The bundle group.\n     * @param {Camera} camera - The camera the bundle group is rendered with.\n     * @return {RenderBundle} The render bundle.\n     */\n    return (0, _createClass2.default)(RenderBundles, [{\n      key: \"get\",\n      value: function get(bundleGroup, camera) {\n        var bundles = this.bundles;\n        var keys = [bundleGroup, camera];\n        var bundle = bundles.get(keys);\n        if (bundle === undefined) {\n          bundle = new RenderBundle(bundleGroup, camera);\n          bundles.set(keys, bundle);\n        }\n        return bundle;\n      }\n\n      /**\n       * Frees all internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.bundles = new ChainMap();\n      }\n    }]);\n  }();\n  /**\n   * The purpose of a node library is to assign node implementations\n   * to existing library features. In `WebGPURenderer` lights, materials\n   * which are not based on `NodeMaterial` as well as tone mapping techniques\n   * are implemented with node-based modules.\n   *\n   * @private\n   */\n  var NodeLibrary = /*#__PURE__*/function () {\n    /**\n     * Constructs a new node library.\n     */\n    function NodeLibrary() {\n      (0, _classCallCheck2.default)(this, NodeLibrary);\n      /**\n       * A weak map that maps lights to light nodes.\n       *\n       * @type {WeakMap<Light.constructor,AnalyticLightNode.constructor>}\n       */\n      this.lightNodes = new WeakMap();\n\n      /**\n       * A map that maps materials to node materials.\n       *\n       * @type {WeakMap<String,NodeMaterial.constructor>}\n       */\n      this.materialNodes = new Map();\n\n      /**\n       * A map that maps tone mapping techniques (constants)\n       * to tone mapping node functions.\n       *\n       * @type {WeakMap<Number,Function>}\n       */\n      this.toneMappingNodes = new Map();\n    }\n\n    /**\n     * Returns a matching node material instance for the given material object.\n     *\n     * This method also assigns/copies the properties of the given material object\n     * to the node material. This is done to make sure the current material\n     * configuration carries over to the node version.\n     *\n     * @param {Material} material - A material.\n     * @return {NodeMaterial} The corresponding node material.\n     */\n    return (0, _createClass2.default)(NodeLibrary, [{\n      key: \"fromMaterial\",\n      value: function fromMaterial(material) {\n        if (material.isNodeMaterial) return material;\n        var nodeMaterial = null;\n        var nodeMaterialClass = this.getMaterialNodeClass(material.type);\n        if (nodeMaterialClass !== null) {\n          nodeMaterial = new nodeMaterialClass();\n          for (var key in material) {\n            nodeMaterial[key] = material[key];\n          }\n        }\n        return nodeMaterial;\n      }\n\n      /**\n       * Adds a tone mapping node function for a tone mapping technique (constant).\n       *\n       * @param {Function} toneMappingNode - The tone mapping node function.\n       * @param {Number} toneMapping - The tone mapping.\n       */\n    }, {\n      key: \"addToneMapping\",\n      value: function addToneMapping(toneMappingNode, toneMapping) {\n        this.addType(toneMappingNode, toneMapping, this.toneMappingNodes);\n      }\n\n      /**\n       * Returns a tone mapping node function for a tone mapping technique (constant).\n       *\n       * @param {Number} toneMapping - The tone mapping.\n       * @return {Function?} The tone mapping node function. Returns `null` if no node function is found.\n       */\n    }, {\n      key: \"getToneMappingFunction\",\n      value: function getToneMappingFunction(toneMapping) {\n        return this.toneMappingNodes.get(toneMapping) || null;\n      }\n\n      /**\n       * Returns a node material class definition for a material type.\n       *\n       * @param {Sring} materialType - The material type.\n       * @return {NodeMaterial.constructor?} The node material class definition. Returns `null` if no node material is found.\n       */\n    }, {\n      key: \"getMaterialNodeClass\",\n      value: function getMaterialNodeClass(materialType) {\n        return this.materialNodes.get(materialType) || null;\n      }\n\n      /**\n       * Adds a node material class definition for a given material type.\n       *\n       * @param {NodeMaterial.constructor} materialNodeClass - The node material class definition.\n       * @param {Sring} materialClassType - The material type.\n       */\n    }, {\n      key: \"addMaterial\",\n      value: function addMaterial(materialNodeClass, materialClassType) {\n        this.addType(materialNodeClass, materialClassType, this.materialNodes);\n      }\n\n      /**\n       * Returns a light node class definition for a light class definition.\n       *\n       * @param {Light.constructor} light - The light class definition.\n       * @return {AnalyticLightNode.constructor?} The light node class definition. Returns `null` if no light node is found.\n       */\n    }, {\n      key: \"getLightNodeClass\",\n      value: function getLightNodeClass(light) {\n        return this.lightNodes.get(light) || null;\n      }\n\n      /**\n       * Adds a light node class definition for a given light class definition.\n       *\n       * @param {AnalyticLightNode.constructor} lightNodeClass - The light node class definition.\n       * @param {Light.constructor} lightClass - The light class definition.\n       */\n    }, {\n      key: \"addLight\",\n      value: function addLight(lightNodeClass, lightClass) {\n        this.addClass(lightNodeClass, lightClass, this.lightNodes);\n      }\n\n      /**\n       * Adds a node class definition for the given type to the provided type library.\n       *\n       * @param {Any} nodeClass - The node class definition.\n       * @param {String} type - The object type.\n       * @param {Map} library - The type library.\n       */\n    }, {\n      key: \"addType\",\n      value: function addType(nodeClass, type, library) {\n        if (library.has(type)) {\n          console.warn(`Redefinition of node ${type}`);\n          return;\n        }\n        if (typeof nodeClass !== 'function') throw new Error(`Node class ${nodeClass.name} is not a class.`);\n        if (typeof type === 'function' || typeof type === 'object') throw new Error(`Base class ${type} is not a class.`);\n        library.set(type, nodeClass);\n      }\n\n      /**\n       * Adds a node class definition for the given class definition to the provided type library.\n       *\n       * @param {Any} nodeClass - The node class definition.\n       * @param {Any} baseClass - The class definition.\n       * @param {WeakMap} library - The type library.\n       */\n    }, {\n      key: \"addClass\",\n      value: function addClass(nodeClass, baseClass, library) {\n        if (library.has(baseClass)) {\n          console.warn(`Redefinition of node ${baseClass.name}`);\n          return;\n        }\n        if (typeof nodeClass !== 'function') throw new Error(`Node class ${nodeClass.name} is not a class.`);\n        if (typeof baseClass !== 'function') throw new Error(`Base class ${baseClass.name} is not a class.`);\n        library.set(baseClass, nodeClass);\n      }\n    }]);\n  }();\n  var _defaultLights = /*@__PURE__*/new LightsNode();\n\n  /**\n   * This renderer module manages the lights nodes which are unique\n   * per scene and camera combination.\n   *\n   * The lights node itself is later configured in the render list\n   * with the actual lights from the scene.\n   *\n   * @private\n   * @augments ChainMap\n   */\n  var Lighting = exports.Lighting = /*#__PURE__*/function (_ChainMap) {\n    /**\n     * Constructs a lighting management component.\n     */\n    function Lighting() {\n      (0, _classCallCheck2.default)(this, Lighting);\n      return _callSuper(this, Lighting);\n    }\n\n    /**\n     * Creates a new lights node for the given array of lights.\n     *\n     * @param {Array<Light>} lights - The render object.\n     * @return {Boolean} Whether if the given render object has an initialized geometry or not.\n     */\n    (0, _inherits2.default)(Lighting, _ChainMap);\n    return (0, _createClass2.default)(Lighting, [{\n      key: \"createNode\",\n      value: function createNode() {\n        var lights = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return new LightsNode().setLights(lights);\n      }\n\n      /**\n       * Returns a lights node for the given scene and camera.\n       *\n       * @param {Scene} scene - The scene.\n       * @param {Camera} camera - The camera.\n       * @return {LightsNode} The lights node.\n       */\n    }, {\n      key: \"getNode\",\n      value: function getNode(scene, camera) {\n        // ignore post-processing\n\n        if (scene.isQuadMesh) return _defaultLights;\n\n        // tiled lighting\n\n        var keys = [scene, camera];\n        var node = this.get(keys);\n        if (node === undefined) {\n          node = this.createNode();\n          this.set(keys, node);\n        }\n        return node;\n      }\n    }]);\n  }(ChainMap);\n  /** @module Renderer **/\n  var _scene = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Scene)();\n  var _drawingBufferSize = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n  var _screen = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n  var _frustum = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Frustum)();\n  var _projScreenMatrix = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Matrix4)();\n  var _vector4 = /*@__PURE__*/new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)();\n\n  /**\n   * Base class for renderers.\n   */\n  var Renderer = /*#__PURE__*/function () {\n    /**\n     * Constructs a new renderer.\n     *\n     * @param {Backend} backend - The backend the renderer is targeting (e.g. WebGPU or WebGL 2).\n     * @param {Object} parameters - The configuration parameter.\n     * @param {Boolean} [parameters.logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n     * @param {Boolean} [parameters.alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n     * @param {Boolean} [parameters.depth=true] - Whether the default framebuffer should have a depth buffer or not.\n     * @param {Boolean} [parameters.stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n     * @param {Boolean} [parameters.antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n     * @param {Number} [parameters.samples=0] - When `antialias` is `true`, `4` samples are used by default. This parameter can set to any other integer value than 0\n     * to overwrite the default.\n     * @param {Function?} [parameters.getFallback=null] - This callback function can be used to provide a fallback backend, if the primary backend can't be targeted.\n     */\n    function Renderer(backend) {\n      var _this191 = this;\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, Renderer);\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      this.isRenderer = true;\n\n      //\n\n      var _parameters$logarithm = parameters.logarithmicDepthBuffer,\n        logarithmicDepthBuffer = _parameters$logarithm === void 0 ? false : _parameters$logarithm,\n        _parameters$alpha = parameters.alpha,\n        alpha = _parameters$alpha === void 0 ? true : _parameters$alpha,\n        _parameters$depth2 = parameters.depth,\n        depth = _parameters$depth2 === void 0 ? true : _parameters$depth2,\n        _parameters$stencil = parameters.stencil,\n        stencil = _parameters$stencil === void 0 ? false : _parameters$stencil,\n        _parameters$antialias = parameters.antialias,\n        antialias = _parameters$antialias === void 0 ? false : _parameters$antialias,\n        _parameters$samples = parameters.samples,\n        samples = _parameters$samples === void 0 ? 0 : _parameters$samples,\n        _parameters$getFallba = parameters.getFallback,\n        getFallback = _parameters$getFallba === void 0 ? null : _parameters$getFallba;\n\n      /**\n       * A reference to the canvas element the renderer is drawing to.\n       * This value of this property will automatically be created by\n       * the renderer.\n       *\n       * @type {HTMLCanvasElement|OffscreenCanvas}\n       */\n      this.domElement = backend.getDomElement();\n\n      /**\n       * A reference to the current backend.\n       *\n       * @type {Backend}\n       */\n      this.backend = backend;\n\n      /**\n       * The number of MSAA samples.\n       *\n       * @type {Number}\n       * @default 0\n       */\n      this.samples = samples || antialias === true ? 4 : 0;\n\n      /**\n       * Whether the renderer should automatically clear the current rendering target\n       * before execute a `render()` call. The target can be the canvas (default framebuffer)\n       * or the current bound render target (custom framebuffer).\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.autoClear = true;\n\n      /**\n       * When `autoClear` is set to `true`, this property defines whether the renderer\n       * should clear the color buffer.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.autoClearColor = true;\n\n      /**\n       * When `autoClear` is set to `true`, this property defines whether the renderer\n       * should clear the depth buffer.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.autoClearDepth = true;\n\n      /**\n       * When `autoClear` is set to `true`, this property defines whether the renderer\n       * should clear the stencil buffer.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.autoClearStencil = true;\n\n      /**\n       * Whether the default framebuffer should be transparent or opaque.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.alpha = alpha;\n\n      /**\n       * Whether logarithmic depth buffer is enabled or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.logarithmicDepthBuffer = logarithmicDepthBuffer;\n\n      /**\n       * Defines the output color space of the renderer.\n       *\n       * @type {String}\n       * @default SRGBColorSpace\n       */\n      this.outputColorSpace = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace;\n\n      /**\n       * Defines the tone mapping of the renderer.\n       *\n       * @type {Number}\n       * @default NoToneMapping\n       */\n      this.toneMapping = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping;\n\n      /**\n       * Defines the tone mapping exposure.\n       *\n       * @type {Number}\n       * @default 1\n       */\n      this.toneMappingExposure = 1.0;\n\n      /**\n       * Whether the renderer should sort its render lists or not.\n       *\n       * Note: Sorting is used to attempt to properly render objects that have some degree of transparency.\n       * By definition, sorting objects may not work in all cases. Depending on the needs of application,\n       * it may be necessary to turn off sorting and use other methods to deal with transparency rendering\n       * e.g. manually determining each object's rendering order.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.sortObjects = true;\n\n      /**\n       * Whether the default framebuffer should have a depth buffer or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.depth = depth;\n\n      /**\n       * Whether the default framebuffer should have a stencil buffer or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      this.stencil = stencil;\n\n      /**\n       * Holds a series of statistical information about the GPU memory\n       * and the rendering process. Useful for debugging and monitoring.\n       *\n       * @type {Boolean}\n       */\n      this.info = new Info();\n      this.nodes = {\n        modelViewMatrix: null,\n        modelNormalViewMatrix: null\n      };\n\n      /**\n       * The node library defines how certain library objects like materials, lights\n       * or tone mapping functions are mapped to node types. This is required since\n       * although instances of classes like `MeshBasicMaterial` or `PointLight` can\n       * be part of the scene graph, they are internally represented as nodes for\n       * further processing.\n       *\n       * @type {NodeLibrary}\n       */\n      this.library = new NodeLibrary();\n\n      /**\n       * A map-like data structure for managing lights.\n       *\n       * @type {Lighting}\n       */\n      this.lighting = new Lighting();\n\n      // internals\n\n      /**\n       * This callback function can be used to provide a fallback backend, if the primary backend can't be targeted.\n       *\n       * @private\n       * @type {Function}\n       */\n      this._getFallback = getFallback;\n\n      /**\n       * The renderer's pixel ration.\n       *\n       * @private\n       * @type {Number}\n       * @default 1\n       */\n      this._pixelRatio = 1;\n\n      /**\n       * The width of the renderer's default framebuffer in logical pixel unit.\n       *\n       * @private\n       * @type {Number}\n       */\n      this._width = this.domElement.width;\n\n      /**\n       * The height of the renderer's default framebuffer in logical pixel unit.\n       *\n       * @private\n       * @type {Number}\n       */\n      this._height = this.domElement.height;\n\n      /**\n       * The viewport of the renderer in logical pixel unit.\n       *\n       * @private\n       * @type {Vector4}\n       */\n      this._viewport = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)(0, 0, this._width, this._height);\n\n      /**\n       * The scissor rectangle of the renderer in logical pixel unit.\n       *\n       * @private\n       * @type {Vector4}\n       */\n      this._scissor = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector4)(0, 0, this._width, this._height);\n\n      /**\n       * Whether the scissor test should be enabled or not.\n       *\n       * @private\n       * @type {Vector4}\n       */\n      this._scissorTest = false;\n\n      /**\n       * A reference to a renderer module for managing shader attributes.\n       *\n       * @private\n       * @type {Attributes?}\n       * @default null\n       */\n      this._attributes = null;\n\n      /**\n       * A reference to a renderer module for managing geometries.\n       *\n       * @private\n       * @type {Geometries?}\n       * @default null\n       */\n      this._geometries = null;\n\n      /**\n       * A reference to a renderer module for managing node related logic.\n       *\n       * @private\n       * @type {Nodes?}\n       * @default null\n       */\n      this._nodes = null;\n\n      /**\n       * A reference to a renderer module for managing the internal animation loop.\n       *\n       * @private\n       * @type {Animation?}\n       * @default null\n       */\n      this._animation = null;\n\n      /**\n       * A reference to a renderer module for managing shader program bindings.\n       *\n       * @private\n       * @type {Bindings?}\n       * @default null\n       */\n      this._bindings = null;\n\n      /**\n       * A reference to a renderer module for managing render objects.\n       *\n       * @private\n       * @type {RenderObjects?}\n       * @default null\n       */\n      this._objects = null;\n\n      /**\n       * A reference to a renderer module for managing render and cmopute pipelines.\n       *\n       * @private\n       * @type {Pipelines?}\n       * @default null\n       */\n      this._pipelines = null;\n\n      /**\n       * A reference to a renderer module for managing render bundles.\n       *\n       * @private\n       * @type {RenderBundles?}\n       * @default null\n       */\n      this._bundles = null;\n\n      /**\n       * A reference to a renderer module for managing render lists.\n       *\n       * @private\n       * @type {RenderLists?}\n       * @default null\n       */\n      this._renderLists = null;\n\n      /**\n       * A reference to a renderer module for managing render contexts.\n       *\n       * @private\n       * @type {RenderContexts?}\n       * @default null\n       */\n      this._renderContexts = null;\n\n      /**\n       * A reference to a renderer module for managing textures.\n       *\n       * @private\n       * @type {Textures?}\n       * @default null\n       */\n      this._textures = null;\n\n      /**\n       * A reference to a renderer module for backgrounds.\n       *\n       * @private\n       * @type {Background?}\n       * @default null\n       */\n      this._background = null;\n\n      /**\n       * This fullscreen quad is used for internal render passes\n       * like the tone mapping and color space output pass.\n       *\n       * @private\n       * @type {QuadMesh}\n       */\n      this._quad = new QuadMesh(new NodeMaterial());\n      this._quad.material.name = 'Renderer_output';\n\n      /**\n       * A reference to the current render context.\n       *\n       * @private\n       * @type {RenderContext?}\n       * @default null\n       */\n      this._currentRenderContext = null;\n\n      /**\n       * A custom sort function for the opaque render list.\n       *\n       * @private\n       * @type {Function?}\n       * @default null\n       */\n      this._opaqueSort = null;\n\n      /**\n       * A custom sort function for the transparent render list.\n       *\n       * @private\n       * @type {Function?}\n       * @default null\n       */\n      this._transparentSort = null;\n\n      /**\n       * The framebuffer target.\n       *\n       * @private\n       * @type {RenderTarget?}\n       * @default null\n       */\n      this._frameBufferTarget = null;\n      var alphaClear = this.alpha === true ? 0 : 1;\n\n      /**\n       * The clear color value.\n       *\n       * @private\n       * @type {Color4}\n       */\n      this._clearColor = new Color4(0, 0, 0, alphaClear);\n\n      /**\n       * The clear depth value.\n       *\n       * @private\n       * @type {Number}\n       * @default 1\n       */\n      this._clearDepth = 1;\n\n      /**\n       * The clear stencil value.\n       *\n       * @private\n       * @type {Number}\n       * @default 0\n       */\n      this._clearStencil = 0;\n\n      /**\n       * The current render target.\n       *\n       * @private\n       * @type {RenderTarget?}\n       * @default null\n       */\n      this._renderTarget = null;\n\n      /**\n       * The active cube face.\n       *\n       * @private\n       * @type {Number}\n       * @default 0\n       */\n      this._activeCubeFace = 0;\n\n      /**\n       * The active mipmap level.\n       *\n       * @private\n       * @type {Number}\n       * @default 0\n       */\n      this._activeMipmapLevel = 0;\n\n      /**\n       * The MRT setting.\n       *\n       * @private\n       * @type {MRTNode?}\n       * @default null\n       */\n      this._mrt = null;\n\n      /**\n       * This function defines how a render object is going\n       * to be rendered.\n       *\n       * @private\n       * @type {Function?}\n       * @default null\n       */\n      this._renderObjectFunction = null;\n\n      /**\n       * Used to keep track of the current render object function.\n       *\n       * @private\n       * @type {Function?}\n       * @default null\n       */\n      this._currentRenderObjectFunction = null;\n\n      /**\n       * Used to keep track of the current render bundle.\n       *\n       * @private\n       * @type {RenderBundle?}\n       * @default null\n       */\n      this._currentRenderBundle = null;\n\n      /**\n       * Next to `_renderObjectFunction()`, this function provides another hook\n       * for influening the render process of a render object. It is meant for internal\n       * use and only relevant for `compileAsync()` right now. Instead of using\n       * the default logic of `_renderObjectDirect()` which actually draws the render object,\n       * a different function might be used which performs no draw but just the node\n       * and pipeline updates.\n       *\n       * @private\n       * @type {Function?}\n       * @default null\n       */\n      this._handleObjectFunction = this._renderObjectDirect;\n\n      /**\n       * Indicates whether the device has been lost or not. In WebGL terms, the device\n       * lost is considered as a context lost. When this is set to `true`, rendering\n       * isn't possible anymore.\n       *\n       * @private\n       * @type {Boolean}\n       * @default false\n       */\n      this._isDeviceLost = false;\n\n      /**\n       * A callback function that defines what should happen when a device/context lost occurs.\n       *\n       * @type {Function}\n       */\n      this.onDeviceLost = this._onDeviceLost;\n\n      /**\n       * Whether the renderer has been initialized or not.\n       *\n       * @private\n       * @type {Boolean}\n       * @default false\n       */\n      this._initialized = false;\n\n      /**\n       * A reference to the promise which initializes the renderer.\n       *\n       * @private\n       * @type {Promise?}\n       * @default null\n       */\n      this._initPromise = null;\n\n      /**\n       * An array of compilation promises which are used in `compileAsync()`.\n       *\n       * @private\n       * @type {Array<Promise>?}\n       * @default null\n       */\n      this._compilationPromises = null;\n\n      /**\n       * Whether the renderer should render transparent render objects or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.transparent = true;\n\n      /**\n       * Whether the renderer should render opaque render objects or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      this.opaque = true;\n\n      /**\n       * Shadow map configuration\n       * @typedef {Object} ShadowMapConfig\n       * @property {Boolean} enabled - Whether to globally enable shadows or not.\n       * @property {Number} type - The shadow map type.\n       */\n\n      /**\n       * The renderer's shadow configuration.\n       *\n       * @type {module:Renderer~ShadowMapConfig}\n       */\n      this.shadowMap = {\n        enabled: false,\n        type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PCFShadowMap\n      };\n\n      /**\n       * XR configuration.\n       * @typedef {Object} XRConfig\n       * @property {Boolean} enabled - Whether to globally enable XR or not.\n       */\n\n      /**\n       * The renderer's XR configuration.\n       *\n       * @type {module:Renderer~XRConfig}\n       */\n      this.xr = {\n        enabled: false\n      };\n\n      /**\n       * Debug configuration.\n       * @typedef {Object} DebugConfig\n       * @property {Boolean} checkShaderErrors - Whether shader errors should be checked or not.\n       * @property {Function} onShaderError - A callback function that is executed when a shader error happens. Only supported with WebGL 2 right now.\n       * @property {Function} getShaderAsync - Allows the get the raw shader code for the given scene, camerea and 3D object.\n       */\n\n      /**\n       * The renderer's debug configuration.\n       *\n       * @type {module:Renderer~DebugConfig}\n       */\n      this.debug = {\n        checkShaderErrors: true,\n        onShaderError: null,\n        getShaderAsync: function () {\n          var _getShaderAsync = (0, _asyncToGenerator2.default)(function* (scene, camera, object) {\n            yield _this191.compileAsync(scene, camera);\n            var renderList = _this191._renderLists.get(scene, camera);\n            var renderContext = _this191._renderContexts.get(scene, camera, _this191._renderTarget);\n            var material = scene.overrideMaterial || object.material;\n            var renderObject = _this191._objects.get(object, material, scene, camera, renderList.lightsNode, renderContext, renderContext.clippingContext);\n            var _renderObject$getNode = renderObject.getNodeBuilderState(),\n              fragmentShader = _renderObject$getNode.fragmentShader,\n              vertexShader = _renderObject$getNode.vertexShader;\n            return {\n              fragmentShader: fragmentShader,\n              vertexShader: vertexShader\n            };\n          });\n          function getShaderAsync(_x8, _x9, _x10) {\n            return _getShaderAsync.apply(this, arguments);\n          }\n          return getShaderAsync;\n        }()\n      };\n    }\n\n    /**\n     * Initializes the renderer so it is ready for usage.\n     *\n     * @async\n     * @return {Promise} A Promise that resolves when the renderer has been initialized.\n     */\n    return (0, _createClass2.default)(Renderer, [{\n      key: \"init\",\n      value: (function () {\n        var _init2 = (0, _asyncToGenerator2.default)(function* () {\n          var _this192 = this;\n          if (this._initialized) {\n            throw new Error('Renderer: Backend has already been initialized.');\n          }\n          if (this._initPromise !== null) {\n            return this._initPromise;\n          }\n          this._initPromise = new Promise(/*#__PURE__*/function () {\n            var _ref337 = (0, _asyncToGenerator2.default)(function* (resolve, reject) {\n              var backend = _this192.backend;\n              try {\n                yield backend.init(_this192);\n              } catch (error) {\n                if (_this192._getFallback !== null) {\n                  // try the fallback\n\n                  try {\n                    _this192.backend = backend = _this192._getFallback(error);\n                    yield backend.init(_this192);\n                  } catch (error) {\n                    reject(error);\n                    return;\n                  }\n                } else {\n                  reject(error);\n                  return;\n                }\n              }\n              _this192._nodes = new Nodes(_this192, backend);\n              _this192._animation = new Animation(_this192._nodes, _this192.info);\n              _this192._attributes = new Attributes(backend);\n              _this192._background = new Background(_this192, _this192._nodes);\n              _this192._geometries = new Geometries(_this192._attributes, _this192.info);\n              _this192._textures = new Textures(_this192, backend, _this192.info);\n              _this192._pipelines = new Pipelines(backend, _this192._nodes);\n              _this192._bindings = new Bindings(backend, _this192._nodes, _this192._textures, _this192._attributes, _this192._pipelines, _this192.info);\n              _this192._objects = new RenderObjects(_this192, _this192._nodes, _this192._geometries, _this192._pipelines, _this192._bindings, _this192.info);\n              _this192._renderLists = new RenderLists(_this192.lighting);\n              _this192._bundles = new RenderBundles();\n              _this192._renderContexts = new RenderContexts();\n\n              //\n\n              _this192._animation.start();\n              _this192._initialized = true;\n              resolve();\n            });\n            return function (_x11, _x12) {\n              return _ref337.apply(this, arguments);\n            };\n          }());\n          return this._initPromise;\n        });\n        function init() {\n          return _init2.apply(this, arguments);\n        }\n        return init;\n      }()\n      /**\n       * The coordinate system of the renderer. The value of this property\n       * depends on the selected backend. Either `THREE.WebGLCoordinateSystem` or\n       * `THREE.WebGPUCoordinateSystem`.\n       *\n       * @readonly\n       * @type {Number}\n       */\n      )\n    }, {\n      key: \"coordinateSystem\",\n      get: function get() {\n        return this.backend.coordinateSystem;\n      }\n\n      /**\n       * Compiles all materials in the given scene. This can be useful to avoid a\n       * phenomenon which is called \"shader compilation stutter\", which occurs when\n       * rendering an object with a new shader for the first time.\n       *\n       * If you want to add a 3D object to an existing scene, use the third optional\n       * parameter for applying the target scene. Note that the (target) scene's lighting\n       * and environment must be configured before calling this method.\n       *\n       * @async\n       * @param {Object3D} scene - The scene or 3D object to precompile.\n       * @param {Camera} camera - The camera that is used to render the scene.\n       * @param {Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.\n       * @return {Promise} A Promise that resolves when the compile has been finished.\n       */\n    }, {\n      key: \"compileAsync\",\n      value: (function () {\n        var _compileAsync = (0, _asyncToGenerator2.default)(function* (scene, camera) {\n          var targetScene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          if (this._isDeviceLost === true) return;\n          if (this._initialized === false) yield this.init();\n\n          // preserve render tree\n\n          var nodeFrame = this._nodes.nodeFrame;\n          var previousRenderId = nodeFrame.renderId;\n          var previousRenderContext = this._currentRenderContext;\n          var previousRenderObjectFunction = this._currentRenderObjectFunction;\n          var previousCompilationPromises = this._compilationPromises;\n\n          //\n\n          var sceneRef = scene.isScene === true ? scene : _scene;\n          if (targetScene === null) targetScene = scene;\n          var renderTarget = this._renderTarget;\n          var renderContext = this._renderContexts.get(targetScene, camera, renderTarget);\n          var activeMipmapLevel = this._activeMipmapLevel;\n          var compilationPromises = [];\n          this._currentRenderContext = renderContext;\n          this._currentRenderObjectFunction = this.renderObject;\n          this._handleObjectFunction = this._createObjectPipeline;\n          this._compilationPromises = compilationPromises;\n          nodeFrame.renderId++;\n\n          //\n\n          nodeFrame.update();\n\n          //\n\n          renderContext.depth = this.depth;\n          renderContext.stencil = this.stencil;\n          if (!renderContext.clippingContext) renderContext.clippingContext = new ClippingContext();\n          renderContext.clippingContext.updateGlobal(sceneRef, camera);\n\n          //\n\n          sceneRef.onBeforeRender(this, scene, camera, renderTarget);\n\n          //\n\n          var renderList = this._renderLists.get(scene, camera);\n          renderList.begin();\n          this._projectObject(scene, camera, 0, renderList, renderContext.clippingContext);\n\n          // include lights from target scene\n          if (targetScene !== scene) {\n            targetScene.traverseVisible(function (object) {\n              if (object.isLight && object.layers.test(camera.layers)) {\n                renderList.pushLight(object);\n              }\n            });\n          }\n          renderList.finish();\n\n          //\n\n          if (renderTarget !== null) {\n            this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);\n            var renderTargetData = this._textures.get(renderTarget);\n            renderContext.textures = renderTargetData.textures;\n            renderContext.depthTexture = renderTargetData.depthTexture;\n          } else {\n            renderContext.textures = null;\n            renderContext.depthTexture = null;\n          }\n\n          //\n\n          this._background.update(sceneRef, renderList, renderContext);\n\n          // process render lists\n\n          var opaqueObjects = renderList.opaque;\n          var transparentObjects = renderList.transparent;\n          var transparentDoublePassObjects = renderList.transparentDoublePass;\n          var lightsNode = renderList.lightsNode;\n          if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, sceneRef, lightsNode);\n          if (this.transparent === true && transparentObjects.length > 0) this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode);\n\n          // restore render tree\n\n          nodeFrame.renderId = previousRenderId;\n          this._currentRenderContext = previousRenderContext;\n          this._currentRenderObjectFunction = previousRenderObjectFunction;\n          this._compilationPromises = previousCompilationPromises;\n          this._handleObjectFunction = this._renderObjectDirect;\n\n          // wait for all promises setup by backends awaiting compilation/linking/pipeline creation to complete\n\n          yield Promise.all(compilationPromises);\n        });\n        function compileAsync(_x13, _x14) {\n          return _compileAsync.apply(this, arguments);\n        }\n        return compileAsync;\n      }()\n      /**\n       * Renders the scene in an async fashion.\n       *\n       * @async\n       * @param {Object3D} scene - The scene or 3D object to render.\n       * @param {Camera} camera - The camera.\n       * @return {Promise} A Promise that resolves when the render has been finished.\n       */\n      )\n    }, {\n      key: \"renderAsync\",\n      value: (function () {\n        var _renderAsync2 = (0, _asyncToGenerator2.default)(function* (scene, camera) {\n          if (this._initialized === false) yield this.init();\n          var renderContext = this._renderScene(scene, camera);\n          yield this.backend.resolveTimestampAsync(renderContext, 'render');\n        });\n        function renderAsync(_x15, _x16) {\n          return _renderAsync2.apply(this, arguments);\n        }\n        return renderAsync;\n      }()\n      /**\n       * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n       * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when synchronization has been finished.\n       */\n      )\n    }, {\n      key: \"waitForGPU\",\n      value: (function () {\n        var _waitForGPU = (0, _asyncToGenerator2.default)(function* () {\n          yield this.backend.waitForGPU();\n        });\n        function waitForGPU() {\n          return _waitForGPU.apply(this, arguments);\n        }\n        return waitForGPU;\n      }()\n      /**\n       * Sets the given MRT configuration.\n       *\n       * @param {MRTNode} mrt - The MRT node to set.\n       * @return {Renderer} A reference to this renderer.\n       */\n      )\n    }, {\n      key: \"setMRT\",\n      value: function setMRT(mrt) {\n        this._mrt = mrt;\n        return this;\n      }\n\n      /**\n       * Returns the MRT configuration.\n       *\n       * @return {MRTNode} The MRT configuration.\n       */\n    }, {\n      key: \"getMRT\",\n      value: function getMRT() {\n        return this._mrt;\n      }\n\n      /**\n       * Default implementation of the device lost callback.\n       *\n       * @private\n       * @param {Object} info - Information about the context lost.\n       */\n    }, {\n      key: \"_onDeviceLost\",\n      value: function _onDeviceLost(info) {\n        var errorMessage = `THREE.WebGPURenderer: ${info.api} Device Lost:\\n\\nMessage: ${info.message}`;\n        if (info.reason) {\n          errorMessage += `\\nReason: ${info.reason}`;\n        }\n        console.error(errorMessage);\n        this._isDeviceLost = true;\n      }\n\n      /**\n       * Renders the given render bundle.\n       *\n       * @private\n       * @param {Object} bundle - Render bundle data.\n       * @param {Scene} sceneRef - The scene the render bundle belongs to.\n       * @param {LightsNode} lightsNode - The current lights node.\n       */\n    }, {\n      key: \"_renderBundle\",\n      value: function _renderBundle(bundle, sceneRef, lightsNode) {\n        var bundleGroup = bundle.bundleGroup,\n          camera = bundle.camera,\n          renderList = bundle.renderList;\n        var renderContext = this._currentRenderContext;\n\n        //\n\n        var renderBundle = this._bundles.get(bundleGroup, camera);\n        var renderBundleData = this.backend.get(renderBundle);\n        if (renderBundleData.renderContexts === undefined) renderBundleData.renderContexts = new Set();\n\n        //\n\n        var needsUpdate = bundleGroup.version !== renderBundleData.version;\n        var renderBundleNeedsUpdate = renderBundleData.renderContexts.has(renderContext) === false || needsUpdate;\n        renderBundleData.renderContexts.add(renderContext);\n        if (renderBundleNeedsUpdate) {\n          this.backend.beginBundle(renderContext);\n          if (renderBundleData.renderObjects === undefined || needsUpdate) {\n            renderBundleData.renderObjects = [];\n          }\n          this._currentRenderBundle = renderBundle;\n          var opaqueObjects = renderList.opaque;\n          if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, sceneRef, lightsNode);\n          this._currentRenderBundle = null;\n\n          //\n\n          this.backend.finishBundle(renderContext, renderBundle);\n          renderBundleData.version = bundleGroup.version;\n        } else {\n          var renderObjects = renderBundleData.renderObjects;\n          for (var i = 0, l = renderObjects.length; i < l; i++) {\n            var renderObject = renderObjects[i];\n            if (this._nodes.needsRefresh(renderObject)) {\n              this._nodes.updateBefore(renderObject);\n              this._nodes.updateForRender(renderObject);\n              this._bindings.updateForRender(renderObject);\n              this._nodes.updateAfter(renderObject);\n            }\n          }\n        }\n        this.backend.addBundle(renderContext, renderBundle);\n      }\n\n      /**\n       * Renders the scene or 3D object with the given camera. This method can only be called\n       * if the renderer has been initialized.\n       *\n       * The target of the method is the default framebuffer (meaning the canvas)\n       * or alternatively a render target when specified via `setRenderTarget()`.\n       *\n       * @param {Object3D} scene - The scene or 3D object to render.\n       * @param {Camera} camera - The camera to render the scene with.\n       * @return {Promise?} A Promise that resolve when the scene has been rendered.\n       * Only returned when the renderer has not been initialized.\n       */\n    }, {\n      key: \"render\",\n      value: function render(scene, camera) {\n        if (this._initialized === false) {\n          console.warn('THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.');\n          return this.renderAsync(scene, camera);\n        }\n        this._renderScene(scene, camera);\n      }\n\n      /**\n       * Returns an internal render target which is used when computing the output tone mapping\n       * and color space conversion. Unlike in `WebGLRenderer`, this is done in a separate render\n       * pass and not inline to achieve more correct results.\n       *\n       * @private\n       * @return {RenderTarget?} The render target. The method returns `null` if no output conversion should be applied.\n       */\n    }, {\n      key: \"_getFrameBufferTarget\",\n      value: function _getFrameBufferTarget() {\n        var currentToneMapping = this.currentToneMapping,\n          currentColorSpace = this.currentColorSpace;\n        var useToneMapping = currentToneMapping !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping;\n        var useColorSpace = currentColorSpace !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace;\n        if (useToneMapping === false && useColorSpace === false) return null;\n        var _this$getDrawingBuffe = this.getDrawingBufferSize(_drawingBufferSize),\n          width = _this$getDrawingBuffe.width,\n          height = _this$getDrawingBuffe.height;\n        var depth = this.depth,\n          stencil = this.stencil;\n        var frameBufferTarget = this._frameBufferTarget;\n        if (frameBufferTarget === null) {\n          frameBufferTarget = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RenderTarget)(width, height, {\n            depthBuffer: depth,\n            stencilBuffer: stencil,\n            type: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType,\n            // FloatType\n            format: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat,\n            colorSpace: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace,\n            generateMipmaps: false,\n            minFilter: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter,\n            magFilter: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter,\n            samples: this.samples\n          });\n          frameBufferTarget.isPostProcessingRenderTarget = true;\n          this._frameBufferTarget = frameBufferTarget;\n        }\n        frameBufferTarget.depthBuffer = depth;\n        frameBufferTarget.stencilBuffer = stencil;\n        frameBufferTarget.setSize(width, height);\n        frameBufferTarget.viewport.copy(this._viewport);\n        frameBufferTarget.scissor.copy(this._scissor);\n        frameBufferTarget.viewport.multiplyScalar(this._pixelRatio);\n        frameBufferTarget.scissor.multiplyScalar(this._pixelRatio);\n        frameBufferTarget.scissorTest = this._scissorTest;\n        return frameBufferTarget;\n      }\n\n      /**\n       * Renders the scene or 3D object with the given camera.\n       *\n       * @private\n       * @param {Object3D} scene - The scene or 3D object to render.\n       * @param {Camera} camera - The camera to render the scene with.\n       * @param {Boolean} [useFrameBufferTarget=true] - Whether to use a framebuffer target or not.\n       * @return {RenderContext} The current render context.\n       */\n    }, {\n      key: \"_renderScene\",\n      value: function _renderScene(scene, camera) {\n        var useFrameBufferTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        if (this._isDeviceLost === true) return;\n        var frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;\n\n        // preserve render tree\n\n        var nodeFrame = this._nodes.nodeFrame;\n        var previousRenderId = nodeFrame.renderId;\n        var previousRenderContext = this._currentRenderContext;\n        var previousRenderObjectFunction = this._currentRenderObjectFunction;\n\n        //\n\n        var sceneRef = scene.isScene === true ? scene : _scene;\n        var outputRenderTarget = this._renderTarget;\n        var activeCubeFace = this._activeCubeFace;\n        var activeMipmapLevel = this._activeMipmapLevel;\n\n        //\n\n        var renderTarget;\n        if (frameBufferTarget !== null) {\n          renderTarget = frameBufferTarget;\n          this.setRenderTarget(renderTarget);\n        } else {\n          renderTarget = outputRenderTarget;\n        }\n\n        //\n\n        var renderContext = this._renderContexts.get(scene, camera, renderTarget);\n        this._currentRenderContext = renderContext;\n        this._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;\n\n        //\n\n        this.info.calls++;\n        this.info.render.calls++;\n        this.info.render.frameCalls++;\n        nodeFrame.renderId = this.info.calls;\n\n        //\n\n        var coordinateSystem = this.coordinateSystem;\n        if (camera.coordinateSystem !== coordinateSystem) {\n          camera.coordinateSystem = coordinateSystem;\n          camera.updateProjectionMatrix();\n        }\n\n        //\n\n        if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n        if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n\n        //\n\n        var viewport = this._viewport;\n        var scissor = this._scissor;\n        var pixelRatio = this._pixelRatio;\n        if (renderTarget !== null) {\n          viewport = renderTarget.viewport;\n          scissor = renderTarget.scissor;\n          pixelRatio = 1;\n        }\n        this.getDrawingBufferSize(_drawingBufferSize);\n        _screen.set(0, 0, _drawingBufferSize.width, _drawingBufferSize.height);\n        var minDepth = viewport.minDepth === undefined ? 0 : viewport.minDepth;\n        var maxDepth = viewport.maxDepth === undefined ? 1 : viewport.maxDepth;\n        renderContext.viewportValue.copy(viewport).multiplyScalar(pixelRatio).floor();\n        renderContext.viewportValue.width >>= activeMipmapLevel;\n        renderContext.viewportValue.height >>= activeMipmapLevel;\n        renderContext.viewportValue.minDepth = minDepth;\n        renderContext.viewportValue.maxDepth = maxDepth;\n        renderContext.viewport = renderContext.viewportValue.equals(_screen) === false;\n        renderContext.scissorValue.copy(scissor).multiplyScalar(pixelRatio).floor();\n        renderContext.scissor = this._scissorTest && renderContext.scissorValue.equals(_screen) === false;\n        renderContext.scissorValue.width >>= activeMipmapLevel;\n        renderContext.scissorValue.height >>= activeMipmapLevel;\n        if (!renderContext.clippingContext) renderContext.clippingContext = new ClippingContext();\n        renderContext.clippingContext.updateGlobal(sceneRef, camera);\n\n        //\n\n        sceneRef.onBeforeRender(this, scene, camera, renderTarget);\n\n        //\n\n        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        _frustum.setFromProjectionMatrix(_projScreenMatrix, coordinateSystem);\n        var renderList = this._renderLists.get(scene, camera);\n        renderList.begin();\n        this._projectObject(scene, camera, 0, renderList, renderContext.clippingContext);\n        renderList.finish();\n        if (this.sortObjects === true) {\n          renderList.sort(this._opaqueSort, this._transparentSort);\n        }\n\n        //\n\n        if (renderTarget !== null) {\n          this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);\n          var renderTargetData = this._textures.get(renderTarget);\n          renderContext.textures = renderTargetData.textures;\n          renderContext.depthTexture = renderTargetData.depthTexture;\n          renderContext.width = renderTargetData.width;\n          renderContext.height = renderTargetData.height;\n          renderContext.renderTarget = renderTarget;\n          renderContext.depth = renderTarget.depthBuffer;\n          renderContext.stencil = renderTarget.stencilBuffer;\n        } else {\n          renderContext.textures = null;\n          renderContext.depthTexture = null;\n          renderContext.width = this.domElement.width;\n          renderContext.height = this.domElement.height;\n          renderContext.depth = this.depth;\n          renderContext.stencil = this.stencil;\n        }\n        renderContext.width >>= activeMipmapLevel;\n        renderContext.height >>= activeMipmapLevel;\n        renderContext.activeCubeFace = activeCubeFace;\n        renderContext.activeMipmapLevel = activeMipmapLevel;\n        renderContext.occlusionQueryCount = renderList.occlusionQueryCount;\n\n        //\n\n        this._background.update(sceneRef, renderList, renderContext);\n\n        //\n\n        this.backend.beginRender(renderContext);\n\n        // process render lists\n\n        var bundles = renderList.bundles,\n          lightsNode = renderList.lightsNode,\n          transparentDoublePassObjects = renderList.transparentDoublePass,\n          transparentObjects = renderList.transparent,\n          opaqueObjects = renderList.opaque;\n        if (bundles.length > 0) this._renderBundles(bundles, sceneRef, lightsNode);\n        if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, sceneRef, lightsNode);\n        if (this.transparent === true && transparentObjects.length > 0) this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode);\n\n        // finish render pass\n\n        this.backend.finishRender(renderContext);\n\n        // restore render tree\n\n        nodeFrame.renderId = previousRenderId;\n        this._currentRenderContext = previousRenderContext;\n        this._currentRenderObjectFunction = previousRenderObjectFunction;\n\n        //\n\n        if (frameBufferTarget !== null) {\n          this.setRenderTarget(outputRenderTarget, activeCubeFace, activeMipmapLevel);\n          var quad = this._quad;\n          if (this._nodes.hasOutputChange(renderTarget.texture)) {\n            quad.material.fragmentNode = this._nodes.getOutputNode(renderTarget.texture);\n            quad.material.needsUpdate = true;\n          }\n          this._renderScene(quad, quad.camera, false);\n        }\n\n        //\n\n        sceneRef.onAfterRender(this, scene, camera, renderTarget);\n\n        //\n\n        return renderContext;\n      }\n\n      /**\n       * Returns the maximum available anisotropy for texture filtering.\n       *\n       * @return {Number} The maximum available anisotropy.\n       */\n    }, {\n      key: \"getMaxAnisotropy\",\n      value: function getMaxAnisotropy() {\n        return this.backend.getMaxAnisotropy();\n      }\n\n      /**\n       * Returns the active cube face.\n       *\n       * @return {Number} The active cube face.\n       */\n    }, {\n      key: \"getActiveCubeFace\",\n      value: function getActiveCubeFace() {\n        return this._activeCubeFace;\n      }\n\n      /**\n       * Returns the active mipmap level.\n       *\n       * @return {Number} The active mipmap level.\n       */\n    }, {\n      key: \"getActiveMipmapLevel\",\n      value: function getActiveMipmapLevel() {\n        return this._activeMipmapLevel;\n      }\n\n      /**\n       * Applications are advised to always define the animation loop\n       * with this method and not manually with `requestAnimationFrame()`\n       * for best compatibility.\n       *\n       * @async\n       * @param {Function} callback - The application's animation loop.\n       * @return {Promise} A Promise that resolves when the set has been exeucted.\n       */\n    }, {\n      key: \"setAnimationLoop\",\n      value: (function () {\n        var _setAnimationLoop = (0, _asyncToGenerator2.default)(function* (callback) {\n          if (this._initialized === false) yield this.init();\n          this._animation.setAnimationLoop(callback);\n        });\n        function setAnimationLoop(_x17) {\n          return _setAnimationLoop.apply(this, arguments);\n        }\n        return setAnimationLoop;\n      }()\n      /**\n       * Can be used to transfer buffer data from a storage buffer attribute\n       * from the GPU to the CPU in context of compute shaders.\n       *\n       * @async\n       * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n       * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n       */\n      )\n    }, {\n      key: \"getArrayBufferAsync\",\n      value: (function () {\n        var _getArrayBufferAsync = (0, _asyncToGenerator2.default)(function* (attribute) {\n          return yield this.backend.getArrayBufferAsync(attribute);\n        });\n        function getArrayBufferAsync(_x18) {\n          return _getArrayBufferAsync.apply(this, arguments);\n        }\n        return getArrayBufferAsync;\n      }()\n      /**\n       * Returns the rendering context.\n       *\n       * @return {GPUCanvasContext|WebGL2RenderingContext} The rendering context.\n       */\n      )\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.backend.getContext();\n      }\n\n      /**\n       * Returns the pixel ratio.\n       *\n       * @return {Number} The pixel ratio.\n       */\n    }, {\n      key: \"getPixelRatio\",\n      value: function getPixelRatio() {\n        return this._pixelRatio;\n      }\n\n      /**\n       * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.\n       *\n       * @param {Vector2} target - The method writes the result in this target object.\n       * @return {Vector2} The drawing buffer size.\n       */\n    }, {\n      key: \"getDrawingBufferSize\",\n      value: function getDrawingBufferSize(target) {\n        return target.set(this._width * this._pixelRatio, this._height * this._pixelRatio).floor();\n      }\n\n      /**\n       * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.\n       *\n       * @param {Vector2} target - The method writes the result in this target object.\n       * @return {Vector2} The drawing buffer size.\n       */\n    }, {\n      key: \"getSize\",\n      value: function getSize(target) {\n        return target.set(this._width, this._height);\n      }\n\n      /**\n       * Sets the given pixel ration and resizes the canvas if necessary.\n       *\n       * @param {Number} [value=1] - The pixel ratio.\n       */\n    }, {\n      key: \"setPixelRatio\",\n      value: function setPixelRatio() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        if (this._pixelRatio === value) return;\n        this._pixelRatio = value;\n        this.setSize(this._width, this._height, false);\n      }\n\n      /**\n       * This method allows to define the drawing buffer size by specifying\n       * width, height and pixel ratio all at once. The size of the drawing\n       * buffer is computed with this formula:\n       * ````\n       * size.x = width * pixelRatio;\n       * size.y = height * pixelRatio;\n       *```\n       *\n       * @param {Number} width - The width in logical pixels.\n       * @param {Number} height - The height in logical pixels.\n       * @param {Number} pixelRatio - The pixel ratio.\n       */\n    }, {\n      key: \"setDrawingBufferSize\",\n      value: function setDrawingBufferSize(width, height, pixelRatio) {\n        this._width = width;\n        this._height = height;\n        this._pixelRatio = pixelRatio;\n        this.domElement.width = Math.floor(width * pixelRatio);\n        this.domElement.height = Math.floor(height * pixelRatio);\n        this.setViewport(0, 0, width, height);\n        if (this._initialized) this.backend.updateSize();\n      }\n\n      /**\n       * Sets the size of the renderer.\n       *\n       * @param {Number} width - The width in logical pixels.\n       * @param {Number} height - The height in logical pixels.\n       * @param {Boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.\n       */\n    }, {\n      key: \"setSize\",\n      value: function setSize(width, height) {\n        var updateStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        this._width = width;\n        this._height = height;\n        this.domElement.width = Math.floor(width * this._pixelRatio);\n        this.domElement.height = Math.floor(height * this._pixelRatio);\n        if (updateStyle === true) {\n          this.domElement.style.width = width + 'px';\n          this.domElement.style.height = height + 'px';\n        }\n        this.setViewport(0, 0, width, height);\n        if (this._initialized) this.backend.updateSize();\n      }\n\n      /**\n       * Defines a manual sort function for the opaque render list.\n       * Pass `null` to use the default sort.\n       *\n       * @param {Function} method - The sort function.\n       */\n    }, {\n      key: \"setOpaqueSort\",\n      value: function setOpaqueSort(method) {\n        this._opaqueSort = method;\n      }\n\n      /**\n       * Defines a manual sort function for the transparent render list.\n       * Pass `null` to use the default sort.\n       *\n       * @param {Function} method - The sort function.\n       */\n    }, {\n      key: \"setTransparentSort\",\n      value: function setTransparentSort(method) {\n        this._transparentSort = method;\n      }\n\n      /**\n       * Returns the scissor rectangle.\n       *\n       * @param {Vector4} target - The method writes the result in this target object.\n       * @return {Vector4} The scissor rectangle.\n       */\n    }, {\n      key: \"getScissor\",\n      value: function getScissor(target) {\n        var scissor = this._scissor;\n        target.x = scissor.x;\n        target.y = scissor.y;\n        target.width = scissor.width;\n        target.height = scissor.height;\n        return target;\n      }\n\n      /**\n       * Defines the scissor rectangle.\n       *\n       * @param {Number | Vector4} x - The horizontal coordinate for the lower left corner of the box in logical pixel unit.\n       * Instead of passing four arguments, the method also works with a single four-dimensional vector.\n       * @param {Number} y - The vertical coordinate for the lower left corner of the box in logical pixel unit.\n       * @param {Number} width - The width of the scissor box in logical pixel unit.\n       * @param {Number} height - The height of the scissor box in logical pixel unit.\n       */\n    }, {\n      key: \"setScissor\",\n      value: function setScissor(x, y, width, height) {\n        var scissor = this._scissor;\n        if (x.isVector4) {\n          scissor.copy(x);\n        } else {\n          scissor.set(x, y, width, height);\n        }\n      }\n\n      /**\n       * Returns the scissor test value.\n       *\n       * @return {Boolean} Whether the scissor test should be enabled or not.\n       */\n    }, {\n      key: \"getScissorTest\",\n      value: function getScissorTest() {\n        return this._scissorTest;\n      }\n\n      /**\n       * Defines the scissor test.\n       *\n       * @param {Boolean} boolean - Whether the scissor test should be enabled or not.\n       */\n    }, {\n      key: \"setScissorTest\",\n      value: function setScissorTest(boolean) {\n        this._scissorTest = boolean;\n        this.backend.setScissorTest(boolean);\n      }\n\n      /**\n       * Returns the viewport definition.\n       *\n       * @param {Vector4} target - The method writes the result in this target object.\n       * @return {Vector4} The viewport definition.\n       */\n    }, {\n      key: \"getViewport\",\n      value: function getViewport(target) {\n        return target.copy(this._viewport);\n      }\n\n      /**\n       * Defines the viewport.\n       *\n       * @param {Number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.\n       * @param {Number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.\n       * @param {Number} width - The width of the viewport in logical pixel unit.\n       * @param {Number} height - The height of the viewport in logical pixel unit.\n       * @param {Number} minDepth - The minimum depth value of the viewport. WebGPU only.\n       * @param {Number} maxDepth - The maximum depth value of the viewport. WebGPU only.\n       */\n    }, {\n      key: \"setViewport\",\n      value: function setViewport(x, y, width, height) {\n        var minDepth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        var maxDepth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n        var viewport = this._viewport;\n        if (x.isVector4) {\n          viewport.copy(x);\n        } else {\n          viewport.set(x, y, width, height);\n        }\n        viewport.minDepth = minDepth;\n        viewport.maxDepth = maxDepth;\n      }\n\n      /**\n       * Returns the clear color.\n       *\n       * @param {Color} target - The method writes the result in this target object.\n       * @return {Color} The clear color.\n       */\n    }, {\n      key: \"getClearColor\",\n      value: function getClearColor(target) {\n        return target.copy(this._clearColor);\n      }\n\n      /**\n       * Defines the clear color and optionally the clear alpha.\n       *\n       * @param {Color} color - The clear color.\n       * @param {Number} [alpha=1] - The clear alpha.\n       */\n    }, {\n      key: \"setClearColor\",\n      value: function setClearColor(color) {\n        var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        this._clearColor.set(color);\n        this._clearColor.a = alpha;\n      }\n\n      /**\n       * Returns the clear alpha.\n       *\n       * @return {Number} The clear alpha.\n       */\n    }, {\n      key: \"getClearAlpha\",\n      value: function getClearAlpha() {\n        return this._clearColor.a;\n      }\n\n      /**\n       * Defines the clear alpha.\n       *\n       * @param {Number} alpha - The clear alpha.\n       */\n    }, {\n      key: \"setClearAlpha\",\n      value: function setClearAlpha(alpha) {\n        this._clearColor.a = alpha;\n      }\n\n      /**\n       * Returns the clear depth.\n       *\n       * @return {Number} The clear depth.\n       */\n    }, {\n      key: \"getClearDepth\",\n      value: function getClearDepth() {\n        return this._clearDepth;\n      }\n\n      /**\n       * Defines the clear depth.\n       *\n       * @param {Number} depth - The clear depth.\n       */\n    }, {\n      key: \"setClearDepth\",\n      value: function setClearDepth(depth) {\n        this._clearDepth = depth;\n      }\n\n      /**\n       * Returns the clear stencil.\n       *\n       * @return {Number} The clear stencil.\n       */\n    }, {\n      key: \"getClearStencil\",\n      value: function getClearStencil() {\n        return this._clearStencil;\n      }\n\n      /**\n       * Defines the clear stencil.\n       *\n       * @param {Number} stencil - The clear stencil.\n       */\n    }, {\n      key: \"setClearStencil\",\n      value: function setClearStencil(stencil) {\n        this._clearStencil = stencil;\n      }\n\n      /**\n       * This method performs an occlusion query for the given 3D object.\n       * It returns `true` if the given 3D object is fully occluded by other\n       * 3D objects in the scene.\n       *\n       * @param {Object3D} object - The 3D object to test.\n       * @return {Boolean} Whether the 3D object is fully occluded or not.\n       */\n    }, {\n      key: \"isOccluded\",\n      value: function isOccluded(object) {\n        var renderContext = this._currentRenderContext;\n        return renderContext && this.backend.isOccluded(renderContext, object);\n      }\n\n      /**\n       * Performs a manual clear operation. This method ignores `autoClear` properties.\n       *\n       * @param {Boolean} [color=true] - Whether the color buffer should be cleared or not.\n       * @param {Boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n       * @param {Boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       * Only returned when the renderer has not been initialized.\n       */\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var stencil = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        if (this._initialized === false) {\n          console.warn('THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.');\n          return this.clearAsync(color, depth, stencil);\n        }\n        var renderTarget = this._renderTarget || this._getFrameBufferTarget();\n        var renderContext = null;\n        if (renderTarget !== null) {\n          this._textures.updateRenderTarget(renderTarget);\n          var renderTargetData = this._textures.get(renderTarget);\n          renderContext = this._renderContexts.get(null, null, renderTarget);\n          renderContext.textures = renderTargetData.textures;\n          renderContext.depthTexture = renderTargetData.depthTexture;\n          renderContext.width = renderTargetData.width;\n          renderContext.height = renderTargetData.height;\n          renderContext.renderTarget = renderTarget;\n          renderContext.depth = renderTarget.depthBuffer;\n          renderContext.stencil = renderTarget.stencilBuffer;\n        }\n        this.backend.clear(color, depth, stencil, renderContext);\n        if (renderTarget !== null && this._renderTarget === null) {\n          // If a color space transform or tone mapping is required,\n          // the clear operation clears the intermediate renderTarget texture, but does not update the screen canvas.\n\n          var quad = this._quad;\n          if (this._nodes.hasOutputChange(renderTarget.texture)) {\n            quad.material.fragmentNode = this._nodes.getOutputNode(renderTarget.texture);\n            quad.material.needsUpdate = true;\n          }\n          this._renderScene(quad, quad.camera, false);\n        }\n      }\n\n      /**\n       * Performs a manual clear operation of the color buffer. This method ignores `autoClear` properties.\n       *\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       * Only returned when the renderer has not been initialized.\n       */\n    }, {\n      key: \"clearColor\",\n      value: function clearColor() {\n        return this.clear(true, false, false);\n      }\n\n      /**\n       * Performs a manual clear operation of the depth buffer. This method ignores `autoClear` properties.\n       *\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       * Only returned when the renderer has not been initialized.\n       */\n    }, {\n      key: \"clearDepth\",\n      value: function clearDepth() {\n        return this.clear(false, true, false);\n      }\n\n      /**\n       * Performs a manual clear operation of the stencil buffer. This method ignores `autoClear` properties.\n       *\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       * Only returned when the renderer has not been initialized.\n       */\n    }, {\n      key: \"clearStencil\",\n      value: function clearStencil() {\n        return this.clear(false, false, true);\n      }\n\n      /**\n       * Async version of {@link module:Renderer~Renderer#clear}.\n       *\n       * @async\n       * @param {Boolean} [color=true] - Whether the color buffer should be cleared or not.\n       * @param {Boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n       * @param {Boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       */\n    }, {\n      key: \"clearAsync\",\n      value: (function () {\n        var _clearAsync = (0, _asyncToGenerator2.default)(function* () {\n          var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var stencil = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          if (this._initialized === false) yield this.init();\n          this.clear(color, depth, stencil);\n        });\n        function clearAsync() {\n          return _clearAsync.apply(this, arguments);\n        }\n        return clearAsync;\n      }()\n      /**\n       * Async version of {@link module:Renderer~Renderer#clearColor}.\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       */\n      )\n    }, {\n      key: \"clearColorAsync\",\n      value: (function () {\n        var _clearColorAsync = (0, _asyncToGenerator2.default)(function* () {\n          this.clearAsync(true, false, false);\n        });\n        function clearColorAsync() {\n          return _clearColorAsync.apply(this, arguments);\n        }\n        return clearColorAsync;\n      }()\n      /**\n       * Async version of {@link module:Renderer~Renderer#clearDepth}.\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       */\n      )\n    }, {\n      key: \"clearDepthAsync\",\n      value: (function () {\n        var _clearDepthAsync = (0, _asyncToGenerator2.default)(function* () {\n          this.clearAsync(false, true, false);\n        });\n        function clearDepthAsync() {\n          return _clearDepthAsync.apply(this, arguments);\n        }\n        return clearDepthAsync;\n      }()\n      /**\n       * Async version of {@link module:Renderer~Renderer#clearStencil}.\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when the clear operation has been executed.\n       */\n      )\n    }, {\n      key: \"clearStencilAsync\",\n      value: (function () {\n        var _clearStencilAsync = (0, _asyncToGenerator2.default)(function* () {\n          this.clearAsync(false, false, true);\n        });\n        function clearStencilAsync() {\n          return _clearStencilAsync.apply(this, arguments);\n        }\n        return clearStencilAsync;\n      }()\n      /**\n       * The current output tone mapping of the renderer. When a render target is set,\n       * the output tone mapping is always `NoToneMapping`.\n       *\n       * @type {Number}\n       */\n      )\n    }, {\n      key: \"currentToneMapping\",\n      get: function get() {\n        return this._renderTarget !== null ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping : this.toneMapping;\n      }\n\n      /**\n       * The current output color space of the renderer. When a render target is set,\n       * the output color space is always `LinearSRGBColorSpace`.\n       *\n       * @type {String}\n       */\n    }, {\n      key: \"currentColorSpace\",\n      get: function get() {\n        return this._renderTarget !== null ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace : this.outputColorSpace;\n      }\n\n      /**\n       * Frees all internal resources of the renderer. Call this method if the renderer\n       * is no longer in use by your app.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.info.dispose();\n        this.backend.dispose();\n        this._animation.dispose();\n        this._objects.dispose();\n        this._pipelines.dispose();\n        this._nodes.dispose();\n        this._bindings.dispose();\n        this._renderLists.dispose();\n        this._renderContexts.dispose();\n        this._textures.dispose();\n        this.setRenderTarget(null);\n        this.setAnimationLoop(null);\n      }\n\n      /**\n       * Sets the given render target. Calling this method means the renderer does not\n       * target the default framebuffer (meaning the canvas) anymore but a custom framebuffer.\n       * Use `null` as the first argument to reset the state.\n       *\n       * @param {RenderTarget?} renderTarget - The render target to set.\n       * @param {Number} [activeCubeFace=0] - The active cube face.\n       * @param {Number} [activeMipmapLevel=0] - The active mipmap level.\n       */\n    }, {\n      key: \"setRenderTarget\",\n      value: function setRenderTarget(renderTarget) {\n        var activeCubeFace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var activeMipmapLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        this._renderTarget = renderTarget;\n        this._activeCubeFace = activeCubeFace;\n        this._activeMipmapLevel = activeMipmapLevel;\n      }\n\n      /**\n       * Returns the current render target.\n       *\n       * @return {RenderTarget?} The render target. Returns `null` if no render target is set.\n       */\n    }, {\n      key: \"getRenderTarget\",\n      value: function getRenderTarget() {\n        return this._renderTarget;\n      }\n\n      /**\n       * Callback for {@link module:Renderer~Renderer#setRenderObjectFunction}.\n       *\n       * @callback renderObjectFunction\n       * @param {Object3D} object - The 3D object.\n       * @param {Scene} scene - The scene the 3D object belongs to.\n       * @param {Camera} camera - The camera the object should be rendered with.\n       * @param {BufferGeometry} geometry - The object's geometry.\n       * @param {Material} material - The object's material.\n       * @param {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {LightsNode} lightsNode - The current lights node.\n       * @param {ClippingContext} clippingContext - The clipping context.\n       * @param {String?} [passId=null] - An optional ID for identifying the pass.\n       */\n\n      /**\n       * Sets the given render object function. Calling this method overwrites the default implementation\n       * which is {@link module:Renderer~Renderer#renderObject}. Defining a custom function can be useful\n       * if you want to modify the way objects are rendered. For example you can define things like \"every\n       * object that has material of a certain type should perform a pre-pass with a special overwrite material\".\n       * The custom function must always call `renderObject()` in its implementation.\n       *\n       * Use `null` as the first argument to reset the state.\n       *\n       * @param {module:Renderer~renderObjectFunction?} renderObjectFunction - The render object function.\n       */\n    }, {\n      key: \"setRenderObjectFunction\",\n      value: function setRenderObjectFunction(renderObjectFunction) {\n        this._renderObjectFunction = renderObjectFunction;\n      }\n\n      /**\n       * Returns the current render object function.\n       *\n       * @return {Function?} The current render object function. Returns `null` if no function is set.\n       */\n    }, {\n      key: \"getRenderObjectFunction\",\n      value: function getRenderObjectFunction() {\n        return this._renderObjectFunction;\n      }\n\n      /**\n       * Execute a single or an array of compute nodes. This method can only be called\n       * if the renderer has been initialized.\n       *\n       * @param {Node|Array<Node>} computeNodes - The compute node(s).\n       * @return {Promise?} A Promise that resolve when the compute has finished. Only returned when the renderer has not been initialized.\n       */\n    }, {\n      key: \"compute\",\n      value: function compute(computeNodes) {\n        var _this193 = this;\n        if (this.isDeviceLost === true) return;\n        if (this._initialized === false) {\n          console.warn('THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead.');\n          return this.computeAsync(computeNodes);\n        }\n\n        //\n\n        var nodeFrame = this._nodes.nodeFrame;\n        var previousRenderId = nodeFrame.renderId;\n\n        //\n\n        this.info.calls++;\n        this.info.compute.calls++;\n        this.info.compute.frameCalls++;\n        nodeFrame.renderId = this.info.calls;\n\n        //\n\n        var backend = this.backend;\n        var pipelines = this._pipelines;\n        var bindings = this._bindings;\n        var nodes = this._nodes;\n        var computeList = Array.isArray(computeNodes) ? computeNodes : [computeNodes];\n        if (computeList[0] === undefined || computeList[0].isComputeNode !== true) {\n          throw new Error('THREE.Renderer: .compute() expects a ComputeNode.');\n        }\n        backend.beginCompute(computeNodes);\n        var _loop = function _loop(computeNode) {\n          // onInit\n\n          if (pipelines.has(computeNode) === false) {\n            var _dispose2 = function dispose() {\n              computeNode.removeEventListener('dispose', _dispose2);\n              pipelines.delete(computeNode);\n              bindings.delete(computeNode);\n              nodes.delete(computeNode);\n            };\n            computeNode.addEventListener('dispose', _dispose2);\n\n            //\n\n            var onInitFn = computeNode.onInitFunction;\n            if (onInitFn !== null) {\n              onInitFn.call(computeNode, {\n                renderer: _this193\n              });\n            }\n          }\n          nodes.updateForCompute(computeNode);\n          bindings.updateForCompute(computeNode);\n          var computeBindings = bindings.getForCompute(computeNode);\n          var computePipeline = pipelines.getForCompute(computeNode, computeBindings);\n          backend.compute(computeNodes, computeNode, computeBindings, computePipeline);\n        };\n        for (var computeNode of computeList) {\n          _loop(computeNode);\n        }\n        backend.finishCompute(computeNodes);\n\n        //\n\n        nodeFrame.renderId = previousRenderId;\n      }\n\n      /**\n       * Execute a single or an array of compute nodes.\n       *\n       * @async\n       * @param {Node|Array<Node>} computeNodes - The compute node(s).\n       * @return {Promise?} A Promise that resolve when the compute has finished.\n       */\n    }, {\n      key: \"computeAsync\",\n      value: (function () {\n        var _computeAsync = (0, _asyncToGenerator2.default)(function* (computeNodes) {\n          if (this._initialized === false) yield this.init();\n          this.compute(computeNodes);\n          yield this.backend.resolveTimestampAsync(computeNodes, 'compute');\n        });\n        function computeAsync(_x19) {\n          return _computeAsync.apply(this, arguments);\n        }\n        return computeAsync;\n      }()\n      /**\n       * Checks if the given feature is supported by the selected backend.\n       *\n       * @async\n       * @param {String} name - The feature's name.\n       * @return {Promise<Boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.\n       */\n      )\n    }, {\n      key: \"hasFeatureAsync\",\n      value: (function () {\n        var _hasFeatureAsync = (0, _asyncToGenerator2.default)(function* (name) {\n          if (this._initialized === false) yield this.init();\n          return this.backend.hasFeature(name);\n        });\n        function hasFeatureAsync(_x20) {\n          return _hasFeatureAsync.apply(this, arguments);\n        }\n        return hasFeatureAsync;\n      }()\n      /**\n       * Checks if the given feature is supported by the selected backend. If the\n       * renderer has not been initialized, this method always returns `false`.\n       *\n       * @param {String} name - The feature's name.\n       * @return {Boolean} Whether the feature is supported or not.\n       */\n      )\n    }, {\n      key: \"hasFeature\",\n      value: function hasFeature(name) {\n        if (this._initialized === false) {\n          console.warn('THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.');\n          return false;\n        }\n        return this.backend.hasFeature(name);\n      }\n\n      /**\n       * Returns `true` when the renderer has been initialized.\n       *\n       * @return {Boolean} Whether the renderer has been initialized or not.\n       */\n    }, {\n      key: \"hasInitialized\",\n      value: function hasInitialized() {\n        return this._initialized;\n      }\n\n      /**\n       * Initializes the given textures. Useful for preloading a texture rather than waiting until first render\n       * (which can cause noticeable lags due to decode and GPU upload overhead).\n       *\n       * @async\n       * @param {Texture} texture - The texture.\n       * @return {Promise} A Promise that resolves when the texture has been initialized.\n       */\n    }, {\n      key: \"initTextureAsync\",\n      value: (function () {\n        var _initTextureAsync = (0, _asyncToGenerator2.default)(function* (texture) {\n          if (this._initialized === false) yield this.init();\n          this._textures.updateTexture(texture);\n        });\n        function initTextureAsync(_x21) {\n          return _initTextureAsync.apply(this, arguments);\n        }\n        return initTextureAsync;\n      }()\n      /**\n       * Initializes the given textures. Useful for preloading a texture rather than waiting until first render\n       * (which can cause noticeable lags due to decode and GPU upload overhead).\n       *\n       * This method can only be used if the renderer has been initialized.\n       *\n       * @param {Texture} texture - The texture.\n       */\n      )\n    }, {\n      key: \"initTexture\",\n      value: function initTexture(texture) {\n        if (this._initialized === false) {\n          console.warn('THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead.');\n        }\n        this._textures.updateTexture(texture);\n      }\n\n      /**\n       * Copies the current bound framebuffer into the given texture.\n       *\n       * @param {FramebufferTexture} framebufferTexture - The texture.\n       * @param {Vector2|Vector4} rectangle - A two or four dimensional vector that defines the rectangular portion of the framebuffer that should be copied.\n       */\n    }, {\n      key: \"copyFramebufferToTexture\",\n      value: function copyFramebufferToTexture(framebufferTexture) {\n        var rectangle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (rectangle !== null) {\n          if (rectangle.isVector2) {\n            rectangle = _vector4.set(rectangle.x, rectangle.y, framebufferTexture.image.width, framebufferTexture.image.height).floor();\n          } else if (rectangle.isVector4) {\n            rectangle = _vector4.copy(rectangle).floor();\n          } else {\n            console.error('THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.');\n            return;\n          }\n        } else {\n          rectangle = _vector4.set(0, 0, framebufferTexture.image.width, framebufferTexture.image.height);\n        }\n\n        //\n\n        var renderContext = this._currentRenderContext;\n        var renderTarget;\n        if (renderContext !== null) {\n          renderTarget = renderContext.renderTarget;\n        } else {\n          renderTarget = this._renderTarget || this._getFrameBufferTarget();\n          if (renderTarget !== null) {\n            this._textures.updateRenderTarget(renderTarget);\n            renderContext = this._textures.get(renderTarget);\n          }\n        }\n\n        //\n\n        this._textures.updateTexture(framebufferTexture, {\n          renderTarget: renderTarget\n        });\n        this.backend.copyFramebufferToTexture(framebufferTexture, renderContext, rectangle);\n      }\n\n      /**\n       * Copies data of source texture into a destination texture.\n       *\n       * @param {Texture} srcTexture - The source texture.\n       * @param {Texture} dstTexture - The destination texture.\n       * @param {Box2|Box3} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.\n       * @param {Vector2|Vector3} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.\n       * @param {Number} level - The mipmap level to copy.\n       */\n    }, {\n      key: \"copyTextureToTexture\",\n      value: function copyTextureToTexture(srcTexture, dstTexture) {\n        var srcRegion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var dstPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        this._textures.updateTexture(srcTexture);\n        this._textures.updateTexture(dstTexture);\n        this.backend.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);\n      }\n\n      /**\n       * Reads pixel data from the given render target.\n       *\n       * @async\n       * @param {RenderTarget} renderTarget - The render target to read from.\n       * @param {Number} x - The `x` coordinate of the copy region's origin.\n       * @param {Number} y - The `y` coordinate of the copy region's origin.\n       * @param {Number} width - The width of the copy region.\n       * @param {Number} height - The height of the copy region.\n       * @param {Number} [textureIndex=0] - The texture index of a MRT render target.\n       * @param {Number} [faceIndex=0] - The active cube face index.\n       * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.\n       */\n    }, {\n      key: \"readRenderTargetPixelsAsync\",\n      value: (function () {\n        var _readRenderTargetPixelsAsync = (0, _asyncToGenerator2.default)(function* (renderTarget, x, y, width, height) {\n          var textureIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n          var faceIndex = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n          return this.backend.copyTextureToBuffer(renderTarget.textures[textureIndex], x, y, width, height, faceIndex);\n        });\n        function readRenderTargetPixelsAsync(_x22, _x23, _x24, _x25, _x26) {\n          return _readRenderTargetPixelsAsync.apply(this, arguments);\n        }\n        return readRenderTargetPixelsAsync;\n      }()\n      /**\n       * Analyzes the given 3D object's hierarchy and builds render lists from the\n       * processed hierarchy.\n       *\n       * @param {Object3D} object - The 3D object to process (usually a scene).\n       * @param {Camera} camera - The camera the object is rendered with.\n       * @param {Number} groupOrder - The group order is derived from the `renderOrder` of groups and is used to group 3D objects within groups.\n       * @param {RenderList} renderList - The current render list.\n       * @param {ClippingContext} clippingContext - The current clipping context.\n       */\n      )\n    }, {\n      key: \"_projectObject\",\n      value: function _projectObject(object, camera, groupOrder, renderList, clippingContext) {\n        if (object.visible === false) return;\n        var visible = object.layers.test(camera.layers);\n        if (visible) {\n          if (object.isGroup) {\n            groupOrder = object.renderOrder;\n            if (object.isClippingGroup && object.enabled) clippingContext = clippingContext.getGroupContext(object);\n          } else if (object.isLOD) {\n            if (object.autoUpdate === true) object.update(camera);\n          } else if (object.isLight) {\n            renderList.pushLight(object);\n          } else if (object.isSprite) {\n            if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n              if (this.sortObjects === true) {\n                _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n              }\n              var geometry = object.geometry,\n                material = object.material;\n              if (material.visible) {\n                renderList.push(object, geometry, material, groupOrder, _vector4.z, null, clippingContext);\n              }\n            }\n          } else if (object.isLineLoop) {\n            console.error('THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.');\n          } else if (object.isMesh || object.isLine || object.isPoints) {\n            if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n              var _geometry2 = object.geometry,\n                _material2 = object.material;\n              if (this.sortObjects === true) {\n                if (_geometry2.boundingSphere === null) _geometry2.computeBoundingSphere();\n                _vector4.copy(_geometry2.boundingSphere.center).applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n              }\n              if (Array.isArray(_material2)) {\n                var groups = _geometry2.groups;\n                for (var i = 0, l = groups.length; i < l; i++) {\n                  var group = groups[i];\n                  var groupMaterial = _material2[group.materialIndex];\n                  if (groupMaterial && groupMaterial.visible) {\n                    renderList.push(object, _geometry2, groupMaterial, groupOrder, _vector4.z, group, clippingContext);\n                  }\n                }\n              } else if (_material2.visible) {\n                renderList.push(object, _geometry2, _material2, groupOrder, _vector4.z, null, clippingContext);\n              }\n            }\n          }\n        }\n        if (object.isBundleGroup === true && this.backend.beginBundle !== undefined) {\n          var baseRenderList = renderList;\n\n          // replace render list\n          renderList = this._renderLists.get(object, camera);\n          renderList.begin();\n          baseRenderList.pushBundle({\n            bundleGroup: object,\n            camera: camera,\n            renderList: renderList\n          });\n          renderList.finish();\n        }\n        var children = object.children;\n        for (var _i12 = 0, _l3 = children.length; _i12 < _l3; _i12++) {\n          this._projectObject(children[_i12], camera, groupOrder, renderList, clippingContext);\n        }\n      }\n\n      /**\n       * Renders the given render bundles.\n       *\n       * @private\n       * @param {Array<Object>} bundles - Array with render bundle data.\n       * @param {Scene} sceneRef - The scene the render bundles belong to.\n       * @param {LightsNode} lightsNode - The current lights node.\n       */\n    }, {\n      key: \"_renderBundles\",\n      value: function _renderBundles(bundles, sceneRef, lightsNode) {\n        for (var bundle of bundles) {\n          this._renderBundle(bundle, sceneRef, lightsNode);\n        }\n      }\n\n      /**\n       * Renders the transparent objects from the given render lists.\n       *\n       * @private\n       * @param {Array<Object>} renderList - The transparent render list.\n       * @param {Array<Object>} doublePassList - The list of transparent objects which require a double pass (e.g. because of transmission).\n       * @param {Camera} camera - The camera the render list should be rendered with.\n       * @param {Scene} scene - The scene the render list belongs to.\n       * @param {LightsNode} lightsNode - The current lights node.\n       */\n    }, {\n      key: \"_renderTransparents\",\n      value: function _renderTransparents(renderList, doublePassList, camera, scene, lightsNode) {\n        if (doublePassList.length > 0) {\n          // render back side\n\n          for (var _ref338 of doublePassList) {\n            var material = _ref338.material;\n            material.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n          }\n          this._renderObjects(doublePassList, camera, scene, lightsNode, 'backSide');\n\n          // render front side\n\n          for (var _ref339 of doublePassList) {\n            var _material3 = _ref339.material;\n            _material3.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FrontSide;\n          }\n          this._renderObjects(renderList, camera, scene, lightsNode);\n\n          // restore\n\n          for (var _ref340 of doublePassList) {\n            var _material4 = _ref340.material;\n            _material4.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide;\n          }\n        } else {\n          this._renderObjects(renderList, camera, scene, lightsNode);\n        }\n      }\n\n      /**\n       * Renders the objects from the given render list.\n       *\n       * @private\n       * @param {Array<Object>} renderList - The render list.\n       * @param {Camera} camera - The camera the render list should be rendered with.\n       * @param {Scene} scene - The scene the render list belongs to.\n       * @param {LightsNode} lightsNode - The current lights node.\n       * @param {String?} [passId=null] - An optional ID for identifying the pass.\n       */\n    }, {\n      key: \"_renderObjects\",\n      value: function _renderObjects(renderList, camera, scene, lightsNode) {\n        var passId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n        // process renderable objects\n\n        for (var i = 0, il = renderList.length; i < il; i++) {\n          var renderItem = renderList[i];\n\n          // @TODO: Add support for multiple materials per object. This will require to extract\n          // the material from the renderItem object and pass it with its group data to renderObject().\n\n          var object = renderItem.object,\n            geometry = renderItem.geometry,\n            material = renderItem.material,\n            group = renderItem.group,\n            clippingContext = renderItem.clippingContext;\n          if (camera.isArrayCamera) {\n            var cameras = camera.cameras;\n            for (var j = 0, jl = cameras.length; j < jl; j++) {\n              var camera2 = cameras[j];\n              if (object.layers.test(camera2.layers)) {\n                var vp = camera2.viewport;\n                var minDepth = vp.minDepth === undefined ? 0 : vp.minDepth;\n                var maxDepth = vp.maxDepth === undefined ? 1 : vp.maxDepth;\n                var viewportValue = this._currentRenderContext.viewportValue;\n                viewportValue.copy(vp).multiplyScalar(this._pixelRatio).floor();\n                viewportValue.minDepth = minDepth;\n                viewportValue.maxDepth = maxDepth;\n                this.backend.updateViewport(this._currentRenderContext);\n                this._currentRenderObjectFunction(object, scene, camera2, geometry, material, group, lightsNode, clippingContext, passId);\n              }\n            }\n          } else {\n            this._currentRenderObjectFunction(object, scene, camera, geometry, material, group, lightsNode, clippingContext, passId);\n          }\n        }\n      }\n\n      /**\n       * This method represents the default render object function that manages the render lifecycle\n       * of the object.\n       *\n       * @param {Object3D} object - The 3D object.\n       * @param {Scene} scene - The scene the 3D object belongs to.\n       * @param {Camera} camera - The camera the object should be rendered with.\n       * @param {BufferGeometry} geometry - The object's geometry.\n       * @param {Material} material - The object's material.\n       * @param {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {LightsNode} lightsNode - The current lights node.\n       * @param {ClippingContext} clippingContext - The clipping context.\n       * @param {String?} [passId=null] - An optional ID for identifying the pass.\n       */\n    }, {\n      key: \"renderObject\",\n      value: function renderObject(object, scene, camera, geometry, material, group, lightsNode) {\n        var clippingContext = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n        var passId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n        var overridePositionNode;\n        var overrideColorNode;\n        var overrideDepthNode;\n\n        //\n\n        object.onBeforeRender(this, scene, camera, geometry, material, group);\n\n        //\n\n        if (scene.overrideMaterial !== null) {\n          var overrideMaterial = scene.overrideMaterial;\n          if (material.positionNode && material.positionNode.isNode) {\n            overridePositionNode = overrideMaterial.positionNode;\n            overrideMaterial.positionNode = material.positionNode;\n          }\n          overrideMaterial.alphaTest = material.alphaTest;\n          overrideMaterial.alphaMap = material.alphaMap;\n          overrideMaterial.transparent = material.transparent || material.transmission > 0;\n          if (overrideMaterial.isShadowNodeMaterial) {\n            overrideMaterial.side = material.shadowSide === null ? material.side : material.shadowSide;\n            if (material.depthNode && material.depthNode.isNode) {\n              overrideDepthNode = overrideMaterial.depthNode;\n              overrideMaterial.depthNode = material.depthNode;\n            }\n            if (material.castShadowNode && material.castShadowNode.isNode) {\n              overrideColorNode = overrideMaterial.colorNode;\n              overrideMaterial.colorNode = material.castShadowNode;\n            }\n          }\n          material = overrideMaterial;\n        }\n\n        //\n\n        if (material.transparent === true && material.side === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide && material.forceSinglePass === false) {\n          material.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n          this._handleObjectFunction(object, material, scene, camera, lightsNode, group, clippingContext, 'backSide'); // create backSide pass id\n\n          material.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FrontSide;\n          this._handleObjectFunction(object, material, scene, camera, lightsNode, group, clippingContext, passId); // use default pass id\n\n          material.side = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide;\n        } else {\n          this._handleObjectFunction(object, material, scene, camera, lightsNode, group, clippingContext, passId);\n        }\n\n        //\n\n        if (overridePositionNode !== undefined) {\n          scene.overrideMaterial.positionNode = overridePositionNode;\n        }\n        if (overrideDepthNode !== undefined) {\n          scene.overrideMaterial.depthNode = overrideDepthNode;\n        }\n        if (overrideColorNode !== undefined) {\n          scene.overrideMaterial.colorNode = overrideColorNode;\n        }\n\n        //\n\n        object.onAfterRender(this, scene, camera, geometry, material, group);\n      }\n\n      /**\n       * This method represents the default `_handleObjectFunction` implementation which creates\n       * a render object from the given data and performs the draw command with the selected backend.\n       *\n       * @private\n       * @param {Object3D} object - The 3D object.\n       * @param {Material} material - The object's material.\n       * @param {Scene} scene - The scene the 3D object belongs to.\n       * @param {Camera} camera - The camera the object should be rendered with.\n       * @param {LightsNode} lightsNode - The current lights node.\n       * @param {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {ClippingContext} clippingContext - The clipping context.\n       * @param {String?} [passId=null] - An optional ID for identifying the pass.\n       */\n    }, {\n      key: \"_renderObjectDirect\",\n      value: function _renderObjectDirect(object, material, scene, camera, lightsNode, group, clippingContext, passId) {\n        var renderObject = this._objects.get(object, material, scene, camera, lightsNode, this._currentRenderContext, clippingContext, passId);\n        renderObject.drawRange = object.geometry.drawRange;\n        renderObject.group = group;\n\n        //\n\n        var needsRefresh = this._nodes.needsRefresh(renderObject);\n        if (needsRefresh) {\n          this._nodes.updateBefore(renderObject);\n          this._geometries.updateForRender(renderObject);\n          this._nodes.updateForRender(renderObject);\n          this._bindings.updateForRender(renderObject);\n        }\n        this._pipelines.updateForRender(renderObject);\n\n        //\n\n        if (this._currentRenderBundle !== null) {\n          var renderBundleData = this.backend.get(this._currentRenderBundle);\n          renderBundleData.renderObjects.push(renderObject);\n          renderObject.bundle = this._currentRenderBundle.bundleGroup;\n        }\n        this.backend.draw(renderObject, this.info);\n        if (needsRefresh) this._nodes.updateAfter(renderObject);\n      }\n\n      /**\n       * A different implementation for `_handleObjectFunction` which only makes sure the object is ready for rendering.\n       * Used in `compileAsync()`.\n       *\n       * @private\n       * @param {Object3D} object - The 3D object.\n       * @param {Material} material - The object's material.\n       * @param {Scene} scene - The scene the 3D object belongs to.\n       * @param {Camera} camera - The camera the object should be rendered with.\n       * @param {LightsNode} lightsNode - The current lights node.\n       * @param {Object?} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n       * @param {ClippingContext} clippingContext - The clipping context.\n       * @param {String?} [passId=null] - An optional ID for identifying the pass.\n       */\n    }, {\n      key: \"_createObjectPipeline\",\n      value: function _createObjectPipeline(object, material, scene, camera, lightsNode, group, clippingContext, passId) {\n        var renderObject = this._objects.get(object, material, scene, camera, lightsNode, this._currentRenderContext, clippingContext, passId);\n        renderObject.drawRange = object.geometry.drawRange;\n        renderObject.group = group;\n\n        //\n\n        this._nodes.updateBefore(renderObject);\n        this._geometries.updateForRender(renderObject);\n        this._nodes.updateForRender(renderObject);\n        this._bindings.updateForRender(renderObject);\n        this._pipelines.getForRender(renderObject, this._compilationPromises);\n        this._nodes.updateAfter(renderObject);\n      }\n\n      /**\n       * Alias for `compileAsync()`.\n       *\n       * @method\n       * @param {Object3D} scene - The scene or 3D object to precompile.\n       * @param {Camera} camera - The camera that is used to render the scene.\n       * @param {Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.\n       * @return {Promise} A Promise that resolves when the compile has been finished.\n       */\n    }, {\n      key: \"compile\",\n      get: function get() {\n        return this.compileAsync;\n      }\n    }]);\n  }();\n  /**\n   * A binding represents the connection between a resource (like a texture, sampler\n   * or uniform buffer) and the resource definition in a shader stage.\n   *\n   * This module is an abstract base class for all concrete bindings types.\n   *\n   * @abstract\n   * @private\n   */\n  var Binding = /*#__PURE__*/function () {\n    /**\n     * Constructs a new binding.\n     *\n     * @param {String} [name=''] - The binding's name.\n     */\n    function Binding() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      (0, _classCallCheck2.default)(this, Binding);\n      /**\n       * The binding's name.\n       *\n       * @type {String}\n       */\n      this.name = name;\n\n      /**\n       * A bitmask that defines in what shader stages the\n       * binding's resource is accessible.\n       *\n       * @type {String}\n       */\n      this.visibility = 0;\n    }\n\n    /**\n     * Makes sure binding's resource is visible for the given shader stage.\n     *\n     * @param {Number} visibility - The shader stage.\n     */\n    return (0, _createClass2.default)(Binding, [{\n      key: \"setVisibility\",\n      value: function setVisibility(visibility) {\n        this.visibility |= visibility;\n      }\n\n      /**\n       * Clones the binding.\n       *\n       * @return {Binding} The cloned binding.\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return Object.assign(new this.constructor(), this);\n      }\n    }]);\n  }();\n  /** @module BufferUtils **/\n  /**\n   * This function is usually called with the length in bytes of an array buffer.\n   * It returns an padded value whic ensure chunk size alignment according to STD140 layout.\n   *\n   * @function\n   * @param {Number} floatLength - The buffer length.\n   * @return {Number} The padded length.\n   */\n  function getFloatLength(floatLength) {\n    // ensure chunk size alignment (STD140 layout)\n\n    return floatLength + (GPU_CHUNK_BYTES - floatLength % GPU_CHUNK_BYTES) % GPU_CHUNK_BYTES;\n  }\n\n  /**\n   * Represents a buffer binding type.\n   *\n   * @private\n   * @abstract\n   * @augments Binding\n   */\n  var Buffer = /*#__PURE__*/function (_Binding) {\n    /**\n     * Constructs a new buffer.\n     *\n     * @param {String} name - The buffer's name.\n     * @param {TypedArray} [buffer=null] - The buffer.\n     */\n    function Buffer(name) {\n      var _this194;\n      var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, Buffer);\n      _this194 = _callSuper(this, Buffer, [name]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this194.isBuffer = true;\n\n      /**\n       * The bytes per element.\n       *\n       * @type {Number}\n       */\n      _this194.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;\n\n      /**\n       * A reference to the internal buffer.\n       *\n       * @private\n       * @type {TypedArray}\n       */\n      _this194._buffer = buffer;\n      return _this194;\n    }\n\n    /**\n     * The buffer's byte length.\n     *\n     * @type {Number}\n     * @readonly\n     */\n    (0, _inherits2.default)(Buffer, _Binding);\n    return (0, _createClass2.default)(Buffer, [{\n      key: \"byteLength\",\n      get: function get() {\n        return getFloatLength(this._buffer.byteLength);\n      }\n\n      /**\n       * A reference to the internal buffer.\n       *\n       * @type {Float32Array}\n       * @readonly\n       */\n    }, {\n      key: \"buffer\",\n      get: function get() {\n        return this._buffer;\n      }\n\n      /**\n       * Updates the binding.\n       *\n       * @return {Boolean} Whether the buffer has been updated and must be\n       * uploaded to the GPU.\n       */\n    }, {\n      key: \"update\",\n      value: function update() {\n        return true;\n      }\n    }]);\n  }(Binding);\n  /**\n   * Represents a uniform buffer binding type.\n   *\n   * @private\n   * @augments Buffer\n   */\n  var UniformBuffer = /*#__PURE__*/function (_Buffer) {\n    /**\n     * Constructs a new uniform buffer.\n     *\n     * @param {String} name - The buffer's name.\n     * @param {TypedArray} [buffer=null] - The buffer.\n     */\n    function UniformBuffer(name) {\n      var _this195;\n      var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, UniformBuffer);\n      _this195 = _callSuper(this, UniformBuffer, [name, buffer]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this195.isUniformBuffer = true;\n      return _this195;\n    }\n    (0, _inherits2.default)(UniformBuffer, _Buffer);\n    return (0, _createClass2.default)(UniformBuffer);\n  }(Buffer);\n  var _id$4 = 0;\n\n  /**\n   * A special form of uniform buffer binding type.\n   * It's buffer value is managed by a node object.\n   *\n   * @private\n   * @augments UniformBuffer\n   */\n  var NodeUniformBuffer = /*#__PURE__*/function (_UniformBuffer) {\n    /**\n     * Constructs a new node-based uniform buffer.\n     *\n     * @param {BufferNode} nodeUniform - The uniform buffer node.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     */\n    function NodeUniformBuffer(nodeUniform, groupNode) {\n      var _this196;\n      (0, _classCallCheck2.default)(this, NodeUniformBuffer);\n      _this196 = _callSuper(this, NodeUniformBuffer, ['UniformBuffer_' + _id$4++, nodeUniform ? nodeUniform.value : null]);\n\n      /**\n       * The uniform buffer node.\n       *\n       * @type {BufferNode}\n       */\n      _this196.nodeUniform = nodeUniform;\n\n      /**\n       * The uniform group node.\n       *\n       * @type {UniformGroupNode}\n       */\n      _this196.groupNode = groupNode;\n      return _this196;\n    }\n\n    /**\n     * The uniform buffer.\n     *\n     * @type {Float32Array}\n     */\n    (0, _inherits2.default)(NodeUniformBuffer, _UniformBuffer);\n    return (0, _createClass2.default)(NodeUniformBuffer, [{\n      key: \"buffer\",\n      get: function get() {\n        return this.nodeUniform.value;\n      }\n    }]);\n  }(UniformBuffer);\n  /**\n   * This class represents a uniform buffer binding but with\n   * an API that allows to maintain individual uniform objects.\n   *\n   * @private\n   * @augments UniformBuffer\n   */\n  var UniformsGroup = /*#__PURE__*/function (_UniformBuffer2) {\n    /**\n     * Constructs a new uniforms group.\n     *\n     * @param {String} name - The group's name.\n     */\n    function UniformsGroup(name) {\n      var _this197;\n      (0, _classCallCheck2.default)(this, UniformsGroup);\n      _this197 = _callSuper(this, UniformsGroup, [name]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this197.isUniformsGroup = true;\n\n      /**\n       * An array with the raw uniform values.\n       *\n       * @private\n       * @type {Array<Number>?}\n       * @default null\n       */\n      _this197._values = null;\n\n      /**\n       * An array of uniform objects.\n       *\n       * The order of uniforms in this array must match the order of uniforms in the shader.\n       *\n       * @type {Array<Uniform>}\n       */\n      _this197.uniforms = [];\n      return _this197;\n    }\n\n    /**\n     * Adds a uniform to this group.\n     *\n     * @param {Uniform} uniform - The uniform to add.\n     * @return {UniformsGroup} A reference to this group.\n     */\n    (0, _inherits2.default)(UniformsGroup, _UniformBuffer2);\n    return (0, _createClass2.default)(UniformsGroup, [{\n      key: \"addUniform\",\n      value: function addUniform(uniform) {\n        this.uniforms.push(uniform);\n        return this;\n      }\n\n      /**\n       * Removes a uniform from this group.\n       *\n       * @param {Uniform} uniform - The uniform to remove.\n       * @return {UniformsGroup} A reference to this group.\n       */\n    }, {\n      key: \"removeUniform\",\n      value: function removeUniform(uniform) {\n        var index = this.uniforms.indexOf(uniform);\n        if (index !== -1) {\n          this.uniforms.splice(index, 1);\n        }\n        return this;\n      }\n\n      /**\n       * An array with the raw uniform values.\n       *\n       * @type {Array<Number>}\n       */\n    }, {\n      key: \"values\",\n      get: function get() {\n        if (this._values === null) {\n          this._values = Array.from(this.buffer);\n        }\n        return this._values;\n      }\n\n      /**\n       * A Float32 array buffer with the uniform values.\n       *\n       * @type {Float32Array}\n       */\n    }, {\n      key: \"buffer\",\n      get: function get() {\n        var buffer = this._buffer;\n        if (buffer === null) {\n          var byteLength = this.byteLength;\n          buffer = new Float32Array(new ArrayBuffer(byteLength));\n          this._buffer = buffer;\n        }\n        return buffer;\n      }\n\n      /**\n       * The byte length of the buffer with correct buffer alignment.\n       *\n       * @type {Number}\n       */\n    }, {\n      key: \"byteLength\",\n      get: function get() {\n        var offset = 0; // global buffer offset in bytes\n\n        for (var i = 0, l = this.uniforms.length; i < l; i++) {\n          var _uniform = this.uniforms[i];\n          var boundary = _uniform.boundary,\n            itemSize = _uniform.itemSize;\n\n          // offset within a single chunk in bytes\n\n          var chunkOffset = offset % GPU_CHUNK_BYTES;\n          var remainingSizeInChunk = GPU_CHUNK_BYTES - chunkOffset;\n\n          // conformance tests\n\n          if (chunkOffset !== 0 && remainingSizeInChunk - boundary < 0) {\n            // check for chunk overflow\n\n            offset += GPU_CHUNK_BYTES - chunkOffset;\n          } else if (chunkOffset % boundary !== 0) {\n            // check for correct alignment\n\n            offset += chunkOffset % boundary;\n          }\n          _uniform.offset = offset / this.bytesPerElement;\n          offset += itemSize * this.bytesPerElement;\n        }\n        return Math.ceil(offset / GPU_CHUNK_BYTES) * GPU_CHUNK_BYTES;\n      }\n\n      /**\n       * Updates this group by updating each uniform object of\n       * the internal uniform list. The uniform objects check if their\n       * values has actually changed so this method only returns\n       * `true` if there is a real value change.\n       *\n       * @return {Boolean} Whether the uniforms have been updated and\n       * must be uploaded to the GPU.\n       */\n    }, {\n      key: \"update\",\n      value: function update() {\n        var updated = false;\n        for (var _uniform2 of this.uniforms) {\n          if (this.updateByType(_uniform2) === true) {\n            updated = true;\n          }\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given uniform by calling an update method matching\n       * the uniforms type.\n       *\n       * @param {Uniform} uniform - The uniform to update.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateByType\",\n      value: function updateByType(uniform) {\n        if (uniform.isNumberUniform) return this.updateNumber(uniform);\n        if (uniform.isVector2Uniform) return this.updateVector2(uniform);\n        if (uniform.isVector3Uniform) return this.updateVector3(uniform);\n        if (uniform.isVector4Uniform) return this.updateVector4(uniform);\n        if (uniform.isColorUniform) return this.updateColor(uniform);\n        if (uniform.isMatrix3Uniform) return this.updateMatrix3(uniform);\n        if (uniform.isMatrix4Uniform) return this.updateMatrix4(uniform);\n        console.error('THREE.WebGPUUniformsGroup: Unsupported uniform type.', uniform);\n      }\n\n      /**\n       * Updates a given Number uniform.\n       *\n       * @param {NumberUniform} uniform - The Number uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateNumber\",\n      value: function updateNumber(uniform) {\n        var updated = false;\n        var a = this.values;\n        var v = uniform.getValue();\n        var offset = uniform.offset;\n        var type = uniform.getType();\n        if (a[offset] !== v) {\n          var b = this._getBufferForType(type);\n          b[offset] = a[offset] = v;\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given Vector2 uniform.\n       *\n       * @param {Vector2Uniform} uniform - The Vector2 uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateVector2\",\n      value: function updateVector2(uniform) {\n        var updated = false;\n        var a = this.values;\n        var v = uniform.getValue();\n        var offset = uniform.offset;\n        var type = uniform.getType();\n        if (a[offset + 0] !== v.x || a[offset + 1] !== v.y) {\n          var b = this._getBufferForType(type);\n          b[offset + 0] = a[offset + 0] = v.x;\n          b[offset + 1] = a[offset + 1] = v.y;\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given Vector3 uniform.\n       *\n       * @param {Vector3Uniform} uniform - The Vector3 uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateVector3\",\n      value: function updateVector3(uniform) {\n        var updated = false;\n        var a = this.values;\n        var v = uniform.getValue();\n        var offset = uniform.offset;\n        var type = uniform.getType();\n        if (a[offset + 0] !== v.x || a[offset + 1] !== v.y || a[offset + 2] !== v.z) {\n          var b = this._getBufferForType(type);\n          b[offset + 0] = a[offset + 0] = v.x;\n          b[offset + 1] = a[offset + 1] = v.y;\n          b[offset + 2] = a[offset + 2] = v.z;\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given Vector4 uniform.\n       *\n       * @param {Vector4Uniform} uniform - The Vector4 uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateVector4\",\n      value: function updateVector4(uniform) {\n        var updated = false;\n        var a = this.values;\n        var v = uniform.getValue();\n        var offset = uniform.offset;\n        var type = uniform.getType();\n        if (a[offset + 0] !== v.x || a[offset + 1] !== v.y || a[offset + 2] !== v.z || a[offset + 4] !== v.w) {\n          var b = this._getBufferForType(type);\n          b[offset + 0] = a[offset + 0] = v.x;\n          b[offset + 1] = a[offset + 1] = v.y;\n          b[offset + 2] = a[offset + 2] = v.z;\n          b[offset + 3] = a[offset + 3] = v.w;\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given Color uniform.\n       *\n       * @param {ColorUniform} uniform - The Color uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateColor\",\n      value: function updateColor(uniform) {\n        var updated = false;\n        var a = this.values;\n        var c = uniform.getValue();\n        var offset = uniform.offset;\n        if (a[offset + 0] !== c.r || a[offset + 1] !== c.g || a[offset + 2] !== c.b) {\n          var b = this.buffer;\n          b[offset + 0] = a[offset + 0] = c.r;\n          b[offset + 1] = a[offset + 1] = c.g;\n          b[offset + 2] = a[offset + 2] = c.b;\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given Matrix3 uniform.\n       *\n       * @param {Matrix3Uniform} uniform - The Matrix3 uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateMatrix3\",\n      value: function updateMatrix3(uniform) {\n        var updated = false;\n        var a = this.values;\n        var e = uniform.getValue().elements;\n        var offset = uniform.offset;\n        if (a[offset + 0] !== e[0] || a[offset + 1] !== e[1] || a[offset + 2] !== e[2] || a[offset + 4] !== e[3] || a[offset + 5] !== e[4] || a[offset + 6] !== e[5] || a[offset + 8] !== e[6] || a[offset + 9] !== e[7] || a[offset + 10] !== e[8]) {\n          var b = this.buffer;\n          b[offset + 0] = a[offset + 0] = e[0];\n          b[offset + 1] = a[offset + 1] = e[1];\n          b[offset + 2] = a[offset + 2] = e[2];\n          b[offset + 4] = a[offset + 4] = e[3];\n          b[offset + 5] = a[offset + 5] = e[4];\n          b[offset + 6] = a[offset + 6] = e[5];\n          b[offset + 8] = a[offset + 8] = e[6];\n          b[offset + 9] = a[offset + 9] = e[7];\n          b[offset + 10] = a[offset + 10] = e[8];\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Updates a given Matrix4 uniform.\n       *\n       * @param {Matrix4Uniform} uniform - The Matrix4 uniform.\n       * @return {Boolean} Whether the uniform has been updated or not.\n       */\n    }, {\n      key: \"updateMatrix4\",\n      value: function updateMatrix4(uniform) {\n        var updated = false;\n        var a = this.values;\n        var e = uniform.getValue().elements;\n        var offset = uniform.offset;\n        if (arraysEqual(a, e, offset) === false) {\n          var b = this.buffer;\n          b.set(e, offset);\n          setArray(a, e, offset);\n          updated = true;\n        }\n        return updated;\n      }\n\n      /**\n       * Returns a typed array that matches the given data type.\n       *\n       * @param {String} type - The data type.\n       * @return {TypedArray} The typed array.\n       */\n    }, {\n      key: \"_getBufferForType\",\n      value: function _getBufferForType(type) {\n        if (type === 'int' || type === 'ivec2' || type === 'ivec3' || type === 'ivec4') return new Int32Array(this.buffer.buffer);\n        if (type === 'uint' || type === 'uvec2' || type === 'uvec3' || type === 'uvec4') return new Uint32Array(this.buffer.buffer);\n        return this.buffer;\n      }\n    }]);\n  }(UniformBuffer);\n  /**\n   * Sets the values of the second array to the first array.\n   *\n   * @param {TypedArray} a - The first array.\n   * @param {TypedArray} b - The second array.\n   * @param {Number} offset - An index offset for the first array.\n   */\n  function setArray(a, b, offset) {\n    for (var i = 0, l = b.length; i < l; i++) {\n      a[offset + i] = b[i];\n    }\n  }\n\n  /**\n   * Returns `true` if the given arrays are equal.\n   *\n   * @param {TypedArray} a - The first array.\n   * @param {TypedArray} b - The second array.\n   * @param {Number} offset - An index offset for the first array.\n   * @return {Boolean} Whether the given arrays are equal or not.\n   */\n  function arraysEqual(a, b, offset) {\n    for (var i = 0, l = b.length; i < l; i++) {\n      if (a[offset + i] !== b[i]) return false;\n    }\n    return true;\n  }\n  var _id$3 = 0;\n\n  /**\n   * A special form of uniforms group that represents\n   * the individual uniforms as node-based uniforms.\n   *\n   * @private\n   * @augments UniformsGroup\n   */\n  var NodeUniformsGroup = /*#__PURE__*/function (_UniformsGroup) {\n    /**\n     * Constructs a new node-based uniforms group.\n     *\n     * @param {String} name - The group's name.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     */\n    function NodeUniformsGroup(name, groupNode) {\n      var _this198;\n      (0, _classCallCheck2.default)(this, NodeUniformsGroup);\n      _this198 = _callSuper(this, NodeUniformsGroup, [name]);\n\n      /**\n       * The group's ID.\n       *\n       * @type {Number}\n       */\n      _this198.id = _id$3++;\n\n      /**\n       * The uniform group node.\n       *\n       * @type {UniformGroupNode}\n       */\n      _this198.groupNode = groupNode;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this198.isNodeUniformsGroup = true;\n      return _this198;\n    }\n    (0, _inherits2.default)(NodeUniformsGroup, _UniformsGroup);\n    return (0, _createClass2.default)(NodeUniformsGroup);\n  }(UniformsGroup);\n  var _id$2 = 0;\n\n  /**\n   * Represents a sampled texture binding type.\n   *\n   * @private\n   * @augments Binding\n   */\n  var SampledTexture = /*#__PURE__*/function (_Binding2) {\n    /**\n     * Constructs a new sampled texture.\n     *\n     * @param {String} name - The sampled texture's name.\n     * @param {Texture?} texture - The texture this binding is referring to.\n     */\n    function SampledTexture(name, texture) {\n      var _this199;\n      (0, _classCallCheck2.default)(this, SampledTexture);\n      _this199 = _callSuper(this, SampledTexture, [name]);\n\n      /**\n       * This identifier.\n       *\n       * @type {Number}\n       */\n      _this199.id = _id$2++;\n\n      /**\n       * The texture this binding is referring to.\n       *\n       * @type {Texture?}\n       */\n      _this199.texture = texture;\n\n      /**\n       * The binding's version.\n       *\n       * @type {Number}\n       */\n      _this199.version = texture ? texture.version : 0;\n\n      /**\n       * Whether the texture is a storage texture or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this199.store = false;\n\n      /**\n       * The binding's generation which is an additional version\n       * qualifier.\n       *\n       * @type {Number?}\n       * @default null\n       */\n      _this199.generation = null;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this199.isSampledTexture = true;\n      return _this199;\n    }\n\n    /**\n     * Returns `true` whether this binding requires an update for the\n     * given generation.\n     *\n     * @param {Number} generation - The generation.\n     * @return {Boolean} Whether an update is required or not.\n     */\n    (0, _inherits2.default)(SampledTexture, _Binding2);\n    return (0, _createClass2.default)(SampledTexture, [{\n      key: \"needsBindingsUpdate\",\n      value: function needsBindingsUpdate(generation) {\n        var texture = this.texture;\n        if (generation !== this.generation) {\n          this.generation = generation;\n          return true;\n        }\n        return texture.isVideoTexture;\n      }\n\n      /**\n       * Updates the binding.\n       *\n       * @param {Number} generation - The generation.\n       * @return {Boolean} Whether the texture has been updated and must be\n       * uploaded to the GPU.\n       */\n    }, {\n      key: \"update\",\n      value: function update() {\n        var texture = this.texture,\n          version = this.version;\n        if (version !== texture.version) {\n          this.version = texture.version;\n          return true;\n        }\n        return false;\n      }\n    }]);\n  }(Binding);\n  /**\n   * A special form of sampled texture binding type.\n   * It's texture value is managed by a node object.\n   *\n   * @private\n   * @augments SampledTexture\n   */\n  var NodeSampledTexture = /*#__PURE__*/function (_SampledTexture) {\n    /**\n     * Constructs a new node-based sampled texture.\n     *\n     * @param {String} name - The textures's name.\n     * @param {TextureNode} textureNode - The texture node.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     * @param {String?} [access=null] - The access type.\n     */\n    function NodeSampledTexture(name, textureNode, groupNode) {\n      var _this200;\n      var access = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, NodeSampledTexture);\n      _this200 = _callSuper(this, NodeSampledTexture, [name, textureNode ? textureNode.value : null]);\n\n      /**\n       * The texture node.\n       *\n       * @type {TextureNode}\n       */\n      _this200.textureNode = textureNode;\n\n      /**\n       * The uniform group node.\n       *\n       * @type {UniformGroupNode}\n       */\n      _this200.groupNode = groupNode;\n\n      /**\n       * The access type.\n       *\n       * @type {String?}\n       * @default null\n       */\n      _this200.access = access;\n      return _this200;\n    }\n\n    /**\n     * Overwrites the default to additionally check if the node value has changed.\n     *\n     * @param {Number} generation - The generation.\n     * @return {Boolean} Whether an update is required or not.\n     */\n    (0, _inherits2.default)(NodeSampledTexture, _SampledTexture);\n    return (0, _createClass2.default)(NodeSampledTexture, [{\n      key: \"needsBindingsUpdate\",\n      value: function needsBindingsUpdate(generation) {\n        return this.textureNode.value !== this.texture || _superPropGet(NodeSampledTexture, \"needsBindingsUpdate\", this, 3)([generation]);\n      }\n\n      /**\n       * Updates the binding.\n       *\n       * @param {Number} generation - The generation.\n       * @return {Boolean} Whether the texture has been updated and must be\n       * uploaded to the GPU.\n       */\n    }, {\n      key: \"update\",\n      value: function update() {\n        var textureNode = this.textureNode;\n        if (this.texture !== textureNode.value) {\n          this.texture = textureNode.value;\n          return true;\n        }\n        return _superPropGet(NodeSampledTexture, \"update\", this, 3)([]);\n      }\n    }]);\n  }(SampledTexture);\n  /**\n   * A special form of sampled cube texture binding type.\n   * It's texture value is managed by a node object.\n   *\n   * @private\n   * @augments NodeSampledTexture\n   */\n  var NodeSampledCubeTexture = /*#__PURE__*/function (_NodeSampledTexture) {\n    /**\n     * Constructs a new node-based sampled cube texture.\n     *\n     * @param {String} name - The textures's name.\n     * @param {TextureNode} textureNode - The texture node.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     * @param {String?} [access=null] - The access type.\n     */\n    function NodeSampledCubeTexture(name, textureNode, groupNode) {\n      var _this201;\n      var access = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, NodeSampledCubeTexture);\n      _this201 = _callSuper(this, NodeSampledCubeTexture, [name, textureNode, groupNode, access]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this201.isSampledCubeTexture = true;\n      return _this201;\n    }\n    (0, _inherits2.default)(NodeSampledCubeTexture, _NodeSampledTexture);\n    return (0, _createClass2.default)(NodeSampledCubeTexture);\n  }(NodeSampledTexture);\n  /**\n   * A special form of sampled 3D texture binding type.\n   * It's texture value is managed by a node object.\n   *\n   * @private\n   * @augments NodeSampledTexture\n   */\n  var NodeSampledTexture3D = /*#__PURE__*/function (_NodeSampledTexture2) {\n    /**\n     * Constructs a new node-based sampled 3D texture.\n     *\n     * @param {String} name - The textures's name.\n     * @param {TextureNode} textureNode - The texture node.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     * @param {String?} [access=null] - The access type.\n     */\n    function NodeSampledTexture3D(name, textureNode, groupNode) {\n      var _this202;\n      var access = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      (0, _classCallCheck2.default)(this, NodeSampledTexture3D);\n      _this202 = _callSuper(this, NodeSampledTexture3D, [name, textureNode, groupNode, access]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this202.isSampledTexture3D = true;\n      return _this202;\n    }\n    (0, _inherits2.default)(NodeSampledTexture3D, _NodeSampledTexture2);\n    return (0, _createClass2.default)(NodeSampledTexture3D);\n  }(NodeSampledTexture);\n  var glslMethods = {\n    textureDimensions: 'textureSize',\n    equals: 'equal'\n  };\n  var precisionLib = {\n    low: 'lowp',\n    medium: 'mediump',\n    high: 'highp'\n  };\n  var supports$1 = {\n    swizzleAssign: true,\n    storageBuffer: false\n  };\n  var defaultPrecisions = `\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n`;\n  var GLSLNodeBuilder = /*#__PURE__*/function (_NodeBuilder) {\n    function GLSLNodeBuilder(object, renderer) {\n      var _this203;\n      (0, _classCallCheck2.default)(this, GLSLNodeBuilder);\n      _this203 = _callSuper(this, GLSLNodeBuilder, [object, renderer, new GLSLNodeParser()]);\n      _this203.uniformGroups = {};\n      _this203.transforms = [];\n      _this203.extensions = {};\n      _this203.builtins = {\n        vertex: [],\n        fragment: [],\n        compute: []\n      };\n      _this203.useComparisonMethod = true;\n      return _this203;\n    }\n    (0, _inherits2.default)(GLSLNodeBuilder, _NodeBuilder);\n    return (0, _createClass2.default)(GLSLNodeBuilder, [{\n      key: \"needsToWorkingColorSpace\",\n      value: function needsToWorkingColorSpace(texture) {\n        return texture.isVideoTexture === true && texture.colorSpace !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoColorSpace;\n      }\n    }, {\n      key: \"getMethod\",\n      value: function getMethod(method) {\n        return glslMethods[method] || method;\n      }\n    }, {\n      key: \"getOutputStructName\",\n      value: function getOutputStructName() {\n        return '';\n      }\n    }, {\n      key: \"buildFunctionCode\",\n      value: function buildFunctionCode(shaderNode) {\n        var layout = shaderNode.layout;\n        var flowData = this.flowShaderNode(shaderNode);\n        var parameters = [];\n        for (var input of layout.inputs) {\n          parameters.push(this.getType(input.type) + ' ' + input.name);\n        }\n\n        //\n\n        var code = `${this.getType(layout.type)} ${layout.name}( ${parameters.join(', ')} ) {\n\n\t${flowData.vars}\n\n${flowData.code}\n\treturn ${flowData.result};\n\n}`;\n\n        //\n\n        return code;\n      }\n    }, {\n      key: \"setupPBO\",\n      value: function setupPBO(storageBufferNode) {\n        var attribute = storageBufferNode.value;\n        if (attribute.pbo === undefined) {\n          var originalArray = attribute.array;\n          var numElements = attribute.count * attribute.itemSize;\n          var itemSize = attribute.itemSize;\n          var isInteger = attribute.array.constructor.name.toLowerCase().includes('int');\n          var format = isInteger ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedIntegerFormat : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedFormat;\n          if (itemSize === 2) {\n            format = isInteger ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGIntegerFormat : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGFormat;\n          } else if (itemSize === 3) {\n            format = isInteger ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBIntegerFormat : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBFormat;\n          } else if (itemSize === 4) {\n            format = isInteger ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAIntegerFormat : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat;\n          }\n          var typeMap = {\n            Float32Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType,\n            Uint8Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType,\n            Uint16Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType,\n            Uint32Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType,\n            Int8Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ByteType,\n            Int16Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShortType,\n            Int32Array: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType,\n            Uint8ClampedArray: _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType\n          };\n          var width = Math.pow(2, Math.ceil(Math.log2(Math.sqrt(numElements / itemSize))));\n          var height = Math.ceil(numElements / itemSize / width);\n          if (width * height * itemSize < numElements) height++; // Ensure enough space\n\n          var newSize = width * height * itemSize;\n          var newArray = new originalArray.constructor(newSize);\n          newArray.set(originalArray, 0);\n          attribute.array = newArray;\n          var pboTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DataTexture)(attribute.array, width, height, format, typeMap[attribute.array.constructor.name] || _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType);\n          pboTexture.needsUpdate = true;\n          pboTexture.isPBOTexture = true;\n          var pbo = new TextureNode(pboTexture, null, null);\n          pbo.setPrecision('high');\n          attribute.pboNode = pbo;\n          attribute.pbo = pbo.value;\n          this.getUniformFromNode(attribute.pboNode, 'texture', this.shaderStage, this.context.label);\n        }\n      }\n    }, {\n      key: \"getPropertyName\",\n      value: function getPropertyName(node) {\n        var shaderStage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.shaderStage;\n        if (node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true) {\n          return shaderStage.charAt(0) + '_' + node.name;\n        }\n        return _superPropGet(GLSLNodeBuilder, \"getPropertyName\", this, 3)([node, shaderStage]);\n      }\n    }, {\n      key: \"generatePBO\",\n      value: function generatePBO(storageArrayElementNode) {\n        var node = storageArrayElementNode.node,\n          indexNode = storageArrayElementNode.indexNode;\n        var attribute = node.value;\n        if (this.renderer.backend.has(attribute)) {\n          var attributeData = this.renderer.backend.get(attribute);\n          attributeData.pbo = attribute.pbo;\n        }\n        var nodeUniform = this.getUniformFromNode(attribute.pboNode, 'texture', this.shaderStage, this.context.label);\n        var textureName = this.getPropertyName(nodeUniform);\n        this.increaseUsage(indexNode); // force cache generate to be used as index in x,y\n        var indexSnippet = indexNode.build(this, 'uint');\n        var elementNodeData = this.getDataFromNode(storageArrayElementNode);\n        var propertyName = elementNodeData.propertyName;\n        if (propertyName === undefined) {\n          // property element\n\n          var nodeVar = this.getVarFromNode(storageArrayElementNode);\n          propertyName = this.getPropertyName(nodeVar);\n\n          // property size\n\n          var bufferNodeData = this.getDataFromNode(node);\n          var propertySizeName = bufferNodeData.propertySizeName;\n          if (propertySizeName === undefined) {\n            propertySizeName = propertyName + 'Size';\n            this.getVarFromNode(node, propertySizeName, 'uint');\n            this.addLineFlowCode(`${propertySizeName} = uint( textureSize( ${textureName}, 0 ).x )`, storageArrayElementNode);\n            bufferNodeData.propertySizeName = propertySizeName;\n          }\n\n          //\n\n          var itemSize = attribute.itemSize;\n          var channel = '.' + vectorComponents.join('').slice(0, itemSize);\n          var uvSnippet = `ivec2(${indexSnippet} % ${propertySizeName}, ${indexSnippet} / ${propertySizeName})`;\n          var snippet = this.generateTextureLoad(null, textureName, uvSnippet, null, '0');\n\n          //\n\n          var prefix = 'vec4';\n          if (attribute.pbo.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType) {\n            prefix = 'uvec4';\n          } else if (attribute.pbo.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) {\n            prefix = 'ivec4';\n          }\n          this.addLineFlowCode(`${propertyName} = ${prefix}(${snippet})${channel}`, storageArrayElementNode);\n          elementNodeData.propertyName = propertyName;\n        }\n        return propertyName;\n      }\n    }, {\n      key: \"generateTextureLoad\",\n      value: function generateTextureLoad(texture, textureProperty, uvIndexSnippet, depthSnippet) {\n        var levelSnippet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '0';\n        if (depthSnippet) {\n          return `texelFetch( ${textureProperty}, ivec3( ${uvIndexSnippet}, ${depthSnippet} ), ${levelSnippet} )`;\n        } else {\n          return `texelFetch( ${textureProperty}, ${uvIndexSnippet}, ${levelSnippet} )`;\n        }\n      }\n    }, {\n      key: \"generateTexture\",\n      value: function generateTexture(texture, textureProperty, uvSnippet, depthSnippet) {\n        if (texture.isDepthTexture) {\n          return `texture( ${textureProperty}, ${uvSnippet} ).x`;\n        } else {\n          if (depthSnippet) uvSnippet = `vec3( ${uvSnippet}, ${depthSnippet} )`;\n          return `texture( ${textureProperty}, ${uvSnippet} )`;\n        }\n      }\n    }, {\n      key: \"generateTextureLevel\",\n      value: function generateTextureLevel(texture, textureProperty, uvSnippet, levelSnippet) {\n        return `textureLod( ${textureProperty}, ${uvSnippet}, ${levelSnippet} )`;\n      }\n    }, {\n      key: \"generateTextureBias\",\n      value: function generateTextureBias(texture, textureProperty, uvSnippet, biasSnippet) {\n        return `texture( ${textureProperty}, ${uvSnippet}, ${biasSnippet} )`;\n      }\n    }, {\n      key: \"generateTextureGrad\",\n      value: function generateTextureGrad(texture, textureProperty, uvSnippet, gradSnippet) {\n        return `textureGrad( ${textureProperty}, ${uvSnippet}, ${gradSnippet[0]}, ${gradSnippet[1]} )`;\n      }\n    }, {\n      key: \"generateTextureCompare\",\n      value: function generateTextureCompare(texture, textureProperty, uvSnippet, compareSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.shaderStage;\n        if (shaderStage === 'fragment') {\n          return `texture( ${textureProperty}, vec3( ${uvSnippet}, ${compareSnippet} ) )`;\n        } else {\n          console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);\n        }\n      }\n    }, {\n      key: \"getVars\",\n      value: function getVars(shaderStage) {\n        var snippets = [];\n        var vars = this.vars[shaderStage];\n        if (vars !== undefined) {\n          for (var variable of vars) {\n            snippets.push(`${this.getVar(variable.type, variable.name)};`);\n          }\n        }\n        return snippets.join('\\n\\t');\n      }\n    }, {\n      key: \"getUniforms\",\n      value: function getUniforms(shaderStage) {\n        var uniforms = this.uniforms[shaderStage];\n        var bindingSnippets = [];\n        var uniformGroups = {};\n        for (var _uniform3 of uniforms) {\n          var snippet = null;\n          var group = false;\n          if (_uniform3.type === 'texture') {\n            var _texture6 = _uniform3.node.value;\n            var typePrefix = '';\n            if (_texture6.isDataTexture === true) {\n              if (_texture6.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType) {\n                typePrefix = 'u';\n              } else if (_texture6.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) {\n                typePrefix = 'i';\n              }\n            }\n            if (_texture6.compareFunction) {\n              snippet = `sampler2DShadow ${_uniform3.name};`;\n            } else if (_texture6.isDataArrayTexture === true || _texture6.isCompressedArrayTexture === true) {\n              snippet = `${typePrefix}sampler2DArray ${_uniform3.name};`;\n            } else {\n              snippet = `${typePrefix}sampler2D ${_uniform3.name};`;\n            }\n          } else if (_uniform3.type === 'cubeTexture') {\n            snippet = `samplerCube ${_uniform3.name};`;\n          } else if (_uniform3.type === 'texture3D') {\n            snippet = `sampler3D ${_uniform3.name};`;\n          } else if (_uniform3.type === 'buffer') {\n            var bufferNode = _uniform3.node;\n            var bufferType = this.getType(bufferNode.bufferType);\n            var bufferCount = bufferNode.bufferCount;\n            var bufferCountSnippet = bufferCount > 0 ? bufferCount : '';\n            snippet = `${bufferNode.name} {\\n\\t${bufferType} ${_uniform3.name}[${bufferCountSnippet}];\\n};\\n`;\n          } else {\n            var vectorType = this.getVectorType(_uniform3.type);\n            snippet = `${vectorType} ${this.getPropertyName(_uniform3, shaderStage)};`;\n            group = true;\n          }\n          var precision = _uniform3.node.precision;\n          if (precision !== null) {\n            snippet = precisionLib[precision] + ' ' + snippet;\n          }\n          if (group) {\n            snippet = '\\t' + snippet;\n            var groupName = _uniform3.groupNode.name;\n            var groupSnippets = uniformGroups[groupName] || (uniformGroups[groupName] = []);\n            groupSnippets.push(snippet);\n          } else {\n            snippet = 'uniform ' + snippet;\n            bindingSnippets.push(snippet);\n          }\n        }\n        var output = '';\n        for (var name in uniformGroups) {\n          var _groupSnippets = uniformGroups[name];\n          output += this._getGLSLUniformStruct(shaderStage + '_' + name, _groupSnippets.join('\\n')) + '\\n';\n        }\n        output += bindingSnippets.join('\\n');\n        return output;\n      }\n    }, {\n      key: \"getTypeFromAttribute\",\n      value: function getTypeFromAttribute(attribute) {\n        var nodeType = _superPropGet(GLSLNodeBuilder, \"getTypeFromAttribute\", this, 3)([attribute]);\n        if (/^[iu]/.test(nodeType) && attribute.gpuType !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) {\n          var dataAttribute = attribute;\n          if (attribute.isInterleavedBufferAttribute) dataAttribute = attribute.data;\n          var array = dataAttribute.array;\n          if ((array instanceof Uint32Array || array instanceof Int32Array) === false) {\n            nodeType = nodeType.slice(1);\n          }\n        }\n        return nodeType;\n      }\n    }, {\n      key: \"getAttributes\",\n      value: function getAttributes(shaderStage) {\n        var snippet = '';\n        if (shaderStage === 'vertex' || shaderStage === 'compute') {\n          var attributes = this.getAttributesArray();\n          var location = 0;\n          for (var _attribute10 of attributes) {\n            snippet += `layout( location = ${location++} ) in ${_attribute10.type} ${_attribute10.name};\\n`;\n          }\n        }\n        return snippet;\n      }\n    }, {\n      key: \"getStructMembers\",\n      value: function getStructMembers(struct) {\n        var snippets = [];\n        var members = struct.getMemberTypes();\n        for (var i = 0; i < members.length; i++) {\n          var member = members[i];\n          snippets.push(`layout( location = ${i} ) out ${member} m${i};`);\n        }\n        return snippets.join('\\n');\n      }\n    }, {\n      key: \"getStructs\",\n      value: function getStructs(shaderStage) {\n        var snippets = [];\n        var structs = this.structs[shaderStage];\n        if (structs.length === 0) {\n          return 'layout( location = 0 ) out vec4 fragColor;\\n';\n        }\n        for (var index = 0, _length2 = structs.length; index < _length2; index++) {\n          var struct = structs[index];\n          var snippet = '\\n';\n          snippet += this.getStructMembers(struct);\n          snippet += '\\n';\n          snippets.push(snippet);\n        }\n        return snippets.join('\\n\\n');\n      }\n    }, {\n      key: \"getVaryings\",\n      value: function getVaryings(shaderStage) {\n        var snippet = '';\n        var varyings = this.varyings;\n        if (shaderStage === 'vertex' || shaderStage === 'compute') {\n          for (var _varying of varyings) {\n            if (shaderStage === 'compute') _varying.needsInterpolation = true;\n            var type = this.getType(_varying.type);\n            var flat = type.includes('int') || type.includes('uv') || type.includes('iv') ? 'flat ' : '';\n            snippet += `${flat}${_varying.needsInterpolation ? 'out' : '/*out*/'} ${type} ${_varying.name};\\n`;\n          }\n        } else if (shaderStage === 'fragment') {\n          for (var _varying2 of varyings) {\n            if (_varying2.needsInterpolation) {\n              var _type2 = this.getType(_varying2.type);\n              var _flat = _type2.includes('int') || _type2.includes('uv') || _type2.includes('iv') ? 'flat ' : '';\n              snippet += `${_flat}in ${_type2} ${_varying2.name};\\n`;\n            }\n          }\n        }\n        for (var _builtin of this.builtins[shaderStage]) {\n          snippet += `${_builtin};\\n`;\n        }\n        return snippet;\n      }\n    }, {\n      key: \"getVertexIndex\",\n      value: function getVertexIndex() {\n        return 'uint( gl_VertexID )';\n      }\n    }, {\n      key: \"getInstanceIndex\",\n      value: function getInstanceIndex() {\n        return 'uint( gl_InstanceID )';\n      }\n    }, {\n      key: \"getInvocationLocalIndex\",\n      value: function getInvocationLocalIndex() {\n        var workgroupSize = this.object.workgroupSize;\n        var size = workgroupSize.reduce(function (acc, curr) {\n          return acc * curr;\n        }, 1);\n        return `uint( gl_InstanceID ) % ${size}u`;\n      }\n    }, {\n      key: \"getDrawIndex\",\n      value: function getDrawIndex() {\n        var extensions = this.renderer.backend.extensions;\n        if (extensions.has('WEBGL_multi_draw')) {\n          return 'uint( gl_DrawID )';\n        }\n        return null;\n      }\n    }, {\n      key: \"getFrontFacing\",\n      value: function getFrontFacing() {\n        return 'gl_FrontFacing';\n      }\n    }, {\n      key: \"getFragCoord\",\n      value: function getFragCoord() {\n        return 'gl_FragCoord.xy';\n      }\n    }, {\n      key: \"getFragDepth\",\n      value: function getFragDepth() {\n        return 'gl_FragDepth';\n      }\n    }, {\n      key: \"enableExtension\",\n      value: function enableExtension(name, behavior) {\n        var shaderStage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.shaderStage;\n        var map = this.extensions[shaderStage] || (this.extensions[shaderStage] = new Map());\n        if (map.has(name) === false) {\n          map.set(name, {\n            name: name,\n            behavior: behavior\n          });\n        }\n      }\n    }, {\n      key: \"getExtensions\",\n      value: function getExtensions(shaderStage) {\n        var snippets = [];\n        if (shaderStage === 'vertex') {\n          var ext = this.renderer.backend.extensions;\n          var isBatchedMesh = this.object.isBatchedMesh;\n          if (isBatchedMesh && ext.has('WEBGL_multi_draw')) {\n            this.enableExtension('GL_ANGLE_multi_draw', 'require', shaderStage);\n          }\n        }\n        var extensions = this.extensions[shaderStage];\n        if (extensions !== undefined) {\n          for (var _ref341 of extensions.values()) {\n            var name = _ref341.name;\n            var behavior = _ref341.behavior;\n            snippets.push(`#extension ${name} : ${behavior}`);\n          }\n        }\n        return snippets.join('\\n');\n      }\n    }, {\n      key: \"getClipDistance\",\n      value: function getClipDistance() {\n        return 'gl_ClipDistance';\n      }\n    }, {\n      key: \"isAvailable\",\n      value: function isAvailable(name) {\n        var result = supports$1[name];\n        if (result === undefined) {\n          var extensionName;\n          result = false;\n          switch (name) {\n            case 'float32Filterable':\n              extensionName = 'OES_texture_float_linear';\n              break;\n            case 'clipDistance':\n              extensionName = 'WEBGL_clip_cull_distance';\n              break;\n          }\n          if (extensionName !== undefined) {\n            var extensions = this.renderer.backend.extensions;\n            if (extensions.has(extensionName)) {\n              extensions.get(extensionName);\n              result = true;\n            }\n          }\n          supports$1[name] = result;\n        }\n        return result;\n      }\n    }, {\n      key: \"isFlipY\",\n      value: function isFlipY() {\n        return true;\n      }\n    }, {\n      key: \"enableHardwareClipping\",\n      value: function enableHardwareClipping(planeCount) {\n        this.enableExtension('GL_ANGLE_clip_cull_distance', 'require');\n        this.builtins['vertex'].push(`out float gl_ClipDistance[ ${planeCount} ]`);\n      }\n    }, {\n      key: \"registerTransform\",\n      value: function registerTransform(varyingName, attributeNode) {\n        this.transforms.push({\n          varyingName: varyingName,\n          attributeNode: attributeNode\n        });\n      }\n    }, {\n      key: \"getTransforms\",\n      value: function getTransforms(/* shaderStage  */\n      ) {\n        var transforms = this.transforms;\n        var snippet = '';\n        for (var i = 0; i < transforms.length; i++) {\n          var transform = transforms[i];\n          var attributeName = this.getPropertyName(transform.attributeNode);\n          snippet += `${transform.varyingName} = ${attributeName};\\n\\t`;\n        }\n        return snippet;\n      }\n    }, {\n      key: \"_getGLSLUniformStruct\",\n      value: function _getGLSLUniformStruct(name, vars) {\n        return `\nlayout( std140 ) uniform ${name} {\n${vars}\n};`;\n      }\n    }, {\n      key: \"_getGLSLVertexCode\",\n      value: function _getGLSLVertexCode(shaderData) {\n        return `#version 300 es\n\n${this.getSignature()}\n\n// extensions \n${shaderData.extensions}\n\n// precision\n${defaultPrecisions}\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// attributes\n${shaderData.attributes}\n\n// codes\n${shaderData.codes}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// transforms\n\t${shaderData.transforms}\n\n\t// flow\n\t${shaderData.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`;\n      }\n    }, {\n      key: \"_getGLSLFragmentCode\",\n      value: function _getGLSLFragmentCode(shaderData) {\n        return `#version 300 es\n\n${this.getSignature()}\n\n// precision\n${defaultPrecisions}\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// codes\n${shaderData.codes}\n\n${shaderData.structs}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n      }\n    }, {\n      key: \"buildCode\",\n      value: function buildCode() {\n        var shadersData = this.material !== null ? {\n          fragment: {},\n          vertex: {}\n        } : {\n          compute: {}\n        };\n        this.sortBindingGroups();\n        for (var shaderStage in shadersData) {\n          var flow = '// code\\n\\n';\n          flow += this.flowCode[shaderStage];\n          var flowNodes = this.flowNodes[shaderStage];\n          var mainNode = flowNodes[flowNodes.length - 1];\n          for (var node of flowNodes) {\n            var flowSlotData = this.getFlowData(node /*, shaderStage*/);\n            var slotName = node.name;\n            if (slotName) {\n              if (flow.length > 0) flow += '\\n';\n              flow += `\\t// flow -> ${slotName}\\n\\t`;\n            }\n            flow += `${flowSlotData.code}\\n\\t`;\n            if (node === mainNode && shaderStage !== 'compute') {\n              flow += '// result\\n\\t';\n              if (shaderStage === 'vertex') {\n                flow += 'gl_Position = ';\n                flow += `${flowSlotData.result};`;\n              } else if (shaderStage === 'fragment') {\n                if (!node.outputNode.isOutputStructNode) {\n                  flow += 'fragColor = ';\n                  flow += `${flowSlotData.result};`;\n                }\n              }\n            }\n          }\n          var stageData = shadersData[shaderStage];\n          stageData.extensions = this.getExtensions(shaderStage);\n          stageData.uniforms = this.getUniforms(shaderStage);\n          stageData.attributes = this.getAttributes(shaderStage);\n          stageData.varyings = this.getVaryings(shaderStage);\n          stageData.vars = this.getVars(shaderStage);\n          stageData.structs = this.getStructs(shaderStage);\n          stageData.codes = this.getCodes(shaderStage);\n          stageData.transforms = this.getTransforms(shaderStage);\n          stageData.flow = flow;\n        }\n        if (this.material !== null) {\n          this.vertexShader = this._getGLSLVertexCode(shadersData.vertex);\n          this.fragmentShader = this._getGLSLFragmentCode(shadersData.fragment);\n        } else {\n          this.computeShader = this._getGLSLVertexCode(shadersData.compute);\n        }\n      }\n    }, {\n      key: \"getUniformFromNode\",\n      value: function getUniformFromNode(node, type, shaderStage) {\n        var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var uniformNode = _superPropGet(GLSLNodeBuilder, \"getUniformFromNode\", this, 3)([node, type, shaderStage, name]);\n        var nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);\n        var uniformGPU = nodeData.uniformGPU;\n        if (uniformGPU === undefined) {\n          var group = node.groupNode;\n          var groupName = group.name;\n          var bindings = this.getBindGroupArray(groupName, shaderStage);\n          if (type === 'texture') {\n            uniformGPU = new NodeSampledTexture(uniformNode.name, uniformNode.node, group);\n            bindings.push(uniformGPU);\n          } else if (type === 'cubeTexture') {\n            uniformGPU = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group);\n            bindings.push(uniformGPU);\n          } else if (type === 'texture3D') {\n            uniformGPU = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group);\n            bindings.push(uniformGPU);\n          } else if (type === 'buffer') {\n            node.name = `NodeBuffer_${node.id}`;\n            uniformNode.name = `buffer${node.id}`;\n            var _buffer4 = new NodeUniformBuffer(node, group);\n            _buffer4.name = node.name;\n            bindings.push(_buffer4);\n            uniformGPU = _buffer4;\n          } else {\n            var uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});\n            var uniformsGroup = uniformsStage[groupName];\n            if (uniformsGroup === undefined) {\n              uniformsGroup = new NodeUniformsGroup(shaderStage + '_' + groupName, group);\n              //uniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n              uniformsStage[groupName] = uniformsGroup;\n              bindings.push(uniformsGroup);\n            }\n            uniformGPU = this.getNodeUniform(uniformNode, type);\n            uniformsGroup.addUniform(uniformGPU);\n          }\n          nodeData.uniformGPU = uniformGPU;\n        }\n        return uniformNode;\n      }\n    }]);\n  }(NodeBuilder);\n  var _vector2 = null;\n  var _color4 = null;\n\n  /**\n   * Most of the rendering related logic is implemented in the\n   * {@link module:Renderer} module and related management components.\n   * Sometimes it is required though to execute commands which are\n   * specific to the current 3D backend (which is WebGPU or WebGL 2).\n   * This abstract base class defines an interface that encapsulates\n   * all backend-related logic. Derived classes for each backend must\n   * implement the interface.\n   *\n   * @abstract\n   * @private\n   */\n  var Backend = /*#__PURE__*/function () {\n    /**\n     * Constructs a new backend.\n     *\n     * @param {Object} parameters - An object holding parameters for the backend.\n     */\n    function Backend() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, Backend);\n      /**\n       * The parameters of the backend.\n       *\n       * @type {Object}\n       */\n      this.parameters = Object.assign({}, parameters);\n\n      /**\n       * This weak map holds backend-specific data of objects\n       * like textures, attributes or render targets.\n       *\n       * @type {WeakMap}\n       */\n      this.data = new WeakMap();\n\n      /**\n       * A reference to the renderer.\n       *\n       * @type {Renderer?}\n       * @default null\n       */\n      this.renderer = null;\n\n      /**\n       * A reference to the canvas element the renderer is drawing to.\n       *\n       * @type {(HTMLCanvasElement|OffscreenCanvas)?}\n       * @default null\n       */\n      this.domElement = null;\n    }\n\n    /**\n     * Initializes the backend so it is ready for usage. Concrete backends\n     * are supposed to implement their rendering context creation and related\n     * operations in this method.\n     *\n     * @async\n     * @param {Renderer} renderer - The renderer.\n     * @return {Promise} A Promise that resolves when the backend has been initialized.\n     */\n    return (0, _createClass2.default)(Backend, [{\n      key: \"init\",\n      value: (function () {\n        var _init3 = (0, _asyncToGenerator2.default)(function* (renderer) {\n          this.renderer = renderer;\n        });\n        function init(_x27) {\n          return _init3.apply(this, arguments);\n        }\n        return init;\n      }()\n      /**\n       * The coordinate system of the backend.\n       *\n       * @abstract\n       * @type {Number}\n       * @readonly\n       */\n      )\n    }, {\n      key: \"coordinateSystem\",\n      get: function get() {}\n\n      // render context\n\n      /**\n       * This method is executed at the beginning of a render call and\n       * can be used by the backend to prepare the state for upcoming\n       * draw calls.\n       *\n       * @abstract\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"beginRender\",\n      value: function beginRender(/*renderContext*/) {}\n\n      /**\n       * This method is executed at the end of a render call and\n       * can be used by the backend to finalize work after draw\n       * calls.\n       *\n       * @abstract\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"finishRender\",\n      value: function finishRender(/*renderContext*/) {}\n\n      /**\n       * This method is executed at the beginning of a compute call and\n       * can be used by the backend to prepare the state for upcoming\n       * compute tasks.\n       *\n       * @abstract\n       * @param {Node|Array<Node>} computeGroup - The compute node(s).\n       */\n    }, {\n      key: \"beginCompute\",\n      value: function beginCompute(/*computeGroup*/) {}\n\n      /**\n       * This method is executed at the end of a compute call and\n       * can be used by the backend to finalize work after compute\n       * tasks.\n       *\n       * @abstract\n       * @param {Node|Array<Node>} computeGroup - The compute node(s).\n       */\n    }, {\n      key: \"finishCompute\",\n      value: function finishCompute(/*computeGroup*/) {}\n\n      // render object\n\n      /**\n       * Executes a draw command for the given render object.\n       *\n       * @abstract\n       * @param {RenderObject} renderObject - The render object to draw.\n       * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.\n       */\n    }, {\n      key: \"draw\",\n      value: function draw(/*renderObject, info*/) {}\n\n      // compute node\n\n      /**\n       * Executes a compute command for the given compute node.\n       *\n       * @abstract\n       * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.\n       * @param {Node} computeNode - The compute node.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       * @param {ComputePipeline} computePipeline - The compute pipeline.\n       */\n    }, {\n      key: \"compute\",\n      value: function compute(/*computeGroup, computeNode, computeBindings, computePipeline*/) {}\n\n      // program\n\n      /**\n       * Creates a shader program from the given programmable stage.\n       *\n       * @abstract\n       * @param {ProgrammableStage} program - The programmable stage.\n       */\n    }, {\n      key: \"createProgram\",\n      value: function createProgram(/*program*/) {}\n\n      /**\n       * Destroys the shader program of the given programmable stage.\n       *\n       * @abstract\n       * @param {ProgrammableStage} program - The programmable stage.\n       */\n    }, {\n      key: \"destroyProgram\",\n      value: function destroyProgram(/*program*/) {}\n\n      // bindings\n\n      /**\n       * Creates bindings from the given bind group definition.\n       *\n       * @abstract\n       * @param {BindGroup} bindGroup - The bind group.\n       * @param {Array<BindGroup>} bindings - Array of bind groups.\n       * @param {Number} cacheIndex - The cache index.\n       * @param {Number} version - The version.\n       */\n    }, {\n      key: \"createBindings\",\n      value: function createBindings(/*bindGroup, bindings, cacheIndex, version*/) {}\n\n      /**\n       * Updates the given bind group definition.\n       *\n       * @abstract\n       * @param {BindGroup} bindGroup - The bind group.\n       * @param {Array<BindGroup>} bindings - Array of bind groups.\n       * @param {Number} cacheIndex - The cache index.\n       * @param {Number} version - The version.\n       */\n    }, {\n      key: \"updateBindings\",\n      value: function updateBindings(/*bindGroup, bindings, cacheIndex, version*/) {}\n\n      /**\n       * Updates a buffer binding.\n       *\n       * @abstract\n       * @param {Buffer} binding - The buffer binding to update.\n       */\n    }, {\n      key: \"updateBinding\",\n      value: function updateBinding(/*binding*/) {}\n\n      // pipeline\n\n      /**\n       * Creates a render pipeline for the given render object.\n       *\n       * @abstract\n       * @param {RenderObject} renderObject - The render object.\n       * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n       */\n    }, {\n      key: \"createRenderPipeline\",\n      value: function createRenderPipeline(/*renderObject, promises*/) {}\n\n      /**\n       * Creates a compute pipeline for the given compute node.\n       *\n       * @abstract\n       * @param {ComputePipeline} computePipeline - The compute pipeline.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       */\n    }, {\n      key: \"createComputePipeline\",\n      value: function createComputePipeline(/*computePipeline, bindings*/) {}\n\n      // cache key\n\n      /**\n       * Returns `true` if the render pipeline requires an update.\n       *\n       * @abstract\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Boolean} Whether the render pipeline requires an update or not.\n       */\n    }, {\n      key: \"needsRenderUpdate\",\n      value: function needsRenderUpdate(/*renderObject*/) {}\n\n      /**\n       * Returns a cache key that is used to identify render pipelines.\n       *\n       * @abstract\n       * @param {RenderObject} renderObject - The render object.\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"getRenderCacheKey\",\n      value: function getRenderCacheKey(/*renderObject*/) {}\n\n      // node builder\n\n      /**\n       * Returns a node builder for the given render object.\n       *\n       * @abstract\n       * @param {RenderObject} renderObject - The render object.\n       * @param {Renderer} renderer - The renderer.\n       * @return {NodeBuilder} The node builder.\n       */\n    }, {\n      key: \"createNodeBuilder\",\n      value: function createNodeBuilder(/*renderObject, renderer*/) {}\n\n      // textures\n\n      /**\n       * Creates a sampler for the given texture.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture to create the sampler for.\n       */\n    }, {\n      key: \"createSampler\",\n      value: function createSampler(/*texture*/) {}\n\n      /**\n       * Destroys the sampler for the given texture.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture to destroy the sampler for.\n       */\n    }, {\n      key: \"destroySampler\",\n      value: function destroySampler(/*texture*/) {}\n\n      /**\n       * Creates a default texture for the given texture that can be used\n       * as a placeholder until the actual texture is ready for usage.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture to create a default texture for.\n       */\n    }, {\n      key: \"createDefaultTexture\",\n      value: function createDefaultTexture(/*texture*/) {}\n\n      /**\n       * Defines a texture on the GPU for the given texture object.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture.\n       * @param {Object} [options={}] - Optional configuration parameter.\n       */\n    }, {\n      key: \"createTexture\",\n      value: function createTexture(/*texture, options={}*/) {}\n\n      /**\n       * Uploads the updated texture data to the GPU.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture.\n       * @param {Object} [options={}] - Optional configuration parameter.\n       */\n    }, {\n      key: \"updateTexture\",\n      value: function updateTexture(/*texture, options = {}*/) {}\n\n      /**\n       * Generates mipmaps for the given texture\n       *\n       * @abstract\n       * @param {Texture} texture - The texture.\n       */\n    }, {\n      key: \"generateMipmaps\",\n      value: function generateMipmaps(/*texture*/) {}\n\n      /**\n       * Destroys the GPU data for the given texture object.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture.\n       */\n    }, {\n      key: \"destroyTexture\",\n      value: function destroyTexture(/*texture*/) {}\n\n      /**\n       * Returns texture data as a typed array.\n       *\n       * @abstract\n       * @param {Texture} texture - The texture to copy.\n       * @param {Number} x - The x coordinate of the copy origin.\n       * @param {Number} y - The y coordinate of the copy origin.\n       * @param {Number} width - The width of the copy.\n       * @param {Number} height - The height of the copy.\n       * @param {Number} faceIndex - The face index.\n       * @return {TypedArray} The texture data as a typed array.\n       */\n    }, {\n      key: \"copyTextureToBuffer\",\n      value: function copyTextureToBuffer(/*texture, x, y, width, height, faceIndex*/) {}\n\n      /**\n       * Copies data of the given source texture to the given destination texture.\n       *\n       * @abstract\n       * @param {Texture} srcTexture - The source texture.\n       * @param {Texture} dstTexture - The destination texture.\n       * @param {Vector4?} [srcRegion=null] - The region of the source texture to copy.\n       * @param {(Vector2|Vector3)?} [dstPosition=null] - The destination position of the copy.\n       * @param {Number} [level=0] - The mip level to copy.\n       */\n    }, {\n      key: \"copyTextureToTexture\",\n      value: function copyTextureToTexture(/*srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0*/) {}\n\n      /**\n      * Copies the current bound framebuffer to the given texture.\n      *\n      * @abstract\n      * @param {Texture} texture - The destination texture.\n      * @param {RenderContext} renderContext - The render context.\n      * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n      */\n    }, {\n      key: \"copyFramebufferToTexture\",\n      value: function copyFramebufferToTexture(/*texture, renderContext, rectangle*/) {}\n\n      // attributes\n\n      /**\n       * Creates the buffer of a shader attribute.\n       *\n       * @abstract\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createAttribute\",\n      value: function createAttribute(/*attribute*/) {}\n\n      /**\n       * Creates the buffer of an indexed shader attribute.\n       *\n       * @abstract\n       * @param {BufferAttribute} attribute - The indexed buffer attribute.\n       */\n    }, {\n      key: \"createIndexAttribute\",\n      value: function createIndexAttribute(/*attribute*/) {}\n\n      /**\n       * Creates the buffer of a storage attribute.\n       *\n       * @abstract\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createStorageAttribute\",\n      value: function createStorageAttribute(/*attribute*/) {}\n\n      /**\n       * Updates the buffer of a shader attribute.\n       *\n       * @abstract\n       * @param {BufferAttribute} attribute - The buffer attribute to update.\n       */\n    }, {\n      key: \"updateAttribute\",\n      value: function updateAttribute(/*attribute*/) {}\n\n      /**\n       * Destroys the buffer of a shader attribute.\n       *\n       * @abstract\n       * @param {BufferAttribute} attribute - The buffer attribute to destroy.\n       */\n    }, {\n      key: \"destroyAttribute\",\n      value: function destroyAttribute(/*attribute*/) {}\n\n      // canvas\n\n      /**\n       * Returns the backend's rendering context.\n       *\n       * @abstract\n       * @return {Object} The rendering context.\n       */\n    }, {\n      key: \"getContext\",\n      value: function getContext() {}\n\n      /**\n       * Backends can use this method if they have to run\n       * logic when the renderer gets resized.\n       *\n       * @abstract\n       */\n    }, {\n      key: \"updateSize\",\n      value: function updateSize() {}\n\n      /**\n       * Updates the viewport with the values from the given render context.\n       *\n       * @abstract\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"updateViewport\",\n      value: function updateViewport(/*renderContext*/) {}\n\n      // utils\n\n      /**\n       * Returns `true` if the given 3D object is fully occluded by other\n       * 3D objects in the scene. Backends must implement this method by using\n       * a Occlusion Query API.\n       *\n       * @abstract\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Object3D} object - The 3D object to test.\n       * @return {Boolean} Whether the 3D object is fully occluded or not.\n       */\n    }, {\n      key: \"isOccluded\",\n      value: function isOccluded(/*renderContext, object*/) {}\n\n      /**\n       * Resolves the time stamp for the given render context and type.\n       *\n       * @async\n       * @abstract\n       * @param {RenderContext} renderContext - The render context.\n       * @param {String} type - The render context.\n       * @return {Promise} A Promise that resolves when the time stamp has been computed.\n       */\n    }, {\n      key: \"resolveTimestampAsync\",\n      value: (function () {\n        var _resolveTimestampAsync = (0, _asyncToGenerator2.default)(function* () {});\n        function resolveTimestampAsync() {\n          return _resolveTimestampAsync.apply(this, arguments);\n        }\n        return resolveTimestampAsync;\n      }(\n        /*renderContext, type*/\n      )\n      /**\n       * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n       * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n       *\n       * @async\n       * @abstract\n       * @return {Promise} A Promise that resolves when synchronization has been finished.\n       */\n      )\n    }, {\n      key: \"waitForGPU\",\n      value: (function () {\n        var _waitForGPU2 = (0, _asyncToGenerator2.default)(function* () {});\n        function waitForGPU() {\n          return _waitForGPU2.apply(this, arguments);\n        }\n        return waitForGPU;\n      }()\n      /**\n       * Checks if the given feature is supported by the backend.\n       *\n       * @async\n       * @abstract\n       * @param {String} name - The feature's name.\n       * @return {Promise<Boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.\n       */\n      )\n    }, {\n      key: \"hasFeatureAsync\",\n      value: (function () {\n        var _hasFeatureAsync2 = (0, _asyncToGenerator2.default)(function* () {});\n        function hasFeatureAsync() {\n          return _hasFeatureAsync2.apply(this, arguments);\n        }\n        return hasFeatureAsync;\n      }(\n        /*name*/\n      )\n      /**\n       * Checks if the given feature is supported  by the backend.\n       *\n       * @abstract\n       * @param {String} name - The feature's name.\n       * @return {Boolean} Whether the feature is supported or not.\n       */\n      )\n    }, {\n      key: \"hasFeature\",\n      value: function hasFeature(/*name*/) {}\n\n      /**\n       * Returns the maximum anisotropy texture filtering value.\n       *\n       * @abstract\n       * @return {Number} The maximum anisotropy texture filtering value.\n       */\n    }, {\n      key: \"getMaxAnisotropy\",\n      value: function getMaxAnisotropy() {}\n\n      /**\n       * Returns the drawing buffer size.\n       *\n       * @return {Vector2} The drawing buffer size.\n       */\n    }, {\n      key: \"getDrawingBufferSize\",\n      value: function getDrawingBufferSize() {\n        _vector2 = _vector2 || new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Vector2)();\n        return this.renderer.getDrawingBufferSize(_vector2);\n      }\n\n      /**\n       * Defines the scissor test.\n       *\n       * @abstract\n       * @param {Boolean} boolean - Whether the scissor test should be enabled or not.\n       */\n    }, {\n      key: \"setScissorTest\",\n      value: function setScissorTest(/*boolean*/) {}\n\n      /**\n       * Returns the clear color and alpha into a single\n       * color object.\n       *\n       * @return {Color4} The clear color.\n       */\n    }, {\n      key: \"getClearColor\",\n      value: function getClearColor() {\n        var renderer = this.renderer;\n        _color4 = _color4 || new Color4();\n        renderer.getClearColor(_color4);\n        _color4.getRGB(_color4, this.renderer.currentColorSpace);\n        return _color4;\n      }\n\n      /**\n       * Returns the DOM element. If no DOM element exists, the backend\n       * creates a new one.\n       *\n       * @return {HTMLCanvasElement} The DOM element.\n       */\n    }, {\n      key: \"getDomElement\",\n      value: function getDomElement() {\n        var domElement = this.domElement;\n        if (domElement === null) {\n          domElement = this.parameters.canvas !== undefined ? this.parameters.canvas : (0, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").createCanvasElement)();\n\n          // OffscreenCanvas does not have setAttribute, see #22811\n          if ('setAttribute' in domElement) domElement.setAttribute('data-engine', `three.js r${_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").REVISION} webgpu`);\n          this.domElement = domElement;\n        }\n        return domElement;\n      }\n\n      /**\n       * Sets a dictionary for the given object into the\n       * internal data structure.\n       *\n       * @param {Object} object - The object.\n       * @param {Object} value - The dictionary to set.\n       */\n    }, {\n      key: \"set\",\n      value: function set(object, value) {\n        this.data.set(object, value);\n      }\n\n      /**\n       * Returns the dictionary for the given object.\n       *\n       * @param {Object} object - The object.\n       * @return {Object} The object's dictionary.\n       */\n    }, {\n      key: \"get\",\n      value: function get(object) {\n        var map = this.data.get(object);\n        if (map === undefined) {\n          map = {};\n          this.data.set(object, map);\n        }\n        return map;\n      }\n\n      /**\n       * Checks if the given object has a dictionary\n       * with data defined.\n       *\n       * @param {Object} object - The object.\n       * @return {Boolean} Whether a dictionary for the given object as been defined or not.\n       */\n    }, {\n      key: \"has\",\n      value: function has(object) {\n        return this.data.has(object);\n      }\n\n      /**\n       * Deletes an object from the internal data structure.\n       *\n       * @param {Object} object - The object to delete.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete(object) {\n        this.data.delete(object);\n      }\n\n      /**\n       * Frees internal resources.\n       *\n       * @abstract\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {}\n    }]);\n  }();\n  var _id$1 = 0;\n  var DualAttributeData = /*#__PURE__*/function () {\n    function DualAttributeData(attributeData, dualBuffer) {\n      (0, _classCallCheck2.default)(this, DualAttributeData);\n      this.buffers = [attributeData.bufferGPU, dualBuffer];\n      this.type = attributeData.type;\n      this.bufferType = attributeData.bufferType;\n      this.pbo = attributeData.pbo;\n      this.byteLength = attributeData.byteLength;\n      this.bytesPerElement = attributeData.BYTES_PER_ELEMENT;\n      this.version = attributeData.version;\n      this.isInteger = attributeData.isInteger;\n      this.activeBufferIndex = 0;\n      this.baseId = attributeData.id;\n    }\n    return (0, _createClass2.default)(DualAttributeData, [{\n      key: \"id\",\n      get: function get() {\n        return `${this.baseId}|${this.activeBufferIndex}`;\n      }\n    }, {\n      key: \"bufferGPU\",\n      get: function get() {\n        return this.buffers[this.activeBufferIndex];\n      }\n    }, {\n      key: \"transformBuffer\",\n      get: function get() {\n        return this.buffers[this.activeBufferIndex ^ 1];\n      }\n    }, {\n      key: \"switchBuffers\",\n      value: function switchBuffers() {\n        this.activeBufferIndex ^= 1;\n      }\n    }]);\n  }();\n  var WebGLAttributeUtils = /*#__PURE__*/function () {\n    function WebGLAttributeUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGLAttributeUtils);\n      this.backend = backend;\n    }\n    return (0, _createClass2.default)(WebGLAttributeUtils, [{\n      key: \"createAttribute\",\n      value: function createAttribute(attribute, bufferType) {\n        var backend = this.backend;\n        var gl = backend.gl;\n        var array = attribute.array;\n        var usage = attribute.usage || gl.STATIC_DRAW;\n        var bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n        var bufferData = backend.get(bufferAttribute);\n        var bufferGPU = bufferData.bufferGPU;\n        if (bufferGPU === undefined) {\n          bufferGPU = this._createBuffer(gl, bufferType, array, usage);\n          bufferData.bufferGPU = bufferGPU;\n          bufferData.bufferType = bufferType;\n          bufferData.version = bufferAttribute.version;\n        }\n\n        //attribute.onUploadCallback();\n\n        var type;\n        if (array instanceof Float32Array) {\n          type = gl.FLOAT;\n        } else if (array instanceof Uint16Array) {\n          if (attribute.isFloat16BufferAttribute) {\n            type = gl.HALF_FLOAT;\n          } else {\n            type = gl.UNSIGNED_SHORT;\n          }\n        } else if (array instanceof Int16Array) {\n          type = gl.SHORT;\n        } else if (array instanceof Uint32Array) {\n          type = gl.UNSIGNED_INT;\n        } else if (array instanceof Int32Array) {\n          type = gl.INT;\n        } else if (array instanceof Int8Array) {\n          type = gl.BYTE;\n        } else if (array instanceof Uint8Array) {\n          type = gl.UNSIGNED_BYTE;\n        } else if (array instanceof Uint8ClampedArray) {\n          type = gl.UNSIGNED_BYTE;\n        } else {\n          throw new Error('THREE.WebGLBackend: Unsupported buffer data format: ' + array);\n        }\n        var attributeData = {\n          bufferGPU: bufferGPU,\n          bufferType: bufferType,\n          type: type,\n          byteLength: array.byteLength,\n          bytesPerElement: array.BYTES_PER_ELEMENT,\n          version: attribute.version,\n          pbo: attribute.pbo,\n          isInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute.gpuType === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType,\n          id: _id$1++\n        };\n        if (attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute) {\n          // create buffer for transform feedback use\n          var bufferGPUDual = this._createBuffer(gl, bufferType, array, usage);\n          attributeData = new DualAttributeData(attributeData, bufferGPUDual);\n        }\n        backend.set(attribute, attributeData);\n      }\n    }, {\n      key: \"updateAttribute\",\n      value: function updateAttribute(attribute) {\n        var backend = this.backend;\n        var gl = backend.gl;\n        var array = attribute.array;\n        var bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n        var bufferData = backend.get(bufferAttribute);\n        var bufferType = bufferData.bufferType;\n        var updateRanges = attribute.isInterleavedBufferAttribute ? attribute.data.updateRanges : attribute.updateRanges;\n        gl.bindBuffer(bufferType, bufferData.bufferGPU);\n        if (updateRanges.length === 0) {\n          // Not using update ranges\n\n          gl.bufferSubData(bufferType, 0, array);\n        } else {\n          for (var i = 0, l = updateRanges.length; i < l; i++) {\n            var _range = updateRanges[i];\n            gl.bufferSubData(bufferType, _range.start * array.BYTES_PER_ELEMENT, array, _range.start, _range.count);\n          }\n          bufferAttribute.clearUpdateRanges();\n        }\n        gl.bindBuffer(bufferType, null);\n        bufferData.version = bufferAttribute.version;\n      }\n    }, {\n      key: \"destroyAttribute\",\n      value: function destroyAttribute(attribute) {\n        var backend = this.backend;\n        var gl = backend.gl;\n        if (attribute.isInterleavedBufferAttribute) {\n          backend.delete(attribute.data);\n        }\n        var attributeData = backend.get(attribute);\n        gl.deleteBuffer(attributeData.bufferGPU);\n        backend.delete(attribute);\n      }\n    }, {\n      key: \"getArrayBufferAsync\",\n      value: function () {\n        var _getArrayBufferAsync2 = (0, _asyncToGenerator2.default)(function* (attribute) {\n          var backend = this.backend;\n          var gl = backend.gl;\n          var bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n          var _backend$get = backend.get(bufferAttribute),\n            bufferGPU = _backend$get.bufferGPU;\n          var array = attribute.array;\n          var byteLength = array.byteLength;\n          gl.bindBuffer(gl.COPY_READ_BUFFER, bufferGPU);\n          var writeBuffer = gl.createBuffer();\n          gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);\n          gl.bufferData(gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ);\n          gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength);\n          yield backend.utils._clientWaitAsync();\n          var dstBuffer = new attribute.array.constructor(array.length);\n\n          // Ensure the buffer is bound before reading\n          gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);\n          gl.getBufferSubData(gl.COPY_WRITE_BUFFER, 0, dstBuffer);\n          gl.deleteBuffer(writeBuffer);\n          gl.bindBuffer(gl.COPY_READ_BUFFER, null);\n          gl.bindBuffer(gl.COPY_WRITE_BUFFER, null);\n          return dstBuffer.buffer;\n        });\n        function getArrayBufferAsync(_x28) {\n          return _getArrayBufferAsync2.apply(this, arguments);\n        }\n        return getArrayBufferAsync;\n      }()\n    }, {\n      key: \"_createBuffer\",\n      value: function _createBuffer(gl, bufferType, array, usage) {\n        var bufferGPU = gl.createBuffer();\n        gl.bindBuffer(bufferType, bufferGPU);\n        gl.bufferData(bufferType, array, usage);\n        gl.bindBuffer(bufferType, null);\n        return bufferGPU;\n      }\n    }]);\n  }();\n  var initialized$1 = false,\n    equationToGL,\n    factorToGL;\n  var WebGLState = /*#__PURE__*/function () {\n    function WebGLState(backend) {\n      (0, _classCallCheck2.default)(this, WebGLState);\n      this.backend = backend;\n      this.gl = this.backend.gl;\n      this.enabled = {};\n      this.currentFlipSided = null;\n      this.currentCullFace = null;\n      this.currentProgram = null;\n      this.currentBlendingEnabled = false;\n      this.currentBlending = null;\n      this.currentBlendSrc = null;\n      this.currentBlendDst = null;\n      this.currentBlendSrcAlpha = null;\n      this.currentBlendDstAlpha = null;\n      this.currentPremultipledAlpha = null;\n      this.currentPolygonOffsetFactor = null;\n      this.currentPolygonOffsetUnits = null;\n      this.currentColorMask = null;\n      this.currentDepthFunc = null;\n      this.currentDepthMask = null;\n      this.currentStencilFunc = null;\n      this.currentStencilRef = null;\n      this.currentStencilFuncMask = null;\n      this.currentStencilFail = null;\n      this.currentStencilZFail = null;\n      this.currentStencilZPass = null;\n      this.currentStencilMask = null;\n      this.currentLineWidth = null;\n      this.currentClippingPlanes = 0;\n      this.currentBoundFramebuffers = {};\n      this.currentDrawbuffers = new WeakMap();\n      this.maxTextures = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);\n      this.currentTextureSlot = null;\n      this.currentBoundTextures = {};\n      this.currentBoundBufferBases = {};\n      if (initialized$1 === false) {\n        this._init(this.gl);\n        initialized$1 = true;\n      }\n    }\n    return (0, _createClass2.default)(WebGLState, [{\n      key: \"_init\",\n      value: function _init(gl) {\n        var _factorToGL;\n        // Store only WebGL constants here.\n\n        equationToGL = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation, gl.FUNC_ADD), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractEquation, gl.FUNC_SUBTRACT), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReverseSubtractEquation, gl.FUNC_REVERSE_SUBTRACT);\n        factorToGL = (_factorToGL = {}, (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_factorToGL, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroFactor, gl.ZERO), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneFactor, gl.ONE), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcColorFactor, gl.SRC_COLOR), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcAlphaFactor, gl.SRC_ALPHA), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcAlphaSaturateFactor, gl.SRC_ALPHA_SATURATE), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DstColorFactor, gl.DST_COLOR), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DstAlphaFactor, gl.DST_ALPHA), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusSrcColorFactor, gl.ONE_MINUS_SRC_COLOR), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusSrcAlphaFactor, gl.ONE_MINUS_SRC_ALPHA), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusDstColorFactor, gl.ONE_MINUS_DST_COLOR), (0, _defineProperty2.default)(_factorToGL, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusDstAlphaFactor, gl.ONE_MINUS_DST_ALPHA));\n      }\n    }, {\n      key: \"enable\",\n      value: function enable(id) {\n        var enabled = this.enabled;\n        if (enabled[id] !== true) {\n          this.gl.enable(id);\n          enabled[id] = true;\n        }\n      }\n    }, {\n      key: \"disable\",\n      value: function disable(id) {\n        var enabled = this.enabled;\n        if (enabled[id] !== false) {\n          this.gl.disable(id);\n          enabled[id] = false;\n        }\n      }\n    }, {\n      key: \"setFlipSided\",\n      value: function setFlipSided(flipSided) {\n        if (this.currentFlipSided !== flipSided) {\n          var gl = this.gl;\n          if (flipSided) {\n            gl.frontFace(gl.CW);\n          } else {\n            gl.frontFace(gl.CCW);\n          }\n          this.currentFlipSided = flipSided;\n        }\n      }\n    }, {\n      key: \"setCullFace\",\n      value: function setCullFace(cullFace) {\n        var gl = this.gl;\n        if (cullFace !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceNone) {\n          this.enable(gl.CULL_FACE);\n          if (cullFace !== this.currentCullFace) {\n            if (cullFace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceBack) {\n              gl.cullFace(gl.BACK);\n            } else if (cullFace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CullFaceFront) {\n              gl.cullFace(gl.FRONT);\n            } else {\n              gl.cullFace(gl.FRONT_AND_BACK);\n            }\n          }\n        } else {\n          this.disable(gl.CULL_FACE);\n        }\n        this.currentCullFace = cullFace;\n      }\n    }, {\n      key: \"setLineWidth\",\n      value: function setLineWidth(width) {\n        var currentLineWidth = this.currentLineWidth,\n          gl = this.gl;\n        if (width !== currentLineWidth) {\n          gl.lineWidth(width);\n          this.currentLineWidth = width;\n        }\n      }\n    }, {\n      key: \"setBlending\",\n      value: function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n        var gl = this.gl;\n        if (blending === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending) {\n          if (this.currentBlendingEnabled === true) {\n            this.disable(gl.BLEND);\n            this.currentBlendingEnabled = false;\n          }\n          return;\n        }\n        if (this.currentBlendingEnabled === false) {\n          this.enable(gl.BLEND);\n          this.currentBlendingEnabled = true;\n        }\n        if (blending !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CustomBlending) {\n          if (blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha) {\n            if (this.currentBlendEquation !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation || this.currentBlendEquationAlpha !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation) {\n              gl.blendEquation(gl.FUNC_ADD);\n              this.currentBlendEquation = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation;\n              this.currentBlendEquationAlpha = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation;\n            }\n            if (premultipliedAlpha) {\n              switch (blending) {\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending:\n                  gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                  break;\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AdditiveBlending:\n                  gl.blendFunc(gl.ONE, gl.ONE);\n                  break;\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractiveBlending:\n                  gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);\n                  break;\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyBlending:\n                  gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n                  break;\n                default:\n                  console.error('THREE.WebGLState: Invalid blending: ', blending);\n                  break;\n              }\n            } else {\n              switch (blending) {\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending:\n                  gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                  break;\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AdditiveBlending:\n                  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n                  break;\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractiveBlending:\n                  gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);\n                  break;\n                case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyBlending:\n                  gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n                  break;\n                default:\n                  console.error('THREE.WebGLState: Invalid blending: ', blending);\n                  break;\n              }\n            }\n            this.currentBlendSrc = null;\n            this.currentBlendDst = null;\n            this.currentBlendSrcAlpha = null;\n            this.currentBlendDstAlpha = null;\n            this.currentBlending = blending;\n            this.currentPremultipledAlpha = premultipliedAlpha;\n          }\n          return;\n        }\n\n        // custom blending\n\n        blendEquationAlpha = blendEquationAlpha || blendEquation;\n        blendSrcAlpha = blendSrcAlpha || blendSrc;\n        blendDstAlpha = blendDstAlpha || blendDst;\n        if (blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha) {\n          gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n          this.currentBlendEquation = blendEquation;\n          this.currentBlendEquationAlpha = blendEquationAlpha;\n        }\n        if (blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha) {\n          gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n          this.currentBlendSrc = blendSrc;\n          this.currentBlendDst = blendDst;\n          this.currentBlendSrcAlpha = blendSrcAlpha;\n          this.currentBlendDstAlpha = blendDstAlpha;\n        }\n        this.currentBlending = blending;\n        this.currentPremultipledAlpha = false;\n      }\n    }, {\n      key: \"setColorMask\",\n      value: function setColorMask(colorMask) {\n        if (this.currentColorMask !== colorMask) {\n          this.gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n          this.currentColorMask = colorMask;\n        }\n      }\n    }, {\n      key: \"setDepthTest\",\n      value: function setDepthTest(depthTest) {\n        var gl = this.gl;\n        if (depthTest) {\n          this.enable(gl.DEPTH_TEST);\n        } else {\n          this.disable(gl.DEPTH_TEST);\n        }\n      }\n    }, {\n      key: \"setDepthMask\",\n      value: function setDepthMask(depthMask) {\n        if (this.currentDepthMask !== depthMask) {\n          this.gl.depthMask(depthMask);\n          this.currentDepthMask = depthMask;\n        }\n      }\n    }, {\n      key: \"setDepthFunc\",\n      value: function setDepthFunc(depthFunc) {\n        if (this.currentDepthFunc !== depthFunc) {\n          var gl = this.gl;\n          switch (depthFunc) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverDepth:\n              gl.depthFunc(gl.NEVER);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysDepth:\n              gl.depthFunc(gl.ALWAYS);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessDepth:\n              gl.depthFunc(gl.LESS);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualDepth:\n              gl.depthFunc(gl.LEQUAL);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualDepth:\n              gl.depthFunc(gl.EQUAL);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualDepth:\n              gl.depthFunc(gl.GEQUAL);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterDepth:\n              gl.depthFunc(gl.GREATER);\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualDepth:\n              gl.depthFunc(gl.NOTEQUAL);\n              break;\n            default:\n              gl.depthFunc(gl.LEQUAL);\n          }\n          this.currentDepthFunc = depthFunc;\n        }\n      }\n    }, {\n      key: \"setStencilTest\",\n      value: function setStencilTest(stencilTest) {\n        var gl = this.gl;\n        if (stencilTest) {\n          this.enable(gl.STENCIL_TEST);\n        } else {\n          this.disable(gl.STENCIL_TEST);\n        }\n      }\n    }, {\n      key: \"setStencilMask\",\n      value: function setStencilMask(stencilMask) {\n        if (this.currentStencilMask !== stencilMask) {\n          this.gl.stencilMask(stencilMask);\n          this.currentStencilMask = stencilMask;\n        }\n      }\n    }, {\n      key: \"setStencilFunc\",\n      value: function setStencilFunc(stencilFunc, stencilRef, stencilMask) {\n        if (this.currentStencilFunc !== stencilFunc || this.currentStencilRef !== stencilRef || this.currentStencilFuncMask !== stencilMask) {\n          this.gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n          this.currentStencilFunc = stencilFunc;\n          this.currentStencilRef = stencilRef;\n          this.currentStencilFuncMask = stencilMask;\n        }\n      }\n    }, {\n      key: \"setStencilOp\",\n      value: function setStencilOp(stencilFail, stencilZFail, stencilZPass) {\n        if (this.currentStencilFail !== stencilFail || this.currentStencilZFail !== stencilZFail || this.currentStencilZPass !== stencilZPass) {\n          this.gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n          this.currentStencilFail = stencilFail;\n          this.currentStencilZFail = stencilZFail;\n          this.currentStencilZPass = stencilZPass;\n        }\n      }\n    }, {\n      key: \"setMaterial\",\n      value: function setMaterial(material, frontFaceCW, hardwareClippingPlanes) {\n        var gl = this.gl;\n        material.side === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide ? this.disable(gl.CULL_FACE) : this.enable(gl.CULL_FACE);\n        var flipSided = material.side === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide;\n        if (frontFaceCW) flipSided = !flipSided;\n        this.setFlipSided(flipSided);\n        material.blending === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending && material.transparent === false ? this.setBlending(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending) : this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n        this.setDepthFunc(material.depthFunc);\n        this.setDepthTest(material.depthTest);\n        this.setDepthMask(material.depthWrite);\n        this.setColorMask(material.colorWrite);\n        var stencilWrite = material.stencilWrite;\n        this.setStencilTest(stencilWrite);\n        if (stencilWrite) {\n          this.setStencilMask(material.stencilWriteMask);\n          this.setStencilFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n          this.setStencilOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n        }\n        this.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n        material.alphaToCoverage === true && this.backend.renderer.samples > 1 ? this.enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : this.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n        if (hardwareClippingPlanes > 0) {\n          if (this.currentClippingPlanes !== hardwareClippingPlanes) {\n            var CLIP_DISTANCE0_WEBGL = 0x3000;\n            for (var i = 0; i < 8; i++) {\n              if (i < hardwareClippingPlanes) {\n                this.enable(CLIP_DISTANCE0_WEBGL + i);\n              } else {\n                this.disable(CLIP_DISTANCE0_WEBGL + i);\n              }\n            }\n          }\n        }\n      }\n    }, {\n      key: \"setPolygonOffset\",\n      value: function setPolygonOffset(polygonOffset, factor, units) {\n        var gl = this.gl;\n        if (polygonOffset) {\n          this.enable(gl.POLYGON_OFFSET_FILL);\n          if (this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units) {\n            gl.polygonOffset(factor, units);\n            this.currentPolygonOffsetFactor = factor;\n            this.currentPolygonOffsetUnits = units;\n          }\n        } else {\n          this.disable(gl.POLYGON_OFFSET_FILL);\n        }\n      }\n    }, {\n      key: \"useProgram\",\n      value: function useProgram(program) {\n        if (this.currentProgram !== program) {\n          this.gl.useProgram(program);\n          this.currentProgram = program;\n          return true;\n        }\n        return false;\n      }\n\n      // framebuffer\n    }, {\n      key: \"bindFramebuffer\",\n      value: function bindFramebuffer(target, framebuffer) {\n        var gl = this.gl,\n          currentBoundFramebuffers = this.currentBoundFramebuffers;\n        if (currentBoundFramebuffers[target] !== framebuffer) {\n          gl.bindFramebuffer(target, framebuffer);\n          currentBoundFramebuffers[target] = framebuffer;\n\n          // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n          if (target === gl.DRAW_FRAMEBUFFER) {\n            currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n          }\n          if (target === gl.FRAMEBUFFER) {\n            currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n          }\n          return true;\n        }\n        return false;\n      }\n    }, {\n      key: \"drawBuffers\",\n      value: function drawBuffers(renderContext, framebuffer) {\n        var gl = this.gl;\n        var drawBuffers = [];\n        var needsUpdate = false;\n        if (renderContext.textures !== null) {\n          drawBuffers = this.currentDrawbuffers.get(framebuffer);\n          if (drawBuffers === undefined) {\n            drawBuffers = [];\n            this.currentDrawbuffers.set(framebuffer, drawBuffers);\n          }\n          var textures = renderContext.textures;\n          if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {\n            for (var i = 0, il = textures.length; i < il; i++) {\n              drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;\n            }\n            drawBuffers.length = textures.length;\n            needsUpdate = true;\n          }\n        } else {\n          if (drawBuffers[0] !== gl.BACK) {\n            drawBuffers[0] = gl.BACK;\n            needsUpdate = true;\n          }\n        }\n        if (needsUpdate) {\n          gl.drawBuffers(drawBuffers);\n        }\n      }\n\n      // texture\n    }, {\n      key: \"activeTexture\",\n      value: function activeTexture(webglSlot) {\n        var gl = this.gl,\n          currentTextureSlot = this.currentTextureSlot,\n          maxTextures = this.maxTextures;\n        if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n        if (currentTextureSlot !== webglSlot) {\n          gl.activeTexture(webglSlot);\n          this.currentTextureSlot = webglSlot;\n        }\n      }\n    }, {\n      key: \"bindTexture\",\n      value: function bindTexture(webglType, webglTexture, webglSlot) {\n        var gl = this.gl,\n          currentTextureSlot = this.currentTextureSlot,\n          currentBoundTextures = this.currentBoundTextures,\n          maxTextures = this.maxTextures;\n        if (webglSlot === undefined) {\n          if (currentTextureSlot === null) {\n            webglSlot = gl.TEXTURE0 + maxTextures - 1;\n          } else {\n            webglSlot = currentTextureSlot;\n          }\n        }\n        var boundTexture = currentBoundTextures[webglSlot];\n        if (boundTexture === undefined) {\n          boundTexture = {\n            type: undefined,\n            texture: undefined\n          };\n          currentBoundTextures[webglSlot] = boundTexture;\n        }\n        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n          if (currentTextureSlot !== webglSlot) {\n            gl.activeTexture(webglSlot);\n            this.currentTextureSlot = webglSlot;\n          }\n          gl.bindTexture(webglType, webglTexture);\n          boundTexture.type = webglType;\n          boundTexture.texture = webglTexture;\n        }\n      }\n    }, {\n      key: \"bindBufferBase\",\n      value: function bindBufferBase(target, index, buffer) {\n        var gl = this.gl;\n        var key = `${target}-${index}`;\n        if (this.currentBoundBufferBases[key] !== buffer) {\n          gl.bindBufferBase(target, index, buffer);\n          this.currentBoundBufferBases[key] = buffer;\n          return true;\n        }\n        return false;\n      }\n    }, {\n      key: \"unbindTexture\",\n      value: function unbindTexture() {\n        var gl = this.gl,\n          currentTextureSlot = this.currentTextureSlot,\n          currentBoundTextures = this.currentBoundTextures;\n        var boundTexture = currentBoundTextures[currentTextureSlot];\n        if (boundTexture !== undefined && boundTexture.type !== undefined) {\n          gl.bindTexture(boundTexture.type, null);\n          boundTexture.type = undefined;\n          boundTexture.texture = undefined;\n        }\n      }\n    }]);\n  }();\n  var WebGLUtils = /*#__PURE__*/function () {\n    function WebGLUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGLUtils);\n      this.backend = backend;\n      this.gl = this.backend.gl;\n      this.extensions = backend.extensions;\n    }\n    return (0, _createClass2.default)(WebGLUtils, [{\n      key: \"convert\",\n      value: function convert(p) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoColorSpace;\n        var gl = this.gl,\n          extensions = this.extensions;\n        var extension;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType) return gl.UNSIGNED_BYTE;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt5999Type) return gl.UNSIGNED_INT_5_9_9_9_REV;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ByteType) return gl.BYTE;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShortType) return gl.SHORT;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType) return gl.UNSIGNED_SHORT;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) return gl.INT;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType) return gl.UNSIGNED_INT;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType) return gl.FLOAT;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType) {\n          return gl.HALF_FLOAT;\n        }\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlphaFormat) return gl.ALPHA;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBFormat) return gl.RGB;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat) return gl.RGBA;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LuminanceFormat) return gl.LUMINANCE;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthFormat) return gl.DEPTH_COMPONENT;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthStencilFormat) return gl.DEPTH_STENCIL;\n\n        // WebGL2 formats.\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedFormat) return gl.RED;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedIntegerFormat) return gl.RED_INTEGER;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGFormat) return gl.RG;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGIntegerFormat) return gl.RG_INTEGER;\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n        // S3TC\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_S3TC_DXT1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT3_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT5_Format) {\n          if (colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace) {\n            extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');\n            if (extension !== null) {\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n            } else {\n              return null;\n            }\n          } else {\n            extension = extensions.get('WEBGL_compressed_texture_s3tc');\n            if (extension !== null) {\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n              if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n            } else {\n              return null;\n            }\n          }\n        }\n\n        // PVRTC\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_PVRTC_4BPPV1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_PVRTC_2BPPV1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_PVRTC_4BPPV1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_PVRTC_2BPPV1_Format) {\n          extension = extensions.get('WEBGL_compressed_texture_pvrtc');\n          if (extension !== null) {\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n          } else {\n            return null;\n          }\n        }\n\n        // ETC\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC2_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ETC2_EAC_Format) {\n          extension = extensions.get('WEBGL_compressed_texture_etc');\n          if (extension !== null) {\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC2_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ETC2_EAC_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n          } else {\n            return null;\n          }\n        }\n\n        // ASTC\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_4x4_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x4_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x5_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x5_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x6_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x5_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x6_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x8_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x5_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x6_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x8_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x10_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x10_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x12_Format) {\n          extension = extensions.get('WEBGL_compressed_texture_astc');\n          if (extension !== null) {\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_4x4_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x4_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x5_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x5_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x6_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x5_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x6_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x8_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x5_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x6_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x8_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x10_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x10_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x12_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n          } else {\n            return null;\n          }\n        }\n\n        // BPTC\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_BPTC_Format) {\n          extension = extensions.get('EXT_texture_compression_bptc');\n          if (extension !== null) {\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_BPTC_Format) return colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n          } else {\n            return null;\n          }\n        }\n\n        // RGTC\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RED_RGTC1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SIGNED_RED_RGTC1_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RED_GREEN_RGTC2_Format || p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SIGNED_RED_GREEN_RGTC2_Format) {\n          extension = extensions.get('EXT_texture_compression_rgtc');\n          if (extension !== null) {\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n            if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n          } else {\n            return null;\n          }\n        }\n\n        //\n\n        if (p === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt248Type) {\n          return gl.UNSIGNED_INT_24_8;\n        }\n\n        // if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n        return gl[p] !== undefined ? gl[p] : null;\n      }\n    }, {\n      key: \"_clientWaitAsync\",\n      value: function _clientWaitAsync() {\n        var gl = this.gl;\n        var sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n        gl.flush();\n        return new Promise(function (resolve, reject) {\n          function test() {\n            var res = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);\n            if (res === gl.WAIT_FAILED) {\n              gl.deleteSync(sync);\n              reject();\n              return;\n            }\n            if (res === gl.TIMEOUT_EXPIRED) {\n              requestAnimationFrame(test);\n              return;\n            }\n            gl.deleteSync(sync);\n            resolve();\n          }\n          test();\n        });\n      }\n    }]);\n  }();\n  var initialized = false,\n    wrappingToGL,\n    filterToGL,\n    compareToGL;\n  var WebGLTextureUtils = /*#__PURE__*/function () {\n    function WebGLTextureUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGLTextureUtils);\n      this.backend = backend;\n      this.gl = backend.gl;\n      this.extensions = backend.extensions;\n      this.defaultTextures = {};\n      if (initialized === false) {\n        this._init(this.gl);\n        initialized = true;\n      }\n    }\n    return (0, _createClass2.default)(WebGLTextureUtils, [{\n      key: \"_init\",\n      value: function _init(gl) {\n        // Store only WebGL constants here.\n\n        wrappingToGL = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RepeatWrapping, gl.REPEAT), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ClampToEdgeWrapping, gl.CLAMP_TO_EDGE), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MirroredRepeatWrapping, gl.MIRRORED_REPEAT);\n        filterToGL = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter, gl.NEAREST), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapNearestFilter, gl.NEAREST_MIPMAP_NEAREST), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter, gl.NEAREST_MIPMAP_LINEAR), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter, gl.LINEAR), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapNearestFilter, gl.LINEAR_MIPMAP_NEAREST), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter, gl.LINEAR_MIPMAP_LINEAR);\n        compareToGL = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverCompare, gl.NEVER), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysCompare, gl.ALWAYS), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessCompare, gl.LESS), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualCompare, gl.LEQUAL), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualCompare, gl.EQUAL), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualCompare, gl.GEQUAL), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterCompare, gl.GREATER), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualCompare, gl.NOTEQUAL);\n      }\n    }, {\n      key: \"filterFallback\",\n      value: function filterFallback(f) {\n        var gl = this.gl;\n        if (f === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter || f === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapNearestFilter || f === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter) {\n          return gl.NEAREST;\n        }\n        return gl.LINEAR;\n      }\n    }, {\n      key: \"getGLTextureType\",\n      value: function getGLTextureType(texture) {\n        var gl = this.gl;\n        var glTextureType;\n        if (texture.isCubeTexture === true) {\n          glTextureType = gl.TEXTURE_CUBE_MAP;\n        } else if (texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true) {\n          glTextureType = gl.TEXTURE_2D_ARRAY;\n        } else if (texture.isData3DTexture === true) {\n          // TODO: isCompressed3DTexture, wait for #26642\n\n          glTextureType = gl.TEXTURE_3D;\n        } else {\n          glTextureType = gl.TEXTURE_2D;\n        }\n        return glTextureType;\n      }\n    }, {\n      key: \"getInternalFormat\",\n      value: function getInternalFormat(internalFormatName, glFormat, glType, colorSpace) {\n        var forceLinearTransfer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        var gl = this.gl,\n          extensions = this.extensions;\n        if (internalFormatName !== null) {\n          if (gl[internalFormatName] !== undefined) return gl[internalFormatName];\n          console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n        }\n        var internalFormat = glFormat;\n        if (glFormat === gl.RED) {\n          if (glType === gl.FLOAT) internalFormat = gl.R32F;\n          if (glType === gl.HALF_FLOAT) internalFormat = gl.R16F;\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;\n          if (glType === gl.BYTE) internalFormat = gl.R8I;\n          if (glType === gl.SHORT) internalFormat = gl.R16I;\n          if (glType === gl.INT) internalFormat = gl.R32I;\n        }\n        if (glFormat === gl.RED_INTEGER) {\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8UI;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16UI;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;\n          if (glType === gl.BYTE) internalFormat = gl.R8I;\n          if (glType === gl.SHORT) internalFormat = gl.R16I;\n          if (glType === gl.INT) internalFormat = gl.R32I;\n        }\n        if (glFormat === gl.RG) {\n          if (glType === gl.FLOAT) internalFormat = gl.RG32F;\n          if (glType === gl.HALF_FLOAT) internalFormat = gl.RG16F;\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RG16;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.RG32UI;\n          if (glType === gl.BYTE) internalFormat = gl.RG8I;\n          if (glType === gl.SHORT) internalFormat = gl.RG16I;\n          if (glType === gl.INT) internalFormat = gl.RG32I;\n        }\n        if (glFormat === gl.RG_INTEGER) {\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8UI;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RG16UI;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.RG32UI;\n          if (glType === gl.BYTE) internalFormat = gl.RG8I;\n          if (glType === gl.SHORT) internalFormat = gl.RG16I;\n          if (glType === gl.INT) internalFormat = gl.RG32I;\n        }\n        if (glFormat === gl.RGB) {\n          if (glType === gl.FLOAT) internalFormat = gl.RGB32F;\n          if (glType === gl.HALF_FLOAT) internalFormat = gl.RGB16F;\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGB8;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGB16;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGB32UI;\n          if (glType === gl.BYTE) internalFormat = gl.RGB8I;\n          if (glType === gl.SHORT) internalFormat = gl.RGB16I;\n          if (glType === gl.INT) internalFormat = gl.RGB32I;\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace && forceLinearTransfer === false ? gl.SRGB8 : gl.RGB8;\n          if (glType === gl.UNSIGNED_SHORT_5_6_5) internalFormat = gl.RGB565;\n          if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;\n          if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGB4;\n          if (glType === gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = gl.RGB9_E5;\n        }\n        if (glFormat === gl.RGB_INTEGER) {\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGB8UI;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGB16UI;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGB32UI;\n          if (glType === gl.BYTE) internalFormat = gl.RGB8I;\n          if (glType === gl.SHORT) internalFormat = gl.RGB16I;\n          if (glType === gl.INT) internalFormat = gl.RGB32I;\n        }\n        if (glFormat === gl.RGBA) {\n          if (glType === gl.FLOAT) internalFormat = gl.RGBA32F;\n          if (glType === gl.HALF_FLOAT) internalFormat = gl.RGBA16F;\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGBA8;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGBA16;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGBA32UI;\n          if (glType === gl.BYTE) internalFormat = gl.RGBA8I;\n          if (glType === gl.SHORT) internalFormat = gl.RGBA16I;\n          if (glType === gl.INT) internalFormat = gl.RGBA32I;\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace && forceLinearTransfer === false ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n          if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGBA4;\n          if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;\n        }\n        if (glFormat === gl.RGBA_INTEGER) {\n          if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGBA8UI;\n          if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGBA16UI;\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGBA32UI;\n          if (glType === gl.BYTE) internalFormat = gl.RGBA8I;\n          if (glType === gl.SHORT) internalFormat = gl.RGBA16I;\n          if (glType === gl.INT) internalFormat = gl.RGBA32I;\n        }\n        if (glFormat === gl.DEPTH_COMPONENT) {\n          if (glType === gl.UNSIGNED_INT) internalFormat = gl.DEPTH24_STENCIL8;\n          if (glType === gl.FLOAT) internalFormat = gl.DEPTH_COMPONENT32F;\n        }\n        if (glFormat === gl.DEPTH_STENCIL) {\n          if (glType === gl.UNSIGNED_INT_24_8) internalFormat = gl.DEPTH24_STENCIL8;\n        }\n        if (internalFormat === gl.R16F || internalFormat === gl.R32F || internalFormat === gl.RG16F || internalFormat === gl.RG32F || internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {\n          extensions.get('EXT_color_buffer_float');\n        }\n        return internalFormat;\n      }\n    }, {\n      key: \"setTextureParameters\",\n      value: function setTextureParameters(textureType, texture) {\n        var gl = this.gl,\n          extensions = this.extensions,\n          backend = this.backend;\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n        gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n        gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n        if (textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY) {\n          gl.texParameteri(textureType, gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n        }\n        gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n        var hasMipmaps = texture.mipmaps !== undefined && texture.mipmaps.length > 0;\n\n        // follow WebGPU backend mapping for texture filtering\n        var minFilter = texture.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter && hasMipmaps ? _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter : texture.minFilter;\n        gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, filterToGL[minFilter]);\n        if (texture.compareFunction) {\n          gl.texParameteri(textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n          gl.texParameteri(textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);\n        }\n        if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n          if (texture.magFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter) return;\n          if (texture.minFilter !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter && texture.minFilter !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearMipmapLinearFilter) return;\n          if (texture.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n          if (texture.anisotropy > 1) {\n            var extension = extensions.get('EXT_texture_filter_anisotropic');\n            gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, backend.getMaxAnisotropy()));\n          }\n        }\n      }\n    }, {\n      key: \"createDefaultTexture\",\n      value: function createDefaultTexture(texture) {\n        var gl = this.gl,\n          backend = this.backend,\n          defaultTextures = this.defaultTextures;\n        var glTextureType = this.getGLTextureType(texture);\n        var textureGPU = defaultTextures[glTextureType];\n        if (textureGPU === undefined) {\n          textureGPU = gl.createTexture();\n          backend.state.bindTexture(glTextureType, textureGPU);\n          gl.texParameteri(glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n          gl.texParameteri(glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n          // gl.texImage2D( glTextureType, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n          defaultTextures[glTextureType] = textureGPU;\n        }\n        backend.set(texture, {\n          textureGPU: textureGPU,\n          glTextureType: glTextureType,\n          isDefault: true\n        });\n      }\n    }, {\n      key: \"createTexture\",\n      value: function createTexture(texture, options) {\n        var gl = this.gl,\n          backend = this.backend;\n        var levels = options.levels,\n          width = options.width,\n          height = options.height,\n          depth = options.depth;\n        var glFormat = backend.utils.convert(texture.format, texture.colorSpace);\n        var glType = backend.utils.convert(texture.type);\n        var glInternalFormat = this.getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);\n        var textureGPU = gl.createTexture();\n        var glTextureType = this.getGLTextureType(texture);\n        backend.state.bindTexture(glTextureType, textureGPU);\n        this.setTextureParameters(glTextureType, texture);\n        if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {\n          gl.texStorage3D(gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth);\n        } else if (texture.isData3DTexture) {\n          gl.texStorage3D(gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth);\n        } else if (!texture.isVideoTexture) {\n          gl.texStorage2D(glTextureType, levels, glInternalFormat, width, height);\n        }\n        backend.set(texture, {\n          textureGPU: textureGPU,\n          glTextureType: glTextureType,\n          glFormat: glFormat,\n          glType: glType,\n          glInternalFormat: glInternalFormat\n        });\n      }\n    }, {\n      key: \"copyBufferToTexture\",\n      value: function copyBufferToTexture(buffer, texture) {\n        var gl = this.gl,\n          backend = this.backend;\n        var _backend$get2 = backend.get(texture),\n          textureGPU = _backend$get2.textureGPU,\n          glTextureType = _backend$get2.glTextureType,\n          glFormat = _backend$get2.glFormat,\n          glType = _backend$get2.glType;\n        var _texture$source$data = texture.source.data,\n          width = _texture$source$data.width,\n          height = _texture$source$data.height;\n        gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer);\n        backend.state.bindTexture(glTextureType, textureGPU);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, 0);\n        gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);\n        backend.state.unbindTexture();\n        // debug\n        // const framebuffer = gl.createFramebuffer();\n        // gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer );\n        // gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTextureType, textureGPU, 0 );\n\n        // const readout = new Float32Array( width * height * 4 );\n\n        // const altFormat = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT );\n        // const altType = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE );\n\n        // gl.readPixels( 0, 0, width, height, altFormat, altType, readout );\n        // gl.bindFramebuffer( gl.FRAMEBUFFER, null );\n        // console.log( readout );\n      }\n    }, {\n      key: \"updateTexture\",\n      value: function updateTexture(texture, options) {\n        var gl = this.gl;\n        var width = options.width,\n          height = options.height;\n        var _this$backend$get = this.backend.get(texture),\n          textureGPU = _this$backend$get.textureGPU,\n          glTextureType = _this$backend$get.glTextureType,\n          glFormat = _this$backend$get.glFormat,\n          glType = _this$backend$get.glType,\n          glInternalFormat = _this$backend$get.glInternalFormat;\n        if (texture.isRenderTargetTexture || textureGPU === undefined /* unsupported texture format */) return;\n        var getImage = function getImage(source) {\n          if (source.isDataTexture) {\n            return source.image.data;\n          } else if (typeof HTMLImageElement !== 'undefined' && source instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && source instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && source instanceof ImageBitmap || source instanceof OffscreenCanvas) {\n            return source;\n          }\n          return source.data;\n        };\n        this.backend.state.bindTexture(glTextureType, textureGPU);\n        this.setTextureParameters(glTextureType, texture);\n        if (texture.isCompressedTexture) {\n          var mipmaps = texture.mipmaps;\n          var image = options.image;\n          for (var i = 0; i < mipmaps.length; i++) {\n            var mipmap = mipmaps[i];\n            if (texture.isCompressedArrayTexture) {\n              if (texture.format !== gl.RGBA) {\n                if (glFormat !== null) {\n                  gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);\n                } else {\n                  console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n                }\n              } else {\n                gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);\n              }\n            } else {\n              if (glFormat !== null) {\n                gl.compressedTexSubImage2D(gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n              } else {\n                console.warn('Unsupported compressed texture format');\n              }\n            }\n          }\n        } else if (texture.isCubeTexture) {\n          var images = options.images;\n          for (var _i13 = 0; _i13 < 6; _i13++) {\n            var _image2 = getImage(images[_i13]);\n            gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i13, 0, 0, 0, width, height, glFormat, glType, _image2);\n          }\n        } else if (texture.isDataArrayTexture) {\n          var _image3 = options.image;\n          gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, _image3.width, _image3.height, _image3.depth, glFormat, glType, _image3.data);\n        } else if (texture.isData3DTexture) {\n          var _image4 = options.image;\n          gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, _image4.width, _image4.height, _image4.depth, glFormat, glType, _image4.data);\n        } else if (texture.isVideoTexture) {\n          texture.update();\n          gl.texImage2D(glTextureType, 0, glInternalFormat, glFormat, glType, options.image);\n        } else {\n          var _image5 = getImage(options.image);\n          gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, _image5);\n        }\n      }\n    }, {\n      key: \"generateMipmaps\",\n      value: function generateMipmaps(texture) {\n        var gl = this.gl,\n          backend = this.backend;\n        var _backend$get3 = backend.get(texture),\n          textureGPU = _backend$get3.textureGPU,\n          glTextureType = _backend$get3.glTextureType;\n        backend.state.bindTexture(glTextureType, textureGPU);\n        gl.generateMipmap(glTextureType);\n      }\n    }, {\n      key: \"deallocateRenderBuffers\",\n      value: function deallocateRenderBuffers(renderTarget) {\n        var gl = this.gl,\n          backend = this.backend;\n\n        // remove framebuffer reference\n        if (renderTarget) {\n          var renderContextData = backend.get(renderTarget);\n          renderContextData.renderBufferStorageSetup = undefined;\n          if (renderContextData.framebuffers) {\n            for (var cacheKey in renderContextData.framebuffers) {\n              gl.deleteFramebuffer(renderContextData.framebuffers[cacheKey]);\n            }\n            delete renderContextData.framebuffers;\n          }\n          if (renderContextData.depthRenderbuffer) {\n            gl.deleteRenderbuffer(renderContextData.depthRenderbuffer);\n            delete renderContextData.depthRenderbuffer;\n          }\n          if (renderContextData.stencilRenderbuffer) {\n            gl.deleteRenderbuffer(renderContextData.stencilRenderbuffer);\n            delete renderContextData.stencilRenderbuffer;\n          }\n          if (renderContextData.msaaFrameBuffer) {\n            gl.deleteFramebuffer(renderContextData.msaaFrameBuffer);\n            delete renderContextData.msaaFrameBuffer;\n          }\n          if (renderContextData.msaaRenderbuffers) {\n            for (var i = 0; i < renderContextData.msaaRenderbuffers.length; i++) {\n              gl.deleteRenderbuffer(renderContextData.msaaRenderbuffers[i]);\n            }\n            delete renderContextData.msaaRenderbuffers;\n          }\n        }\n      }\n    }, {\n      key: \"destroyTexture\",\n      value: function destroyTexture(texture) {\n        var gl = this.gl,\n          backend = this.backend;\n        var _backend$get4 = backend.get(texture),\n          textureGPU = _backend$get4.textureGPU,\n          renderTarget = _backend$get4.renderTarget;\n        this.deallocateRenderBuffers(renderTarget);\n        gl.deleteTexture(textureGPU);\n        backend.delete(texture);\n      }\n    }, {\n      key: \"copyTextureToTexture\",\n      value: function copyTextureToTexture(srcTexture, dstTexture) {\n        var srcRegion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var dstPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        var gl = this.gl,\n          backend = this.backend;\n        var state = this.backend.state;\n        var _backend$get5 = backend.get(dstTexture),\n          dstTextureGPU = _backend$get5.textureGPU,\n          glTextureType = _backend$get5.glTextureType,\n          glType = _backend$get5.glType,\n          glFormat = _backend$get5.glFormat;\n        var width, height, minX, minY;\n        var dstX, dstY;\n        if (srcRegion !== null) {\n          width = srcRegion.max.x - srcRegion.min.x;\n          height = srcRegion.max.y - srcRegion.min.y;\n          minX = srcRegion.min.x;\n          minY = srcRegion.min.y;\n        } else {\n          width = srcTexture.image.width;\n          height = srcTexture.image.height;\n          minX = 0;\n          minY = 0;\n        }\n        if (dstPosition !== null) {\n          dstX = dstPosition.x;\n          dstY = dstPosition.y;\n        } else {\n          dstX = 0;\n          dstY = 0;\n        }\n        state.bindTexture(glTextureType, dstTextureGPU);\n\n        // As another texture upload may have changed pixelStorei\n        // parameters, make sure they are correct for the dstTexture\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n        var currentUnpackRowLen = gl.getParameter(gl.UNPACK_ROW_LENGTH);\n        var currentUnpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);\n        var currentUnpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);\n        var currentUnpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);\n        var currentUnpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);\n        var image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[level] : srcTexture.image;\n        gl.pixelStorei(gl.UNPACK_ROW_LENGTH, image.width);\n        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, image.height);\n        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, minX);\n        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, minY);\n        if (srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture) {\n          var srcTextureData = backend.get(srcTexture);\n          var dstTextureData = backend.get(dstTexture);\n          var srcRenderContextData = backend.get(srcTextureData.renderTarget);\n          var dstRenderContextData = backend.get(dstTextureData.renderTarget);\n          var srcFramebuffer = srcRenderContextData.framebuffers[srcTextureData.cacheKey];\n          var dstFramebuffer = dstRenderContextData.framebuffers[dstTextureData.cacheKey];\n          state.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFramebuffer);\n          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFramebuffer);\n          var mask = gl.COLOR_BUFFER_BIT;\n          if (srcTexture.isDepthTexture) mask = gl.DEPTH_BUFFER_BIT;\n          gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, mask, gl.NEAREST);\n          state.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n        } else {\n          if (srcTexture.isDataTexture) {\n            gl.texSubImage2D(gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data);\n          } else {\n            if (srcTexture.isCompressedTexture) {\n              gl.compressedTexSubImage2D(gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data);\n            } else {\n              gl.texSubImage2D(gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image);\n            }\n          }\n        }\n        gl.pixelStorei(gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);\n        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);\n        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);\n        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);\n        gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);\n\n        // Generate mipmaps only when copying level 0\n        if (level === 0 && dstTexture.generateMipmaps) gl.generateMipmap(gl.TEXTURE_2D);\n        state.unbindTexture();\n      }\n    }, {\n      key: \"copyFramebufferToTexture\",\n      value: function copyFramebufferToTexture(texture, renderContext, rectangle) {\n        var gl = this.gl;\n        var state = this.backend.state;\n        var _this$backend$get2 = this.backend.get(texture),\n          textureGPU = _this$backend$get2.textureGPU;\n        var x = rectangle.x,\n          y = rectangle.y,\n          width = rectangle.z,\n          height = rectangle.w;\n        var requireDrawFrameBuffer = texture.isDepthTexture === true || renderContext.renderTarget && renderContext.renderTarget.samples > 0;\n        var srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.getDrawingBufferSize().y;\n        if (requireDrawFrameBuffer) {\n          var partial = x !== 0 || y !== 0;\n          var mask;\n          var attachment;\n          if (texture.isDepthTexture === true) {\n            mask = gl.DEPTH_BUFFER_BIT;\n            attachment = gl.DEPTH_ATTACHMENT;\n            if (renderContext.stencil) {\n              mask |= gl.STENCIL_BUFFER_BIT;\n            }\n          } else {\n            mask = gl.COLOR_BUFFER_BIT;\n            attachment = gl.COLOR_ATTACHMENT0;\n          }\n          if (partial) {\n            var renderTargetContextData = this.backend.get(renderContext.renderTarget);\n            var fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];\n            var msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n            state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);\n            state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);\n            var flippedY = srcHeight - y - height;\n            gl.blitFramebuffer(x, flippedY, x + width, flippedY + height, x, flippedY, x + width, flippedY + height, mask, gl.NEAREST);\n            state.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);\n            state.bindTexture(gl.TEXTURE_2D, textureGPU);\n            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x, flippedY, width, height);\n            state.unbindTexture();\n          } else {\n            var _fb = gl.createFramebuffer();\n            state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, _fb);\n            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0);\n            gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);\n            gl.deleteFramebuffer(_fb);\n          }\n        } else {\n          state.bindTexture(gl.TEXTURE_2D, textureGPU);\n          gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x, srcHeight - height - y, width, height);\n          state.unbindTexture();\n        }\n        if (texture.generateMipmaps) this.generateMipmaps(texture);\n        this.backend._setFramebuffer(renderContext);\n      }\n\n      // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    }, {\n      key: \"setupRenderBufferStorage\",\n      value: function setupRenderBufferStorage(renderbuffer, renderContext) {\n        var gl = this.gl;\n        var renderTarget = renderContext.renderTarget;\n        var samples = renderTarget.samples,\n          depthTexture = renderTarget.depthTexture,\n          depthBuffer = renderTarget.depthBuffer,\n          stencilBuffer = renderTarget.stencilBuffer,\n          width = renderTarget.width,\n          height = renderTarget.height;\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n        if (depthBuffer && !stencilBuffer) {\n          var glInternalFormat = gl.DEPTH_COMPONENT24;\n          if (samples > 0) {\n            if (depthTexture && depthTexture.isDepthTexture) {\n              if (depthTexture.type === gl.FLOAT) {\n                glInternalFormat = gl.DEPTH_COMPONENT32F;\n              }\n            }\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, glInternalFormat, width, height);\n          } else {\n            gl.renderbufferStorage(gl.RENDERBUFFER, glInternalFormat, width, height);\n          }\n          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n        } else if (depthBuffer && stencilBuffer) {\n          if (samples > 0) {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height);\n          } else {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\n          }\n          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n        }\n      }\n    }, {\n      key: \"copyTextureToBuffer\",\n      value: function () {\n        var _copyTextureToBuffer = (0, _asyncToGenerator2.default)(function* (texture, x, y, width, height, faceIndex) {\n          var backend = this.backend,\n            gl = this.gl;\n          var _this$backend$get3 = this.backend.get(texture),\n            textureGPU = _this$backend$get3.textureGPU,\n            glFormat = _this$backend$get3.glFormat,\n            glType = _this$backend$get3.glType;\n          var fb = gl.createFramebuffer();\n          gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);\n          var target = texture.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n          gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0);\n          var typedArrayType = this._getTypedArrayType(glType);\n          var bytesPerTexel = this._getBytesPerTexel(glType, glFormat);\n          var elementCount = width * height;\n          var byteLength = elementCount * bytesPerTexel;\n          var buffer = gl.createBuffer();\n          gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer);\n          gl.bufferData(gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ);\n          gl.readPixels(x, y, width, height, glFormat, glType, 0);\n          gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n          yield backend.utils._clientWaitAsync();\n          var dstBuffer = new typedArrayType(byteLength / typedArrayType.BYTES_PER_ELEMENT);\n          gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer);\n          gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, dstBuffer);\n          gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n          gl.deleteFramebuffer(fb);\n          return dstBuffer;\n        });\n        function copyTextureToBuffer(_x29, _x30, _x31, _x32, _x33, _x34) {\n          return _copyTextureToBuffer.apply(this, arguments);\n        }\n        return copyTextureToBuffer;\n      }()\n    }, {\n      key: \"_getTypedArrayType\",\n      value: function _getTypedArrayType(glType) {\n        var gl = this.gl;\n        if (glType === gl.UNSIGNED_BYTE) return Uint8Array;\n        if (glType === gl.UNSIGNED_SHORT_4_4_4_4) return Uint16Array;\n        if (glType === gl.UNSIGNED_SHORT_5_5_5_1) return Uint16Array;\n        if (glType === gl.UNSIGNED_SHORT_5_6_5) return Uint16Array;\n        if (glType === gl.UNSIGNED_SHORT) return Uint16Array;\n        if (glType === gl.UNSIGNED_INT) return Uint32Array;\n        if (glType === gl.HALF_FLOAT) return Uint16Array;\n        if (glType === gl.FLOAT) return Float32Array;\n        throw new Error(`Unsupported WebGL type: ${glType}`);\n      }\n    }, {\n      key: \"_getBytesPerTexel\",\n      value: function _getBytesPerTexel(glType, glFormat) {\n        var gl = this.gl;\n        var bytesPerComponent = 0;\n        if (glType === gl.UNSIGNED_BYTE) bytesPerComponent = 1;\n        if (glType === gl.UNSIGNED_SHORT_4_4_4_4 || glType === gl.UNSIGNED_SHORT_5_5_5_1 || glType === gl.UNSIGNED_SHORT_5_6_5 || glType === gl.UNSIGNED_SHORT || glType === gl.HALF_FLOAT) bytesPerComponent = 2;\n        if (glType === gl.UNSIGNED_INT || glType === gl.FLOAT) bytesPerComponent = 4;\n        if (glFormat === gl.RGBA) return bytesPerComponent * 4;\n        if (glFormat === gl.RGB) return bytesPerComponent * 3;\n        if (glFormat === gl.ALPHA) return bytesPerComponent;\n      }\n    }]);\n  }();\n  var WebGLExtensions = /*#__PURE__*/function () {\n    function WebGLExtensions(backend) {\n      (0, _classCallCheck2.default)(this, WebGLExtensions);\n      this.backend = backend;\n      this.gl = this.backend.gl;\n      this.availableExtensions = this.gl.getSupportedExtensions();\n      this.extensions = {};\n    }\n    return (0, _createClass2.default)(WebGLExtensions, [{\n      key: \"get\",\n      value: function get(name) {\n        var extension = this.extensions[name];\n        if (extension === undefined) {\n          extension = this.gl.getExtension(name);\n          this.extensions[name] = extension;\n        }\n        return extension;\n      }\n    }, {\n      key: \"has\",\n      value: function has(name) {\n        return this.availableExtensions.includes(name);\n      }\n    }]);\n  }();\n  var WebGLCapabilities = /*#__PURE__*/function () {\n    function WebGLCapabilities(backend) {\n      (0, _classCallCheck2.default)(this, WebGLCapabilities);\n      this.backend = backend;\n      this.maxAnisotropy = null;\n    }\n    return (0, _createClass2.default)(WebGLCapabilities, [{\n      key: \"getMaxAnisotropy\",\n      value: function getMaxAnisotropy() {\n        if (this.maxAnisotropy !== null) return this.maxAnisotropy;\n        var gl = this.backend.gl;\n        var extensions = this.backend.extensions;\n        if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n          var extension = extensions.get('EXT_texture_filter_anisotropic');\n          this.maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        } else {\n          this.maxAnisotropy = 0;\n        }\n        return this.maxAnisotropy;\n      }\n    }]);\n  }();\n  var GLFeatureName = {\n    'WEBGL_multi_draw': 'WEBGL_multi_draw',\n    'WEBGL_compressed_texture_astc': 'texture-compression-astc',\n    'WEBGL_compressed_texture_etc': 'texture-compression-etc2',\n    'WEBGL_compressed_texture_etc1': 'texture-compression-etc1',\n    'WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',\n    'WEBKIT_WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',\n    'WEBGL_compressed_texture_s3tc': 'texture-compression-bc',\n    'EXT_texture_compression_bptc': 'texture-compression-bptc',\n    'EXT_disjoint_timer_query_webgl2': 'timestamp-query'\n  };\n  var WebGLBufferRenderer = /*#__PURE__*/function () {\n    function WebGLBufferRenderer(backend) {\n      (0, _classCallCheck2.default)(this, WebGLBufferRenderer);\n      this.gl = backend.gl;\n      this.extensions = backend.extensions;\n      this.info = backend.renderer.info;\n      this.mode = null;\n      this.index = 0;\n      this.type = null;\n      this.object = null;\n    }\n    return (0, _createClass2.default)(WebGLBufferRenderer, [{\n      key: \"render\",\n      value: function render(start, count) {\n        var gl = this.gl,\n          mode = this.mode,\n          object = this.object,\n          type = this.type,\n          info = this.info,\n          index = this.index;\n        if (index !== 0) {\n          gl.drawElements(mode, count, type, start);\n        } else {\n          gl.drawArrays(mode, start, count);\n        }\n        info.update(object, count, mode, 1);\n      }\n    }, {\n      key: \"renderInstances\",\n      value: function renderInstances(start, count, primcount) {\n        var gl = this.gl,\n          mode = this.mode,\n          type = this.type,\n          index = this.index,\n          object = this.object,\n          info = this.info;\n        if (primcount === 0) return;\n        if (index !== 0) {\n          gl.drawElementsInstanced(mode, count, type, start, primcount);\n        } else {\n          gl.drawArraysInstanced(mode, start, count, primcount);\n        }\n        info.update(object, count, mode, primcount);\n      }\n    }, {\n      key: \"renderMultiDraw\",\n      value: function renderMultiDraw(starts, counts, drawCount) {\n        var extensions = this.extensions,\n          mode = this.mode,\n          object = this.object,\n          info = this.info;\n        if (drawCount === 0) return;\n        var extension = extensions.get('WEBGL_multi_draw');\n        if (extension === null) {\n          for (var i = 0; i < drawCount; i++) {\n            this.render(starts[i], counts[i]);\n          }\n        } else {\n          if (this.index !== 0) {\n            extension.multiDrawElementsWEBGL(mode, counts, 0, this.type, starts, 0, drawCount);\n          } else {\n            extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);\n          }\n          var elementCount = 0;\n          for (var _i14 = 0; _i14 < drawCount; _i14++) {\n            elementCount += counts[_i14];\n          }\n          info.update(object, elementCount, mode, 1);\n        }\n      }\n    }, {\n      key: \"renderMultiDrawInstances\",\n      value: function renderMultiDrawInstances(starts, counts, drawCount, primcount) {\n        var extensions = this.extensions,\n          mode = this.mode,\n          object = this.object,\n          info = this.info;\n        if (drawCount === 0) return;\n        var extension = extensions.get('WEBGL_multi_draw');\n        if (extension === null) {\n          for (var i = 0; i < drawCount; i++) {\n            this.renderInstances(starts[i], counts[i], primcount[i]);\n          }\n        } else {\n          if (this.index !== 0) {\n            extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, this.type, starts, 0, primcount, 0, drawCount);\n          } else {\n            extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);\n          }\n          var elementCount = 0;\n          for (var _i15 = 0; _i15 < drawCount; _i15++) {\n            elementCount += counts[_i15] * primcount[_i15];\n          }\n          info.update(object, elementCount, mode, 1);\n        }\n      }\n\n      //\n    }]);\n  }();\n  /**\n   * A backend implementation targeting WebGL 2.\n   *\n   * @private\n   * @augments Backend\n   */\n  var WebGLBackend = /*#__PURE__*/function (_Backend) {\n    /**\n     * Constructs a new WebGPU backend.\n     *\n     * @param {Object} parameters - The configuration parameter.\n     * @param {Boolean} [parameters.logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n     * @param {Boolean} [parameters.alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n     * @param {Boolean} [parameters.depth=true] - Whether the default framebuffer should have a depth buffer or not.\n     * @param {Boolean} [parameters.stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n     * @param {Boolean} [parameters.antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n     * @param {Number} [parameters.samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.\n     * @param {Boolean} [parameters.forceWebGL=false] - If set to `true`, the renderer uses it WebGL 2 backend no matter if WebGPU is supported or not.\n     * @param {WebGL2RenderingContext} [parameters.context=undefined] - A WebGL 2 rendering context.\n     */\n    function WebGLBackend() {\n      var _this204;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, WebGLBackend);\n      _this204 = _callSuper(this, WebGLBackend, [parameters]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this204.isWebGLBackend = true;\n\n      /**\n       * A reference to a backend module holding shader attribute-related\n       * utility functions.\n       *\n       * @type {WebGLAttributeUtils?}\n       * @default null\n       */\n      _this204.attributeUtils = null;\n\n      /**\n       * A reference to a backend module holding extension-related\n       * utility functions.\n       *\n       * @type {WebGLExtensions?}\n       * @default null\n       */\n      _this204.extensions = null;\n\n      /**\n       * A reference to a backend module holding capability-related\n       * utility functions.\n       *\n       * @type {WebGLCapabilities?}\n       * @default null\n       */\n      _this204.capabilities = null;\n\n      /**\n       * A reference to a backend module holding texture-related\n       * utility functions.\n       *\n       * @type {WebGLTextureUtils?}\n       * @default null\n       */\n      _this204.textureUtils = null;\n\n      /**\n       * A reference to a backend module holding renderer-related\n       * utility functions.\n       *\n       * @type {WebGLBufferRenderer?}\n       * @default null\n       */\n      _this204.bufferRenderer = null;\n\n      /**\n       * A reference to the rendering context.\n       *\n       * @type {WebGL2RenderingContext?}\n       * @default null\n       */\n      _this204.gl = null;\n\n      /**\n       * A reference to a backend module holding state-related\n       * utility functions.\n       *\n       * @type {WebGLState?}\n       * @default null\n       */\n      _this204.state = null;\n\n      /**\n       * A reference to a backend module holding common\n       * utility functions.\n       *\n       * @type {WebGLUtils?}\n       * @default null\n       */\n      _this204.utils = null;\n\n      /**\n       * Dictionary for caching VAOs.\n       *\n       * @type {Object<String,WebGLVertexArrayObject>}\n       */\n      _this204.vaoCache = {};\n\n      /**\n       * Dictionary for caching transform feedback objects.\n       *\n       * @type {Object<String,WebGLTransformFeedback>}\n       */\n      _this204.transformFeedbackCache = {};\n\n      /**\n       * Controls if `gl.RASTERIZER_DISCARD` should be enabled or not.\n       * Only relevant when using compute shaders.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this204.discard = false;\n\n      /**\n       * A reference to the `EXT_disjoint_timer_query_webgl2` extension. `null` if the\n       * device does not support the extension.\n       *\n       * @type {EXTDisjointTimerQueryWebGL2?}\n       * @default null\n       */\n      _this204.disjoint = null;\n\n      /**\n      * A reference to the `KHR_parallel_shader_compile` extension. `null` if the\n      * device does not support the extension.\n      *\n      * @type {KHRParallelShaderCompile?}\n      * @default null\n      */\n      _this204.parallel = null;\n\n      /**\n       * Whether to track timestamps with a Timestamp Query API or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this204.trackTimestamp = parameters.trackTimestamp === true;\n\n      /**\n       * A reference to the current render context.\n       *\n       * @private\n       * @type {RenderContext}\n       * @default null\n       */\n      _this204._currentContext = null;\n\n      /**\n       * A unique collection of bindings.\n       *\n       * @private\n       * @type {WeakSet}\n       */\n      _this204._knownBindings = new WeakSet();\n      return _this204;\n    }\n\n    /**\n     * Initializes the backend so it is ready for usage.\n     *\n     * @param {Renderer} renderer - The renderer.\n     */\n    (0, _inherits2.default)(WebGLBackend, _Backend);\n    return (0, _createClass2.default)(WebGLBackend, [{\n      key: \"init\",\n      value: function init(renderer) {\n        _superPropGet(WebGLBackend, \"init\", this, 3)([renderer]);\n\n        //\n\n        var parameters = this.parameters;\n        var glContext = parameters.context !== undefined ? parameters.context : renderer.domElement.getContext('webgl2');\n        function onContextLost(event) {\n          event.preventDefault();\n          var contextLossInfo = {\n            api: 'WebGL',\n            message: event.statusMessage || 'Unknown reason',\n            reason: null,\n            originalEvent: event\n          };\n          renderer.onDeviceLost(contextLossInfo);\n        }\n        this._onContextLost = onContextLost;\n        renderer.domElement.addEventListener('webglcontextlost', onContextLost, false);\n        this.gl = glContext;\n        this.extensions = new WebGLExtensions(this);\n        this.capabilities = new WebGLCapabilities(this);\n        this.attributeUtils = new WebGLAttributeUtils(this);\n        this.textureUtils = new WebGLTextureUtils(this);\n        this.bufferRenderer = new WebGLBufferRenderer(this);\n        this.state = new WebGLState(this);\n        this.utils = new WebGLUtils(this);\n        this.extensions.get('EXT_color_buffer_float');\n        this.extensions.get('WEBGL_clip_cull_distance');\n        this.extensions.get('OES_texture_float_linear');\n        this.extensions.get('EXT_color_buffer_half_float');\n        this.extensions.get('WEBGL_multisampled_render_to_texture');\n        this.extensions.get('WEBGL_render_shared_exponent');\n        this.extensions.get('WEBGL_multi_draw');\n        this.disjoint = this.extensions.get('EXT_disjoint_timer_query_webgl2');\n        this.parallel = this.extensions.get('KHR_parallel_shader_compile');\n      }\n\n      /**\n       * The coordinate system of the backend.\n       *\n       * @type {Number}\n       * @readonly\n       */\n    }, {\n      key: \"coordinateSystem\",\n      get: function get() {\n        return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGLCoordinateSystem;\n      }\n\n      /**\n       * Transfers buffer data from a storage buffer attribute\n       * from the GPU to the CPU in context of compute shaders.\n       *\n       * @async\n       * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n       * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n       */\n    }, {\n      key: \"getArrayBufferAsync\",\n      value: (function () {\n        var _getArrayBufferAsync3 = (0, _asyncToGenerator2.default)(function* (attribute) {\n          return yield this.attributeUtils.getArrayBufferAsync(attribute);\n        });\n        function getArrayBufferAsync(_x35) {\n          return _getArrayBufferAsync3.apply(this, arguments);\n        }\n        return getArrayBufferAsync;\n      }()\n      /**\n       * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n       * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when synchronization has been finished.\n       */\n      )\n    }, {\n      key: \"waitForGPU\",\n      value: (function () {\n        var _waitForGPU3 = (0, _asyncToGenerator2.default)(function* () {\n          yield this.utils._clientWaitAsync();\n        });\n        function waitForGPU() {\n          return _waitForGPU3.apply(this, arguments);\n        }\n        return waitForGPU;\n      }()\n      /**\n       * Inits a time stamp query for the given render context.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n      )\n    }, {\n      key: \"initTimestampQuery\",\n      value: function initTimestampQuery(renderContext) {\n        if (!this.disjoint || !this.trackTimestamp) return;\n        var renderContextData = this.get(renderContext);\n        if (this.queryRunning) {\n          if (!renderContextData.queryQueue) renderContextData.queryQueue = [];\n          renderContextData.queryQueue.push(renderContext);\n          return;\n        }\n        if (renderContextData.activeQuery) {\n          this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT);\n          renderContextData.activeQuery = null;\n        }\n        renderContextData.activeQuery = this.gl.createQuery();\n        if (renderContextData.activeQuery !== null) {\n          this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT, renderContextData.activeQuery);\n          this.queryRunning = true;\n        }\n      }\n\n      // timestamp utils\n\n      /**\n       * Prepares the timestamp buffer.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"prepareTimestampBuffer\",\n      value: function prepareTimestampBuffer(renderContext) {\n        if (!this.disjoint || !this.trackTimestamp) return;\n        var renderContextData = this.get(renderContext);\n        if (renderContextData.activeQuery) {\n          this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT);\n          if (!renderContextData.gpuQueries) renderContextData.gpuQueries = [];\n          renderContextData.gpuQueries.push({\n            query: renderContextData.activeQuery\n          });\n          renderContextData.activeQuery = null;\n          this.queryRunning = false;\n          if (renderContextData.queryQueue && renderContextData.queryQueue.length > 0) {\n            var nextRenderContext = renderContextData.queryQueue.shift();\n            this.initTimestampQuery(nextRenderContext);\n          }\n        }\n      }\n\n      /**\n       * Resolves the time stamp for the given render context and type.\n       *\n       * @async\n       * @param {RenderContext} renderContext - The render context.\n       * @param {String} type - The render context.\n       * @return {Promise} A Promise that resolves when the time stamp has been computed.\n       */\n    }, {\n      key: \"resolveTimestampAsync\",\n      value: (function () {\n        var _resolveTimestampAsync2 = (0, _asyncToGenerator2.default)(function* (renderContext) {\n          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'render';\n          if (!this.disjoint || !this.trackTimestamp) return;\n          var renderContextData = this.get(renderContext);\n          if (!renderContextData.gpuQueries) renderContextData.gpuQueries = [];\n          for (var i = 0; i < renderContextData.gpuQueries.length; i++) {\n            var queryInfo = renderContextData.gpuQueries[i];\n            var available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n            var disjoint = this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);\n            if (available && !disjoint) {\n              var elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n              var duration = Number(elapsed) / 1000000; // Convert nanoseconds to milliseconds\n              this.gl.deleteQuery(queryInfo.query);\n              renderContextData.gpuQueries.splice(i, 1); // Remove the processed query\n              i--;\n              this.renderer.info.updateTimestamp(type, duration);\n            }\n          }\n        });\n        function resolveTimestampAsync(_x36) {\n          return _resolveTimestampAsync2.apply(this, arguments);\n        }\n        return resolveTimestampAsync;\n      }()\n      /**\n       * Returns the backend's rendering context.\n       *\n       * @return {WebGL2RenderingContext} The rendering context.\n       */\n      )\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.gl;\n      }\n\n      /**\n       * This method is executed at the beginning of a render call and prepares\n       * the WebGL state for upcoming render calls\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"beginRender\",\n      value: function beginRender(renderContext) {\n        var gl = this.gl;\n        var renderContextData = this.get(renderContext);\n\n        //\n\n        //\n\n        this.initTimestampQuery(renderContext);\n        renderContextData.previousContext = this._currentContext;\n        this._currentContext = renderContext;\n        this._setFramebuffer(renderContext);\n        this.clear(renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false);\n\n        //\n        if (renderContext.viewport) {\n          this.updateViewport(renderContext);\n        } else {\n          gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        }\n        if (renderContext.scissor) {\n          var _renderContext$scisso = renderContext.scissorValue,\n            x = _renderContext$scisso.x,\n            y = _renderContext$scisso.y,\n            width = _renderContext$scisso.width,\n            height = _renderContext$scisso.height;\n          gl.scissor(x, renderContext.height - height - y, width, height);\n        }\n        var occlusionQueryCount = renderContext.occlusionQueryCount;\n        if (occlusionQueryCount > 0) {\n          // Get a reference to the array of objects with queries. The renderContextData property\n          // can be changed by another render pass before the async reading of all previous queries complete\n          renderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;\n          renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n          renderContextData.lastOcclusionObject = null;\n          renderContextData.occlusionQueries = new Array(occlusionQueryCount);\n          renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);\n          renderContextData.occlusionQueryIndex = 0;\n        }\n      }\n\n      /**\n       * This method is executed at the end of a render call and finalizes work\n       * after draw calls.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"finishRender\",\n      value: function finishRender(renderContext) {\n        var gl = this.gl,\n          state = this.state;\n        var renderContextData = this.get(renderContext);\n        var previousContext = renderContextData.previousContext;\n        var occlusionQueryCount = renderContext.occlusionQueryCount;\n        if (occlusionQueryCount > 0) {\n          if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {\n            gl.endQuery(gl.ANY_SAMPLES_PASSED);\n          }\n          this.resolveOccludedAsync(renderContext);\n        }\n        var textures = renderContext.textures;\n        if (textures !== null) {\n          for (var i = 0; i < textures.length; i++) {\n            var _texture7 = textures[i];\n            if (_texture7.generateMipmaps) {\n              this.generateMipmaps(_texture7);\n            }\n          }\n        }\n        this._currentContext = previousContext;\n        if (renderContext.textures !== null && renderContext.renderTarget) {\n          var renderTargetContextData = this.get(renderContext.renderTarget);\n          var samples = renderContext.renderTarget.samples;\n          if (samples > 0) {\n            var fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];\n            var mask = gl.COLOR_BUFFER_BIT;\n            var msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n            var _textures = renderContext.textures;\n            state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);\n            state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);\n            for (var _i16 = 0; _i16 < _textures.length; _i16++) {\n              // TODO Add support for MRT\n\n              if (renderContext.scissor) {\n                var _renderContext$scisso2 = renderContext.scissorValue,\n                  x = _renderContext$scisso2.x,\n                  y = _renderContext$scisso2.y,\n                  width = _renderContext$scisso2.width,\n                  height = _renderContext$scisso2.height;\n                var viewY = renderContext.height - height - y;\n                gl.blitFramebuffer(x, viewY, x + width, viewY + height, x, viewY, x + width, viewY + height, mask, gl.NEAREST);\n                gl.invalidateSubFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray, x, viewY, width, height);\n              } else {\n                gl.blitFramebuffer(0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST);\n                gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray);\n              }\n            }\n          }\n        }\n        if (previousContext !== null) {\n          this._setFramebuffer(previousContext);\n          if (previousContext.viewport) {\n            this.updateViewport(previousContext);\n          } else {\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n          }\n        }\n        this.prepareTimestampBuffer(renderContext);\n      }\n\n      /**\n       * This method processes the result of occlusion queries and writes it\n       * into render context data.\n       *\n       * @async\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"resolveOccludedAsync\",\n      value: function resolveOccludedAsync(renderContext) {\n        var renderContextData = this.get(renderContext);\n\n        // handle occlusion query results\n\n        var currentOcclusionQueries = renderContextData.currentOcclusionQueries,\n          currentOcclusionQueryObjects = renderContextData.currentOcclusionQueryObjects;\n        if (currentOcclusionQueries && currentOcclusionQueryObjects) {\n          var occluded = new WeakSet();\n          var gl = this.gl;\n          renderContextData.currentOcclusionQueryObjects = null;\n          renderContextData.currentOcclusionQueries = null;\n          var _check = function check() {\n            var completed = 0;\n\n            // check all queries and requeue as appropriate\n            for (var i = 0; i < currentOcclusionQueries.length; i++) {\n              var query = currentOcclusionQueries[i];\n              if (query === null) continue;\n              if (gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {\n                if (gl.getQueryParameter(query, gl.QUERY_RESULT) > 0) occluded.add(currentOcclusionQueryObjects[i]);\n                currentOcclusionQueries[i] = null;\n                gl.deleteQuery(query);\n                completed++;\n              }\n            }\n            if (completed < currentOcclusionQueries.length) {\n              requestAnimationFrame(_check);\n            } else {\n              renderContextData.occluded = occluded;\n            }\n          };\n          _check();\n        }\n      }\n\n      /**\n       * Returns `true` if the given 3D object is fully occluded by other\n       * 3D objects in the scene.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Object3D} object - The 3D object to test.\n       * @return {Boolean} Whether the 3D object is fully occluded or not.\n       */\n    }, {\n      key: \"isOccluded\",\n      value: function isOccluded(renderContext, object) {\n        var renderContextData = this.get(renderContext);\n        return renderContextData.occluded && renderContextData.occluded.has(object);\n      }\n\n      /**\n       * Updates the viewport with the values from the given render context.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"updateViewport\",\n      value: function updateViewport(renderContext) {\n        var gl = this.gl;\n        var _renderContext$viewpo = renderContext.viewportValue,\n          x = _renderContext$viewpo.x,\n          y = _renderContext$viewpo.y,\n          width = _renderContext$viewpo.width,\n          height = _renderContext$viewpo.height;\n        gl.viewport(x, renderContext.height - height - y, width, height);\n      }\n\n      /**\n       * Defines the scissor test.\n       *\n       * @param {Boolean} boolean - Whether the scissor test should be enabled or not.\n       */\n    }, {\n      key: \"setScissorTest\",\n      value: function setScissorTest(boolean) {\n        var gl = this.gl;\n        if (boolean) {\n          gl.enable(gl.SCISSOR_TEST);\n        } else {\n          gl.disable(gl.SCISSOR_TEST);\n        }\n      }\n\n      /**\n       * Performs a clear operation.\n       *\n       * @param {Boolean} color - Whether the color buffer should be cleared or not.\n       * @param {Boolean} depth - Whether the depth buffer should be cleared or not.\n       * @param {Boolean} stencil - Whether the stencil buffer should be cleared or not.\n       * @param {Object?} [descriptor=null] - The render context of the current set render target.\n       * @param {Boolean} [setFrameBuffer=true] - TODO.\n       */\n    }, {\n      key: \"clear\",\n      value: function clear(color, depth, stencil) {\n        var descriptor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var setFrameBuffer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n        var gl = this.gl;\n        if (descriptor === null) {\n          var clearColor = this.getClearColor();\n\n          // premultiply alpha\n\n          clearColor.r *= clearColor.a;\n          clearColor.g *= clearColor.a;\n          clearColor.b *= clearColor.a;\n          descriptor = {\n            textures: null,\n            clearColorValue: clearColor\n          };\n        }\n\n        //\n\n        var clear = 0;\n        if (color) clear |= gl.COLOR_BUFFER_BIT;\n        if (depth) clear |= gl.DEPTH_BUFFER_BIT;\n        if (stencil) clear |= gl.STENCIL_BUFFER_BIT;\n        if (clear !== 0) {\n          var _clearColor2;\n          if (descriptor.clearColorValue) {\n            _clearColor2 = descriptor.clearColorValue;\n          } else {\n            _clearColor2 = this.getClearColor();\n\n            // premultiply alpha\n\n            _clearColor2.r *= _clearColor2.a;\n            _clearColor2.g *= _clearColor2.a;\n            _clearColor2.b *= _clearColor2.a;\n          }\n          if (depth) this.state.setDepthMask(true);\n          if (descriptor.textures === null) {\n            gl.clearColor(_clearColor2.r, _clearColor2.g, _clearColor2.b, _clearColor2.a);\n            gl.clear(clear);\n          } else {\n            if (setFrameBuffer) this._setFramebuffer(descriptor);\n            if (color) {\n              for (var i = 0; i < descriptor.textures.length; i++) {\n                gl.clearBufferfv(gl.COLOR, i, [_clearColor2.r, _clearColor2.g, _clearColor2.b, _clearColor2.a]);\n              }\n            }\n            if (depth && stencil) {\n              gl.clearBufferfi(gl.DEPTH_STENCIL, 0, 1, 0);\n            } else if (depth) {\n              gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n            } else if (stencil) {\n              gl.clearBufferiv(gl.STENCIL, 0, [0]);\n            }\n          }\n        }\n      }\n\n      /**\n       * This method is executed at the beginning of a compute call and\n       * prepares the state for upcoming compute tasks.\n       *\n       * @param {Node|Array<Node>} computeGroup - The compute node(s).\n       */\n    }, {\n      key: \"beginCompute\",\n      value: function beginCompute(computeGroup) {\n        var state = this.state,\n          gl = this.gl;\n        state.bindFramebuffer(gl.FRAMEBUFFER, null);\n        this.initTimestampQuery(computeGroup);\n      }\n\n      /**\n       * Executes a compute command for the given compute node.\n       *\n       * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.\n       * @param {Node} computeNode - The compute node.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       * @param {ComputePipeline} pipeline - The compute pipeline.\n       */\n    }, {\n      key: \"compute\",\n      value: function compute(computeGroup, computeNode, bindings, pipeline) {\n        var state = this.state,\n          gl = this.gl;\n        if (this.discard === false) {\n          // required here to handle async behaviour of render.compute()\n          gl.enable(gl.RASTERIZER_DISCARD);\n          this.discard = true;\n        }\n        var _this$get = this.get(pipeline),\n          programGPU = _this$get.programGPU,\n          transformBuffers = _this$get.transformBuffers,\n          attributes = _this$get.attributes;\n        var vaoKey = this._getVaoKey(null, attributes);\n        var vaoGPU = this.vaoCache[vaoKey];\n        if (vaoGPU === undefined) {\n          this._createVao(null, attributes);\n        } else {\n          gl.bindVertexArray(vaoGPU);\n        }\n        state.useProgram(programGPU);\n        this._bindUniforms(bindings);\n        var transformFeedbackGPU = this._getTransformFeedback(transformBuffers);\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);\n        gl.beginTransformFeedback(gl.POINTS);\n        if (attributes[0].isStorageInstancedBufferAttribute) {\n          gl.drawArraysInstanced(gl.POINTS, 0, 1, computeNode.count);\n        } else {\n          gl.drawArrays(gl.POINTS, 0, computeNode.count);\n        }\n        gl.endTransformFeedback();\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n        // switch active buffers\n\n        for (var i = 0; i < transformBuffers.length; i++) {\n          var dualAttributeData = transformBuffers[i];\n          if (dualAttributeData.pbo) {\n            this.textureUtils.copyBufferToTexture(dualAttributeData.transformBuffer, dualAttributeData.pbo);\n          }\n          dualAttributeData.switchBuffers();\n        }\n      }\n\n      /**\n       * This method is executed at the end of a compute call and\n       * finalizes work after compute tasks.\n       *\n       * @param {Node|Array<Node>} computeGroup - The compute node(s).\n       */\n    }, {\n      key: \"finishCompute\",\n      value: function finishCompute(computeGroup) {\n        var gl = this.gl;\n        this.discard = false;\n        gl.disable(gl.RASTERIZER_DISCARD);\n        this.prepareTimestampBuffer(computeGroup);\n        if (this._currentContext) {\n          this._setFramebuffer(this._currentContext);\n        }\n      }\n\n      /**\n       * Executes a draw command for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object to draw.\n       * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.\n       */\n    }, {\n      key: \"draw\",\n      value: function draw(renderObject /*, info*/) {\n        var object = renderObject.object,\n          pipeline = renderObject.pipeline,\n          material = renderObject.material,\n          context = renderObject.context,\n          hardwareClippingPlanes = renderObject.hardwareClippingPlanes;\n        var _this$get2 = this.get(pipeline),\n          programGPU = _this$get2.programGPU;\n        var gl = this.gl,\n          state = this.state;\n        var contextData = this.get(context);\n        var drawParams = renderObject.getDrawParameters();\n        if (drawParams === null) return;\n\n        //\n\n        this._bindUniforms(renderObject.getBindings());\n        var frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n        state.setMaterial(material, frontFaceCW, hardwareClippingPlanes);\n        state.useProgram(programGPU);\n\n        //\n\n        var renderObjectData = this.get(renderObject);\n        var vaoGPU = renderObjectData.staticVao;\n        if (vaoGPU === undefined || renderObjectData.geometryId !== renderObject.geometry.id) {\n          var vaoKey = this._getVaoKey(renderObject.getIndex(), renderObject.getAttributes());\n          vaoGPU = this.vaoCache[vaoKey];\n          if (vaoGPU === undefined) {\n            var staticVao;\n            var _this$_createVao = this._createVao(renderObject.getIndex(), renderObject.getAttributes());\n            vaoGPU = _this$_createVao.vaoGPU;\n            staticVao = _this$_createVao.staticVao;\n            if (staticVao) {\n              renderObjectData.staticVao = vaoGPU;\n              renderObjectData.geometryId = renderObject.geometry.id;\n            }\n          }\n        }\n        gl.bindVertexArray(vaoGPU);\n\n        //\n\n        var index = renderObject.getIndex();\n\n        //\n\n        var lastObject = contextData.lastOcclusionObject;\n        if (lastObject !== object && lastObject !== undefined) {\n          if (lastObject !== null && lastObject.occlusionTest === true) {\n            gl.endQuery(gl.ANY_SAMPLES_PASSED);\n            contextData.occlusionQueryIndex++;\n          }\n          if (object.occlusionTest === true) {\n            var query = gl.createQuery();\n            gl.beginQuery(gl.ANY_SAMPLES_PASSED, query);\n            contextData.occlusionQueries[contextData.occlusionQueryIndex] = query;\n            contextData.occlusionQueryObjects[contextData.occlusionQueryIndex] = object;\n          }\n          contextData.lastOcclusionObject = object;\n        }\n\n        //\n        var renderer = this.bufferRenderer;\n        if (object.isPoints) renderer.mode = gl.POINTS;else if (object.isLineSegments) renderer.mode = gl.LINES;else if (object.isLine) renderer.mode = gl.LINE_STRIP;else if (object.isLineLoop) renderer.mode = gl.LINE_LOOP;else {\n          if (material.wireframe === true) {\n            state.setLineWidth(material.wireframeLinewidth * this.renderer.getPixelRatio());\n            renderer.mode = gl.LINES;\n          } else {\n            renderer.mode = gl.TRIANGLES;\n          }\n        }\n\n        //\n\n        var vertexCount = drawParams.vertexCount,\n          instanceCount = drawParams.instanceCount;\n        var firstVertex = drawParams.firstVertex;\n        renderer.object = object;\n        if (index !== null) {\n          firstVertex *= index.array.BYTES_PER_ELEMENT;\n          var indexData = this.get(index);\n          renderer.index = index.count;\n          renderer.type = indexData.type;\n        } else {\n          renderer.index = 0;\n        }\n        if (object.isBatchedMesh) {\n          if (object._multiDrawInstances !== null) {\n            renderer.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);\n          } else if (!this.hasFeature('WEBGL_multi_draw')) {\n            (0, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").warnOnce)('THREE.WebGLRenderer: WEBGL_multi_draw not supported.');\n          } else {\n            renderer.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);\n          }\n        } else if (instanceCount > 1) {\n          renderer.renderInstances(firstVertex, vertexCount, instanceCount);\n        } else {\n          renderer.render(firstVertex, vertexCount);\n        }\n        //\n\n        gl.bindVertexArray(null);\n      }\n\n      /**\n       * Explain why always null is returned.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Boolean} Whether the render pipeline requires an update or not.\n       */\n    }, {\n      key: \"needsRenderUpdate\",\n      value: function needsRenderUpdate(/*renderObject*/\n      ) {\n        return false;\n      }\n\n      /**\n       * Explain why no cache key is computed.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"getRenderCacheKey\",\n      value: function getRenderCacheKey(/*renderObject*/\n      ) {\n        return '';\n      }\n\n      // textures\n\n      /**\n       * Creates a default texture for the given texture that can be used\n       * as a placeholder until the actual texture is ready for usage.\n       *\n       * @param {Texture} texture - The texture to create a default texture for.\n       */\n    }, {\n      key: \"createDefaultTexture\",\n      value: function createDefaultTexture(texture) {\n        this.textureUtils.createDefaultTexture(texture);\n      }\n\n      /**\n       * Defines a texture on the GPU for the given texture object.\n       *\n       * @param {Texture} texture - The texture.\n       * @param {Object} [options={}] - Optional configuration parameter.\n       */\n    }, {\n      key: \"createTexture\",\n      value: function createTexture(texture, options) {\n        this.textureUtils.createTexture(texture, options);\n      }\n\n      /**\n       * Uploads the updated texture data to the GPU.\n       *\n       * @param {Texture} texture - The texture.\n       * @param {Object} [options={}] - Optional configuration parameter.\n       */\n    }, {\n      key: \"updateTexture\",\n      value: function updateTexture(texture, options) {\n        this.textureUtils.updateTexture(texture, options);\n      }\n\n      /**\n       * Generates mipmaps for the given texture\n       *\n       * @param {Texture} texture - The texture.\n       */\n    }, {\n      key: \"generateMipmaps\",\n      value: function generateMipmaps(texture) {\n        this.textureUtils.generateMipmaps(texture);\n      }\n\n      /**\n       * Destroys the GPU data for the given texture object.\n       *\n       * @param {Texture} texture - The texture.\n       */\n    }, {\n      key: \"destroyTexture\",\n      value: function destroyTexture(texture) {\n        this.textureUtils.destroyTexture(texture);\n      }\n\n      /**\n       * Returns texture data as a typed array.\n       *\n       * @param {Texture} texture - The texture to copy.\n       * @param {Number} x - The x coordinate of the copy origin.\n       * @param {Number} y - The y coordinate of the copy origin.\n       * @param {Number} width - The width of the copy.\n       * @param {Number} height - The height of the copy.\n       * @param {Number} faceIndex - The face index.\n       * @return {TypedArray} The texture data as a typed array.\n       */\n    }, {\n      key: \"copyTextureToBuffer\",\n      value: function copyTextureToBuffer(texture, x, y, width, height, faceIndex) {\n        return this.textureUtils.copyTextureToBuffer(texture, x, y, width, height, faceIndex);\n      }\n\n      /**\n       * This method does nothing since WebGL 2 has no concept of samplers.\n       *\n       * @param {Texture} texture - The texture to create the sampler for.\n       */\n    }, {\n      key: \"createSampler\",\n      value: function createSampler(/*texture*/\n      ) {\n\n        //console.warn( 'Abstract class.' );\n      }\n\n      /**\n       * This method does nothing since WebGL 2 has no concept of samplers.\n       *\n       * @param {Texture} texture - The texture to destroy the sampler for.\n       */\n    }, {\n      key: \"destroySampler\",\n      value: function destroySampler(/*texture*/) {}\n\n      // node builder\n\n      /**\n       * Returns a node builder for the given render object.\n       *\n       * @param {RenderObject} object - The render object.\n       * @param {Renderer} renderer - The renderer.\n       * @return {GLSLNodeBuilder} The node builder.\n       */\n    }, {\n      key: \"createNodeBuilder\",\n      value: function createNodeBuilder(object, renderer) {\n        return new GLSLNodeBuilder(object, renderer);\n      }\n\n      // program\n\n      /**\n       * Creates a shader program from the given programmable stage.\n       *\n       * @param {ProgrammableStage} program - The programmable stage.\n       */\n    }, {\n      key: \"createProgram\",\n      value: function createProgram(program) {\n        var gl = this.gl;\n        var stage = program.stage,\n          code = program.code;\n        var shader = stage === 'fragment' ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(shader, code);\n        gl.compileShader(shader);\n        this.set(program, {\n          shaderGPU: shader\n        });\n      }\n\n      /**\n       * Destroys the shader program of the given programmable stage.\n       *\n       * @param {ProgrammableStage} program - The programmable stage.\n       */\n    }, {\n      key: \"destroyProgram\",\n      value: function destroyProgram(program) {\n        this.delete(program);\n      }\n\n      /**\n       * Creates a render pipeline for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n       */\n    }, {\n      key: \"createRenderPipeline\",\n      value: function createRenderPipeline(renderObject, promises) {\n        var _this205 = this;\n        var gl = this.gl;\n        var pipeline = renderObject.pipeline;\n\n        // Program\n\n        var fragmentProgram = pipeline.fragmentProgram,\n          vertexProgram = pipeline.vertexProgram;\n        var programGPU = gl.createProgram();\n        var fragmentShader = this.get(fragmentProgram).shaderGPU;\n        var vertexShader = this.get(vertexProgram).shaderGPU;\n        gl.attachShader(programGPU, fragmentShader);\n        gl.attachShader(programGPU, vertexShader);\n        gl.linkProgram(programGPU);\n        this.set(pipeline, {\n          programGPU: programGPU,\n          fragmentShader: fragmentShader,\n          vertexShader: vertexShader\n        });\n        if (promises !== null && this.parallel) {\n          var p = new Promise(function (resolve /*, reject*/) {\n            var parallel = _this205.parallel;\n            var _checkStatus = function checkStatus() {\n              if (gl.getProgramParameter(programGPU, parallel.COMPLETION_STATUS_KHR)) {\n                _this205._completeCompile(renderObject, pipeline);\n                resolve();\n              } else {\n                requestAnimationFrame(_checkStatus);\n              }\n            };\n            _checkStatus();\n          });\n          promises.push(p);\n          return;\n        }\n        this._completeCompile(renderObject, pipeline);\n      }\n\n      /**\n       * Formats the source code of error messages.\n       *\n       * @private\n       * @param {String} string - The code.\n       * @param {Number} errorLine - The error line.\n       * @return {String} The formatted code.\n       */\n    }, {\n      key: \"_handleSource\",\n      value: function _handleSource(string, errorLine) {\n        var lines = string.split('\\n');\n        var lines2 = [];\n        var from = Math.max(errorLine - 6, 0);\n        var to = Math.min(errorLine + 6, lines.length);\n        for (var i = from; i < to; i++) {\n          var line = i + 1;\n          lines2.push(`${line === errorLine ? '>' : ' '} ${line}: ${lines[i]}`);\n        }\n        return lines2.join('\\n');\n      }\n\n      /**\n       * Gets the shader compilation errors from the info log.\n       *\n       * @private\n       * @param {WebGL2RenderingContext} gl - The rendering context.\n       * @param {WebGLShader} shader - The WebGL shader object.\n       * @param {String} type - The shader type.\n       * @return {String} The shader errors.\n       */\n    }, {\n      key: \"_getShaderErrors\",\n      value: function _getShaderErrors(gl, shader, type) {\n        var status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        var errors = gl.getShaderInfoLog(shader).trim();\n        if (status && errors === '') return '';\n        var errorMatches = /ERROR: 0:(\\d+)/.exec(errors);\n        if (errorMatches) {\n          var errorLine = parseInt(errorMatches[1]);\n          return type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + this._handleSource(gl.getShaderSource(shader), errorLine);\n        } else {\n          return errors;\n        }\n      }\n\n      /**\n       * Logs shader compilation errors.\n       *\n       * @private\n       * @param {WebGLProgram} programGPU - The WebGL program.\n       * @param {WebGLShader} glFragmentShader - The fragment shader as a native WebGL shader object.\n       * @param {WebGLShader} glVertexShader - The vertex shader as a native WebGL shader object.\n       */\n    }, {\n      key: \"_logProgramError\",\n      value: function _logProgramError(programGPU, glFragmentShader, glVertexShader) {\n        if (this.renderer.debug.checkShaderErrors) {\n          var gl = this.gl;\n          var programLog = gl.getProgramInfoLog(programGPU).trim();\n          if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {\n            if (typeof this.renderer.debug.onShaderError === 'function') {\n              this.renderer.debug.onShaderError(gl, programGPU, glVertexShader, glFragmentShader);\n            } else {\n              // default error reporting\n\n              var vertexErrors = this._getShaderErrors(gl, glVertexShader, 'vertex');\n              var fragmentErrors = this._getShaderErrors(gl, glFragmentShader, 'fragment');\n              console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(programGPU, gl.VALIDATE_STATUS) + '\\n\\n' + 'Program Info Log: ' + programLog + '\\n' + vertexErrors + '\\n' + fragmentErrors);\n            }\n          } else if (programLog !== '') {\n            console.warn('THREE.WebGLProgram: Program Info Log:', programLog);\n          }\n        }\n      }\n\n      /**\n       * Completes the shader program setup for the given render object.\n       *\n       * @private\n       * @param {RenderObject} renderObject - The render object.\n       * @param {RenderPipeline} pipeline - The render pipeline.\n       */\n    }, {\n      key: \"_completeCompile\",\n      value: function _completeCompile(renderObject, pipeline) {\n        var state = this.state,\n          gl = this.gl;\n        var pipelineData = this.get(pipeline);\n        var programGPU = pipelineData.programGPU,\n          fragmentShader = pipelineData.fragmentShader,\n          vertexShader = pipelineData.vertexShader;\n        if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {\n          this._logProgramError(programGPU, fragmentShader, vertexShader);\n        }\n        state.useProgram(programGPU);\n\n        // Bindings\n\n        var bindings = renderObject.getBindings();\n        this._setupBindings(bindings, programGPU);\n\n        //\n\n        this.set(pipeline, {\n          programGPU: programGPU\n        });\n      }\n\n      /**\n       * Creates a compute pipeline for the given compute node.\n       *\n       * @param {ComputePipeline} computePipeline - The compute pipeline.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       */\n    }, {\n      key: \"createComputePipeline\",\n      value: function createComputePipeline(computePipeline, bindings) {\n        var state = this.state,\n          gl = this.gl;\n\n        // Program\n\n        var fragmentProgram = {\n          stage: 'fragment',\n          code: '#version 300 es\\nprecision highp float;\\nvoid main() {}'\n        };\n        this.createProgram(fragmentProgram);\n        var computeProgram = computePipeline.computeProgram;\n        var programGPU = gl.createProgram();\n        var fragmentShader = this.get(fragmentProgram).shaderGPU;\n        var vertexShader = this.get(computeProgram).shaderGPU;\n        var transforms = computeProgram.transforms;\n        var transformVaryingNames = [];\n        var transformAttributeNodes = [];\n        for (var i = 0; i < transforms.length; i++) {\n          var transform = transforms[i];\n          transformVaryingNames.push(transform.varyingName);\n          transformAttributeNodes.push(transform.attributeNode);\n        }\n        gl.attachShader(programGPU, fragmentShader);\n        gl.attachShader(programGPU, vertexShader);\n        gl.transformFeedbackVaryings(programGPU, transformVaryingNames, gl.SEPARATE_ATTRIBS);\n        gl.linkProgram(programGPU);\n        if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {\n          this._logProgramError(programGPU, fragmentShader, vertexShader);\n        }\n        state.useProgram(programGPU);\n\n        // Bindings\n\n        this._setupBindings(bindings, programGPU);\n        var attributeNodes = computeProgram.attributes;\n        var attributes = [];\n        var transformBuffers = [];\n        for (var _i17 = 0; _i17 < attributeNodes.length; _i17++) {\n          var _attribute11 = attributeNodes[_i17].node.attribute;\n          attributes.push(_attribute11);\n          if (!this.has(_attribute11)) this.attributeUtils.createAttribute(_attribute11, gl.ARRAY_BUFFER);\n        }\n        for (var _i18 = 0; _i18 < transformAttributeNodes.length; _i18++) {\n          var _attribute12 = transformAttributeNodes[_i18].attribute;\n          if (!this.has(_attribute12)) this.attributeUtils.createAttribute(_attribute12, gl.ARRAY_BUFFER);\n          var attributeData = this.get(_attribute12);\n          transformBuffers.push(attributeData);\n        }\n\n        //\n\n        this.set(computePipeline, {\n          programGPU: programGPU,\n          transformBuffers: transformBuffers,\n          attributes: attributes\n        });\n      }\n\n      /**\n       * Creates bindings from the given bind group definition.\n       *\n       * @param {BindGroup} bindGroup - The bind group.\n       * @param {Array<BindGroup>} bindings - Array of bind groups.\n       * @param {Number} cacheIndex - The cache index.\n       * @param {Number} version - The version.\n       */\n    }, {\n      key: \"createBindings\",\n      value: function createBindings(bindGroup, bindings /*, cacheIndex, version*/) {\n        if (this._knownBindings.has(bindings) === false) {\n          this._knownBindings.add(bindings);\n          var uniformBuffers = 0;\n          var textures = 0;\n          for (var _bindGroup of bindings) {\n            this.set(_bindGroup, {\n              textures: textures,\n              uniformBuffers: uniformBuffers\n            });\n            for (var binding of _bindGroup.bindings) {\n              if (binding.isUniformBuffer) uniformBuffers++;\n              if (binding.isSampledTexture) textures++;\n            }\n          }\n        }\n        this.updateBindings(bindGroup, bindings);\n      }\n\n      /**\n       * Updates the given bind group definition.\n       *\n       * @param {BindGroup} bindGroup - The bind group.\n       * @param {Array<BindGroup>} bindings - Array of bind groups.\n       * @param {Number} cacheIndex - The cache index.\n       * @param {Number} version - The version.\n       */\n    }, {\n      key: \"updateBindings\",\n      value: function updateBindings(bindGroup /*, bindings, cacheIndex, version*/) {\n        var gl = this.gl;\n        var bindGroupData = this.get(bindGroup);\n        var i = bindGroupData.uniformBuffers;\n        var t = bindGroupData.textures;\n        for (var binding of bindGroup.bindings) {\n          if (binding.isUniformsGroup || binding.isUniformBuffer) {\n            var data = binding.buffer;\n            var bufferGPU = gl.createBuffer();\n            gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);\n            gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);\n            this.set(binding, {\n              index: i++,\n              bufferGPU: bufferGPU\n            });\n          } else if (binding.isSampledTexture) {\n            var _this$get3 = this.get(binding.texture),\n              textureGPU = _this$get3.textureGPU,\n              glTextureType = _this$get3.glTextureType;\n            this.set(binding, {\n              index: t++,\n              textureGPU: textureGPU,\n              glTextureType: glTextureType\n            });\n          }\n        }\n      }\n\n      /**\n       * Updates a buffer binding.\n       *\n       *  @param {Buffer} binding - The buffer binding to update.\n       */\n    }, {\n      key: \"updateBinding\",\n      value: function updateBinding(binding) {\n        var gl = this.gl;\n        if (binding.isUniformsGroup || binding.isUniformBuffer) {\n          var bindingData = this.get(binding);\n          var bufferGPU = bindingData.bufferGPU;\n          var data = binding.buffer;\n          gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);\n          gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);\n        }\n      }\n\n      // attributes\n\n      /**\n       * Creates the buffer of an indexed shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The indexed buffer attribute.\n       */\n    }, {\n      key: \"createIndexAttribute\",\n      value: function createIndexAttribute(attribute) {\n        var gl = this.gl;\n        this.attributeUtils.createAttribute(attribute, gl.ELEMENT_ARRAY_BUFFER);\n      }\n\n      /**\n       * Creates the buffer of a shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createAttribute\",\n      value: function createAttribute(attribute) {\n        if (this.has(attribute)) return;\n        var gl = this.gl;\n        this.attributeUtils.createAttribute(attribute, gl.ARRAY_BUFFER);\n      }\n\n      /**\n       * Creates the buffer of a storage attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createStorageAttribute\",\n      value: function createStorageAttribute(attribute) {\n        if (this.has(attribute)) return;\n        var gl = this.gl;\n        this.attributeUtils.createAttribute(attribute, gl.ARRAY_BUFFER);\n      }\n\n      /**\n       * Updates the buffer of a shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute to update.\n       */\n    }, {\n      key: \"updateAttribute\",\n      value: function updateAttribute(attribute) {\n        this.attributeUtils.updateAttribute(attribute);\n      }\n\n      /**\n       * Destroys the buffer of a shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute to destroy.\n       */\n    }, {\n      key: \"destroyAttribute\",\n      value: function destroyAttribute(attribute) {\n        this.attributeUtils.destroyAttribute(attribute);\n      }\n\n      /**\n       * Checks if the given feature is supported  by the backend.\n       *\n       * @param {String} name - The feature's name.\n       * @return {Boolean} Whether the feature is supported or not.\n       */\n    }, {\n      key: \"hasFeature\",\n      value: function hasFeature(name) {\n        var keysMatching = Object.keys(GLFeatureName).filter(function (key) {\n          return GLFeatureName[key] === name;\n        });\n        var extensions = this.extensions;\n        for (var i = 0; i < keysMatching.length; i++) {\n          if (extensions.has(keysMatching[i])) return true;\n        }\n        return false;\n      }\n\n      /**\n       * Returns the maximum anisotropy texture filtering value.\n       *\n       * @return {Number} The maximum anisotropy texture filtering value.\n       */\n    }, {\n      key: \"getMaxAnisotropy\",\n      value: function getMaxAnisotropy() {\n        return this.capabilities.getMaxAnisotropy();\n      }\n\n      /**\n       * Copies data of the given source texture to the given destination texture.\n       *\n       * @param {Texture} srcTexture - The source texture.\n       * @param {Texture} dstTexture - The destination texture.\n       * @param {Vector4?} [srcRegion=null] - The region of the source texture to copy.\n       * @param {(Vector2|Vector3)?} [dstPosition=null] - The destination position of the copy.\n       * @param {Number} [level=0] - The mip level to copy.\n       */\n    }, {\n      key: \"copyTextureToTexture\",\n      value: function copyTextureToTexture(srcTexture, dstTexture) {\n        var srcRegion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var dstPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        this.textureUtils.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);\n      }\n\n      /**\n       * Copies the current bound framebuffer to the given texture.\n       *\n       * @param {Texture} texture - The destination texture.\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n       */\n    }, {\n      key: \"copyFramebufferToTexture\",\n      value: function copyFramebufferToTexture(texture, renderContext, rectangle) {\n        this.textureUtils.copyFramebufferToTexture(texture, renderContext, rectangle);\n      }\n\n      /**\n       * Configures the active framebuffer from the given render context.\n       *\n       * @private\n       * @param {RenderContext} descriptor - The render context.\n       */\n    }, {\n      key: \"_setFramebuffer\",\n      value: function _setFramebuffer(descriptor) {\n        var gl = this.gl,\n          state = this.state;\n        var currentFrameBuffer = null;\n        if (descriptor.textures !== null) {\n          var renderTarget = descriptor.renderTarget;\n          var renderTargetContextData = this.get(renderTarget);\n          var samples = renderTarget.samples,\n            depthBuffer = renderTarget.depthBuffer,\n            stencilBuffer = renderTarget.stencilBuffer;\n          var isCube = renderTarget.isWebGLCubeRenderTarget === true;\n          var isRenderTarget3D = renderTarget.isRenderTarget3D === true;\n          var isRenderTargetArray = renderTarget.isRenderTargetArray === true;\n          var msaaFb = renderTargetContextData.msaaFrameBuffer;\n          var depthRenderbuffer = renderTargetContextData.depthRenderbuffer;\n          var cacheKey = _getCacheKey(descriptor);\n          var fb;\n          if (isCube) {\n            renderTargetContextData.cubeFramebuffers || (renderTargetContextData.cubeFramebuffers = {});\n            fb = renderTargetContextData.cubeFramebuffers[cacheKey];\n          } else {\n            renderTargetContextData.framebuffers || (renderTargetContextData.framebuffers = {});\n            fb = renderTargetContextData.framebuffers[cacheKey];\n          }\n          if (fb === undefined) {\n            fb = gl.createFramebuffer();\n            state.bindFramebuffer(gl.FRAMEBUFFER, fb);\n            var textures = descriptor.textures;\n            if (isCube) {\n              renderTargetContextData.cubeFramebuffers[cacheKey] = fb;\n              var _this$get4 = this.get(textures[0]),\n                textureGPU = _this$get4.textureGPU;\n              var cubeFace = this.renderer._activeCubeFace;\n              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, 0);\n            } else {\n              renderTargetContextData.framebuffers[cacheKey] = fb;\n              for (var i = 0; i < textures.length; i++) {\n                var _texture8 = textures[i];\n                var textureData = this.get(_texture8);\n                textureData.renderTarget = descriptor.renderTarget;\n                textureData.cacheKey = cacheKey; // required for copyTextureToTexture()\n\n                var attachment = gl.COLOR_ATTACHMENT0 + i;\n                if (isRenderTarget3D || isRenderTargetArray) {\n                  var layer = this.renderer._activeCubeFace;\n                  gl.framebufferTextureLayer(gl.FRAMEBUFFER, attachment, textureData.textureGPU, 0, layer);\n                } else {\n                  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0);\n                }\n              }\n              state.drawBuffers(descriptor, fb);\n            }\n            if (descriptor.depthTexture !== null) {\n              var _textureData2 = this.get(descriptor.depthTexture);\n              var depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n              _textureData2.renderTarget = descriptor.renderTarget;\n              _textureData2.cacheKey = cacheKey; // required for copyTextureToTexture()\n\n              gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, _textureData2.textureGPU, 0);\n            }\n          }\n          if (samples > 0) {\n            if (msaaFb === undefined) {\n              var invalidationArray = [];\n              msaaFb = gl.createFramebuffer();\n              state.bindFramebuffer(gl.FRAMEBUFFER, msaaFb);\n              var msaaRenderbuffers = [];\n              var _textures2 = descriptor.textures;\n              for (var _i19 = 0; _i19 < _textures2.length; _i19++) {\n                msaaRenderbuffers[_i19] = gl.createRenderbuffer();\n                gl.bindRenderbuffer(gl.RENDERBUFFER, msaaRenderbuffers[_i19]);\n                invalidationArray.push(gl.COLOR_ATTACHMENT0 + _i19);\n                if (depthBuffer) {\n                  var _depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n                  invalidationArray.push(_depthStyle);\n                }\n                var _texture9 = descriptor.textures[_i19];\n                var _textureData3 = this.get(_texture9);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, _textureData3.glInternalFormat, descriptor.width, descriptor.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i19, gl.RENDERBUFFER, msaaRenderbuffers[_i19]);\n              }\n              renderTargetContextData.msaaFrameBuffer = msaaFb;\n              renderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;\n              if (depthRenderbuffer === undefined) {\n                depthRenderbuffer = gl.createRenderbuffer();\n                this.textureUtils.setupRenderBufferStorage(depthRenderbuffer, descriptor);\n                renderTargetContextData.depthRenderbuffer = depthRenderbuffer;\n                var _depthStyle2 = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n                invalidationArray.push(_depthStyle2);\n              }\n              renderTargetContextData.invalidationArray = invalidationArray;\n            }\n            currentFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n          } else {\n            currentFrameBuffer = fb;\n          }\n        }\n        state.bindFramebuffer(gl.FRAMEBUFFER, currentFrameBuffer);\n      }\n\n      /**\n       * Computes the VAO key for the given index and attributes.\n       *\n       * @private\n       * @param {BufferAttribute?} index - The index. `null` for non-indexed geometries.\n       * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.\n       * @return {String} The VAO key.\n       */\n    }, {\n      key: \"_getVaoKey\",\n      value: function _getVaoKey(index, attributes) {\n        var key = '';\n        if (index !== null) {\n          var indexData = this.get(index);\n          key += ':' + indexData.id;\n        }\n        for (var i = 0; i < attributes.length; i++) {\n          var attributeData = this.get(attributes[i]);\n          key += ':' + attributeData.id;\n        }\n        return key;\n      }\n\n      /**\n       * Creates a VAO from the index and attributes.\n       *\n       * @private\n       * @param {BufferAttribute?} index - The index. `null` for non-indexed geometries.\n       * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.\n       * @return {Object} The VAO data.\n       */\n    }, {\n      key: \"_createVao\",\n      value: function _createVao(index, attributes) {\n        var gl = this.gl;\n        var vaoGPU = gl.createVertexArray();\n        var key = '';\n        var staticVao = true;\n        gl.bindVertexArray(vaoGPU);\n        if (index !== null) {\n          var indexData = this.get(index);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU);\n          key += ':' + indexData.id;\n        }\n        for (var i = 0; i < attributes.length; i++) {\n          var _attribute13 = attributes[i];\n          var attributeData = this.get(_attribute13);\n          key += ':' + attributeData.id;\n          gl.bindBuffer(gl.ARRAY_BUFFER, attributeData.bufferGPU);\n          gl.enableVertexAttribArray(i);\n          if (_attribute13.isStorageBufferAttribute || _attribute13.isStorageInstancedBufferAttribute) staticVao = false;\n          var stride = void 0,\n            offset = void 0;\n          if (_attribute13.isInterleavedBufferAttribute === true) {\n            stride = _attribute13.data.stride * attributeData.bytesPerElement;\n            offset = _attribute13.offset * attributeData.bytesPerElement;\n          } else {\n            stride = 0;\n            offset = 0;\n          }\n          if (attributeData.isInteger) {\n            gl.vertexAttribIPointer(i, _attribute13.itemSize, attributeData.type, stride, offset);\n          } else {\n            gl.vertexAttribPointer(i, _attribute13.itemSize, attributeData.type, _attribute13.normalized, stride, offset);\n          }\n          if (_attribute13.isInstancedBufferAttribute && !_attribute13.isInterleavedBufferAttribute) {\n            gl.vertexAttribDivisor(i, _attribute13.meshPerAttribute);\n          } else if (_attribute13.isInterleavedBufferAttribute && _attribute13.data.isInstancedInterleavedBuffer) {\n            gl.vertexAttribDivisor(i, _attribute13.data.meshPerAttribute);\n          }\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        this.vaoCache[key] = vaoGPU;\n        return {\n          vaoGPU: vaoGPU,\n          staticVao: staticVao\n        };\n      }\n\n      /**\n       * Creates a tranform feedback from the given transform buffers.\n       *\n       * @private\n       * @param {Array<DualAttributeData>} transformBuffers - The tranform buffers.\n       * @return {WebGLTransformFeedback} The tranform feedback.\n       */\n    }, {\n      key: \"_getTransformFeedback\",\n      value: function _getTransformFeedback(transformBuffers) {\n        var key = '';\n        for (var i = 0; i < transformBuffers.length; i++) {\n          key += ':' + transformBuffers[i].id;\n        }\n        var transformFeedbackGPU = this.transformFeedbackCache[key];\n        if (transformFeedbackGPU !== undefined) {\n          return transformFeedbackGPU;\n        }\n        var gl = this.gl;\n        transformFeedbackGPU = gl.createTransformFeedback();\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);\n        for (var _i20 = 0; _i20 < transformBuffers.length; _i20++) {\n          var attributeData = transformBuffers[_i20];\n          gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, _i20, attributeData.transformBuffer);\n        }\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n        this.transformFeedbackCache[key] = transformFeedbackGPU;\n        return transformFeedbackGPU;\n      }\n\n      /**\n       * Setups the given bindings.\n       *\n       * @private\n       * @param {Array<BindGroup>} bindings - The bindings.\n       * @param {WebGLProgram} programGPU - The WebGL program.\n       */\n    }, {\n      key: \"_setupBindings\",\n      value: function _setupBindings(bindings, programGPU) {\n        var gl = this.gl;\n        for (var bindGroup of bindings) {\n          for (var binding of bindGroup.bindings) {\n            var bindingData = this.get(binding);\n            var index = bindingData.index;\n            if (binding.isUniformsGroup || binding.isUniformBuffer) {\n              var location = gl.getUniformBlockIndex(programGPU, binding.name);\n              gl.uniformBlockBinding(programGPU, location, index);\n            } else if (binding.isSampledTexture) {\n              var _location = gl.getUniformLocation(programGPU, binding.name);\n              gl.uniform1i(_location, index);\n            }\n          }\n        }\n      }\n\n      /**\n       * Binds the given uniforms.\n       *\n       * @private\n       * @param {Array<BindGroup>} bindings - The bindings.\n       */\n    }, {\n      key: \"_bindUniforms\",\n      value: function _bindUniforms(bindings) {\n        var gl = this.gl,\n          state = this.state;\n        for (var bindGroup of bindings) {\n          for (var binding of bindGroup.bindings) {\n            var bindingData = this.get(binding);\n            var index = bindingData.index;\n            if (binding.isUniformsGroup || binding.isUniformBuffer) {\n              // TODO USE bindBufferRange to group multiple uniform buffers\n              state.bindBufferBase(gl.UNIFORM_BUFFER, index, bindingData.bufferGPU);\n            } else if (binding.isSampledTexture) {\n              state.bindTexture(bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index);\n            }\n          }\n        }\n      }\n\n      /**\n       * Frees internal resources.\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.renderer.domElement.removeEventListener('webglcontextlost', this._onContextLost);\n      }\n    }]);\n  }(Backend);\n  var GPUPrimitiveTopology = {\n    PointList: 'point-list',\n    LineList: 'line-list',\n    LineStrip: 'line-strip',\n    TriangleList: 'triangle-list',\n    TriangleStrip: 'triangle-strip'\n  };\n  var GPUCompareFunction = {\n    Never: 'never',\n    Less: 'less',\n    Equal: 'equal',\n    LessEqual: 'less-equal',\n    Greater: 'greater',\n    NotEqual: 'not-equal',\n    GreaterEqual: 'greater-equal',\n    Always: 'always'\n  };\n  var GPUStoreOp = {\n    Store: 'store',\n    Discard: 'discard'\n  };\n  var GPULoadOp = {\n    Load: 'load',\n    Clear: 'clear'\n  };\n  var GPUFrontFace = {\n    CCW: 'ccw',\n    CW: 'cw'\n  };\n  var GPUCullMode = {\n    None: 'none',\n    Front: 'front',\n    Back: 'back'\n  };\n  var GPUIndexFormat = {\n    Uint16: 'uint16',\n    Uint32: 'uint32'\n  };\n  var GPUTextureFormat = {\n    // 8-bit formats\n\n    R8Unorm: 'r8unorm',\n    R8Snorm: 'r8snorm',\n    R8Uint: 'r8uint',\n    R8Sint: 'r8sint',\n    // 16-bit formats\n\n    R16Uint: 'r16uint',\n    R16Sint: 'r16sint',\n    R16Float: 'r16float',\n    RG8Unorm: 'rg8unorm',\n    RG8Snorm: 'rg8snorm',\n    RG8Uint: 'rg8uint',\n    RG8Sint: 'rg8sint',\n    // 32-bit formats\n\n    R32Uint: 'r32uint',\n    R32Sint: 'r32sint',\n    R32Float: 'r32float',\n    RG16Uint: 'rg16uint',\n    RG16Sint: 'rg16sint',\n    RG16Float: 'rg16float',\n    RGBA8Unorm: 'rgba8unorm',\n    RGBA8UnormSRGB: 'rgba8unorm-srgb',\n    RGBA8Snorm: 'rgba8snorm',\n    RGBA8Uint: 'rgba8uint',\n    RGBA8Sint: 'rgba8sint',\n    BGRA8Unorm: 'bgra8unorm',\n    BGRA8UnormSRGB: 'bgra8unorm-srgb',\n    // Packed 32-bit formats\n    RGB9E5UFloat: 'rgb9e5ufloat',\n    RGB10A2Unorm: 'rgb10a2unorm',\n    RG11B10uFloat: 'rgb10a2unorm',\n    // 64-bit formats\n\n    RG32Uint: 'rg32uint',\n    RG32Sint: 'rg32sint',\n    RG32Float: 'rg32float',\n    RGBA16Uint: 'rgba16uint',\n    RGBA16Sint: 'rgba16sint',\n    RGBA16Float: 'rgba16float',\n    // 128-bit formats\n\n    RGBA32Uint: 'rgba32uint',\n    RGBA32Sint: 'rgba32sint',\n    RGBA32Float: 'rgba32float',\n    // Depth and stencil formats\n\n    Stencil8: 'stencil8',\n    Depth16Unorm: 'depth16unorm',\n    Depth24Plus: 'depth24plus',\n    Depth24PlusStencil8: 'depth24plus-stencil8',\n    Depth32Float: 'depth32float',\n    // 'depth32float-stencil8' extension\n\n    Depth32FloatStencil8: 'depth32float-stencil8',\n    // BC compressed formats usable if 'texture-compression-bc' is both\n    // supported by the device/user agent and enabled in requestDevice.\n\n    BC1RGBAUnorm: 'bc1-rgba-unorm',\n    BC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n    BC2RGBAUnorm: 'bc2-rgba-unorm',\n    BC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n    BC3RGBAUnorm: 'bc3-rgba-unorm',\n    BC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n    BC4RUnorm: 'bc4-r-unorm',\n    BC4RSnorm: 'bc4-r-snorm',\n    BC5RGUnorm: 'bc5-rg-unorm',\n    BC5RGSnorm: 'bc5-rg-snorm',\n    BC6HRGBUFloat: 'bc6h-rgb-ufloat',\n    BC6HRGBFloat: 'bc6h-rgb-float',\n    BC7RGBAUnorm: 'bc7-rgba-unorm',\n    BC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n    // ETC2 compressed formats usable if 'texture-compression-etc2' is both\n    // supported by the device/user agent and enabled in requestDevice.\n\n    ETC2RGB8Unorm: 'etc2-rgb8unorm',\n    ETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\n    ETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\n    ETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\n    ETC2RGBA8Unorm: 'etc2-rgba8unorm',\n    ETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\n    EACR11Unorm: 'eac-r11unorm',\n    EACR11Snorm: 'eac-r11snorm',\n    EACRG11Unorm: 'eac-rg11unorm',\n    EACRG11Snorm: 'eac-rg11snorm',\n    // ASTC compressed formats usable if 'texture-compression-astc' is both\n    // supported by the device/user agent and enabled in requestDevice.\n\n    ASTC4x4Unorm: 'astc-4x4-unorm',\n    ASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\n    ASTC5x4Unorm: 'astc-5x4-unorm',\n    ASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\n    ASTC5x5Unorm: 'astc-5x5-unorm',\n    ASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\n    ASTC6x5Unorm: 'astc-6x5-unorm',\n    ASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\n    ASTC6x6Unorm: 'astc-6x6-unorm',\n    ASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\n    ASTC8x5Unorm: 'astc-8x5-unorm',\n    ASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\n    ASTC8x6Unorm: 'astc-8x6-unorm',\n    ASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\n    ASTC8x8Unorm: 'astc-8x8-unorm',\n    ASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\n    ASTC10x5Unorm: 'astc-10x5-unorm',\n    ASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\n    ASTC10x6Unorm: 'astc-10x6-unorm',\n    ASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\n    ASTC10x8Unorm: 'astc-10x8-unorm',\n    ASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\n    ASTC10x10Unorm: 'astc-10x10-unorm',\n    ASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\n    ASTC12x10Unorm: 'astc-12x10-unorm',\n    ASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\n    ASTC12x12Unorm: 'astc-12x12-unorm',\n    ASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb'\n  };\n  var GPUAddressMode = {\n    ClampToEdge: 'clamp-to-edge',\n    Repeat: 'repeat',\n    MirrorRepeat: 'mirror-repeat'\n  };\n  var GPUFilterMode = {\n    Linear: 'linear',\n    Nearest: 'nearest'\n  };\n  var GPUBlendFactor = {\n    Zero: 'zero',\n    One: 'one',\n    Src: 'src',\n    OneMinusSrc: 'one-minus-src',\n    SrcAlpha: 'src-alpha',\n    OneMinusSrcAlpha: 'one-minus-src-alpha',\n    Dst: 'dst',\n    OneMinusDstColor: 'one-minus-dst',\n    DstAlpha: 'dst-alpha',\n    OneMinusDstAlpha: 'one-minus-dst-alpha',\n    SrcAlphaSaturated: 'src-alpha-saturated',\n    Constant: 'constant',\n    OneMinusConstant: 'one-minus-constant'\n  };\n  var GPUBlendOperation = {\n    Add: 'add',\n    Subtract: 'subtract',\n    ReverseSubtract: 'reverse-subtract',\n    Min: 'min',\n    Max: 'max'\n  };\n  var GPUColorWriteFlags = {\n    None: 0,\n    Red: 0x1,\n    Green: 0x2,\n    Blue: 0x4,\n    Alpha: 0x8,\n    All: 0xF\n  };\n  var GPUStencilOperation = {\n    Keep: 'keep',\n    Zero: 'zero',\n    Replace: 'replace',\n    Invert: 'invert',\n    IncrementClamp: 'increment-clamp',\n    DecrementClamp: 'decrement-clamp',\n    IncrementWrap: 'increment-wrap',\n    DecrementWrap: 'decrement-wrap'\n  };\n  var GPUBufferBindingType = {\n    Uniform: 'uniform',\n    Storage: 'storage',\n    ReadOnlyStorage: 'read-only-storage'\n  };\n  var GPUStorageTextureAccess = {\n    WriteOnly: 'write-only',\n    ReadOnly: 'read-only',\n    ReadWrite: 'read-write'\n  };\n  var GPUTextureSampleType = {\n    Float: 'float',\n    UnfilterableFloat: 'unfilterable-float',\n    Depth: 'depth',\n    SInt: 'sint',\n    UInt: 'uint'\n  };\n  var GPUTextureDimension = {\n    OneD: '1d',\n    TwoD: '2d',\n    ThreeD: '3d'\n  };\n  var GPUTextureViewDimension = {\n    OneD: '1d',\n    TwoD: '2d',\n    TwoDArray: '2d-array',\n    Cube: 'cube',\n    CubeArray: 'cube-array',\n    ThreeD: '3d'\n  };\n  var GPUTextureAspect = {\n    All: 'all',\n    StencilOnly: 'stencil-only',\n    DepthOnly: 'depth-only'\n  };\n  var GPUInputStepMode = {\n    Vertex: 'vertex',\n    Instance: 'instance'\n  };\n  var GPUFeatureName = {\n    DepthClipControl: 'depth-clip-control',\n    Depth32FloatStencil8: 'depth32float-stencil8',\n    TextureCompressionBC: 'texture-compression-bc',\n    TextureCompressionETC2: 'texture-compression-etc2',\n    TextureCompressionASTC: 'texture-compression-astc',\n    TimestampQuery: 'timestamp-query',\n    IndirectFirstInstance: 'indirect-first-instance',\n    ShaderF16: 'shader-f16',\n    RG11B10UFloat: 'rg11b10ufloat-renderable',\n    BGRA8UNormStorage: 'bgra8unorm-storage',\n    Float32Filterable: 'float32-filterable',\n    ClipDistances: 'clip-distances',\n    DualSourceBlending: 'dual-source-blending',\n    Subgroups: 'subgroups'\n  };\n\n  /**\n   * Represents a sampler binding type.\n   *\n   * @private\n   * @augments Binding\n   */\n  var Sampler = /*#__PURE__*/function (_Binding3) {\n    /**\n     * Constructs a new sampler.\n     *\n     * @param {String} name - The samplers's name.\n     * @param {Texture?} texture - The texture this binding is referring to.\n     */\n    function Sampler(name, texture) {\n      var _this206;\n      (0, _classCallCheck2.default)(this, Sampler);\n      _this206 = _callSuper(this, Sampler, [name]);\n\n      /**\n       * The texture the sampler is referring to.\n       *\n       * @type {Texture?}\n       */\n      _this206.texture = texture;\n\n      /**\n       * The binding's version.\n       *\n       * @type {Number}\n       */\n      _this206.version = texture ? texture.version : 0;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this206.isSampler = true;\n      return _this206;\n    }\n    (0, _inherits2.default)(Sampler, _Binding3);\n    return (0, _createClass2.default)(Sampler);\n  }(Binding);\n  /**\n   * A special form of sampler binding type.\n   * It's texture value is managed by a node object.\n   *\n   * @private\n   * @augments Sampler\n   */\n  var NodeSampler = /*#__PURE__*/function (_Sampler) {\n    /**\n     * Constructs a new node-based sampler.\n     *\n     * @param {String} name - The samplers's name.\n     * @param {TextureNode} textureNode - The texture node.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     */\n    function NodeSampler(name, textureNode, groupNode) {\n      var _this207;\n      (0, _classCallCheck2.default)(this, NodeSampler);\n      _this207 = _callSuper(this, NodeSampler, [name, textureNode ? textureNode.value : null]);\n\n      /**\n       * The texture node.\n       *\n       * @type {TextureNode}\n       */\n      _this207.textureNode = textureNode;\n\n      /**\n       * The uniform group node.\n       *\n       * @type {UniformGroupNode}\n       */\n      _this207.groupNode = groupNode;\n      return _this207;\n    }\n\n    /**\n     * Updates the texture value of this sampler.\n     */\n    (0, _inherits2.default)(NodeSampler, _Sampler);\n    return (0, _createClass2.default)(NodeSampler, [{\n      key: \"update\",\n      value: function update() {\n        this.texture = this.textureNode.value;\n      }\n    }]);\n  }(Sampler);\n  /**\n   * Represents a storage buffer binding type.\n   *\n   * @private\n   * @augments Buffer\n   */\n  var StorageBuffer = /*#__PURE__*/function (_Buffer2) {\n    /**\n     * Constructs a new uniform buffer.\n     *\n     * @param {String} name - The buffer's name.\n     * @param {BufferAttribute} attribute - The buffer attribute.\n     */\n    function StorageBuffer(name, attribute) {\n      var _this208;\n      (0, _classCallCheck2.default)(this, StorageBuffer);\n      _this208 = _callSuper(this, StorageBuffer, [name, attribute ? attribute.array : null]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {BufferAttribute}\n       */\n      _this208.attribute = attribute;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this208.isStorageBuffer = true;\n      return _this208;\n    }\n    (0, _inherits2.default)(StorageBuffer, _Buffer2);\n    return (0, _createClass2.default)(StorageBuffer);\n  }(Buffer);\n  var _id = 0;\n\n  /**\n   * A special form of storage buffer binding type.\n   * It's buffer value is managed by a node object.\n   *\n   * @private\n   * @augments StorageBuffer\n   */\n  var NodeStorageBuffer = /*#__PURE__*/function (_StorageBuffer) {\n    /**\n     * Constructs a new node-based storage buffer.\n     *\n     * @param {StorageBufferNode} nodeUniform - The storage buffer node.\n     * @param {UniformGroupNode} groupNode - The uniform group node.\n     */\n    function NodeStorageBuffer(nodeUniform, groupNode) {\n      var _this209;\n      (0, _classCallCheck2.default)(this, NodeStorageBuffer);\n      _this209 = _callSuper(this, NodeStorageBuffer, ['StorageBuffer_' + _id++, nodeUniform ? nodeUniform.value : null]);\n\n      /**\n       * The node uniform.\n       *\n       * @type {StorageBufferNode}\n       */\n      _this209.nodeUniform = nodeUniform;\n\n      /**\n       * The access type.\n       *\n       * @type {String}\n       */\n      _this209.access = nodeUniform ? nodeUniform.access : NodeAccess.READ_WRITE;\n\n      /**\n       * The uniform group node.\n       *\n       * @type {UniformGroupNode}\n       */\n      _this209.groupNode = groupNode;\n      return _this209;\n    }\n\n    /**\n     * The storage buffer.\n     *\n     * @type {BufferAttribute}\n     */\n    (0, _inherits2.default)(NodeStorageBuffer, _StorageBuffer);\n    return (0, _createClass2.default)(NodeStorageBuffer, [{\n      key: \"buffer\",\n      get: function get() {\n        return this.nodeUniform.value;\n      }\n    }]);\n  }(StorageBuffer);\n  var WebGPUTexturePassUtils = /*#__PURE__*/function (_DataMap8) {\n    function WebGPUTexturePassUtils(device) {\n      var _this210;\n      (0, _classCallCheck2.default)(this, WebGPUTexturePassUtils);\n      _this210 = _callSuper(this, WebGPUTexturePassUtils);\n      _this210.device = device;\n      var mipmapVertexSource = `\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n`;\n      var mipmapFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n`;\n      var flipYFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n`;\n      _this210.mipmapSampler = device.createSampler({\n        minFilter: GPUFilterMode.Linear\n      });\n      _this210.flipYSampler = device.createSampler({\n        minFilter: GPUFilterMode.Nearest\n      }); //@TODO?: Consider using textureLoad()\n\n      // We'll need a new pipeline for every texture format used.\n      _this210.transferPipelines = {};\n      _this210.flipYPipelines = {};\n      _this210.mipmapVertexShaderModule = device.createShaderModule({\n        label: 'mipmapVertex',\n        code: mipmapVertexSource\n      });\n      _this210.mipmapFragmentShaderModule = device.createShaderModule({\n        label: 'mipmapFragment',\n        code: mipmapFragmentSource\n      });\n      _this210.flipYFragmentShaderModule = device.createShaderModule({\n        label: 'flipYFragment',\n        code: flipYFragmentSource\n      });\n      return _this210;\n    }\n    (0, _inherits2.default)(WebGPUTexturePassUtils, _DataMap8);\n    return (0, _createClass2.default)(WebGPUTexturePassUtils, [{\n      key: \"getTransferPipeline\",\n      value: function getTransferPipeline(format) {\n        var pipeline = this.transferPipelines[format];\n        if (pipeline === undefined) {\n          pipeline = this.device.createRenderPipeline({\n            label: `mipmap-${format}`,\n            vertex: {\n              module: this.mipmapVertexShaderModule,\n              entryPoint: 'main'\n            },\n            fragment: {\n              module: this.mipmapFragmentShaderModule,\n              entryPoint: 'main',\n              targets: [{\n                format: format\n              }]\n            },\n            primitive: {\n              topology: GPUPrimitiveTopology.TriangleStrip,\n              stripIndexFormat: GPUIndexFormat.Uint32\n            },\n            layout: 'auto'\n          });\n          this.transferPipelines[format] = pipeline;\n        }\n        return pipeline;\n      }\n    }, {\n      key: \"getFlipYPipeline\",\n      value: function getFlipYPipeline(format) {\n        var pipeline = this.flipYPipelines[format];\n        if (pipeline === undefined) {\n          pipeline = this.device.createRenderPipeline({\n            label: `flipY-${format}`,\n            vertex: {\n              module: this.mipmapVertexShaderModule,\n              entryPoint: 'main'\n            },\n            fragment: {\n              module: this.flipYFragmentShaderModule,\n              entryPoint: 'main',\n              targets: [{\n                format: format\n              }]\n            },\n            primitive: {\n              topology: GPUPrimitiveTopology.TriangleStrip,\n              stripIndexFormat: GPUIndexFormat.Uint32\n            },\n            layout: 'auto'\n          });\n          this.flipYPipelines[format] = pipeline;\n        }\n        return pipeline;\n      }\n    }, {\n      key: \"flipY\",\n      value: function flipY(textureGPU, textureGPUDescriptor) {\n        var _this211 = this;\n        var baseArrayLayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var format = textureGPUDescriptor.format;\n        var _textureGPUDescriptor = textureGPUDescriptor.size,\n          width = _textureGPUDescriptor.width,\n          height = _textureGPUDescriptor.height;\n        var transferPipeline = this.getTransferPipeline(format);\n        var flipYPipeline = this.getFlipYPipeline(format);\n        var tempTexture = this.device.createTexture({\n          size: {\n            width: width,\n            height: height,\n            depthOrArrayLayers: 1\n          },\n          format: format,\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n        });\n        var srcView = textureGPU.createView({\n          baseMipLevel: 0,\n          mipLevelCount: 1,\n          dimension: GPUTextureViewDimension.TwoD,\n          baseArrayLayer: baseArrayLayer\n        });\n        var dstView = tempTexture.createView({\n          baseMipLevel: 0,\n          mipLevelCount: 1,\n          dimension: GPUTextureViewDimension.TwoD,\n          baseArrayLayer: 0\n        });\n        var commandEncoder = this.device.createCommandEncoder({});\n        var pass = function pass(pipeline, sourceView, destinationView) {\n          var bindGroupLayout = pipeline.getBindGroupLayout(0); // @TODO: Consider making this static.\n\n          var bindGroup = _this211.device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [{\n              binding: 0,\n              resource: _this211.flipYSampler\n            }, {\n              binding: 1,\n              resource: sourceView\n            }]\n          });\n          var passEncoder = commandEncoder.beginRenderPass({\n            colorAttachments: [{\n              view: destinationView,\n              loadOp: GPULoadOp.Clear,\n              storeOp: GPUStoreOp.Store,\n              clearValue: [0, 0, 0, 0]\n            }]\n          });\n          passEncoder.setPipeline(pipeline);\n          passEncoder.setBindGroup(0, bindGroup);\n          passEncoder.draw(4, 1, 0, 0);\n          passEncoder.end();\n        };\n        pass(transferPipeline, srcView, dstView);\n        pass(flipYPipeline, dstView, srcView);\n        this.device.queue.submit([commandEncoder.finish()]);\n        tempTexture.destroy();\n      }\n    }, {\n      key: \"generateMipmaps\",\n      value: function generateMipmaps(textureGPU, textureGPUDescriptor) {\n        var baseArrayLayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var textureData = this.get(textureGPU);\n        if (textureData.useCount === undefined) {\n          textureData.useCount = 0;\n          textureData.layers = [];\n        }\n        var passes = textureData.layers[baseArrayLayer] || this._mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer);\n        var commandEncoder = this.device.createCommandEncoder({});\n        this._mipmapRunBundles(commandEncoder, passes);\n        this.device.queue.submit([commandEncoder.finish()]);\n        if (textureData.useCount !== 0) textureData.layers[baseArrayLayer] = passes;\n        textureData.useCount++;\n      }\n    }, {\n      key: \"_mipmapCreateBundles\",\n      value: function _mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer) {\n        var pipeline = this.getTransferPipeline(textureGPUDescriptor.format);\n        var bindGroupLayout = pipeline.getBindGroupLayout(0); // @TODO: Consider making this static.\n\n        var srcView = textureGPU.createView({\n          baseMipLevel: 0,\n          mipLevelCount: 1,\n          dimension: GPUTextureViewDimension.TwoD,\n          baseArrayLayer: baseArrayLayer\n        });\n        var passes = [];\n        for (var i = 1; i < textureGPUDescriptor.mipLevelCount; i++) {\n          var bindGroup = this.device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [{\n              binding: 0,\n              resource: this.mipmapSampler\n            }, {\n              binding: 1,\n              resource: srcView\n            }]\n          });\n          var dstView = textureGPU.createView({\n            baseMipLevel: i,\n            mipLevelCount: 1,\n            dimension: GPUTextureViewDimension.TwoD,\n            baseArrayLayer: baseArrayLayer\n          });\n          var passDescriptor = {\n            colorAttachments: [{\n              view: dstView,\n              loadOp: GPULoadOp.Clear,\n              storeOp: GPUStoreOp.Store,\n              clearValue: [0, 0, 0, 0]\n            }]\n          };\n          var passEncoder = this.device.createRenderBundleEncoder({\n            colorFormats: [textureGPUDescriptor.format]\n          });\n          passEncoder.setPipeline(pipeline);\n          passEncoder.setBindGroup(0, bindGroup);\n          passEncoder.draw(4, 1, 0, 0);\n          passes.push({\n            renderBundles: [passEncoder.finish()],\n            passDescriptor: passDescriptor\n          });\n          srcView = dstView;\n        }\n        return passes;\n      }\n    }, {\n      key: \"_mipmapRunBundles\",\n      value: function _mipmapRunBundles(commandEncoder, passes) {\n        var levels = passes.length;\n        for (var i = 0; i < levels; i++) {\n          var _pass = passes[i];\n          var passEncoder = commandEncoder.beginRenderPass(_pass.passDescriptor);\n          passEncoder.executeBundles(_pass.renderBundles);\n          passEncoder.end();\n        }\n      }\n    }]);\n  }(DataMap);\n  var _compareToWebGPU = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverCompare, 'never'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessCompare, 'less'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualCompare, 'equal'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualCompare, 'less-equal'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterCompare, 'greater'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualCompare, 'greater-equal'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysCompare, 'always'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualCompare, 'not-equal');\n  var _flipMap = [0, 1, 3, 2, 4, 5];\n  var WebGPUTextureUtils = /*#__PURE__*/function () {\n    function WebGPUTextureUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGPUTextureUtils);\n      this.backend = backend;\n      this._passUtils = null;\n      this.defaultTexture = {};\n      this.defaultCubeTexture = {};\n      this.defaultVideoFrame = null;\n      this.colorBuffer = null;\n      this.depthTexture = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthTexture)();\n      this.depthTexture.name = 'depthBuffer';\n    }\n    return (0, _createClass2.default)(WebGPUTextureUtils, [{\n      key: \"createSampler\",\n      value: function createSampler(texture) {\n        var backend = this.backend;\n        var device = backend.device;\n        var textureGPU = backend.get(texture);\n        var samplerDescriptorGPU = {\n          addressModeU: this._convertAddressMode(texture.wrapS),\n          addressModeV: this._convertAddressMode(texture.wrapT),\n          addressModeW: this._convertAddressMode(texture.wrapR),\n          magFilter: this._convertFilterMode(texture.magFilter),\n          minFilter: this._convertFilterMode(texture.minFilter),\n          mipmapFilter: this._convertFilterMode(texture.minFilter),\n          maxAnisotropy: 1\n        };\n\n        // anisotropy can only be used when all filter modes are set to linear.\n\n        if (samplerDescriptorGPU.magFilter === GPUFilterMode.Linear && samplerDescriptorGPU.minFilter === GPUFilterMode.Linear && samplerDescriptorGPU.mipmapFilter === GPUFilterMode.Linear) {\n          samplerDescriptorGPU.maxAnisotropy = texture.anisotropy;\n        }\n        if (texture.isDepthTexture && texture.compareFunction !== null) {\n          samplerDescriptorGPU.compare = _compareToWebGPU[texture.compareFunction];\n        }\n        textureGPU.sampler = device.createSampler(samplerDescriptorGPU);\n      }\n    }, {\n      key: \"createDefaultTexture\",\n      value: function createDefaultTexture(texture) {\n        var textureGPU;\n        var format = getFormat(texture);\n        if (texture.isCubeTexture) {\n          textureGPU = this._getDefaultCubeTextureGPU(format);\n        } else if (texture.isVideoTexture) {\n          this.backend.get(texture).externalTexture = this._getDefaultVideoFrame();\n        } else {\n          textureGPU = this._getDefaultTextureGPU(format);\n        }\n        this.backend.get(texture).texture = textureGPU;\n      }\n    }, {\n      key: \"createTexture\",\n      value: function createTexture(texture) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var backend = this.backend;\n        var textureData = backend.get(texture);\n        if (textureData.initialized) {\n          throw new Error('WebGPUTextureUtils: Texture already initialized.');\n        }\n        if (options.needsMipmaps === undefined) options.needsMipmaps = false;\n        if (options.levels === undefined) options.levels = 1;\n        if (options.depth === undefined) options.depth = 1;\n        var width = options.width,\n          height = options.height,\n          depth = options.depth,\n          levels = options.levels;\n        if (texture.isFramebufferTexture) {\n          if (options.renderTarget) {\n            options.format = this.backend.utils.getCurrentColorFormat(options.renderTarget);\n          } else {\n            options.format = this.backend.utils.getPreferredCanvasFormat();\n          }\n        }\n        var dimension = this._getDimension(texture);\n        var format = texture.internalFormat || options.format || getFormat(texture, backend.device);\n        textureData.format = format;\n        var _backend$utils$getTex = backend.utils.getTextureSampleData(texture),\n          samples = _backend$utils$getTex.samples,\n          primarySamples = _backend$utils$getTex.primarySamples,\n          isMSAA = _backend$utils$getTex.isMSAA;\n        var usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;\n        if (texture.isStorageTexture === true) {\n          usage |= GPUTextureUsage.STORAGE_BINDING;\n        }\n        if (texture.isCompressedTexture !== true && texture.isCompressedArrayTexture !== true) {\n          usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n        }\n        var textureDescriptorGPU = {\n          label: texture.name,\n          size: {\n            width: width,\n            height: height,\n            depthOrArrayLayers: depth\n          },\n          mipLevelCount: levels,\n          sampleCount: primarySamples,\n          dimension: dimension,\n          format: format,\n          usage: usage\n        };\n\n        // texture creation\n\n        if (texture.isVideoTexture) {\n          var video = texture.source.data;\n          var videoFrame = new VideoFrame(video);\n          textureDescriptorGPU.size.width = videoFrame.displayWidth;\n          textureDescriptorGPU.size.height = videoFrame.displayHeight;\n          videoFrame.close();\n          textureData.externalTexture = video;\n        } else {\n          if (format === undefined) {\n            console.warn('WebGPURenderer: Texture format not supported.');\n            return this.createDefaultTexture(texture);\n          }\n          textureData.texture = backend.device.createTexture(textureDescriptorGPU);\n        }\n        if (isMSAA) {\n          var msaaTextureDescriptorGPU = Object.assign({}, textureDescriptorGPU);\n          msaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + '-msaa';\n          msaaTextureDescriptorGPU.sampleCount = samples;\n          textureData.msaaTexture = backend.device.createTexture(msaaTextureDescriptorGPU);\n        }\n        textureData.initialized = true;\n        textureData.textureDescriptorGPU = textureDescriptorGPU;\n      }\n    }, {\n      key: \"destroyTexture\",\n      value: function destroyTexture(texture) {\n        var backend = this.backend;\n        var textureData = backend.get(texture);\n        if (textureData.texture !== undefined) textureData.texture.destroy();\n        if (textureData.msaaTexture !== undefined) textureData.msaaTexture.destroy();\n        backend.delete(texture);\n      }\n    }, {\n      key: \"destroySampler\",\n      value: function destroySampler(texture) {\n        var backend = this.backend;\n        var textureData = backend.get(texture);\n        delete textureData.sampler;\n      }\n    }, {\n      key: \"generateMipmaps\",\n      value: function generateMipmaps(texture) {\n        var textureData = this.backend.get(texture);\n        if (texture.isCubeTexture) {\n          for (var i = 0; i < 6; i++) {\n            this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i);\n          }\n        } else {\n          var _depth = texture.image.depth || 1;\n          for (var _i21 = 0; _i21 < _depth; _i21++) {\n            this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, _i21);\n          }\n        }\n      }\n    }, {\n      key: \"getColorBuffer\",\n      value: function getColorBuffer() {\n        if (this.colorBuffer) this.colorBuffer.destroy();\n        var backend = this.backend;\n        var _backend$getDrawingBu = backend.getDrawingBufferSize(),\n          width = _backend$getDrawingBu.width,\n          height = _backend$getDrawingBu.height;\n        this.colorBuffer = backend.device.createTexture({\n          label: 'colorBuffer',\n          size: {\n            width: width,\n            height: height,\n            depthOrArrayLayers: 1\n          },\n          sampleCount: backend.utils.getSampleCount(backend.renderer.samples),\n          format: backend.utils.getPreferredCanvasFormat(),\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n        });\n        return this.colorBuffer;\n      }\n    }, {\n      key: \"getDepthBuffer\",\n      value: function getDepthBuffer() {\n        var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var stencil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var backend = this.backend;\n        var _backend$getDrawingBu2 = backend.getDrawingBufferSize(),\n          width = _backend$getDrawingBu2.width,\n          height = _backend$getDrawingBu2.height;\n        var depthTexture = this.depthTexture;\n        var depthTextureGPU = backend.get(depthTexture).texture;\n        var format, type;\n        if (stencil) {\n          format = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthStencilFormat;\n          type = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt248Type;\n        } else if (depth) {\n          format = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthFormat;\n          type = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType;\n        }\n        if (depthTextureGPU !== undefined) {\n          if (depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format && depthTexture.type === type) {\n            return depthTextureGPU;\n          }\n          this.destroyTexture(depthTexture);\n        }\n        depthTexture.name = 'depthBuffer';\n        depthTexture.format = format;\n        depthTexture.type = type;\n        depthTexture.image.width = width;\n        depthTexture.image.height = height;\n        this.createTexture(depthTexture, {\n          width: width,\n          height: height\n        });\n        return backend.get(depthTexture).texture;\n      }\n    }, {\n      key: \"updateTexture\",\n      value: function updateTexture(texture, options) {\n        var textureData = this.backend.get(texture);\n        var textureDescriptorGPU = textureData.textureDescriptorGPU;\n        if (texture.isRenderTargetTexture || textureDescriptorGPU === undefined /* unsupported texture format */) return;\n\n        // transfer texture data\n\n        if (texture.isDataTexture) {\n          this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY);\n        } else if (texture.isDataArrayTexture || texture.isData3DTexture) {\n          for (var i = 0; i < options.image.depth; i++) {\n            this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, i, texture.flipY, i);\n          }\n        } else if (texture.isCompressedTexture || texture.isCompressedArrayTexture) {\n          this._copyCompressedBufferToTexture(texture.mipmaps, textureData.texture, textureDescriptorGPU);\n        } else if (texture.isCubeTexture) {\n          this._copyCubeMapToTexture(options.images, textureData.texture, textureDescriptorGPU, texture.flipY);\n        } else if (texture.isVideoTexture) {\n          var video = texture.source.data;\n          textureData.externalTexture = video;\n        } else {\n          this._copyImageToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY);\n        }\n\n        //\n\n        textureData.version = texture.version;\n        if (texture.onUpdate) texture.onUpdate(texture);\n      }\n    }, {\n      key: \"copyTextureToBuffer\",\n      value: function () {\n        var _copyTextureToBuffer2 = (0, _asyncToGenerator2.default)(function* (texture, x, y, width, height, faceIndex) {\n          var device = this.backend.device;\n          var textureData = this.backend.get(texture);\n          var textureGPU = textureData.texture;\n          var format = textureData.textureDescriptorGPU.format;\n          var bytesPerTexel = this._getBytesPerTexel(format);\n          var bytesPerRow = width * bytesPerTexel;\n          bytesPerRow = Math.ceil(bytesPerRow / 256) * 256; // Align to 256 bytes\n\n          var readBuffer = device.createBuffer({\n            size: width * height * bytesPerTexel,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n          });\n          var encoder = device.createCommandEncoder();\n          encoder.copyTextureToBuffer({\n            texture: textureGPU,\n            origin: {\n              x: x,\n              y: y,\n              z: faceIndex\n            }\n          }, {\n            buffer: readBuffer,\n            bytesPerRow: bytesPerRow\n          }, {\n            width: width,\n            height: height\n          });\n          var typedArrayType = this._getTypedArrayType(format);\n          device.queue.submit([encoder.finish()]);\n          yield readBuffer.mapAsync(GPUMapMode.READ);\n          var buffer = readBuffer.getMappedRange();\n          return new typedArrayType(buffer);\n        });\n        function copyTextureToBuffer(_x37, _x38, _x39, _x40, _x41, _x42) {\n          return _copyTextureToBuffer2.apply(this, arguments);\n        }\n        return copyTextureToBuffer;\n      }()\n    }, {\n      key: \"_isEnvironmentTexture\",\n      value: function _isEnvironmentTexture(texture) {\n        var mapping = texture.mapping;\n        return mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularReflectionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EquirectangularRefractionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeReflectionMapping || mapping === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeRefractionMapping;\n      }\n    }, {\n      key: \"_getDefaultTextureGPU\",\n      value: function _getDefaultTextureGPU(format) {\n        var defaultTexture = this.defaultTexture[format];\n        if (defaultTexture === undefined) {\n          var _texture10 = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Texture)();\n          _texture10.minFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter;\n          _texture10.magFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter;\n          this.createTexture(_texture10, {\n            width: 1,\n            height: 1,\n            format: format\n          });\n          this.defaultTexture[format] = defaultTexture = _texture10;\n        }\n        return this.backend.get(defaultTexture).texture;\n      }\n    }, {\n      key: \"_getDefaultCubeTextureGPU\",\n      value: function _getDefaultCubeTextureGPU(format) {\n        var defaultCubeTexture = this.defaultTexture[format];\n        if (defaultCubeTexture === undefined) {\n          var _texture11 = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CubeTexture)();\n          _texture11.minFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter;\n          _texture11.magFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter;\n          this.createTexture(_texture11, {\n            width: 1,\n            height: 1,\n            depth: 6\n          });\n          this.defaultCubeTexture[format] = defaultCubeTexture = _texture11;\n        }\n        return this.backend.get(defaultCubeTexture).texture;\n      }\n    }, {\n      key: \"_getDefaultVideoFrame\",\n      value: function _getDefaultVideoFrame() {\n        var defaultVideoFrame = this.defaultVideoFrame;\n        if (defaultVideoFrame === null) {\n          var init = {\n            timestamp: 0,\n            codedWidth: 1,\n            codedHeight: 1,\n            format: 'RGBA'\n          };\n          this.defaultVideoFrame = defaultVideoFrame = new VideoFrame(new Uint8Array([0, 0, 0, 0xff]), init);\n        }\n        return defaultVideoFrame;\n      }\n    }, {\n      key: \"_copyCubeMapToTexture\",\n      value: function _copyCubeMapToTexture(images, textureGPU, textureDescriptorGPU, flipY) {\n        for (var i = 0; i < 6; i++) {\n          var image = images[i];\n          var flipIndex = flipY === true ? _flipMap[i] : i;\n          if (image.isDataTexture) {\n            this._copyBufferToTexture(image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY);\n          } else {\n            this._copyImageToTexture(image, textureGPU, textureDescriptorGPU, flipIndex, flipY);\n          }\n        }\n      }\n    }, {\n      key: \"_copyImageToTexture\",\n      value: function _copyImageToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY) {\n        var device = this.backend.device;\n        device.queue.copyExternalImageToTexture({\n          source: image\n        }, {\n          texture: textureGPU,\n          mipLevel: 0,\n          origin: {\n            x: 0,\n            y: 0,\n            z: originDepth\n          }\n        }, {\n          width: image.width,\n          height: image.height,\n          depthOrArrayLayers: 1\n        });\n        if (flipY === true) {\n          this._flipY(textureGPU, textureDescriptorGPU, originDepth);\n        }\n      }\n    }, {\n      key: \"_getPassUtils\",\n      value: function _getPassUtils() {\n        var passUtils = this._passUtils;\n        if (passUtils === null) {\n          this._passUtils = passUtils = new WebGPUTexturePassUtils(this.backend.device);\n        }\n        return passUtils;\n      }\n    }, {\n      key: \"_generateMipmaps\",\n      value: function _generateMipmaps(textureGPU, textureDescriptorGPU) {\n        var baseArrayLayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        this._getPassUtils().generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer);\n      }\n    }, {\n      key: \"_flipY\",\n      value: function _flipY(textureGPU, textureDescriptorGPU) {\n        var originDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        this._getPassUtils().flipY(textureGPU, textureDescriptorGPU, originDepth);\n      }\n    }, {\n      key: \"_copyBufferToTexture\",\n      value: function _copyBufferToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY) {\n        var depth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n        // @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n        // @TODO: Consider to support valid buffer layouts with other formats like RGB\n\n        var device = this.backend.device;\n        var data = image.data;\n        var bytesPerTexel = this._getBytesPerTexel(textureDescriptorGPU.format);\n        var bytesPerRow = image.width * bytesPerTexel;\n        device.queue.writeTexture({\n          texture: textureGPU,\n          mipLevel: 0,\n          origin: {\n            x: 0,\n            y: 0,\n            z: originDepth\n          }\n        }, data, {\n          offset: image.width * image.height * bytesPerTexel * depth,\n          bytesPerRow: bytesPerRow\n        }, {\n          width: image.width,\n          height: image.height,\n          depthOrArrayLayers: 1\n        });\n        if (flipY === true) {\n          this._flipY(textureGPU, textureDescriptorGPU, originDepth);\n        }\n      }\n    }, {\n      key: \"_copyCompressedBufferToTexture\",\n      value: function _copyCompressedBufferToTexture(mipmaps, textureGPU, textureDescriptorGPU) {\n        // @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\n        var device = this.backend.device;\n        var blockData = this._getBlockData(textureDescriptorGPU.format);\n        var isTextureArray = textureDescriptorGPU.size.depthOrArrayLayers > 1;\n        for (var i = 0; i < mipmaps.length; i++) {\n          var mipmap = mipmaps[i];\n          var width = mipmap.width;\n          var height = mipmap.height;\n          var _depth2 = isTextureArray ? textureDescriptorGPU.size.depthOrArrayLayers : 1;\n          var bytesPerRow = Math.ceil(width / blockData.width) * blockData.byteLength;\n          var bytesPerImage = bytesPerRow * Math.ceil(height / blockData.height);\n          for (var j = 0; j < _depth2; j++) {\n            device.queue.writeTexture({\n              texture: textureGPU,\n              mipLevel: i,\n              origin: {\n                x: 0,\n                y: 0,\n                z: j\n              }\n            }, mipmap.data, {\n              offset: j * bytesPerImage,\n              bytesPerRow: bytesPerRow,\n              rowsPerImage: Math.ceil(height / blockData.height)\n            }, {\n              width: Math.ceil(width / blockData.width) * blockData.width,\n              height: Math.ceil(height / blockData.height) * blockData.height,\n              depthOrArrayLayers: 1\n            });\n          }\n        }\n      }\n    }, {\n      key: \"_getBlockData\",\n      value: function _getBlockData(format) {\n        // this method is only relevant for compressed texture formats\n\n        if (format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB) return {\n          byteLength: 8,\n          width: 4,\n          height: 4\n        }; // DXT1\n        if (format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        }; // DXT3\n        if (format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        }; // DXT5\n        if (format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm) return {\n          byteLength: 8,\n          width: 4,\n          height: 4\n        }; // RGTC1\n        if (format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        }; // RGTC2\n        if (format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        }; // BPTC (float)\n        if (format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        }; // BPTC (unorm)\n\n        if (format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB) return {\n          byteLength: 8,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB) return {\n          byteLength: 8,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.EACR11Unorm) return {\n          byteLength: 8,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.EACR11Snorm) return {\n          byteLength: 8,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.EACRG11Unorm) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.EACRG11Snorm) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB) return {\n          byteLength: 16,\n          width: 4,\n          height: 4\n        };\n        if (format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB) return {\n          byteLength: 16,\n          width: 5,\n          height: 4\n        };\n        if (format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB) return {\n          byteLength: 16,\n          width: 5,\n          height: 5\n        };\n        if (format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB) return {\n          byteLength: 16,\n          width: 6,\n          height: 5\n        };\n        if (format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB) return {\n          byteLength: 16,\n          width: 6,\n          height: 6\n        };\n        if (format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB) return {\n          byteLength: 16,\n          width: 8,\n          height: 5\n        };\n        if (format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB) return {\n          byteLength: 16,\n          width: 8,\n          height: 6\n        };\n        if (format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB) return {\n          byteLength: 16,\n          width: 8,\n          height: 8\n        };\n        if (format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB) return {\n          byteLength: 16,\n          width: 10,\n          height: 5\n        };\n        if (format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB) return {\n          byteLength: 16,\n          width: 10,\n          height: 6\n        };\n        if (format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB) return {\n          byteLength: 16,\n          width: 10,\n          height: 8\n        };\n        if (format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB) return {\n          byteLength: 16,\n          width: 10,\n          height: 10\n        };\n        if (format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB) return {\n          byteLength: 16,\n          width: 12,\n          height: 10\n        };\n        if (format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB) return {\n          byteLength: 16,\n          width: 12,\n          height: 12\n        };\n      }\n    }, {\n      key: \"_convertAddressMode\",\n      value: function _convertAddressMode(value) {\n        var addressMode = GPUAddressMode.ClampToEdge;\n        if (value === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RepeatWrapping) {\n          addressMode = GPUAddressMode.Repeat;\n        } else if (value === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MirroredRepeatWrapping) {\n          addressMode = GPUAddressMode.MirrorRepeat;\n        }\n        return addressMode;\n      }\n    }, {\n      key: \"_convertFilterMode\",\n      value: function _convertFilterMode(value) {\n        var filterMode = GPUFilterMode.Linear;\n        if (value === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter || value === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapNearestFilter || value === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestMipmapLinearFilter) {\n          filterMode = GPUFilterMode.Nearest;\n        }\n        return filterMode;\n      }\n    }, {\n      key: \"_getBytesPerTexel\",\n      value: function _getBytesPerTexel(format) {\n        // 8-bit formats\n        if (format === GPUTextureFormat.R8Unorm || format === GPUTextureFormat.R8Snorm || format === GPUTextureFormat.R8Uint || format === GPUTextureFormat.R8Sint) return 1;\n\n        // 16-bit formats\n        if (format === GPUTextureFormat.R16Uint || format === GPUTextureFormat.R16Sint || format === GPUTextureFormat.R16Float || format === GPUTextureFormat.RG8Unorm || format === GPUTextureFormat.RG8Snorm || format === GPUTextureFormat.RG8Uint || format === GPUTextureFormat.RG8Sint) return 2;\n\n        // 32-bit formats\n        if (format === GPUTextureFormat.R32Uint || format === GPUTextureFormat.R32Sint || format === GPUTextureFormat.R32Float || format === GPUTextureFormat.RG16Uint || format === GPUTextureFormat.RG16Sint || format === GPUTextureFormat.RG16Float || format === GPUTextureFormat.RGBA8Unorm || format === GPUTextureFormat.RGBA8UnormSRGB || format === GPUTextureFormat.RGBA8Snorm || format === GPUTextureFormat.RGBA8Uint || format === GPUTextureFormat.RGBA8Sint || format === GPUTextureFormat.BGRA8Unorm || format === GPUTextureFormat.BGRA8UnormSRGB ||\n        // Packed 32-bit formats\n        format === GPUTextureFormat.RGB9E5UFloat || format === GPUTextureFormat.RGB10A2Unorm || format === GPUTextureFormat.RG11B10UFloat || format === GPUTextureFormat.Depth32Float || format === GPUTextureFormat.Depth24Plus || format === GPUTextureFormat.Depth24PlusStencil8 || format === GPUTextureFormat.Depth32FloatStencil8) return 4;\n\n        // 64-bit formats\n        if (format === GPUTextureFormat.RG32Uint || format === GPUTextureFormat.RG32Sint || format === GPUTextureFormat.RG32Float || format === GPUTextureFormat.RGBA16Uint || format === GPUTextureFormat.RGBA16Sint || format === GPUTextureFormat.RGBA16Float) return 8;\n\n        // 128-bit formats\n        if (format === GPUTextureFormat.RGBA32Uint || format === GPUTextureFormat.RGBA32Sint || format === GPUTextureFormat.RGBA32Float) return 16;\n      }\n    }, {\n      key: \"_getTypedArrayType\",\n      value: function _getTypedArrayType(format) {\n        if (format === GPUTextureFormat.R8Uint) return Uint8Array;\n        if (format === GPUTextureFormat.R8Sint) return Int8Array;\n        if (format === GPUTextureFormat.R8Unorm) return Uint8Array;\n        if (format === GPUTextureFormat.R8Snorm) return Int8Array;\n        if (format === GPUTextureFormat.RG8Uint) return Uint8Array;\n        if (format === GPUTextureFormat.RG8Sint) return Int8Array;\n        if (format === GPUTextureFormat.RG8Unorm) return Uint8Array;\n        if (format === GPUTextureFormat.RG8Snorm) return Int8Array;\n        if (format === GPUTextureFormat.RGBA8Uint) return Uint8Array;\n        if (format === GPUTextureFormat.RGBA8Sint) return Int8Array;\n        if (format === GPUTextureFormat.RGBA8Unorm) return Uint8Array;\n        if (format === GPUTextureFormat.RGBA8Snorm) return Int8Array;\n        if (format === GPUTextureFormat.R16Uint) return Uint16Array;\n        if (format === GPUTextureFormat.R16Sint) return Int16Array;\n        if (format === GPUTextureFormat.RG16Uint) return Uint16Array;\n        if (format === GPUTextureFormat.RG16Sint) return Int16Array;\n        if (format === GPUTextureFormat.RGBA16Uint) return Uint16Array;\n        if (format === GPUTextureFormat.RGBA16Sint) return Int16Array;\n        if (format === GPUTextureFormat.R16Float) return Uint16Array;\n        if (format === GPUTextureFormat.RG16Float) return Uint16Array;\n        if (format === GPUTextureFormat.RGBA16Float) return Uint16Array;\n        if (format === GPUTextureFormat.R32Uint) return Uint32Array;\n        if (format === GPUTextureFormat.R32Sint) return Int32Array;\n        if (format === GPUTextureFormat.R32Float) return Float32Array;\n        if (format === GPUTextureFormat.RG32Uint) return Uint32Array;\n        if (format === GPUTextureFormat.RG32Sint) return Int32Array;\n        if (format === GPUTextureFormat.RG32Float) return Float32Array;\n        if (format === GPUTextureFormat.RGBA32Uint) return Uint32Array;\n        if (format === GPUTextureFormat.RGBA32Sint) return Int32Array;\n        if (format === GPUTextureFormat.RGBA32Float) return Float32Array;\n        if (format === GPUTextureFormat.BGRA8Unorm) return Uint8Array;\n        if (format === GPUTextureFormat.BGRA8UnormSRGB) return Uint8Array;\n        if (format === GPUTextureFormat.RGB10A2Unorm) return Uint32Array;\n        if (format === GPUTextureFormat.RGB9E5UFloat) return Uint32Array;\n        if (format === GPUTextureFormat.RG11B10UFloat) return Uint32Array;\n        if (format === GPUTextureFormat.Depth32Float) return Float32Array;\n        if (format === GPUTextureFormat.Depth24Plus) return Uint32Array;\n        if (format === GPUTextureFormat.Depth24PlusStencil8) return Uint32Array;\n        if (format === GPUTextureFormat.Depth32FloatStencil8) return Float32Array;\n      }\n    }, {\n      key: \"_getDimension\",\n      value: function _getDimension(texture) {\n        var dimension;\n        if (texture.isData3DTexture) {\n          dimension = GPUTextureDimension.ThreeD;\n        } else {\n          dimension = GPUTextureDimension.TwoD;\n        }\n        return dimension;\n      }\n    }]);\n  }();\n  function getFormat(texture) {\n    var device = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var format = texture.format;\n    var type = texture.type;\n    var colorSpace = texture.colorSpace;\n    var formatGPU;\n    if (texture.isCompressedTexture === true || texture.isCompressedArrayTexture === true) {\n      switch (format) {\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT1_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT3_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_S3TC_DXT5_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGB_ETC2_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ETC2_EAC_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_4x4_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x4_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_5x5_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x5_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_6x6_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x5_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x6_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_8x8_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x5_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x6_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x8_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_10x10_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x10_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBA_ASTC_12x12_Format:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat:\n          formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n          break;\n        default:\n          console.error('WebGPURenderer: Unsupported texture format.', format);\n      }\n    } else {\n      switch (format) {\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ByteType:\n              formatGPU = GPUTextureFormat.RGBA8Snorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShortType:\n              formatGPU = GPUTextureFormat.RGBA16Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType:\n              formatGPU = GPUTextureFormat.RGBA16Uint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.RGBA32Uint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType:\n              formatGPU = GPUTextureFormat.RGBA32Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType:\n              formatGPU = colorSpace === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SRGBColorSpace ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType:\n              formatGPU = GPUTextureFormat.RGBA16Float;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType:\n              formatGPU = GPUTextureFormat.RGBA32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGBAFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt5999Type:\n              formatGPU = GPUTextureFormat.RGB9E5UFloat;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGBFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ByteType:\n              formatGPU = GPUTextureFormat.R8Snorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShortType:\n              formatGPU = GPUTextureFormat.R16Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType:\n              formatGPU = GPUTextureFormat.R16Uint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.R32Uint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType:\n              formatGPU = GPUTextureFormat.R32Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType:\n              formatGPU = GPUTextureFormat.R8Unorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType:\n              formatGPU = GPUTextureFormat.R16Float;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType:\n              formatGPU = GPUTextureFormat.R32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RedFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ByteType:\n              formatGPU = GPUTextureFormat.RG8Snorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ShortType:\n              formatGPU = GPUTextureFormat.RG16Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType:\n              formatGPU = GPUTextureFormat.RG16Uint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.RG32Uint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType:\n              formatGPU = GPUTextureFormat.RG32Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedByteType:\n              formatGPU = GPUTextureFormat.RG8Unorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HalfFloatType:\n              formatGPU = GPUTextureFormat.RG16Float;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType:\n              formatGPU = GPUTextureFormat.RG32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedShortType:\n              formatGPU = GPUTextureFormat.Depth16Unorm;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.Depth24Plus;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType:\n              formatGPU = GPUTextureFormat.Depth32Float;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with DepthFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DepthStencilFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedInt248Type:\n              formatGPU = GPUTextureFormat.Depth24PlusStencil8;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType:\n              if (device && device.features.has(GPUFeatureName.Depth32FloatStencil8) === false) {\n                console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.');\n              }\n              formatGPU = GPUTextureFormat.Depth32FloatStencil8;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RedIntegerFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType:\n              formatGPU = GPUTextureFormat.R32Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.R32Uint;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RedIntegerFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGIntegerFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType:\n              formatGPU = GPUTextureFormat.RG32Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.RG32Uint;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGIntegerFormat.', type);\n          }\n          break;\n        case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RGBAIntegerFormat:\n          switch (type) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType:\n              formatGPU = GPUTextureFormat.RGBA32Sint;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType:\n              formatGPU = GPUTextureFormat.RGBA32Uint;\n              break;\n            default:\n              console.error('WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.', type);\n          }\n          break;\n        default:\n          console.error('WebGPURenderer: Unsupported texture format.', format);\n      }\n    }\n    return formatGPU;\n  }\n  var declarationRegexp = /^[fn]*\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)\\s*[\\-\\>]*\\s*([a-z_0-9]+(?:<[\\s\\S]+?>)?)/i;\n  var propertiesRegexp = /([a-z_0-9]+)\\s*:\\s*([a-z_0-9]+(?:<[\\s\\S]+?>)?)/ig;\n  var wgslTypeLib$1 = {\n    'f32': 'float',\n    'i32': 'int',\n    'u32': 'uint',\n    'bool': 'bool',\n    'vec2<f32>': 'vec2',\n    'vec2<i32>': 'ivec2',\n    'vec2<u32>': 'uvec2',\n    'vec2<bool>': 'bvec2',\n    'vec2f': 'vec2',\n    'vec2i': 'ivec2',\n    'vec2u': 'uvec2',\n    'vec2b': 'bvec2',\n    'vec3<f32>': 'vec3',\n    'vec3<i32>': 'ivec3',\n    'vec3<u32>': 'uvec3',\n    'vec3<bool>': 'bvec3',\n    'vec3f': 'vec3',\n    'vec3i': 'ivec3',\n    'vec3u': 'uvec3',\n    'vec3b': 'bvec3',\n    'vec4<f32>': 'vec4',\n    'vec4<i32>': 'ivec4',\n    'vec4<u32>': 'uvec4',\n    'vec4<bool>': 'bvec4',\n    'vec4f': 'vec4',\n    'vec4i': 'ivec4',\n    'vec4u': 'uvec4',\n    'vec4b': 'bvec4',\n    'mat2x2<f32>': 'mat2',\n    'mat2x2f': 'mat2',\n    'mat3x3<f32>': 'mat3',\n    'mat3x3f': 'mat3',\n    'mat4x4<f32>': 'mat4',\n    'mat4x4f': 'mat4',\n    'sampler': 'sampler',\n    'texture_1d': 'texture',\n    'texture_2d': 'texture',\n    'texture_2d_array': 'texture',\n    'texture_multisampled_2d': 'cubeTexture',\n    'texture_depth_2d': 'depthTexture',\n    'texture_depth_multisampled_2d': 'depthTexture',\n    'texture_3d': 'texture3D',\n    'texture_cube': 'cubeTexture',\n    'texture_cube_array': 'cubeTexture',\n    'texture_storage_1d': 'storageTexture',\n    'texture_storage_2d': 'storageTexture',\n    'texture_storage_2d_array': 'storageTexture',\n    'texture_storage_3d': 'storageTexture'\n  };\n  var parse = function parse(source) {\n    source = source.trim();\n    var declaration = source.match(declarationRegexp);\n    if (declaration !== null && declaration.length === 4) {\n      var inputsCode = declaration[2];\n      var propsMatches = [];\n      var match = null;\n      while ((match = propertiesRegexp.exec(inputsCode)) !== null) {\n        propsMatches.push({\n          name: match[1],\n          type: match[2]\n        });\n      }\n\n      // Process matches to correctly pair names and types\n      var inputs = [];\n      for (var i = 0; i < propsMatches.length; i++) {\n        var _propsMatches$i = propsMatches[i],\n          _name2 = _propsMatches$i.name,\n          _type3 = _propsMatches$i.type;\n        var resolvedType = _type3;\n        if (resolvedType.startsWith('ptr')) {\n          resolvedType = 'pointer';\n        } else {\n          if (resolvedType.startsWith('texture')) {\n            resolvedType = _type3.split('<')[0];\n          }\n          resolvedType = wgslTypeLib$1[resolvedType];\n        }\n        inputs.push(new NodeFunctionInput(resolvedType, _name2));\n      }\n      var blockCode = source.substring(declaration[0].length);\n      var outputType = declaration[3] || 'void';\n      var name = declaration[1] !== undefined ? declaration[1] : '';\n      var type = wgslTypeLib$1[outputType] || outputType;\n      return {\n        type: type,\n        inputs: inputs,\n        name: name,\n        inputsCode: inputsCode,\n        blockCode: blockCode,\n        outputType: outputType\n      };\n    } else {\n      throw new Error('FunctionNode: Function is not a WGSL code.');\n    }\n  };\n\n  /**\n   * This class represents a WSL node function.\n   *\n   * @augments NodeFunction\n   */\n  var WGSLNodeFunction = /*#__PURE__*/function (_NodeFunction2) {\n    /**\n     * Constructs a new WGSL node function.\n     *\n     * @param {String} source - The WGSL source.\n     */\n    function WGSLNodeFunction(source) {\n      var _this212;\n      (0, _classCallCheck2.default)(this, WGSLNodeFunction);\n      var _parse = parse(source),\n        type = _parse.type,\n        inputs = _parse.inputs,\n        name = _parse.name,\n        inputsCode = _parse.inputsCode,\n        blockCode = _parse.blockCode,\n        outputType = _parse.outputType;\n      _this212 = _callSuper(this, WGSLNodeFunction, [type, inputs, name]);\n      _this212.inputsCode = inputsCode;\n      _this212.blockCode = blockCode;\n      _this212.outputType = outputType;\n      return _this212;\n    }\n\n    /**\n     * This method returns the WGSL code of the node function.\n     *\n     * @param {String} [name=this.name] - The function's name.\n     * @return {String} The shader code.\n     */\n    (0, _inherits2.default)(WGSLNodeFunction, _NodeFunction2);\n    return (0, _createClass2.default)(WGSLNodeFunction, [{\n      key: \"getCode\",\n      value: function getCode() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.name;\n        var outputType = this.outputType !== 'void' ? '-> ' + this.outputType : '';\n        return `fn ${name} ( ${this.inputsCode.trim()} ) ${outputType}` + this.blockCode;\n      }\n    }]);\n  }(NodeFunction);\n  /**\n   * A WGSL node parser.\n   *\n   * @augments NodeParser\n   */\n  var WGSLNodeParser = /*#__PURE__*/function (_NodeParser2) {\n    function WGSLNodeParser() {\n      (0, _classCallCheck2.default)(this, WGSLNodeParser);\n      return _callSuper(this, WGSLNodeParser, arguments);\n    }\n    (0, _inherits2.default)(WGSLNodeParser, _NodeParser2);\n    return (0, _createClass2.default)(WGSLNodeParser, [{\n      key: \"parseFunction\",\n      value:\n      /**\n       * The method parses the given WGSL code an returns a node function.\n       *\n       * @param {String} source - The WGSL code.\n       * @return {WGSLNodeFunction} A node function.\n       */\n      function parseFunction(source) {\n        return new WGSLNodeFunction(source);\n      }\n    }]);\n  }(NodeParser); // GPUShaderStage is not defined in browsers not supporting WebGPU\n  var GPUShaderStage = typeof self !== 'undefined' ? self.GPUShaderStage : {\n    VERTEX: 1,\n    FRAGMENT: 2,\n    COMPUTE: 4\n  };\n  var accessNames = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, NodeAccess.READ_ONLY, 'read'), NodeAccess.WRITE_ONLY, 'write'), NodeAccess.READ_WRITE, 'read_write');\n  var wrapNames = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RepeatWrapping, 'repeat'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ClampToEdgeWrapping, 'clamp'), _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MirroredRepeatWrapping, 'mirror');\n  var gpuShaderStageLib = {\n    'vertex': GPUShaderStage ? GPUShaderStage.VERTEX : 1,\n    'fragment': GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,\n    'compute': GPUShaderStage ? GPUShaderStage.COMPUTE : 4\n  };\n  var supports = {\n    instance: true,\n    swizzleAssign: false,\n    storageBuffer: true\n  };\n  var wgslFnOpLib = {\n    '^^': 'tsl_xor'\n  };\n  var wgslTypeLib = {\n    float: 'f32',\n    int: 'i32',\n    uint: 'u32',\n    bool: 'bool',\n    color: 'vec3<f32>',\n    vec2: 'vec2<f32>',\n    ivec2: 'vec2<i32>',\n    uvec2: 'vec2<u32>',\n    bvec2: 'vec2<bool>',\n    vec3: 'vec3<f32>',\n    ivec3: 'vec3<i32>',\n    uvec3: 'vec3<u32>',\n    bvec3: 'vec3<bool>',\n    vec4: 'vec4<f32>',\n    ivec4: 'vec4<i32>',\n    uvec4: 'vec4<u32>',\n    bvec4: 'vec4<bool>',\n    mat2: 'mat2x2<f32>',\n    mat3: 'mat3x3<f32>',\n    mat4: 'mat4x4<f32>'\n  };\n  var wgslCodeCache = {};\n  var wgslPolyfill = {\n    tsl_xor: new CodeNode('fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }'),\n    mod_float: new CodeNode('fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }'),\n    mod_vec2: new CodeNode('fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }'),\n    mod_vec3: new CodeNode('fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }'),\n    mod_vec4: new CodeNode('fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }'),\n    equals_bool: new CodeNode('fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }'),\n    equals_bvec2: new CodeNode('fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }'),\n    equals_bvec3: new CodeNode('fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }'),\n    equals_bvec4: new CodeNode('fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }'),\n    repeatWrapping_float: new CodeNode('fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }'),\n    mirrorWrapping_float: new CodeNode('fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }'),\n    clampWrapping_float: new CodeNode('fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }'),\n    biquadraticTexture: new CodeNode(/* wgsl */`\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n`)\n  };\n  var wgslMethods = {\n    dFdx: 'dpdx',\n    dFdy: '- dpdy',\n    mod_float: 'tsl_mod_float',\n    mod_vec2: 'tsl_mod_vec2',\n    mod_vec3: 'tsl_mod_vec3',\n    mod_vec4: 'tsl_mod_vec4',\n    equals_bool: 'tsl_equals_bool',\n    equals_bvec2: 'tsl_equals_bvec2',\n    equals_bvec3: 'tsl_equals_bvec3',\n    equals_bvec4: 'tsl_equals_bvec4',\n    inversesqrt: 'inverseSqrt',\n    bitcast: 'bitcast<f32>'\n  };\n\n  // WebGPU issue: does not support pow() with negative base on Windows\n\n  if (typeof navigator !== 'undefined' && /Windows/g.test(navigator.userAgent)) {\n    wgslPolyfill.pow_float = new CodeNode('fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }');\n    wgslPolyfill.pow_vec2 = new CodeNode('fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }', [wgslPolyfill.pow_float]);\n    wgslPolyfill.pow_vec3 = new CodeNode('fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }', [wgslPolyfill.pow_float]);\n    wgslPolyfill.pow_vec4 = new CodeNode('fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }', [wgslPolyfill.pow_float]);\n    wgslMethods.pow_float = 'tsl_pow_float';\n    wgslMethods.pow_vec2 = 'tsl_pow_vec2';\n    wgslMethods.pow_vec3 = 'tsl_pow_vec3';\n    wgslMethods.pow_vec4 = 'tsl_pow_vec4';\n  }\n\n  //\n\n  var diagnostics = '';\n  if ((typeof navigator !== 'undefined' && /Firefox|Deno/g.test(navigator.userAgent)) !== true) {\n    diagnostics += 'diagnostic( off, derivative_uniformity );\\n';\n  }\n\n  //\n  var WGSLNodeBuilder = /*#__PURE__*/function (_NodeBuilder2) {\n    function WGSLNodeBuilder(object, renderer) {\n      var _this213;\n      (0, _classCallCheck2.default)(this, WGSLNodeBuilder);\n      _this213 = _callSuper(this, WGSLNodeBuilder, [object, renderer, new WGSLNodeParser()]);\n      _this213.uniformGroups = {};\n      _this213.builtins = {};\n      _this213.directives = {};\n      _this213.scopedArrays = new Map();\n      return _this213;\n    }\n    (0, _inherits2.default)(WGSLNodeBuilder, _NodeBuilder2);\n    return (0, _createClass2.default)(WGSLNodeBuilder, [{\n      key: \"needsToWorkingColorSpace\",\n      value: function needsToWorkingColorSpace(texture) {\n        return texture.isVideoTexture === true && texture.colorSpace !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoColorSpace;\n      }\n    }, {\n      key: \"_generateTextureSample\",\n      value: function _generateTextureSample(texture, textureProperty, uvSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.shaderStage;\n        if (shaderStage === 'fragment') {\n          if (depthSnippet) {\n            return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet} )`;\n          } else {\n            return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet} )`;\n          }\n        } else if (this.isFilteredTexture(texture)) {\n          return this.generateFilteredTexture(texture, textureProperty, uvSnippet);\n        } else {\n          return this.generateTextureLod(texture, textureProperty, uvSnippet, depthSnippet, '0');\n        }\n      }\n    }, {\n      key: \"_generateVideoSample\",\n      value: function _generateVideoSample(textureProperty, uvSnippet) {\n        var shaderStage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.shaderStage;\n        if (shaderStage === 'fragment') {\n          return `textureSampleBaseClampToEdge( ${textureProperty}, ${textureProperty}_sampler, vec2<f32>( ${uvSnippet}.x, 1.0 - ${uvSnippet}.y ) )`;\n        } else {\n          console.error(`WebGPURenderer: THREE.VideoTexture does not support ${shaderStage} shader.`);\n        }\n      }\n    }, {\n      key: \"_generateTextureSampleLevel\",\n      value: function _generateTextureSampleLevel(texture, textureProperty, uvSnippet, levelSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.shaderStage;\n        if ((shaderStage === 'fragment' || shaderStage === 'compute') && this.isUnfilterable(texture) === false) {\n          return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet} )`;\n        } else if (this.isFilteredTexture(texture)) {\n          return this.generateFilteredTexture(texture, textureProperty, uvSnippet, levelSnippet);\n        } else {\n          return this.generateTextureLod(texture, textureProperty, uvSnippet, depthSnippet, levelSnippet);\n        }\n      }\n    }, {\n      key: \"generateWrapFunction\",\n      value: function generateWrapFunction(texture) {\n        var functionName = `tsl_coord_${wrapNames[texture.wrapS]}S_${wrapNames[texture.wrapT]}_${texture.isData3DTexture ? '3d' : '2d'}T`;\n        var nodeCode = wgslCodeCache[functionName];\n        if (nodeCode === undefined) {\n          var includes = [];\n\n          // For 3D textures, use vec3f; for texture arrays, keep vec2f since array index is separate\n          var coordType = texture.isData3DTexture ? 'vec3f' : 'vec2f';\n          var _code = `fn ${functionName}( coord : ${coordType} ) -> ${coordType} {\\n\\n\\treturn ${coordType}(\\n`;\n          var addWrapSnippet = function addWrapSnippet(wrap, axis) {\n            if (wrap === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RepeatWrapping) {\n              includes.push(wgslPolyfill.repeatWrapping_float);\n              _code += `\\t\\ttsl_repeatWrapping_float( coord.${axis} )`;\n            } else if (wrap === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ClampToEdgeWrapping) {\n              includes.push(wgslPolyfill.clampWrapping_float);\n              _code += `\\t\\ttsl_clampWrapping_float( coord.${axis} )`;\n            } else if (wrap === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MirroredRepeatWrapping) {\n              includes.push(wgslPolyfill.mirrorWrapping_float);\n              _code += `\\t\\ttsl_mirrorWrapping_float( coord.${axis} )`;\n            } else {\n              _code += `\\t\\tcoord.${axis}`;\n              console.warn(`WebGPURenderer: Unsupported texture wrap type \"${wrap}\" for vertex shader.`);\n            }\n          };\n          addWrapSnippet(texture.wrapS, 'x');\n          _code += ',\\n';\n          addWrapSnippet(texture.wrapT, 'y');\n          if (texture.isData3DTexture) {\n            _code += ',\\n';\n            addWrapSnippet(texture.wrapR, 'z');\n          }\n          _code += '\\n\\t);\\n\\n}\\n';\n          wgslCodeCache[functionName] = nodeCode = new CodeNode(_code, includes);\n        }\n        nodeCode.build(this);\n        return functionName;\n      }\n    }, {\n      key: \"generateTextureDimension\",\n      value: function generateTextureDimension(texture, textureProperty, levelSnippet) {\n        var textureData = this.getDataFromNode(texture, this.shaderStage, this.globalCache);\n        if (textureData.dimensionsSnippet === undefined) textureData.dimensionsSnippet = {};\n        var textureDimensionNode = textureData.dimensionsSnippet[levelSnippet];\n        if (textureData.dimensionsSnippet[levelSnippet] === undefined) {\n          var textureDimensionsParams;\n          var dimensionType;\n          var _this$renderer$backen = this.renderer.backend.utils.getTextureSampleData(texture),\n            primarySamples = _this$renderer$backen.primarySamples;\n          var isMultisampled = primarySamples > 1;\n          if (texture.isData3DTexture) {\n            dimensionType = 'vec3<u32>';\n          } else {\n            // Regular 2D textures, depth textures, etc.\n            dimensionType = 'vec2<u32>';\n          }\n\n          // Build parameters string based on texture type and multisampling\n          if (isMultisampled || texture.isVideoTexture || texture.isStorageTexture) {\n            textureDimensionsParams = textureProperty;\n          } else {\n            textureDimensionsParams = `${textureProperty}${levelSnippet ? `, u32( ${levelSnippet} )` : ''}`;\n          }\n          textureDimensionNode = new VarNode(new ExpressionNode(`textureDimensions( ${textureDimensionsParams} )`, dimensionType));\n          textureData.dimensionsSnippet[levelSnippet] = textureDimensionNode;\n          if (texture.isDataArrayTexture || texture.isData3DTexture) {\n            textureData.arrayLayerCount = new VarNode(new ExpressionNode(`textureNumLayers(${textureProperty})`, 'u32'));\n          }\n\n          // For cube textures, we know it's always 6 faces\n          if (texture.isTextureCube) {\n            textureData.cubeFaceCount = new VarNode(new ExpressionNode('6u', 'u32'));\n          }\n        }\n        return textureDimensionNode.build(this);\n      }\n    }, {\n      key: \"generateFilteredTexture\",\n      value: function generateFilteredTexture(texture, textureProperty, uvSnippet) {\n        var levelSnippet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '0u';\n        this._include('biquadraticTexture');\n        var wrapFunction = this.generateWrapFunction(texture);\n        var textureDimension = this.generateTextureDimension(texture, textureProperty, levelSnippet);\n        return `tsl_biquadraticTexture( ${textureProperty}, ${wrapFunction}( ${uvSnippet} ), ${textureDimension}, u32( ${levelSnippet} ) )`;\n      }\n    }, {\n      key: \"generateTextureLod\",\n      value: function generateTextureLod(texture, textureProperty, uvSnippet, depthSnippet) {\n        var levelSnippet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '0u';\n        var wrapFunction = this.generateWrapFunction(texture);\n        var textureDimension = this.generateTextureDimension(texture, textureProperty, levelSnippet);\n        var vecType = texture.isData3DTexture ? 'vec3' : 'vec2';\n        var coordSnippet = `${vecType}<u32>(${wrapFunction}(${uvSnippet}) * ${vecType}<f32>(${textureDimension}))`;\n        return this.generateTextureLoad(texture, textureProperty, coordSnippet, depthSnippet, levelSnippet);\n      }\n    }, {\n      key: \"generateTextureLoad\",\n      value: function generateTextureLoad(texture, textureProperty, uvIndexSnippet, depthSnippet) {\n        var levelSnippet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '0u';\n        if (texture.isVideoTexture === true || texture.isStorageTexture === true) {\n          return `textureLoad( ${textureProperty}, ${uvIndexSnippet} )`;\n        } else if (depthSnippet) {\n          return `textureLoad( ${textureProperty}, ${uvIndexSnippet}, ${depthSnippet}, u32( ${levelSnippet} ) )`;\n        } else {\n          return `textureLoad( ${textureProperty}, ${uvIndexSnippet}, u32( ${levelSnippet} ) )`;\n        }\n      }\n    }, {\n      key: \"generateTextureStore\",\n      value: function generateTextureStore(texture, textureProperty, uvIndexSnippet, valueSnippet) {\n        return `textureStore( ${textureProperty}, ${uvIndexSnippet}, ${valueSnippet} )`;\n      }\n    }, {\n      key: \"isSampleCompare\",\n      value: function isSampleCompare(texture) {\n        return texture.isDepthTexture === true && texture.compareFunction !== null;\n      }\n    }, {\n      key: \"isUnfilterable\",\n      value: function isUnfilterable(texture) {\n        return this.getComponentTypeFromTexture(texture) !== 'float' || !this.isAvailable('float32Filterable') && texture.isDataTexture === true && texture.type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType || this.isSampleCompare(texture) === false && texture.minFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter && texture.magFilter === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NearestFilter || this.renderer.backend.utils.getTextureSampleData(texture).primarySamples > 1;\n      }\n    }, {\n      key: \"generateTexture\",\n      value: function generateTexture(texture, textureProperty, uvSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.shaderStage;\n        var snippet = null;\n        if (texture.isVideoTexture === true) {\n          snippet = this._generateVideoSample(textureProperty, uvSnippet, shaderStage);\n        } else if (this.isUnfilterable(texture)) {\n          snippet = this.generateTextureLod(texture, textureProperty, uvSnippet, depthSnippet, '0', shaderStage);\n        } else {\n          snippet = this._generateTextureSample(texture, textureProperty, uvSnippet, depthSnippet, shaderStage);\n        }\n        return snippet;\n      }\n    }, {\n      key: \"generateTextureGrad\",\n      value: function generateTextureGrad(texture, textureProperty, uvSnippet, gradSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.shaderStage;\n        if (shaderStage === 'fragment') {\n          // TODO handle i32 or u32 --> uvSnippet, array_index: A, ddx, ddy\n          return `textureSampleGrad( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet},  ${gradSnippet[0]}, ${gradSnippet[1]} )`;\n        } else {\n          console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${shaderStage} shader.`);\n        }\n      }\n    }, {\n      key: \"generateTextureCompare\",\n      value: function generateTextureCompare(texture, textureProperty, uvSnippet, compareSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.shaderStage;\n        if (shaderStage === 'fragment') {\n          return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${compareSnippet} )`;\n        } else {\n          console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);\n        }\n      }\n    }, {\n      key: \"generateTextureLevel\",\n      value: function generateTextureLevel(texture, textureProperty, uvSnippet, levelSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.shaderStage;\n        var snippet = null;\n        if (texture.isVideoTexture === true) {\n          snippet = this._generateVideoSample(textureProperty, uvSnippet, shaderStage);\n        } else {\n          snippet = this._generateTextureSampleLevel(texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage);\n        }\n        return snippet;\n      }\n    }, {\n      key: \"generateTextureBias\",\n      value: function generateTextureBias(texture, textureProperty, uvSnippet, biasSnippet, depthSnippet) {\n        var shaderStage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.shaderStage;\n        if (shaderStage === 'fragment') {\n          return `textureSampleBias( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${biasSnippet} )`;\n        } else {\n          console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${shaderStage} shader.`);\n        }\n      }\n    }, {\n      key: \"getPropertyName\",\n      value: function getPropertyName(node) {\n        var shaderStage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.shaderStage;\n        if (node.isNodeVarying === true && node.needsInterpolation === true) {\n          if (shaderStage === 'vertex') {\n            return `varyings.${node.name}`;\n          }\n        } else if (node.isNodeUniform === true) {\n          var name = node.name;\n          var type = node.type;\n          if (type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D') {\n            return name;\n          } else if (type === 'buffer' || type === 'storageBuffer' || type === 'indirectStorageBuffer') {\n            return `NodeBuffer_${node.id}.${name}`;\n          } else {\n            return node.groupNode.name + '.' + name;\n          }\n        }\n        return _superPropGet(WGSLNodeBuilder, \"getPropertyName\", this, 3)([node]);\n      }\n    }, {\n      key: \"getOutputStructName\",\n      value: function getOutputStructName() {\n        return 'output';\n      }\n    }, {\n      key: \"_getUniformGroupCount\",\n      value: function _getUniformGroupCount(shaderStage) {\n        return Object.keys(this.uniforms[shaderStage]).length;\n      }\n    }, {\n      key: \"getFunctionOperator\",\n      value: function getFunctionOperator(op) {\n        var fnOp = wgslFnOpLib[op];\n        if (fnOp !== undefined) {\n          this._include(fnOp);\n          return fnOp;\n        }\n        return null;\n      }\n    }, {\n      key: \"getNodeAccess\",\n      value: function getNodeAccess(node, shaderStage) {\n        if (shaderStage !== 'compute') return NodeAccess.READ_ONLY;\n        return node.access;\n      }\n    }, {\n      key: \"getStorageAccess\",\n      value: function getStorageAccess(node, shaderStage) {\n        return accessNames[this.getNodeAccess(node, shaderStage)];\n      }\n    }, {\n      key: \"getUniformFromNode\",\n      value: function getUniformFromNode(node, type, shaderStage) {\n        var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var uniformNode = _superPropGet(WGSLNodeBuilder, \"getUniformFromNode\", this, 3)([node, type, shaderStage, name]);\n        var nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);\n        if (nodeData.uniformGPU === undefined) {\n          var uniformGPU;\n          var group = node.groupNode;\n          var groupName = group.name;\n          var bindings = this.getBindGroupArray(groupName, shaderStage);\n          if (type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D') {\n            var _texture12 = null;\n            var access = this.getNodeAccess(node, shaderStage);\n            if (type === 'texture' || type === 'storageTexture') {\n              _texture12 = new NodeSampledTexture(uniformNode.name, uniformNode.node, group, access);\n            } else if (type === 'cubeTexture') {\n              _texture12 = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group, access);\n            } else if (type === 'texture3D') {\n              _texture12 = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group, access);\n            }\n            _texture12.store = node.isStorageTextureNode === true;\n            _texture12.setVisibility(gpuShaderStageLib[shaderStage]);\n            if ((shaderStage === 'fragment' || shaderStage === 'compute') && this.isUnfilterable(node.value) === false && _texture12.store === false) {\n              var _sampler = new NodeSampler(`${uniformNode.name}_sampler`, uniformNode.node, group);\n              _sampler.setVisibility(gpuShaderStageLib[shaderStage]);\n              bindings.push(_sampler, _texture12);\n              uniformGPU = [_sampler, _texture12];\n            } else {\n              bindings.push(_texture12);\n              uniformGPU = [_texture12];\n            }\n          } else if (type === 'buffer' || type === 'storageBuffer' || type === 'indirectStorageBuffer') {\n            var bufferClass = type === 'buffer' ? NodeUniformBuffer : NodeStorageBuffer;\n            var _buffer5 = new bufferClass(node, group);\n            _buffer5.setVisibility(gpuShaderStageLib[shaderStage]);\n            bindings.push(_buffer5);\n            uniformGPU = _buffer5;\n          } else {\n            var uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});\n            var uniformsGroup = uniformsStage[groupName];\n            if (uniformsGroup === undefined) {\n              uniformsGroup = new NodeUniformsGroup(groupName, group);\n              uniformsGroup.setVisibility(gpuShaderStageLib[shaderStage]);\n              uniformsStage[groupName] = uniformsGroup;\n              bindings.push(uniformsGroup);\n            }\n            uniformGPU = this.getNodeUniform(uniformNode, type);\n            uniformsGroup.addUniform(uniformGPU);\n          }\n          nodeData.uniformGPU = uniformGPU;\n        }\n        return uniformNode;\n      }\n    }, {\n      key: \"getBuiltin\",\n      value: function getBuiltin(name, property, type) {\n        var shaderStage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.shaderStage;\n        var map = this.builtins[shaderStage] || (this.builtins[shaderStage] = new Map());\n        if (map.has(name) === false) {\n          map.set(name, {\n            name: name,\n            property: property,\n            type: type\n          });\n        }\n        return property;\n      }\n    }, {\n      key: \"hasBuiltin\",\n      value: function hasBuiltin(name) {\n        var shaderStage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.shaderStage;\n        return this.builtins[shaderStage] !== undefined && this.builtins[shaderStage].has(name);\n      }\n    }, {\n      key: \"getVertexIndex\",\n      value: function getVertexIndex() {\n        if (this.shaderStage === 'vertex') {\n          return this.getBuiltin('vertex_index', 'vertexIndex', 'u32', 'attribute');\n        }\n        return 'vertexIndex';\n      }\n    }, {\n      key: \"buildFunctionCode\",\n      value: function buildFunctionCode(shaderNode) {\n        var layout = shaderNode.layout;\n        var flowData = this.flowShaderNode(shaderNode);\n        var parameters = [];\n        for (var input of layout.inputs) {\n          parameters.push(input.name + ' : ' + this.getType(input.type));\n        }\n\n        //\n\n        var code = `fn ${layout.name}( ${parameters.join(', ')} ) -> ${this.getType(layout.type)} {\n${flowData.vars}\n${flowData.code}\n`;\n        if (flowData.result) {\n          code += `\\treturn ${flowData.result};\\n`;\n        }\n        code += '\\n}\\n';\n\n        //\n\n        return code;\n      }\n    }, {\n      key: \"getInstanceIndex\",\n      value: function getInstanceIndex() {\n        if (this.shaderStage === 'vertex') {\n          return this.getBuiltin('instance_index', 'instanceIndex', 'u32', 'attribute');\n        }\n        return 'instanceIndex';\n      }\n    }, {\n      key: \"getInvocationLocalIndex\",\n      value: function getInvocationLocalIndex() {\n        return this.getBuiltin('local_invocation_index', 'invocationLocalIndex', 'u32', 'attribute');\n      }\n    }, {\n      key: \"getSubgroupSize\",\n      value: function getSubgroupSize() {\n        this.enableSubGroups();\n        return this.getBuiltin('subgroup_size', 'subgroupSize', 'u32', 'attribute');\n      }\n    }, {\n      key: \"getInvocationSubgroupIndex\",\n      value: function getInvocationSubgroupIndex() {\n        this.enableSubGroups();\n        return this.getBuiltin('subgroup_invocation_id', 'invocationSubgroupIndex', 'u32', 'attribute');\n      }\n    }, {\n      key: \"getSubgroupIndex\",\n      value: function getSubgroupIndex() {\n        this.enableSubGroups();\n        return this.getBuiltin('subgroup_id', 'subgroupIndex', 'u32', 'attribute');\n      }\n    }, {\n      key: \"getDrawIndex\",\n      value: function getDrawIndex() {\n        return null;\n      }\n    }, {\n      key: \"getFrontFacing\",\n      value: function getFrontFacing() {\n        return this.getBuiltin('front_facing', 'isFront', 'bool');\n      }\n    }, {\n      key: \"getFragCoord\",\n      value: function getFragCoord() {\n        return this.getBuiltin('position', 'fragCoord', 'vec4<f32>') + '.xy';\n      }\n    }, {\n      key: \"getFragDepth\",\n      value: function getFragDepth() {\n        return 'output.' + this.getBuiltin('frag_depth', 'depth', 'f32', 'output');\n      }\n    }, {\n      key: \"getClipDistance\",\n      value: function getClipDistance() {\n        return 'varyings.hw_clip_distances';\n      }\n    }, {\n      key: \"isFlipY\",\n      value: function isFlipY() {\n        return false;\n      }\n    }, {\n      key: \"enableDirective\",\n      value: function enableDirective(name) {\n        var shaderStage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.shaderStage;\n        var stage = this.directives[shaderStage] || (this.directives[shaderStage] = new Set());\n        stage.add(name);\n      }\n    }, {\n      key: \"getDirectives\",\n      value: function getDirectives(shaderStage) {\n        var snippets = [];\n        var directives = this.directives[shaderStage];\n        if (directives !== undefined) {\n          for (var directive of directives) {\n            snippets.push(`enable ${directive};`);\n          }\n        }\n        return snippets.join('\\n');\n      }\n    }, {\n      key: \"enableSubGroups\",\n      value: function enableSubGroups() {\n        this.enableDirective('subgroups');\n      }\n    }, {\n      key: \"enableSubgroupsF16\",\n      value: function enableSubgroupsF16() {\n        this.enableDirective('subgroups-f16');\n      }\n    }, {\n      key: \"enableClipDistances\",\n      value: function enableClipDistances() {\n        this.enableDirective('clip_distances');\n      }\n    }, {\n      key: \"enableShaderF16\",\n      value: function enableShaderF16() {\n        this.enableDirective('f16');\n      }\n    }, {\n      key: \"enableDualSourceBlending\",\n      value: function enableDualSourceBlending() {\n        this.enableDirective('dual_source_blending');\n      }\n    }, {\n      key: \"enableHardwareClipping\",\n      value: function enableHardwareClipping(planeCount) {\n        this.enableClipDistances();\n        this.getBuiltin('clip_distances', 'hw_clip_distances', `array<f32, ${planeCount} >`, 'vertex');\n      }\n    }, {\n      key: \"getBuiltins\",\n      value: function getBuiltins(shaderStage) {\n        var snippets = [];\n        var builtins = this.builtins[shaderStage];\n        if (builtins !== undefined) {\n          for (var _ref342 of builtins.values()) {\n            var name = _ref342.name;\n            var _property11 = _ref342.property;\n            var type = _ref342.type;\n            snippets.push(`@builtin( ${name} ) ${_property11} : ${type}`);\n          }\n        }\n        return snippets.join(',\\n\\t');\n      }\n    }, {\n      key: \"getScopedArray\",\n      value: function getScopedArray(name, scope, bufferType, bufferCount) {\n        if (this.scopedArrays.has(name) === false) {\n          this.scopedArrays.set(name, {\n            name: name,\n            scope: scope,\n            bufferType: bufferType,\n            bufferCount: bufferCount\n          });\n        }\n        return name;\n      }\n    }, {\n      key: \"getScopedArrays\",\n      value: function getScopedArrays(shaderStage) {\n        if (shaderStage !== 'compute') {\n          return;\n        }\n        var snippets = [];\n        for (var _ref343 of this.scopedArrays.values()) {\n          var name = _ref343.name;\n          var scope = _ref343.scope;\n          var bufferType = _ref343.bufferType;\n          var bufferCount = _ref343.bufferCount;\n          var type = this.getType(bufferType);\n          snippets.push(`var<${scope}> ${name}: array< ${type}, ${bufferCount} >;`);\n        }\n        return snippets.join('\\n');\n      }\n    }, {\n      key: \"getAttributes\",\n      value: function getAttributes(shaderStage) {\n        var snippets = [];\n        if (shaderStage === 'compute') {\n          this.getBuiltin('global_invocation_id', 'id', 'vec3<u32>', 'attribute');\n          this.getBuiltin('workgroup_id', 'workgroupId', 'vec3<u32>', 'attribute');\n          this.getBuiltin('local_invocation_id', 'localId', 'vec3<u32>', 'attribute');\n          this.getBuiltin('num_workgroups', 'numWorkgroups', 'vec3<u32>', 'attribute');\n          if (this.renderer.hasFeature('subgroups')) {\n            this.enableDirective('subgroups', shaderStage);\n            this.getBuiltin('subgroup_size', 'subgroupSize', 'u32', 'attribute');\n          }\n        }\n        if (shaderStage === 'vertex' || shaderStage === 'compute') {\n          var builtins = this.getBuiltins('attribute');\n          if (builtins) snippets.push(builtins);\n          var attributes = this.getAttributesArray();\n          for (var index = 0, _length3 = attributes.length; index < _length3; index++) {\n            var _attribute14 = attributes[index];\n            var name = _attribute14.name;\n            var type = this.getType(_attribute14.type);\n            snippets.push(`@location( ${index} ) ${name} : ${type}`);\n          }\n        }\n        return snippets.join(',\\n\\t');\n      }\n    }, {\n      key: \"getStructMembers\",\n      value: function getStructMembers(struct) {\n        var snippets = [];\n        var members = struct.getMemberTypes();\n        for (var i = 0; i < members.length; i++) {\n          var member = members[i];\n          snippets.push(`\\t@location( ${i} ) m${i} : ${member}<f32>`);\n        }\n        var builtins = this.getBuiltins('output');\n        if (builtins) snippets.push('\\t' + builtins);\n        return snippets.join(',\\n');\n      }\n    }, {\n      key: \"getStructs\",\n      value: function getStructs(shaderStage) {\n        var snippets = [];\n        var structs = this.structs[shaderStage];\n        for (var index = 0, _length4 = structs.length; index < _length4; index++) {\n          var struct = structs[index];\n          var name = struct.name;\n          var snippet = `\\struct ${name} {\\n`;\n          snippet += this.getStructMembers(struct);\n          snippet += '\\n}';\n          snippets.push(snippet);\n          snippets.push(`\\nvar<private> output : ${name};\\n\\n`);\n        }\n        return snippets.join('\\n\\n');\n      }\n    }, {\n      key: \"getVar\",\n      value: function getVar(type, name) {\n        return `var ${name} : ${this.getType(type)}`;\n      }\n    }, {\n      key: \"getVars\",\n      value: function getVars(shaderStage) {\n        var snippets = [];\n        var vars = this.vars[shaderStage];\n        if (vars !== undefined) {\n          for (var variable of vars) {\n            snippets.push(`\\t${this.getVar(variable.type, variable.name)};`);\n          }\n        }\n        return `\\n${snippets.join('\\n')}\\n`;\n      }\n    }, {\n      key: \"getVaryings\",\n      value: function getVaryings(shaderStage) {\n        var snippets = [];\n        if (shaderStage === 'vertex') {\n          this.getBuiltin('position', 'Vertex', 'vec4<f32>', 'vertex');\n        }\n        if (shaderStage === 'vertex' || shaderStage === 'fragment') {\n          var varyings = this.varyings;\n          var vars = this.vars[shaderStage];\n          for (var index = 0; index < varyings.length; index++) {\n            var _varying3 = varyings[index];\n            if (_varying3.needsInterpolation) {\n              var attributesSnippet = `@location( ${index} )`;\n              if (/^(int|uint|ivec|uvec)/.test(_varying3.type)) {\n                attributesSnippet += ' @interpolate( flat )';\n              }\n              snippets.push(`${attributesSnippet} ${_varying3.name} : ${this.getType(_varying3.type)}`);\n            } else if (shaderStage === 'vertex' && vars.includes(_varying3) === false) {\n              vars.push(_varying3);\n            }\n          }\n        }\n        var builtins = this.getBuiltins(shaderStage);\n        if (builtins) snippets.push(builtins);\n        var code = snippets.join(',\\n\\t');\n        return shaderStage === 'vertex' ? this._getWGSLStruct('VaryingsStruct', '\\t' + code) : code;\n      }\n    }, {\n      key: \"getUniforms\",\n      value: function getUniforms(shaderStage) {\n        var uniforms = this.uniforms[shaderStage];\n        var bindingSnippets = [];\n        var bufferSnippets = [];\n        var structSnippets = [];\n        var uniformGroups = {};\n        for (var _uniform4 of uniforms) {\n          var groupName = _uniform4.groupNode.name;\n          var uniformIndexes = this.bindingsIndexes[groupName];\n          if (_uniform4.type === 'texture' || _uniform4.type === 'cubeTexture' || _uniform4.type === 'storageTexture' || _uniform4.type === 'texture3D') {\n            var _texture13 = _uniform4.node.value;\n            if ((shaderStage === 'fragment' || shaderStage === 'compute') && this.isUnfilterable(_texture13) === false && _uniform4.node.isStorageTextureNode !== true) {\n              if (this.isSampleCompare(_texture13)) {\n                bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${_uniform4.name}_sampler : sampler_comparison;`);\n              } else {\n                bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${_uniform4.name}_sampler : sampler;`);\n              }\n            }\n            var textureType = void 0;\n            var multisampled = '';\n            var _this$renderer$backen2 = this.renderer.backend.utils.getTextureSampleData(_texture13),\n              primarySamples = _this$renderer$backen2.primarySamples;\n            if (primarySamples > 1) {\n              multisampled = '_multisampled';\n            }\n            if (_texture13.isCubeTexture === true) {\n              textureType = 'texture_cube<f32>';\n            } else if (_texture13.isDataArrayTexture === true || _texture13.isCompressedArrayTexture === true) {\n              textureType = 'texture_2d_array<f32>';\n            } else if (_texture13.isDepthTexture === true) {\n              textureType = `texture_depth${multisampled}_2d`;\n            } else if (_texture13.isVideoTexture === true) {\n              textureType = 'texture_external';\n            } else if (_texture13.isData3DTexture === true) {\n              textureType = 'texture_3d<f32>';\n            } else if (_uniform4.node.isStorageTextureNode === true) {\n              var format = getFormat(_texture13);\n              var access = this.getStorageAccess(_uniform4.node, shaderStage);\n              textureType = `texture_storage_2d<${format}, ${access}>`;\n            } else {\n              var componentPrefix = this.getComponentTypeFromTexture(_texture13).charAt(0);\n              textureType = `texture${multisampled}_2d<${componentPrefix}32>`;\n            }\n            bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${_uniform4.name} : ${textureType};`);\n          } else if (_uniform4.type === 'buffer' || _uniform4.type === 'storageBuffer' || _uniform4.type === 'indirectStorageBuffer') {\n            var bufferNode = _uniform4.node;\n            var bufferType = this.getType(bufferNode.bufferType);\n            var bufferCount = bufferNode.bufferCount;\n            var bufferCountSnippet = bufferCount > 0 && _uniform4.type === 'buffer' ? ', ' + bufferCount : '';\n            var bufferTypeSnippet = bufferNode.isAtomic ? `atomic<${bufferType}>` : `${bufferType}`;\n            var bufferSnippet = `\\t${_uniform4.name} : array< ${bufferTypeSnippet}${bufferCountSnippet} >\\n`;\n            var bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${this.getStorageAccess(bufferNode, shaderStage)}` : 'uniform';\n            bufferSnippets.push(this._getWGSLStructBinding('NodeBuffer_' + bufferNode.id, bufferSnippet, bufferAccessMode, uniformIndexes.binding++, uniformIndexes.group));\n          } else {\n            var vectorType = this.getType(this.getVectorType(_uniform4.type));\n            var _groupName2 = _uniform4.groupNode.name;\n            var group = uniformGroups[_groupName2] || (uniformGroups[_groupName2] = {\n              index: uniformIndexes.binding++,\n              id: uniformIndexes.group,\n              snippets: []\n            });\n            group.snippets.push(`\\t${_uniform4.name} : ${vectorType}`);\n          }\n        }\n        for (var name in uniformGroups) {\n          var _group = uniformGroups[name];\n          structSnippets.push(this._getWGSLStructBinding(name, _group.snippets.join(',\\n'), 'uniform', _group.index, _group.id));\n        }\n        var code = bindingSnippets.join('\\n');\n        code += bufferSnippets.join('\\n');\n        code += structSnippets.join('\\n');\n        return code;\n      }\n    }, {\n      key: \"buildCode\",\n      value: function buildCode() {\n        var shadersData = this.material !== null ? {\n          fragment: {},\n          vertex: {}\n        } : {\n          compute: {}\n        };\n        this.sortBindingGroups();\n        for (var shaderStage in shadersData) {\n          var stageData = shadersData[shaderStage];\n          stageData.uniforms = this.getUniforms(shaderStage);\n          stageData.attributes = this.getAttributes(shaderStage);\n          stageData.varyings = this.getVaryings(shaderStage);\n          stageData.structs = this.getStructs(shaderStage);\n          stageData.vars = this.getVars(shaderStage);\n          stageData.codes = this.getCodes(shaderStage);\n          stageData.directives = this.getDirectives(shaderStage);\n          stageData.scopedArrays = this.getScopedArrays(shaderStage);\n\n          //\n\n          var flow = '// code\\n\\n';\n          flow += this.flowCode[shaderStage];\n          var flowNodes = this.flowNodes[shaderStage];\n          var mainNode = flowNodes[flowNodes.length - 1];\n          var outputNode = mainNode.outputNode;\n          var isOutputStruct = outputNode !== undefined && outputNode.isOutputStructNode === true;\n          for (var node of flowNodes) {\n            var flowSlotData = this.getFlowData(node /*, shaderStage*/);\n            var slotName = node.name;\n            if (slotName) {\n              if (flow.length > 0) flow += '\\n';\n              flow += `\\t// flow -> ${slotName}\\n\\t`;\n            }\n            flow += `${flowSlotData.code}\\n\\t`;\n            if (node === mainNode && shaderStage !== 'compute') {\n              flow += '// result\\n\\n\\t';\n              if (shaderStage === 'vertex') {\n                flow += `varyings.Vertex = ${flowSlotData.result};`;\n              } else if (shaderStage === 'fragment') {\n                if (isOutputStruct) {\n                  stageData.returnType = outputNode.nodeType;\n                  flow += `return ${flowSlotData.result};`;\n                } else {\n                  var structSnippet = '\\t@location(0) color: vec4<f32>';\n                  var builtins = this.getBuiltins('output');\n                  if (builtins) structSnippet += ',\\n\\t' + builtins;\n                  stageData.returnType = 'OutputStruct';\n                  stageData.structs += this._getWGSLStruct('OutputStruct', structSnippet);\n                  stageData.structs += '\\nvar<private> output : OutputStruct;\\n\\n';\n                  flow += `output.color = ${flowSlotData.result};\\n\\n\\treturn output;`;\n                }\n              }\n            }\n          }\n          stageData.flow = flow;\n        }\n        if (this.material !== null) {\n          this.vertexShader = this._getWGSLVertexCode(shadersData.vertex);\n          this.fragmentShader = this._getWGSLFragmentCode(shadersData.fragment);\n        } else {\n          this.computeShader = this._getWGSLComputeCode(shadersData.compute, (this.object.workgroupSize || [64]).join(', '));\n        }\n      }\n    }, {\n      key: \"getMethod\",\n      value: function getMethod(method) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var wgslMethod;\n        if (output !== null) {\n          wgslMethod = this._getWGSLMethod(method + '_' + output);\n        }\n        if (wgslMethod === undefined) {\n          wgslMethod = this._getWGSLMethod(method);\n        }\n        return wgslMethod || method;\n      }\n    }, {\n      key: \"getType\",\n      value: function getType(type) {\n        return wgslTypeLib[type] || type;\n      }\n    }, {\n      key: \"isAvailable\",\n      value: function isAvailable(name) {\n        var result = supports[name];\n        if (result === undefined) {\n          if (name === 'float32Filterable') {\n            result = this.renderer.hasFeature('float32-filterable');\n          } else if (name === 'clipDistance') {\n            result = this.renderer.hasFeature('clip-distances');\n          }\n          supports[name] = result;\n        }\n        return result;\n      }\n    }, {\n      key: \"_getWGSLMethod\",\n      value: function _getWGSLMethod(method) {\n        if (wgslPolyfill[method] !== undefined) {\n          this._include(method);\n        }\n        return wgslMethods[method];\n      }\n    }, {\n      key: \"_include\",\n      value: function _include(name) {\n        var codeNode = wgslPolyfill[name];\n        codeNode.build(this);\n        if (this.currentFunctionNode !== null) {\n          this.currentFunctionNode.includes.push(codeNode);\n        }\n        return codeNode;\n      }\n    }, {\n      key: \"_getWGSLVertexCode\",\n      value: function _getWGSLVertexCode(shaderData) {\n        return `${this.getSignature()}\n// directives\n${shaderData.directives}\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${shaderData.codes}\n\n@vertex\nfn main( ${shaderData.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n\treturn varyings;\n\n}\n`;\n      }\n    }, {\n      key: \"_getWGSLFragmentCode\",\n      value: function _getWGSLFragmentCode(shaderData) {\n        return `${this.getSignature()}\n// global\n${diagnostics}\n\n// uniforms\n${shaderData.uniforms}\n\n// structs\n${shaderData.structs}\n\n// codes\n${shaderData.codes}\n\n@fragment\nfn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n      }\n    }, {\n      key: \"_getWGSLComputeCode\",\n      value: function _getWGSLComputeCode(shaderData, workgroupSize) {\n        return `${this.getSignature()}\n// directives\n${shaderData.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${shaderData.scopedArrays}\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@compute @workgroup_size( ${workgroupSize} )\nfn main( ${shaderData.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x + id.y * numWorkgroups.x * u32(${workgroupSize}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${workgroupSize});\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n      }\n    }, {\n      key: \"_getWGSLStruct\",\n      value: function _getWGSLStruct(name, vars) {\n        return `\nstruct ${name} {\n${vars}\n};`;\n      }\n    }, {\n      key: \"_getWGSLStructBinding\",\n      value: function _getWGSLStructBinding(name, vars, access) {\n        var binding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        var group = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        var structName = name + 'Struct';\n        var structSnippet = this._getWGSLStruct(structName, vars);\n        return `${structSnippet}\n@binding( ${binding} ) @group( ${group} )\nvar<${access}> ${name} : ${structName};`;\n      }\n    }]);\n  }(NodeBuilder);\n  var WebGPUUtils = /*#__PURE__*/function () {\n    function WebGPUUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGPUUtils);\n      this.backend = backend;\n    }\n    return (0, _createClass2.default)(WebGPUUtils, [{\n      key: \"getCurrentDepthStencilFormat\",\n      value: function getCurrentDepthStencilFormat(renderContext) {\n        var format;\n        if (renderContext.depthTexture !== null) {\n          format = this.getTextureFormatGPU(renderContext.depthTexture);\n        } else if (renderContext.depth && renderContext.stencil) {\n          format = GPUTextureFormat.Depth24PlusStencil8;\n        } else if (renderContext.depth) {\n          format = GPUTextureFormat.Depth24Plus;\n        }\n        return format;\n      }\n    }, {\n      key: \"getTextureFormatGPU\",\n      value: function getTextureFormatGPU(texture) {\n        return this.backend.get(texture).format;\n      }\n    }, {\n      key: \"getTextureSampleData\",\n      value: function getTextureSampleData(texture) {\n        var samples;\n        if (texture.isFramebufferTexture) {\n          samples = 1;\n        } else if (texture.isDepthTexture && !texture.renderTarget) {\n          var renderer = this.backend.renderer;\n          var renderTarget = renderer.getRenderTarget();\n          samples = renderTarget ? renderTarget.samples : renderer.samples;\n        } else if (texture.renderTarget) {\n          samples = texture.renderTarget.samples;\n        }\n        samples = samples || 1;\n        var isMSAA = samples > 1 && texture.renderTarget !== null && texture.isDepthTexture !== true && texture.isFramebufferTexture !== true;\n        var primarySamples = isMSAA ? 1 : samples;\n        return {\n          samples: samples,\n          primarySamples: primarySamples,\n          isMSAA: isMSAA\n        };\n      }\n    }, {\n      key: \"getCurrentColorFormat\",\n      value: function getCurrentColorFormat(renderContext) {\n        var format;\n        if (renderContext.textures !== null) {\n          format = this.getTextureFormatGPU(renderContext.textures[0]);\n        } else {\n          format = this.getPreferredCanvasFormat(); // default context format\n        }\n        return format;\n      }\n    }, {\n      key: \"getCurrentColorSpace\",\n      value: function getCurrentColorSpace(renderContext) {\n        if (renderContext.textures !== null) {\n          return renderContext.textures[0].colorSpace;\n        }\n        return this.backend.renderer.outputColorSpace;\n      }\n    }, {\n      key: \"getPrimitiveTopology\",\n      value: function getPrimitiveTopology(object, material) {\n        if (object.isPoints) return GPUPrimitiveTopology.PointList;else if (object.isLineSegments || object.isMesh && material.wireframe === true) return GPUPrimitiveTopology.LineList;else if (object.isLine) return GPUPrimitiveTopology.LineStrip;else if (object.isMesh) return GPUPrimitiveTopology.TriangleList;\n      }\n    }, {\n      key: \"getSampleCount\",\n      value: function getSampleCount(sampleCount) {\n        var count = 1;\n        if (sampleCount > 1) {\n          // WebGPU only supports power-of-two sample counts and 2 is not a valid value\n          count = Math.pow(2, Math.floor(Math.log2(sampleCount)));\n          if (count === 2) {\n            count = 4;\n          }\n        }\n        return count;\n      }\n    }, {\n      key: \"getSampleCountRenderContext\",\n      value: function getSampleCountRenderContext(renderContext) {\n        if (renderContext.textures !== null) {\n          return this.getSampleCount(renderContext.sampleCount);\n        }\n        return this.getSampleCount(this.backend.renderer.samples);\n      }\n    }, {\n      key: \"getPreferredCanvasFormat\",\n      value: function getPreferredCanvasFormat() {\n        // TODO: Remove this check when Quest 34.5 is out\n        // https://github.com/mrdoob/three.js/pull/29221/files#r1731833949\n\n        if (navigator.userAgent.includes('Quest')) {\n          return GPUTextureFormat.BGRA8Unorm;\n        } else {\n          return navigator.gpu.getPreferredCanvasFormat();\n        }\n      }\n    }]);\n  }();\n  var typedArraysToVertexFormatPrefix = new Map([[Int8Array, ['sint8', 'snorm8']], [Uint8Array, ['uint8', 'unorm8']], [Int16Array, ['sint16', 'snorm16']], [Uint16Array, ['uint16', 'unorm16']], [Int32Array, ['sint32', 'snorm32']], [Uint32Array, ['uint32', 'unorm32']], [Float32Array, ['float32']]]);\n  var typedAttributeToVertexFormatPrefix = new Map([[_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Float16BufferAttribute, ['float16']]]);\n  var typeArraysToVertexFormatPrefixForItemSize1 = new Map([[Int32Array, 'sint32'], [Int16Array, 'sint32'],\n  // patch for INT16\n  [Uint32Array, 'uint32'], [Uint16Array, 'uint32'],\n  // patch for UINT16\n  [Float32Array, 'float32']]);\n  var WebGPUAttributeUtils = /*#__PURE__*/function () {\n    function WebGPUAttributeUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGPUAttributeUtils);\n      this.backend = backend;\n    }\n    return (0, _createClass2.default)(WebGPUAttributeUtils, [{\n      key: \"createAttribute\",\n      value: function createAttribute(attribute, usage) {\n        var bufferAttribute = this._getBufferAttribute(attribute);\n        var backend = this.backend;\n        var bufferData = backend.get(bufferAttribute);\n        var buffer = bufferData.buffer;\n        if (buffer === undefined) {\n          var device = backend.device;\n          var array = bufferAttribute.array;\n\n          // patch for INT16 and UINT16\n          if (attribute.normalized === false && (array.constructor === Int16Array || array.constructor === Uint16Array)) {\n            var tempArray = new Uint32Array(array.length);\n            for (var i = 0; i < array.length; i++) {\n              tempArray[i] = array[i];\n            }\n            array = tempArray;\n          }\n          bufferAttribute.array = array;\n          if ((bufferAttribute.isStorageBufferAttribute || bufferAttribute.isStorageInstancedBufferAttribute) && bufferAttribute.itemSize === 3) {\n            array = new array.constructor(bufferAttribute.count * 4);\n            for (var _i22 = 0; _i22 < bufferAttribute.count; _i22++) {\n              array.set(bufferAttribute.array.subarray(_i22 * 3, _i22 * 3 + 3), _i22 * 4);\n            }\n\n            // Update BufferAttribute\n            bufferAttribute.itemSize = 4;\n            bufferAttribute.array = array;\n          }\n          var size = array.byteLength + (4 - array.byteLength % 4) % 4; // ensure 4 byte alignment, see #20441\n\n          buffer = device.createBuffer({\n            label: bufferAttribute.name,\n            size: size,\n            usage: usage,\n            mappedAtCreation: true\n          });\n          new array.constructor(buffer.getMappedRange()).set(array);\n          buffer.unmap();\n          bufferData.buffer = buffer;\n        }\n      }\n    }, {\n      key: \"updateAttribute\",\n      value: function updateAttribute(attribute) {\n        var bufferAttribute = this._getBufferAttribute(attribute);\n        var backend = this.backend;\n        var device = backend.device;\n        var buffer = backend.get(bufferAttribute).buffer;\n        var array = bufferAttribute.array;\n        var isTypedArray = this._isTypedArray(array);\n        var updateRanges = bufferAttribute.updateRanges;\n        if (updateRanges.length === 0) {\n          // Not using update ranges\n\n          device.queue.writeBuffer(buffer, 0, array, 0);\n        } else {\n          var byteOffsetFactor = isTypedArray ? 1 : array.BYTES_PER_ELEMENT;\n          for (var i = 0, l = updateRanges.length; i < l; i++) {\n            var _range2 = updateRanges[i];\n            var dataOffset = _range2.start * byteOffsetFactor;\n            var size = _range2.count * byteOffsetFactor;\n            device.queue.writeBuffer(buffer, 0, array, dataOffset, size);\n          }\n          bufferAttribute.clearUpdateRanges();\n        }\n      }\n    }, {\n      key: \"createShaderVertexBuffers\",\n      value: function createShaderVertexBuffers(renderObject) {\n        var attributes = renderObject.getAttributes();\n        var vertexBuffers = new Map();\n        for (var slot = 0; slot < attributes.length; slot++) {\n          var geometryAttribute = attributes[slot];\n          var bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;\n          var _bufferAttribute4 = this._getBufferAttribute(geometryAttribute);\n          var vertexBufferLayout = vertexBuffers.get(_bufferAttribute4);\n          if (vertexBufferLayout === undefined) {\n            var arrayStride = void 0,\n              stepMode = void 0;\n            if (geometryAttribute.isInterleavedBufferAttribute === true) {\n              arrayStride = geometryAttribute.data.stride * bytesPerElement;\n              stepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n            } else {\n              arrayStride = geometryAttribute.itemSize * bytesPerElement;\n              stepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n            }\n\n            // patch for INT16 and UINT16\n            if (geometryAttribute.normalized === false && (geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array)) {\n              arrayStride = 4;\n            }\n            vertexBufferLayout = {\n              arrayStride: arrayStride,\n              attributes: [],\n              stepMode: stepMode\n            };\n            vertexBuffers.set(_bufferAttribute4, vertexBufferLayout);\n          }\n          var format = this._getVertexFormat(geometryAttribute);\n          var offset = geometryAttribute.isInterleavedBufferAttribute === true ? geometryAttribute.offset * bytesPerElement : 0;\n          vertexBufferLayout.attributes.push({\n            shaderLocation: slot,\n            offset: offset,\n            format: format\n          });\n        }\n        return Array.from(vertexBuffers.values());\n      }\n    }, {\n      key: \"destroyAttribute\",\n      value: function destroyAttribute(attribute) {\n        var backend = this.backend;\n        var data = backend.get(this._getBufferAttribute(attribute));\n        data.buffer.destroy();\n        backend.delete(attribute);\n      }\n    }, {\n      key: \"getArrayBufferAsync\",\n      value: function () {\n        var _getArrayBufferAsync4 = (0, _asyncToGenerator2.default)(function* (attribute) {\n          var backend = this.backend;\n          var device = backend.device;\n          var data = backend.get(this._getBufferAttribute(attribute));\n          var bufferGPU = data.buffer;\n          var size = bufferGPU.size;\n          var readBufferGPU = device.createBuffer({\n            label: `${attribute.name}_readback`,\n            size: size,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n          });\n          var cmdEncoder = device.createCommandEncoder({\n            label: `readback_encoder_${attribute.name}`\n          });\n          cmdEncoder.copyBufferToBuffer(bufferGPU, 0, readBufferGPU, 0, size);\n          var gpuCommands = cmdEncoder.finish();\n          device.queue.submit([gpuCommands]);\n          yield readBufferGPU.mapAsync(GPUMapMode.READ);\n          var arrayBuffer = readBufferGPU.getMappedRange();\n          var dstBuffer = new attribute.array.constructor(arrayBuffer.slice(0));\n          readBufferGPU.unmap();\n          return dstBuffer.buffer;\n        });\n        function getArrayBufferAsync(_x43) {\n          return _getArrayBufferAsync4.apply(this, arguments);\n        }\n        return getArrayBufferAsync;\n      }()\n    }, {\n      key: \"_getVertexFormat\",\n      value: function _getVertexFormat(geometryAttribute) {\n        var itemSize = geometryAttribute.itemSize,\n          normalized = geometryAttribute.normalized;\n        var ArrayType = geometryAttribute.array.constructor;\n        var AttributeType = geometryAttribute.constructor;\n        var format;\n        if (itemSize === 1) {\n          format = typeArraysToVertexFormatPrefixForItemSize1.get(ArrayType);\n        } else {\n          var prefixOptions = typedAttributeToVertexFormatPrefix.get(AttributeType) || typedArraysToVertexFormatPrefix.get(ArrayType);\n          var prefix = prefixOptions[normalized ? 1 : 0];\n          if (prefix) {\n            var bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;\n            var paddedBytesPerUnit = Math.floor((bytesPerUnit + 3) / 4) * 4;\n            var paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;\n            if (paddedItemSize % 1) {\n              throw new Error('THREE.WebGPUAttributeUtils: Bad vertex format item size.');\n            }\n            format = `${prefix}x${paddedItemSize}`;\n          }\n        }\n        if (!format) {\n          console.error('THREE.WebGPUAttributeUtils: Vertex format not supported yet.');\n        }\n        return format;\n      }\n    }, {\n      key: \"_isTypedArray\",\n      value: function _isTypedArray(array) {\n        return ArrayBuffer.isView(array) && !(array instanceof DataView);\n      }\n    }, {\n      key: \"_getBufferAttribute\",\n      value: function _getBufferAttribute(attribute) {\n        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n        return attribute;\n      }\n    }]);\n  }();\n  var WebGPUBindingUtils = /*#__PURE__*/function () {\n    function WebGPUBindingUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGPUBindingUtils);\n      this.backend = backend;\n      this.bindGroupLayoutCache = new WeakMap();\n    }\n    return (0, _createClass2.default)(WebGPUBindingUtils, [{\n      key: \"createBindingsLayout\",\n      value: function createBindingsLayout(bindGroup) {\n        var backend = this.backend;\n        var device = backend.device;\n        var entries = [];\n        var index = 0;\n        for (var binding of bindGroup.bindings) {\n          var bindingGPU = {\n            binding: index++,\n            visibility: binding.visibility\n          };\n          if (binding.isUniformBuffer || binding.isStorageBuffer) {\n            var _buffer6 = {}; // GPUBufferBindingLayout\n\n            if (binding.isStorageBuffer) {\n              if (binding.visibility & 4) {\n                // compute\n\n                if (binding.access === NodeAccess.READ_WRITE || binding.access === NodeAccess.WRITE_ONLY) {\n                  _buffer6.type = GPUBufferBindingType.Storage;\n                } else {\n                  _buffer6.type = GPUBufferBindingType.ReadOnlyStorage;\n                }\n              } else {\n                _buffer6.type = GPUBufferBindingType.ReadOnlyStorage;\n              }\n            }\n            bindingGPU.buffer = _buffer6;\n          } else if (binding.isSampler) {\n            var _sampler2 = {}; // GPUSamplerBindingLayout\n\n            if (binding.texture.isDepthTexture) {\n              if (binding.texture.compareFunction !== null) {\n                _sampler2.type = 'comparison';\n              }\n            }\n            bindingGPU.sampler = _sampler2;\n          } else if (binding.isSampledTexture && binding.texture.isVideoTexture) {\n            bindingGPU.externalTexture = {}; // GPUExternalTextureBindingLayout\n          } else if (binding.isSampledTexture && binding.store) {\n            var _storageTexture = {}; // GPUStorageTextureBindingLayout\n            _storageTexture.format = this.backend.get(binding.texture).texture.format;\n            var access = binding.access;\n            if (access === NodeAccess.READ_WRITE) {\n              _storageTexture.access = GPUStorageTextureAccess.ReadWrite;\n            } else if (access === NodeAccess.WRITE_ONLY) {\n              _storageTexture.access = GPUStorageTextureAccess.WriteOnly;\n            } else {\n              _storageTexture.access = GPUStorageTextureAccess.ReadOnly;\n            }\n            bindingGPU.storageTexture = _storageTexture;\n          } else if (binding.isSampledTexture) {\n            var _texture14 = {}; // GPUTextureBindingLayout\n\n            var _backend$utils$getTex2 = backend.utils.getTextureSampleData(binding.texture),\n              primarySamples = _backend$utils$getTex2.primarySamples;\n            if (primarySamples > 1) {\n              _texture14.multisampled = true;\n              if (!binding.texture.isDepthTexture) {\n                _texture14.sampleType = GPUTextureSampleType.UnfilterableFloat;\n              }\n            }\n            if (binding.texture.isDepthTexture) {\n              _texture14.sampleType = GPUTextureSampleType.Depth;\n            } else if (binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture) {\n              var type = binding.texture.type;\n              if (type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IntType) {\n                _texture14.sampleType = GPUTextureSampleType.SInt;\n              } else if (type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").UnsignedIntType) {\n                _texture14.sampleType = GPUTextureSampleType.UInt;\n              } else if (type === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FloatType) {\n                if (this.backend.hasFeature('float32-filterable')) {\n                  _texture14.sampleType = GPUTextureSampleType.Float;\n                } else {\n                  _texture14.sampleType = GPUTextureSampleType.UnfilterableFloat;\n                }\n              }\n            }\n            if (binding.isSampledCubeTexture) {\n              _texture14.viewDimension = GPUTextureViewDimension.Cube;\n            } else if (binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {\n              _texture14.viewDimension = GPUTextureViewDimension.TwoDArray;\n            } else if (binding.isSampledTexture3D) {\n              _texture14.viewDimension = GPUTextureViewDimension.ThreeD;\n            }\n            bindingGPU.texture = _texture14;\n          } else {\n            console.error(`WebGPUBindingUtils: Unsupported binding \"${binding}\".`);\n          }\n          entries.push(bindingGPU);\n        }\n        return device.createBindGroupLayout({\n          entries: entries\n        });\n      }\n    }, {\n      key: \"createBindings\",\n      value: function createBindings(bindGroup, bindings, cacheIndex) {\n        var version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        var backend = this.backend,\n          bindGroupLayoutCache = this.bindGroupLayoutCache;\n        var bindingsData = backend.get(bindGroup);\n\n        // setup (static) binding layout and (dynamic) binding group\n\n        var bindLayoutGPU = bindGroupLayoutCache.get(bindGroup.bindingsReference);\n        if (bindLayoutGPU === undefined) {\n          bindLayoutGPU = this.createBindingsLayout(bindGroup);\n          bindGroupLayoutCache.set(bindGroup.bindingsReference, bindLayoutGPU);\n        }\n        var bindGroupGPU;\n        if (cacheIndex > 0) {\n          if (bindingsData.groups === undefined) {\n            bindingsData.groups = [];\n            bindingsData.versions = [];\n          }\n          if (bindingsData.versions[cacheIndex] === version) {\n            bindGroupGPU = bindingsData.groups[cacheIndex];\n          }\n        }\n        if (bindGroupGPU === undefined) {\n          bindGroupGPU = this.createBindGroup(bindGroup, bindLayoutGPU);\n          if (cacheIndex > 0) {\n            bindingsData.groups[cacheIndex] = bindGroupGPU;\n            bindingsData.versions[cacheIndex] = version;\n          }\n        }\n        bindingsData.group = bindGroupGPU;\n        bindingsData.layout = bindLayoutGPU;\n      }\n    }, {\n      key: \"updateBinding\",\n      value: function updateBinding(binding) {\n        var backend = this.backend;\n        var device = backend.device;\n        var buffer = binding.buffer;\n        var bufferGPU = backend.get(binding).buffer;\n        device.queue.writeBuffer(bufferGPU, 0, buffer, 0);\n      }\n    }, {\n      key: \"createBindGroup\",\n      value: function createBindGroup(bindGroup, layoutGPU) {\n        var backend = this.backend;\n        var device = backend.device;\n        var bindingPoint = 0;\n        var entriesGPU = [];\n        for (var binding of bindGroup.bindings) {\n          if (binding.isUniformBuffer) {\n            var bindingData = backend.get(binding);\n            if (bindingData.buffer === undefined) {\n              var byteLength = binding.byteLength;\n              var usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n              var bufferGPU = device.createBuffer({\n                label: 'bindingBuffer_' + binding.name,\n                size: byteLength,\n                usage: usage\n              });\n              bindingData.buffer = bufferGPU;\n            }\n            entriesGPU.push({\n              binding: bindingPoint,\n              resource: {\n                buffer: bindingData.buffer\n              }\n            });\n          } else if (binding.isStorageBuffer) {\n            var _bindingData = backend.get(binding);\n            if (_bindingData.buffer === undefined) {\n              var _attribute15 = binding.attribute;\n              //const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | /*GPUBufferUsage.COPY_SRC |*/ GPUBufferUsage.COPY_DST;\n\n              //backend.attributeUtils.createAttribute( attribute, usage ); // @TODO: Move it to universal renderer\n\n              _bindingData.buffer = backend.get(_attribute15).buffer;\n            }\n            entriesGPU.push({\n              binding: bindingPoint,\n              resource: {\n                buffer: _bindingData.buffer\n              }\n            });\n          } else if (binding.isSampler) {\n            var textureGPU = backend.get(binding.texture);\n            entriesGPU.push({\n              binding: bindingPoint,\n              resource: textureGPU.sampler\n            });\n          } else if (binding.isSampledTexture) {\n            var textureData = backend.get(binding.texture);\n            var resourceGPU = void 0;\n            if (textureData.externalTexture !== undefined) {\n              resourceGPU = device.importExternalTexture({\n                source: textureData.externalTexture\n              });\n            } else {\n              var mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;\n              var propertyName = `view-${textureData.texture.width}-${textureData.texture.height}-${mipLevelCount}`;\n              resourceGPU = textureData[propertyName];\n              if (resourceGPU === undefined) {\n                var aspectGPU = GPUTextureAspect.All;\n                var dimensionViewGPU = void 0;\n                if (binding.isSampledCubeTexture) {\n                  dimensionViewGPU = GPUTextureViewDimension.Cube;\n                } else if (binding.isSampledTexture3D) {\n                  dimensionViewGPU = GPUTextureViewDimension.ThreeD;\n                } else if (binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {\n                  dimensionViewGPU = GPUTextureViewDimension.TwoDArray;\n                } else {\n                  dimensionViewGPU = GPUTextureViewDimension.TwoD;\n                }\n                resourceGPU = textureData[propertyName] = textureData.texture.createView({\n                  aspect: aspectGPU,\n                  dimension: dimensionViewGPU,\n                  mipLevelCount: mipLevelCount\n                });\n              }\n            }\n            entriesGPU.push({\n              binding: bindingPoint,\n              resource: resourceGPU\n            });\n          }\n          bindingPoint++;\n        }\n        return device.createBindGroup({\n          label: 'bindGroup_' + bindGroup.name,\n          layout: layoutGPU,\n          entries: entriesGPU\n        });\n      }\n    }]);\n  }();\n  var WebGPUPipelineUtils = /*#__PURE__*/function () {\n    function WebGPUPipelineUtils(backend) {\n      (0, _classCallCheck2.default)(this, WebGPUPipelineUtils);\n      this.backend = backend;\n    }\n    return (0, _createClass2.default)(WebGPUPipelineUtils, [{\n      key: \"_getSampleCount\",\n      value: function _getSampleCount(renderObjectContext) {\n        return this.backend.utils.getSampleCountRenderContext(renderObjectContext);\n      }\n    }, {\n      key: \"createRenderPipeline\",\n      value: function createRenderPipeline(renderObject, promises) {\n        var object = renderObject.object,\n          material = renderObject.material,\n          geometry = renderObject.geometry,\n          pipeline = renderObject.pipeline;\n        var vertexProgram = pipeline.vertexProgram,\n          fragmentProgram = pipeline.fragmentProgram;\n        var backend = this.backend;\n        var device = backend.device;\n        var utils = backend.utils;\n        var pipelineData = backend.get(pipeline);\n\n        // bind group layouts\n\n        var bindGroupLayouts = [];\n        for (var bindGroup of renderObject.getBindings()) {\n          var bindingsData = backend.get(bindGroup);\n          bindGroupLayouts.push(bindingsData.layout);\n        }\n\n        // vertex buffers\n\n        var vertexBuffers = backend.attributeUtils.createShaderVertexBuffers(renderObject);\n\n        // blending\n\n        var blending;\n        if (material.transparent === true && material.blending !== _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoBlending) {\n          blending = this._getBlending(material);\n        }\n\n        // stencil\n\n        var stencilFront = {};\n        if (material.stencilWrite === true) {\n          stencilFront = {\n            compare: this._getStencilCompare(material),\n            failOp: this._getStencilOperation(material.stencilFail),\n            depthFailOp: this._getStencilOperation(material.stencilZFail),\n            passOp: this._getStencilOperation(material.stencilZPass)\n          };\n        }\n        var colorWriteMask = this._getColorWriteMask(material);\n        var targets = [];\n        if (renderObject.context.textures !== null) {\n          var textures = renderObject.context.textures;\n          for (var i = 0; i < textures.length; i++) {\n            var colorFormat = utils.getTextureFormatGPU(textures[i]);\n            targets.push({\n              format: colorFormat,\n              blend: blending,\n              writeMask: colorWriteMask\n            });\n          }\n        } else {\n          var _colorFormat = utils.getCurrentColorFormat(renderObject.context);\n          targets.push({\n            format: _colorFormat,\n            blend: blending,\n            writeMask: colorWriteMask\n          });\n        }\n        var vertexModule = backend.get(vertexProgram).module;\n        var fragmentModule = backend.get(fragmentProgram).module;\n        var primitiveState = this._getPrimitiveState(object, geometry, material);\n        var depthCompare = this._getDepthCompare(material);\n        var depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);\n        var sampleCount = this._getSampleCount(renderObject.context);\n        var pipelineDescriptor = {\n          label: `renderPipeline_${material.name || material.type}_${material.id}`,\n          vertex: Object.assign({}, vertexModule, {\n            buffers: vertexBuffers\n          }),\n          fragment: Object.assign({}, fragmentModule, {\n            targets: targets\n          }),\n          primitive: primitiveState,\n          multisample: {\n            count: sampleCount,\n            alphaToCoverageEnabled: material.alphaToCoverage && sampleCount > 1\n          },\n          layout: device.createPipelineLayout({\n            bindGroupLayouts: bindGroupLayouts\n          })\n        };\n        var depthStencil = {};\n        var renderDepth = renderObject.context.depth;\n        var renderStencil = renderObject.context.stencil;\n        if (renderDepth === true || renderStencil === true) {\n          if (renderDepth === true) {\n            depthStencil.format = depthStencilFormat;\n            depthStencil.depthWriteEnabled = material.depthWrite;\n            depthStencil.depthCompare = depthCompare;\n          }\n          if (renderStencil === true) {\n            depthStencil.stencilFront = stencilFront;\n            depthStencil.stencilBack = {}; // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n            depthStencil.stencilReadMask = material.stencilFuncMask;\n            depthStencil.stencilWriteMask = material.stencilWriteMask;\n          }\n          pipelineDescriptor.depthStencil = depthStencil;\n        }\n        if (promises === null) {\n          pipelineData.pipeline = device.createRenderPipeline(pipelineDescriptor);\n        } else {\n          var p = new Promise(function (resolve /*, reject*/) {\n            device.createRenderPipelineAsync(pipelineDescriptor).then(function (pipeline) {\n              pipelineData.pipeline = pipeline;\n              resolve();\n            });\n          });\n          promises.push(p);\n        }\n      }\n    }, {\n      key: \"createBundleEncoder\",\n      value: function createBundleEncoder(renderContext) {\n        var backend = this.backend;\n        var utils = backend.utils,\n          device = backend.device;\n        var depthStencilFormat = utils.getCurrentDepthStencilFormat(renderContext);\n        var colorFormat = utils.getCurrentColorFormat(renderContext);\n        var sampleCount = this._getSampleCount(renderContext);\n        var descriptor = {\n          label: 'renderBundleEncoder',\n          colorFormats: [colorFormat],\n          depthStencilFormat: depthStencilFormat,\n          sampleCount: sampleCount\n        };\n        return device.createRenderBundleEncoder(descriptor);\n      }\n    }, {\n      key: \"createComputePipeline\",\n      value: function createComputePipeline(pipeline, bindings) {\n        var backend = this.backend;\n        var device = backend.device;\n        var computeProgram = backend.get(pipeline.computeProgram).module;\n        var pipelineGPU = backend.get(pipeline);\n\n        // bind group layouts\n\n        var bindGroupLayouts = [];\n        for (var bindingsGroup of bindings) {\n          var bindingsData = backend.get(bindingsGroup);\n          bindGroupLayouts.push(bindingsData.layout);\n        }\n        pipelineGPU.pipeline = device.createComputePipeline({\n          compute: computeProgram,\n          layout: device.createPipelineLayout({\n            bindGroupLayouts: bindGroupLayouts\n          })\n        });\n      }\n    }, {\n      key: \"_getBlending\",\n      value: function _getBlending(material) {\n        var color, alpha;\n        var blending = material.blending;\n        var blendSrc = material.blendSrc;\n        var blendDst = material.blendDst;\n        var blendEquation = material.blendEquation;\n        if (blending === _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CustomBlending) {\n          var blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;\n          var blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;\n          var blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;\n          color = {\n            srcFactor: this._getBlendFactor(blendSrc),\n            dstFactor: this._getBlendFactor(blendDst),\n            operation: this._getBlendOperation(blendEquation)\n          };\n          alpha = {\n            srcFactor: this._getBlendFactor(blendSrcAlpha),\n            dstFactor: this._getBlendFactor(blendDstAlpha),\n            operation: this._getBlendOperation(blendEquationAlpha)\n          };\n        } else {\n          var premultipliedAlpha = material.premultipliedAlpha;\n          var setBlend = function setBlend(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n            color = {\n              srcFactor: srcRGB,\n              dstFactor: dstRGB,\n              operation: GPUBlendOperation.Add\n            };\n            alpha = {\n              srcFactor: srcAlpha,\n              dstFactor: dstAlpha,\n              operation: GPUBlendOperation.Add\n            };\n          };\n          if (premultipliedAlpha) {\n            switch (blending) {\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending:\n                setBlend(GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);\n                break;\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AdditiveBlending:\n                setBlend(GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One);\n                break;\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractiveBlending:\n                setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);\n                break;\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyBlending:\n                setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha);\n                break;\n            }\n          } else {\n            switch (blending) {\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NormalBlending:\n                setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);\n                break;\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AdditiveBlending:\n                setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One);\n                break;\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractiveBlending:\n                setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);\n                break;\n              case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MultiplyBlending:\n                setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src);\n                break;\n            }\n          }\n        }\n        if (color !== undefined && alpha !== undefined) {\n          return {\n            color: color,\n            alpha: alpha\n          };\n        } else {\n          console.error('THREE.WebGPURenderer: Invalid blending: ', blending);\n        }\n      }\n    }, {\n      key: \"_getBlendFactor\",\n      value: function _getBlendFactor(blend) {\n        var blendFactor;\n        switch (blend) {\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroFactor:\n            blendFactor = GPUBlendFactor.Zero;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneFactor:\n            blendFactor = GPUBlendFactor.One;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcColorFactor:\n            blendFactor = GPUBlendFactor.Src;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusSrcColorFactor:\n            blendFactor = GPUBlendFactor.OneMinusSrc;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcAlphaFactor:\n            blendFactor = GPUBlendFactor.SrcAlpha;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusSrcAlphaFactor:\n            blendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DstColorFactor:\n            blendFactor = GPUBlendFactor.Dst;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusDstColorFactor:\n            blendFactor = GPUBlendFactor.OneMinusDstColor;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DstAlphaFactor:\n            blendFactor = GPUBlendFactor.DstAlpha;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").OneMinusDstAlphaFactor:\n            blendFactor = GPUBlendFactor.OneMinusDstAlpha;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SrcAlphaSaturateFactor:\n            blendFactor = GPUBlendFactor.SrcAlphaSaturated;\n            break;\n          case BlendColorFactor:\n            blendFactor = GPUBlendFactor.Constant;\n            break;\n          case OneMinusBlendColorFactor:\n            blendFactor = GPUBlendFactor.OneMinusConstant;\n            break;\n          default:\n            console.error('THREE.WebGPURenderer: Blend factor not supported.', blend);\n        }\n        return blendFactor;\n      }\n    }, {\n      key: \"_getStencilCompare\",\n      value: function _getStencilCompare(material) {\n        var stencilCompare;\n        var stencilFunc = material.stencilFunc;\n        switch (stencilFunc) {\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverStencilFunc:\n            stencilCompare = GPUCompareFunction.Never;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysStencilFunc:\n            stencilCompare = GPUCompareFunction.Always;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessStencilFunc:\n            stencilCompare = GPUCompareFunction.Less;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualStencilFunc:\n            stencilCompare = GPUCompareFunction.LessEqual;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualStencilFunc:\n            stencilCompare = GPUCompareFunction.Equal;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualStencilFunc:\n            stencilCompare = GPUCompareFunction.GreaterEqual;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterStencilFunc:\n            stencilCompare = GPUCompareFunction.Greater;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualStencilFunc:\n            stencilCompare = GPUCompareFunction.NotEqual;\n            break;\n          default:\n            console.error('THREE.WebGPURenderer: Invalid stencil function.', stencilFunc);\n        }\n        return stencilCompare;\n      }\n    }, {\n      key: \"_getStencilOperation\",\n      value: function _getStencilOperation(op) {\n        var stencilOperation;\n        switch (op) {\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").KeepStencilOp:\n            stencilOperation = GPUStencilOperation.Keep;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ZeroStencilOp:\n            stencilOperation = GPUStencilOperation.Zero;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReplaceStencilOp:\n            stencilOperation = GPUStencilOperation.Replace;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").InvertStencilOp:\n            stencilOperation = GPUStencilOperation.Invert;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IncrementStencilOp:\n            stencilOperation = GPUStencilOperation.IncrementClamp;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DecrementStencilOp:\n            stencilOperation = GPUStencilOperation.DecrementClamp;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").IncrementWrapStencilOp:\n            stencilOperation = GPUStencilOperation.IncrementWrap;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DecrementWrapStencilOp:\n            stencilOperation = GPUStencilOperation.DecrementWrap;\n            break;\n          default:\n            console.error('THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation);\n        }\n        return stencilOperation;\n      }\n    }, {\n      key: \"_getBlendOperation\",\n      value: function _getBlendOperation(blendEquation) {\n        var blendOperation;\n        switch (blendEquation) {\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AddEquation:\n            blendOperation = GPUBlendOperation.Add;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SubtractEquation:\n            blendOperation = GPUBlendOperation.Subtract;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReverseSubtractEquation:\n            blendOperation = GPUBlendOperation.ReverseSubtract;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MinEquation:\n            blendOperation = GPUBlendOperation.Min;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MaxEquation:\n            blendOperation = GPUBlendOperation.Max;\n            break;\n          default:\n            console.error('THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation);\n        }\n        return blendOperation;\n      }\n    }, {\n      key: \"_getPrimitiveState\",\n      value: function _getPrimitiveState(object, geometry, material) {\n        var descriptor = {};\n        var utils = this.backend.utils;\n        descriptor.topology = utils.getPrimitiveTopology(object, material);\n        if (geometry.index !== null && object.isLine === true && object.isLineSegments !== true) {\n          descriptor.stripIndexFormat = geometry.index.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n        }\n        switch (material.side) {\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FrontSide:\n            descriptor.frontFace = GPUFrontFace.CCW;\n            descriptor.cullMode = GPUCullMode.Back;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").BackSide:\n            descriptor.frontFace = GPUFrontFace.CCW;\n            descriptor.cullMode = GPUCullMode.Front;\n            break;\n          case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DoubleSide:\n            descriptor.frontFace = GPUFrontFace.CCW;\n            descriptor.cullMode = GPUCullMode.None;\n            break;\n          default:\n            console.error('THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side);\n            break;\n        }\n        return descriptor;\n      }\n    }, {\n      key: \"_getColorWriteMask\",\n      value: function _getColorWriteMask(material) {\n        return material.colorWrite === true ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n      }\n    }, {\n      key: \"_getDepthCompare\",\n      value: function _getDepthCompare(material) {\n        var depthCompare;\n        if (material.depthTest === false) {\n          depthCompare = GPUCompareFunction.Always;\n        } else {\n          var depthFunc = material.depthFunc;\n          switch (depthFunc) {\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeverDepth:\n              depthCompare = GPUCompareFunction.Never;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AlwaysDepth:\n              depthCompare = GPUCompareFunction.Always;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessDepth:\n              depthCompare = GPUCompareFunction.Less;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LessEqualDepth:\n              depthCompare = GPUCompareFunction.LessEqual;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").EqualDepth:\n              depthCompare = GPUCompareFunction.Equal;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterEqualDepth:\n              depthCompare = GPUCompareFunction.GreaterEqual;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").GreaterDepth:\n              depthCompare = GPUCompareFunction.Greater;\n              break;\n            case _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NotEqualDepth:\n              depthCompare = GPUCompareFunction.NotEqual;\n              break;\n            default:\n              console.error('THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc);\n          }\n        }\n        return depthCompare;\n      }\n    }]);\n  }();\n  /*// debugger tools\n  import 'https://greggman.github.io/webgpu-avoid-redundant-state-setting/webgpu-check-redundant-state-setting.js';\n  //*/\n  /**\n   * A backend implementation targeting WebGPU.\n   *\n   * @private\n   * @augments Backend\n   */\n  var WebGPUBackend = /*#__PURE__*/function (_Backend2) {\n    /**\n     * Constructs a new WebGPU backend.\n     *\n     * @param {Object} parameters - The configuration parameter.\n     * @param {Boolean} [parameters.logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n     * @param {Boolean} [parameters.alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n     * @param {Boolean} [parameters.depth=true] - Whether the default framebuffer should have a depth buffer or not.\n     * @param {Boolean} [parameters.stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n     * @param {Boolean} [parameters.antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n     * @param {Number} [parameters.samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.\n     * @param {Boolean} [parameters.forceWebGL=false] - If set to `true`, the renderer uses it WebGL 2 backend no matter if WebGPU is supported or not.\n     * @param {Boolean} [parameters.trackTimestamp=false] - Whether to track timestamps with a Timestamp Query API or not.\n     * @param {String?} [parameters.powerPreference=null] - The power preference.\n     * @param {String?} [parameters.requiredLimits={}] - Specifies the limits that are required by the device request.\n     * The request will fail if the adapter cannot provide these limits.\n     */\n    function WebGPUBackend() {\n      var _this214;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, WebGPUBackend);\n      _this214 = _callSuper(this, WebGPUBackend, [parameters]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this214.isWebGPUBackend = true;\n\n      // some parameters require default values other than \"undefined\"\n      _this214.parameters.alpha = parameters.alpha === undefined ? true : parameters.alpha;\n      _this214.parameters.requiredLimits = parameters.requiredLimits === undefined ? {} : parameters.requiredLimits;\n\n      /**\n       * Whether to track timestamps with a Timestamp Query API or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this214.trackTimestamp = parameters.trackTimestamp === true;\n\n      /**\n       * A reference to the device.\n       *\n       * @type {GPUDevice?}\n       * @default null\n       */\n      _this214.device = null;\n\n      /**\n       * A reference to the context.\n       *\n       * @type {GPUCanvasContext?}\n       * @default null\n       */\n      _this214.context = null;\n\n      /**\n       * A reference to the color attachment of the default framebuffer.\n       *\n       * @type {GPUTexture?}\n       * @default null\n       */\n      _this214.colorBuffer = null;\n\n      /**\n       * A reference to the default render pass descriptor.\n       *\n       * @type {Object?}\n       * @default null\n       */\n      _this214.defaultRenderPassdescriptor = null;\n\n      /**\n       * A reference to a backend module holding common utility functions.\n       *\n       * @type {WebGPUUtils}\n       */\n      _this214.utils = new WebGPUUtils(_this214);\n\n      /**\n       * A reference to a backend module holding shader attribute-related\n       * utility functions.\n       *\n       * @type {WebGPUAttributeUtils}\n       */\n      _this214.attributeUtils = new WebGPUAttributeUtils(_this214);\n\n      /**\n       * A reference to a backend module holding shader binding-related\n       * utility functions.\n       *\n       * @type {WebGPUBindingUtils}\n       */\n      _this214.bindingUtils = new WebGPUBindingUtils(_this214);\n\n      /**\n       * A reference to a backend module holding shader pipeline-related\n       * utility functions.\n       *\n       * @type {WebGPUPipelineUtils}\n       */\n      _this214.pipelineUtils = new WebGPUPipelineUtils(_this214);\n\n      /**\n       * A reference to a backend module holding shader texture-related\n       * utility functions.\n       *\n       * @type {WebGPUTextureUtils}\n       */\n      _this214.textureUtils = new WebGPUTextureUtils(_this214);\n\n      /**\n       * A map that manages the resolve buffers for occlusion queries.\n       *\n       * @type {Map<Number,GPUBuffer>}\n       */\n      _this214.occludedResolveCache = new Map();\n      return _this214;\n    }\n\n    /**\n     * Initializes the backend so it is ready for usage.\n     *\n     * @async\n     * @param {Renderer} renderer - The renderer.\n     * @return {Promise} A Promise that resolves when the backend has been initialized.\n     */\n    (0, _inherits2.default)(WebGPUBackend, _Backend2);\n    return (0, _createClass2.default)(WebGPUBackend, [{\n      key: \"init\",\n      value: (function () {\n        var _init4 = (0, _asyncToGenerator2.default)(function* (renderer) {\n          yield _superPropGet(WebGPUBackend, \"init\", this, 3)([renderer]);\n\n          //\n\n          var parameters = this.parameters;\n\n          // create the device if it is not passed with parameters\n\n          var device;\n          if (parameters.device === undefined) {\n            var adapterOptions = {\n              powerPreference: parameters.powerPreference\n            };\n            var adapter = typeof navigator !== 'undefined' ? yield navigator.gpu.requestAdapter(adapterOptions) : null;\n            if (adapter === null) {\n              throw new Error('WebGPUBackend: Unable to create WebGPU adapter.');\n            }\n\n            // feature support\n\n            var features = Object.values(GPUFeatureName);\n            var supportedFeatures = [];\n            for (var name of features) {\n              if (adapter.features.has(name)) {\n                supportedFeatures.push(name);\n              }\n            }\n            var deviceDescriptor = {\n              requiredFeatures: supportedFeatures,\n              requiredLimits: parameters.requiredLimits\n            };\n            try {\n              device = yield adapter.requestDevice(deviceDescriptor);\n            } catch (e) {\n              console.error(e);\n            }\n          } else {\n            device = parameters.device;\n          }\n          device.lost.then(function (info) {\n            var deviceLossInfo = {\n              api: 'WebGPU',\n              message: info.message || 'Unknown reason',\n              reason: info.reason || null,\n              originalEvent: info\n            };\n            renderer.onDeviceLost(deviceLossInfo);\n          });\n          var context = parameters.context !== undefined ? parameters.context : renderer.domElement.getContext('webgpu');\n          this.device = device;\n          this.context = context;\n          var alphaMode = parameters.alpha ? 'premultiplied' : 'opaque';\n          this.trackTimestamp = this.trackTimestamp && this.hasFeature(GPUFeatureName.TimestampQuery);\n          this.context.configure({\n            device: this.device,\n            format: this.utils.getPreferredCanvasFormat(),\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            alphaMode: alphaMode\n          });\n          this.updateSize();\n        });\n        function init(_x44) {\n          return _init4.apply(this, arguments);\n        }\n        return init;\n      }()\n      /**\n       * The coordinate system of the backend.\n       *\n       * @type {Number}\n       * @readonly\n       */\n      )\n    }, {\n      key: \"coordinateSystem\",\n      get: function get() {\n        return _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").WebGPUCoordinateSystem;\n      }\n\n      /**\n       * Transfers buffer data from a storage buffer attribute\n       * from the GPU to the CPU in context of compute shaders.\n       *\n       * @async\n       * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n       * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n       */\n    }, {\n      key: \"getArrayBufferAsync\",\n      value: (function () {\n        var _getArrayBufferAsync5 = (0, _asyncToGenerator2.default)(function* (attribute) {\n          return yield this.attributeUtils.getArrayBufferAsync(attribute);\n        });\n        function getArrayBufferAsync(_x45) {\n          return _getArrayBufferAsync5.apply(this, arguments);\n        }\n        return getArrayBufferAsync;\n      }()\n      /**\n       * Returns the backend's rendering context.\n       *\n       * @return {GPUCanvasContext} The rendering context.\n       */\n      )\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.context;\n      }\n\n      /**\n       * Returns the default render pass descriptor.\n       *\n       * In WebGPU, the default framebuffer must be configured\n       * like custom fraemebuffers so the backend needs a render\n       * pass descriptor even when rendering directly to screen.\n       *\n       * @private\n       * @return {Object} The render pass descriptor.\n       */\n    }, {\n      key: \"_getDefaultRenderPassDescriptor\",\n      value: function _getDefaultRenderPassDescriptor() {\n        var descriptor = this.defaultRenderPassdescriptor;\n        if (descriptor === null) {\n          var renderer = this.renderer;\n          descriptor = {\n            colorAttachments: [{\n              view: null\n            }]\n          };\n          if (this.renderer.depth === true || this.renderer.stencil === true) {\n            descriptor.depthStencilAttachment = {\n              view: this.textureUtils.getDepthBuffer(renderer.depth, renderer.stencil).createView()\n            };\n          }\n          var _colorAttachment = descriptor.colorAttachments[0];\n          if (this.renderer.samples > 0) {\n            _colorAttachment.view = this.colorBuffer.createView();\n          } else {\n            _colorAttachment.resolveTarget = undefined;\n          }\n          this.defaultRenderPassdescriptor = descriptor;\n        }\n        var colorAttachment = descriptor.colorAttachments[0];\n        if (this.renderer.samples > 0) {\n          colorAttachment.resolveTarget = this.context.getCurrentTexture().createView();\n        } else {\n          colorAttachment.view = this.context.getCurrentTexture().createView();\n        }\n        return descriptor;\n      }\n\n      /**\n       * Returns the render pass descriptor for the given render context.\n       *\n       * @private\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Object} colorAttachmentsConfig - Configuration object for the color attachments.\n       * @return {Object} The render pass descriptor.\n       */\n    }, {\n      key: \"_getRenderPassDescriptor\",\n      value: function _getRenderPassDescriptor(renderContext) {\n        var _this215 = this;\n        var colorAttachmentsConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var renderTarget = renderContext.renderTarget;\n        var renderTargetData = this.get(renderTarget);\n        var descriptors = renderTargetData.descriptors;\n        if (descriptors === undefined || renderTargetData.width !== renderTarget.width || renderTargetData.height !== renderTarget.height || renderTargetData.dimensions !== renderTarget.dimensions || renderTargetData.activeMipmapLevel !== renderTarget.activeMipmapLevel || renderTargetData.activeCubeFace !== renderContext.activeCubeFace || renderTargetData.samples !== renderTarget.samples || renderTargetData.loadOp !== colorAttachmentsConfig.loadOp) {\n          descriptors = {};\n          renderTargetData.descriptors = descriptors;\n\n          // dispose\n\n          var _onDispose4 = function onDispose() {\n            renderTarget.removeEventListener('dispose', _onDispose4);\n            _this215.delete(renderTarget);\n          };\n          renderTarget.addEventListener('dispose', _onDispose4);\n        }\n        var cacheKey = renderContext.getCacheKey();\n        var descriptor = descriptors[cacheKey];\n        if (descriptor === undefined) {\n          var textures = renderContext.textures;\n          var colorAttachments = [];\n          var sliceIndex;\n          for (var i = 0; i < textures.length; i++) {\n            var textureData = this.get(textures[i]);\n            var viewDescriptor = {\n              label: `colorAttachment_${i}`,\n              baseMipLevel: renderContext.activeMipmapLevel,\n              mipLevelCount: 1,\n              baseArrayLayer: renderContext.activeCubeFace,\n              arrayLayerCount: 1,\n              dimension: GPUTextureViewDimension.TwoD\n            };\n            if (renderTarget.isRenderTarget3D) {\n              sliceIndex = renderContext.activeCubeFace;\n              viewDescriptor.baseArrayLayer = 0;\n              viewDescriptor.dimension = GPUTextureViewDimension.ThreeD;\n              viewDescriptor.depthOrArrayLayers = textures[i].image.depth;\n            } else if (renderTarget.isRenderTargetArray) {\n              viewDescriptor.dimension = GPUTextureViewDimension.TwoDArray;\n              viewDescriptor.depthOrArrayLayers = textures[i].image.depth;\n            }\n            var textureView = textureData.texture.createView(viewDescriptor);\n            var view = void 0,\n              resolveTarget = void 0;\n            if (textureData.msaaTexture !== undefined) {\n              view = textureData.msaaTexture.createView();\n              resolveTarget = textureView;\n            } else {\n              view = textureView;\n              resolveTarget = undefined;\n            }\n            colorAttachments.push(Object.assign({\n              view: view,\n              depthSlice: sliceIndex,\n              resolveTarget: resolveTarget,\n              loadOp: GPULoadOp.Load,\n              storeOp: GPUStoreOp.Store\n            }, colorAttachmentsConfig));\n          }\n          descriptor = {\n            colorAttachments: colorAttachments\n          };\n          if (renderContext.depth) {\n            var depthTextureData = this.get(renderContext.depthTexture);\n            var depthStencilAttachment = {\n              view: depthTextureData.texture.createView()\n            };\n            descriptor.depthStencilAttachment = depthStencilAttachment;\n          }\n          descriptors[cacheKey] = descriptor;\n          renderTargetData.width = renderTarget.width;\n          renderTargetData.height = renderTarget.height;\n          renderTargetData.samples = renderTarget.samples;\n          renderTargetData.activeMipmapLevel = renderContext.activeMipmapLevel;\n          renderTargetData.activeCubeFace = renderContext.activeCubeFace;\n          renderTargetData.dimensions = renderTarget.dimensions;\n          renderTargetData.depthSlice = sliceIndex;\n          renderTargetData.loadOp = colorAttachments[0].loadOp;\n        }\n        return descriptor;\n      }\n\n      /**\n       * This method is executed at the beginning of a render call and prepares\n       * the WebGPU state for upcoming render calls\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"beginRender\",\n      value: function beginRender(renderContext) {\n        var renderContextData = this.get(renderContext);\n        var device = this.device;\n        var occlusionQueryCount = renderContext.occlusionQueryCount;\n        var occlusionQuerySet;\n        if (occlusionQueryCount > 0) {\n          if (renderContextData.currentOcclusionQuerySet) renderContextData.currentOcclusionQuerySet.destroy();\n          if (renderContextData.currentOcclusionQueryBuffer) renderContextData.currentOcclusionQueryBuffer.destroy();\n\n          // Get a reference to the array of objects with queries. The renderContextData property\n          // can be changed by another render pass before the buffer.mapAsyc() completes.\n          renderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;\n          renderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;\n          renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n          //\n\n          occlusionQuerySet = device.createQuerySet({\n            type: 'occlusion',\n            count: occlusionQueryCount,\n            label: `occlusionQuerySet_${renderContext.id}`\n          });\n          renderContextData.occlusionQuerySet = occlusionQuerySet;\n          renderContextData.occlusionQueryIndex = 0;\n          renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);\n          renderContextData.lastOcclusionObject = null;\n        }\n        var descriptor;\n        if (renderContext.textures === null) {\n          descriptor = this._getDefaultRenderPassDescriptor();\n        } else {\n          descriptor = this._getRenderPassDescriptor(renderContext, {\n            loadOp: GPULoadOp.Load\n          });\n        }\n        this.initTimestampQuery(renderContext, descriptor);\n        descriptor.occlusionQuerySet = occlusionQuerySet;\n        var depthStencilAttachment = descriptor.depthStencilAttachment;\n        if (renderContext.textures !== null) {\n          var colorAttachments = descriptor.colorAttachments;\n          for (var i = 0; i < colorAttachments.length; i++) {\n            var colorAttachment = colorAttachments[i];\n            if (renderContext.clearColor) {\n              colorAttachment.clearValue = i === 0 ? renderContext.clearColorValue : {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 1\n              };\n              colorAttachment.loadOp = GPULoadOp.Clear;\n              colorAttachment.storeOp = GPUStoreOp.Store;\n            } else {\n              colorAttachment.loadOp = GPULoadOp.Load;\n              colorAttachment.storeOp = GPUStoreOp.Store;\n            }\n          }\n        } else {\n          var _colorAttachment2 = descriptor.colorAttachments[0];\n          if (renderContext.clearColor) {\n            _colorAttachment2.clearValue = renderContext.clearColorValue;\n            _colorAttachment2.loadOp = GPULoadOp.Clear;\n            _colorAttachment2.storeOp = GPUStoreOp.Store;\n          } else {\n            _colorAttachment2.loadOp = GPULoadOp.Load;\n            _colorAttachment2.storeOp = GPUStoreOp.Store;\n          }\n        }\n\n        //\n\n        if (renderContext.depth) {\n          if (renderContext.clearDepth) {\n            depthStencilAttachment.depthClearValue = renderContext.clearDepthValue;\n            depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n            depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n          } else {\n            depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n            depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n          }\n        }\n        if (renderContext.stencil) {\n          if (renderContext.clearStencil) {\n            depthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;\n            depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n            depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n          } else {\n            depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n            depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n          }\n        }\n\n        //\n\n        var encoder = device.createCommandEncoder({\n          label: 'renderContext_' + renderContext.id\n        });\n        var currentPass = encoder.beginRenderPass(descriptor);\n\n        //\n\n        renderContextData.descriptor = descriptor;\n        renderContextData.encoder = encoder;\n        renderContextData.currentPass = currentPass;\n        renderContextData.currentSets = {\n          attributes: {},\n          bindingGroups: [],\n          pipeline: null,\n          index: null\n        };\n        renderContextData.renderBundles = [];\n\n        //\n\n        if (renderContext.viewport) {\n          this.updateViewport(renderContext);\n        }\n        if (renderContext.scissor) {\n          var _renderContext$scisso3 = renderContext.scissorValue,\n            x = _renderContext$scisso3.x,\n            y = _renderContext$scisso3.y,\n            width = _renderContext$scisso3.width,\n            height = _renderContext$scisso3.height;\n          currentPass.setScissorRect(x, y, width, height);\n        }\n      }\n\n      /**\n       * This method is executed at the end of a render call and finalizes work\n       * after draw calls.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"finishRender\",\n      value: function finishRender(renderContext) {\n        var renderContextData = this.get(renderContext);\n        var occlusionQueryCount = renderContext.occlusionQueryCount;\n        if (renderContextData.renderBundles.length > 0) {\n          renderContextData.currentPass.executeBundles(renderContextData.renderBundles);\n        }\n        if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {\n          renderContextData.currentPass.endOcclusionQuery();\n        }\n        renderContextData.currentPass.end();\n        if (occlusionQueryCount > 0) {\n          var bufferSize = occlusionQueryCount * 8; // 8 byte entries for query results\n\n          //\n\n          var queryResolveBuffer = this.occludedResolveCache.get(bufferSize);\n          if (queryResolveBuffer === undefined) {\n            queryResolveBuffer = this.device.createBuffer({\n              size: bufferSize,\n              usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n            });\n            this.occludedResolveCache.set(bufferSize, queryResolveBuffer);\n          }\n\n          //\n\n          var readBuffer = this.device.createBuffer({\n            size: bufferSize,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n          });\n\n          // two buffers required here - WebGPU doesn't allow usage of QUERY_RESOLVE & MAP_READ to be combined\n          renderContextData.encoder.resolveQuerySet(renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0);\n          renderContextData.encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer, 0, bufferSize);\n          renderContextData.occlusionQueryBuffer = readBuffer;\n\n          //\n\n          this.resolveOccludedAsync(renderContext);\n        }\n        this.prepareTimestampBuffer(renderContext, renderContextData.encoder);\n        this.device.queue.submit([renderContextData.encoder.finish()]);\n\n        //\n\n        if (renderContext.textures !== null) {\n          var textures = renderContext.textures;\n          for (var i = 0; i < textures.length; i++) {\n            var _texture15 = textures[i];\n            if (_texture15.generateMipmaps === true) {\n              this.textureUtils.generateMipmaps(_texture15);\n            }\n          }\n        }\n      }\n\n      /**\n       * Returns `true` if the given 3D object is fully occluded by other\n       * 3D objects in the scene.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Object3D} object - The 3D object to test.\n       * @return {Boolean} Whether the 3D object is fully occluded or not.\n       */\n    }, {\n      key: \"isOccluded\",\n      value: function isOccluded(renderContext, object) {\n        var renderContextData = this.get(renderContext);\n        return renderContextData.occluded && renderContextData.occluded.has(object);\n      }\n\n      /**\n       * This method processes the result of occlusion queries and writes it\n       * into render context data.\n       *\n       * @async\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"resolveOccludedAsync\",\n      value: (function () {\n        var _resolveOccludedAsync = (0, _asyncToGenerator2.default)(function* (renderContext) {\n          var renderContextData = this.get(renderContext);\n\n          // handle occlusion query results\n\n          var currentOcclusionQueryBuffer = renderContextData.currentOcclusionQueryBuffer,\n            currentOcclusionQueryObjects = renderContextData.currentOcclusionQueryObjects;\n          if (currentOcclusionQueryBuffer && currentOcclusionQueryObjects) {\n            var occluded = new WeakSet();\n            renderContextData.currentOcclusionQueryObjects = null;\n            renderContextData.currentOcclusionQueryBuffer = null;\n            yield currentOcclusionQueryBuffer.mapAsync(GPUMapMode.READ);\n            var _buffer7 = currentOcclusionQueryBuffer.getMappedRange();\n            var results = new BigUint64Array(_buffer7);\n            for (var i = 0; i < currentOcclusionQueryObjects.length; i++) {\n              if (results[i] !== BigInt(0)) {\n                occluded.add(currentOcclusionQueryObjects[i]);\n              }\n            }\n            currentOcclusionQueryBuffer.destroy();\n            renderContextData.occluded = occluded;\n          }\n        });\n        function resolveOccludedAsync(_x46) {\n          return _resolveOccludedAsync.apply(this, arguments);\n        }\n        return resolveOccludedAsync;\n      }()\n      /**\n       * Updates the viewport with the values from the given render context.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n      )\n    }, {\n      key: \"updateViewport\",\n      value: function updateViewport(renderContext) {\n        var _this$get5 = this.get(renderContext),\n          currentPass = _this$get5.currentPass;\n        var _renderContext$viewpo2 = renderContext.viewportValue,\n          x = _renderContext$viewpo2.x,\n          y = _renderContext$viewpo2.y,\n          width = _renderContext$viewpo2.width,\n          height = _renderContext$viewpo2.height,\n          minDepth = _renderContext$viewpo2.minDepth,\n          maxDepth = _renderContext$viewpo2.maxDepth;\n        currentPass.setViewport(x, y, width, height, minDepth, maxDepth);\n      }\n\n      /**\n       * Performs a clear operation.\n       *\n       * @param {Boolean} color - Whether the color buffer should be cleared or not.\n       * @param {Boolean} depth - Whether the depth buffer should be cleared or not.\n       * @param {Boolean} stencil - Whether the stencil buffer should be cleared or not.\n       * @param {RenderContext?} [renderTargetContext=null] - The render context of the current set render target.\n       */\n    }, {\n      key: \"clear\",\n      value: function clear(color, depth, stencil) {\n        var renderTargetContext = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var device = this.device;\n        var renderer = this.renderer;\n        var colorAttachments = [];\n        var depthStencilAttachment;\n        var clearValue;\n        var supportsDepth;\n        var supportsStencil;\n        if (color) {\n          var clearColor = this.getClearColor();\n          if (this.renderer.alpha === true) {\n            // premultiply alpha\n\n            var a = clearColor.a;\n            clearValue = {\n              r: clearColor.r * a,\n              g: clearColor.g * a,\n              b: clearColor.b * a,\n              a: a\n            };\n          } else {\n            clearValue = {\n              r: clearColor.r,\n              g: clearColor.g,\n              b: clearColor.b,\n              a: clearColor.a\n            };\n          }\n        }\n        if (renderTargetContext === null) {\n          supportsDepth = renderer.depth;\n          supportsStencil = renderer.stencil;\n          var descriptor = this._getDefaultRenderPassDescriptor();\n          if (color) {\n            colorAttachments = descriptor.colorAttachments;\n            var colorAttachment = colorAttachments[0];\n            colorAttachment.clearValue = clearValue;\n            colorAttachment.loadOp = GPULoadOp.Clear;\n            colorAttachment.storeOp = GPUStoreOp.Store;\n          }\n          if (supportsDepth || supportsStencil) {\n            depthStencilAttachment = descriptor.depthStencilAttachment;\n          }\n        } else {\n          supportsDepth = renderTargetContext.depth;\n          supportsStencil = renderTargetContext.stencil;\n          if (color) {\n            var _descriptor = this._getRenderPassDescriptor(renderTargetContext, {\n              loadOp: GPULoadOp.Clear\n            });\n            colorAttachments = _descriptor.colorAttachments;\n          }\n          if (supportsDepth || supportsStencil) {\n            var depthTextureData = this.get(renderTargetContext.depthTexture);\n            depthStencilAttachment = {\n              view: depthTextureData.texture.createView()\n            };\n          }\n        }\n\n        //\n\n        if (supportsDepth) {\n          if (depth) {\n            depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n            depthStencilAttachment.depthClearValue = renderer.getClearDepth();\n            depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n          } else {\n            depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n            depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n          }\n        }\n\n        //\n\n        if (supportsStencil) {\n          if (stencil) {\n            depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n            depthStencilAttachment.stencilClearValue = renderer.getClearStencil();\n            depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n          } else {\n            depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n            depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n          }\n        }\n\n        //\n\n        var encoder = device.createCommandEncoder({});\n        var currentPass = encoder.beginRenderPass({\n          colorAttachments: colorAttachments,\n          depthStencilAttachment: depthStencilAttachment\n        });\n        currentPass.end();\n        device.queue.submit([encoder.finish()]);\n      }\n\n      // compute\n\n      /**\n       * This method is executed at the beginning of a compute call and\n       * prepares the state for upcoming compute tasks.\n       *\n       * @param {Node|Array<Node>} computeGroup - The compute node(s).\n       */\n    }, {\n      key: \"beginCompute\",\n      value: function beginCompute(computeGroup) {\n        var groupGPU = this.get(computeGroup);\n        var descriptor = {};\n        this.initTimestampQuery(computeGroup, descriptor);\n        groupGPU.cmdEncoderGPU = this.device.createCommandEncoder();\n        groupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass(descriptor);\n      }\n\n      /**\n       * Executes a compute command for the given compute node.\n       *\n       * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.\n       * @param {Node} computeNode - The compute node.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       * @param {ComputePipeline} pipeline - The compute pipeline.\n       */\n    }, {\n      key: \"compute\",\n      value: function compute(computeGroup, computeNode, bindings, pipeline) {\n        var _this$get6 = this.get(computeGroup),\n          passEncoderGPU = _this$get6.passEncoderGPU;\n\n        // pipeline\n\n        var pipelineGPU = this.get(pipeline).pipeline;\n        passEncoderGPU.setPipeline(pipelineGPU);\n\n        // bind groups\n\n        for (var i = 0, l = bindings.length; i < l; i++) {\n          var bindGroup = bindings[i];\n          var bindingsData = this.get(bindGroup);\n          passEncoderGPU.setBindGroup(i, bindingsData.group);\n        }\n        var maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;\n        var computeNodeData = this.get(computeNode);\n        if (computeNodeData.dispatchSize === undefined) computeNodeData.dispatchSize = {\n          x: 0,\n          y: 1,\n          z: 1\n        };\n        var dispatchSize = computeNodeData.dispatchSize;\n        if (computeNode.dispatchCount > maxComputeWorkgroupsPerDimension) {\n          dispatchSize.x = Math.min(computeNode.dispatchCount, maxComputeWorkgroupsPerDimension);\n          dispatchSize.y = Math.ceil(computeNode.dispatchCount / maxComputeWorkgroupsPerDimension);\n        } else {\n          dispatchSize.x = computeNode.dispatchCount;\n        }\n        passEncoderGPU.dispatchWorkgroups(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n      }\n\n      /**\n       * This method is executed at the end of a compute call and\n       * finalizes work after compute tasks.\n       *\n       * @param {Node|Array<Node>} computeGroup - The compute node(s).\n       */\n    }, {\n      key: \"finishCompute\",\n      value: function finishCompute(computeGroup) {\n        var groupData = this.get(computeGroup);\n        groupData.passEncoderGPU.end();\n        this.prepareTimestampBuffer(computeGroup, groupData.cmdEncoderGPU);\n        this.device.queue.submit([groupData.cmdEncoderGPU.finish()]);\n      }\n\n      /**\n       * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n       * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when synchronization has been finished.\n       */\n    }, {\n      key: \"waitForGPU\",\n      value: (function () {\n        var _waitForGPU4 = (0, _asyncToGenerator2.default)(function* () {\n          yield this.device.queue.onSubmittedWorkDone();\n        });\n        function waitForGPU() {\n          return _waitForGPU4.apply(this, arguments);\n        }\n        return waitForGPU;\n      }() // render object\n      /**\n       * Executes a draw command for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object to draw.\n       * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.\n       */\n      )\n    }, {\n      key: \"draw\",\n      value: function draw(renderObject, info) {\n        var object = renderObject.object,\n          context = renderObject.context,\n          pipeline = renderObject.pipeline;\n        var bindings = renderObject.getBindings();\n        var renderContextData = this.get(context);\n        var pipelineGPU = this.get(pipeline).pipeline;\n        var currentSets = renderContextData.currentSets;\n        var passEncoderGPU = renderContextData.currentPass;\n        var drawParams = renderObject.getDrawParameters();\n        if (drawParams === null) return;\n\n        // pipeline\n\n        if (currentSets.pipeline !== pipelineGPU) {\n          passEncoderGPU.setPipeline(pipelineGPU);\n          currentSets.pipeline = pipelineGPU;\n        }\n\n        // bind groups\n\n        var currentBindingGroups = currentSets.bindingGroups;\n        for (var i = 0, l = bindings.length; i < l; i++) {\n          var bindGroup = bindings[i];\n          var bindingsData = this.get(bindGroup);\n          if (currentBindingGroups[bindGroup.index] !== bindGroup.id) {\n            passEncoderGPU.setBindGroup(bindGroup.index, bindingsData.group);\n            currentBindingGroups[bindGroup.index] = bindGroup.id;\n          }\n        }\n\n        // attributes\n\n        var index = renderObject.getIndex();\n        var hasIndex = index !== null;\n\n        // index\n\n        if (hasIndex === true) {\n          if (currentSets.index !== index) {\n            var _buffer8 = this.get(index).buffer;\n            var indexFormat = index.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n            passEncoderGPU.setIndexBuffer(_buffer8, indexFormat);\n            currentSets.index = index;\n          }\n        }\n\n        // vertex buffers\n\n        var vertexBuffers = renderObject.getVertexBuffers();\n        for (var _i23 = 0, _l4 = vertexBuffers.length; _i23 < _l4; _i23++) {\n          var vertexBuffer = vertexBuffers[_i23];\n          if (currentSets.attributes[_i23] !== vertexBuffer) {\n            var _buffer9 = this.get(vertexBuffer).buffer;\n            passEncoderGPU.setVertexBuffer(_i23, _buffer9);\n            currentSets.attributes[_i23] = vertexBuffer;\n          }\n        }\n\n        // occlusion queries - handle multiple consecutive draw calls for an object\n\n        if (renderContextData.occlusionQuerySet !== undefined) {\n          var lastObject = renderContextData.lastOcclusionObject;\n          if (lastObject !== object) {\n            if (lastObject !== null && lastObject.occlusionTest === true) {\n              passEncoderGPU.endOcclusionQuery();\n              renderContextData.occlusionQueryIndex++;\n            }\n            if (object.occlusionTest === true) {\n              passEncoderGPU.beginOcclusionQuery(renderContextData.occlusionQueryIndex);\n              renderContextData.occlusionQueryObjects[renderContextData.occlusionQueryIndex] = object;\n            }\n            renderContextData.lastOcclusionObject = object;\n          }\n        }\n\n        // draw\n\n        if (object.isBatchedMesh === true) {\n          var starts = object._multiDrawStarts;\n          var counts = object._multiDrawCounts;\n          var drawCount = object._multiDrawCount;\n          var drawInstances = object._multiDrawInstances;\n          for (var _i24 = 0; _i24 < drawCount; _i24++) {\n            var count = drawInstances ? drawInstances[_i24] : 1;\n            var firstInstance = count > 1 ? 0 : _i24;\n            if (hasIndex === true) {\n              passEncoderGPU.drawIndexed(counts[_i24], count, starts[_i24] / index.array.BYTES_PER_ELEMENT, 0, firstInstance);\n            } else {\n              passEncoderGPU.draw(counts[_i24], count, starts[_i24], firstInstance);\n            }\n          }\n        } else if (hasIndex === true) {\n          var indexCount = drawParams.vertexCount,\n            instanceCount = drawParams.instanceCount,\n            firstIndex = drawParams.firstVertex;\n          var indirect = renderObject.getIndirect();\n          if (indirect !== null) {\n            var _buffer10 = this.get(indirect).buffer;\n            passEncoderGPU.drawIndexedIndirect(_buffer10, 0);\n          } else {\n            passEncoderGPU.drawIndexed(indexCount, instanceCount, firstIndex, 0, 0);\n          }\n          info.update(object, indexCount, instanceCount);\n        } else {\n          var vertexCount = drawParams.vertexCount,\n            _instanceCount = drawParams.instanceCount,\n            firstVertex = drawParams.firstVertex;\n          var _indirect = renderObject.getIndirect();\n          if (_indirect !== null) {\n            var _buffer11 = this.get(_indirect).buffer;\n            passEncoderGPU.drawIndirect(_buffer11, 0);\n          } else {\n            passEncoderGPU.draw(vertexCount, _instanceCount, firstVertex, 0);\n          }\n          info.update(object, vertexCount, _instanceCount);\n        }\n      }\n\n      // cache key\n\n      /**\n       * Returns `true` if the render pipeline requires an update.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {Boolean} Whether the render pipeline requires an update or not.\n       */\n    }, {\n      key: \"needsRenderUpdate\",\n      value: function needsRenderUpdate(renderObject) {\n        var data = this.get(renderObject);\n        var object = renderObject.object,\n          material = renderObject.material;\n        var utils = this.utils;\n        var sampleCount = utils.getSampleCountRenderContext(renderObject.context);\n        var colorSpace = utils.getCurrentColorSpace(renderObject.context);\n        var colorFormat = utils.getCurrentColorFormat(renderObject.context);\n        var depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);\n        var primitiveTopology = utils.getPrimitiveTopology(object, material);\n        var needsUpdate = false;\n        if (data.material !== material || data.materialVersion !== material.version || data.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha || data.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation || data.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha || data.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc || data.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc || data.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass || data.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask || data.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage || data.sampleCount !== sampleCount || data.colorSpace !== colorSpace || data.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat || data.primitiveTopology !== primitiveTopology || data.clippingContextCacheKey !== renderObject.clippingContextCacheKey) {\n          data.material = material;\n          data.materialVersion = material.version;\n          data.transparent = material.transparent;\n          data.blending = material.blending;\n          data.premultipliedAlpha = material.premultipliedAlpha;\n          data.blendSrc = material.blendSrc;\n          data.blendDst = material.blendDst;\n          data.blendEquation = material.blendEquation;\n          data.blendSrcAlpha = material.blendSrcAlpha;\n          data.blendDstAlpha = material.blendDstAlpha;\n          data.blendEquationAlpha = material.blendEquationAlpha;\n          data.colorWrite = material.colorWrite;\n          data.depthWrite = material.depthWrite;\n          data.depthTest = material.depthTest;\n          data.depthFunc = material.depthFunc;\n          data.stencilWrite = material.stencilWrite;\n          data.stencilFunc = material.stencilFunc;\n          data.stencilFail = material.stencilFail;\n          data.stencilZFail = material.stencilZFail;\n          data.stencilZPass = material.stencilZPass;\n          data.stencilFuncMask = material.stencilFuncMask;\n          data.stencilWriteMask = material.stencilWriteMask;\n          data.side = material.side;\n          data.alphaToCoverage = material.alphaToCoverage;\n          data.sampleCount = sampleCount;\n          data.colorSpace = colorSpace;\n          data.colorFormat = colorFormat;\n          data.depthStencilFormat = depthStencilFormat;\n          data.primitiveTopology = primitiveTopology;\n          data.clippingContextCacheKey = renderObject.clippingContextCacheKey;\n          needsUpdate = true;\n        }\n        return needsUpdate;\n      }\n\n      /**\n       * Returns a cache key that is used to identify render pipelines.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @return {String} The cache key.\n       */\n    }, {\n      key: \"getRenderCacheKey\",\n      value: function getRenderCacheKey(renderObject) {\n        var object = renderObject.object,\n          material = renderObject.material;\n        var utils = this.utils;\n        var renderContext = renderObject.context;\n        return [material.transparent, material.blending, material.premultipliedAlpha, material.blendSrc, material.blendDst, material.blendEquation, material.blendSrcAlpha, material.blendDstAlpha, material.blendEquationAlpha, material.colorWrite, material.depthWrite, material.depthTest, material.depthFunc, material.stencilWrite, material.stencilFunc, material.stencilFail, material.stencilZFail, material.stencilZPass, material.stencilFuncMask, material.stencilWriteMask, material.side, utils.getSampleCountRenderContext(renderContext), utils.getCurrentColorSpace(renderContext), utils.getCurrentColorFormat(renderContext), utils.getCurrentDepthStencilFormat(renderContext), utils.getPrimitiveTopology(object, material), renderObject.getGeometryCacheKey(), renderObject.clippingContextCacheKey].join();\n      }\n\n      // textures\n\n      /**\n       * Creates a sampler for the given texture.\n       *\n       * @param {Texture} texture - The texture to create the sampler for.\n       */\n    }, {\n      key: \"createSampler\",\n      value: function createSampler(texture) {\n        this.textureUtils.createSampler(texture);\n      }\n\n      /**\n       * Destroys the sampler for the given texture.\n       *\n       * @param {Texture} texture - The texture to destroy the sampler for.\n       */\n    }, {\n      key: \"destroySampler\",\n      value: function destroySampler(texture) {\n        this.textureUtils.destroySampler(texture);\n      }\n\n      /**\n       * Creates a default texture for the given texture that can be used\n       * as a placeholder until the actual texture is ready for usage.\n       *\n       * @param {Texture} texture - The texture to create a default texture for.\n       */\n    }, {\n      key: \"createDefaultTexture\",\n      value: function createDefaultTexture(texture) {\n        this.textureUtils.createDefaultTexture(texture);\n      }\n\n      /**\n       * Defines a texture on the GPU for the given texture object.\n       *\n       * @param {Texture} texture - The texture.\n       * @param {Object} [options={}] - Optional configuration parameter.\n       */\n    }, {\n      key: \"createTexture\",\n      value: function createTexture(texture, options) {\n        this.textureUtils.createTexture(texture, options);\n      }\n\n      /**\n       * Uploads the updated texture data to the GPU.\n       *\n       * @param {Texture} texture - The texture.\n       * @param {Object} [options={}] - Optional configuration parameter.\n       */\n    }, {\n      key: \"updateTexture\",\n      value: function updateTexture(texture, options) {\n        this.textureUtils.updateTexture(texture, options);\n      }\n\n      /**\n       * Generates mipmaps for the given texture\n       *\n       * @param {Texture} texture - The texture.\n       */\n    }, {\n      key: \"generateMipmaps\",\n      value: function generateMipmaps(texture) {\n        this.textureUtils.generateMipmaps(texture);\n      }\n\n      /**\n       * Destroys the GPU data for the given texture object.\n       *\n       * @param {Texture} texture - The texture.\n       */\n    }, {\n      key: \"destroyTexture\",\n      value: function destroyTexture(texture) {\n        this.textureUtils.destroyTexture(texture);\n      }\n\n      /**\n       * Returns texture data as a typed array.\n       *\n       * @param {Texture} texture - The texture to copy.\n       * @param {Number} x - The x coordinate of the copy origin.\n       * @param {Number} y - The y coordinate of the copy origin.\n       * @param {Number} width - The width of the copy.\n       * @param {Number} height - The height of the copy.\n       * @param {Number} faceIndex - The face index.\n       * @return {TypedArray} The texture data as a typed array.\n       */\n    }, {\n      key: \"copyTextureToBuffer\",\n      value: function copyTextureToBuffer(texture, x, y, width, height, faceIndex) {\n        return this.textureUtils.copyTextureToBuffer(texture, x, y, width, height, faceIndex);\n      }\n\n      /**\n       * Inits a time stamp query for the given render context.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Object} descriptor - The query descriptor.\n       */\n    }, {\n      key: \"initTimestampQuery\",\n      value: function initTimestampQuery(renderContext, descriptor) {\n        if (!this.trackTimestamp) return;\n        var renderContextData = this.get(renderContext);\n        if (!renderContextData.timeStampQuerySet) {\n          var type = renderContext.isComputeNode ? 'compute' : 'render';\n          var timeStampQuerySet = this.device.createQuerySet({\n            type: 'timestamp',\n            count: 2,\n            label: `timestamp_${type}_${renderContext.id}`\n          });\n          var timestampWrites = {\n            querySet: timeStampQuerySet,\n            beginningOfPassWriteIndex: 0,\n            // Write timestamp in index 0 when pass begins.\n            endOfPassWriteIndex: 1 // Write timestamp in index 1 when pass ends.\n          };\n          Object.assign(descriptor, {\n            timestampWrites: timestampWrites\n          });\n          renderContextData.timeStampQuerySet = timeStampQuerySet;\n        }\n      }\n\n      /**\n       * Prepares the timestamp buffer.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       * @param {GPUCommandEncoder} encoder - The command encoder.\n       */\n    }, {\n      key: \"prepareTimestampBuffer\",\n      value: function prepareTimestampBuffer(renderContext, encoder) {\n        if (!this.trackTimestamp) return;\n        var renderContextData = this.get(renderContext);\n        var size = 2 * BigInt64Array.BYTES_PER_ELEMENT;\n        if (renderContextData.currentTimestampQueryBuffers === undefined) {\n          renderContextData.currentTimestampQueryBuffers = {\n            resolveBuffer: this.device.createBuffer({\n              label: 'timestamp resolve buffer',\n              size: size,\n              usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n            }),\n            resultBuffer: this.device.createBuffer({\n              label: 'timestamp result buffer',\n              size: size,\n              usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n            })\n          };\n        }\n        var _renderContextData$cu = renderContextData.currentTimestampQueryBuffers,\n          resolveBuffer = _renderContextData$cu.resolveBuffer,\n          resultBuffer = _renderContextData$cu.resultBuffer;\n        encoder.resolveQuerySet(renderContextData.timeStampQuerySet, 0, 2, resolveBuffer, 0);\n        if (resultBuffer.mapState === 'unmapped') {\n          encoder.copyBufferToBuffer(resolveBuffer, 0, resultBuffer, 0, size);\n        }\n      }\n\n      /**\n       * Resolves the time stamp for the given render context and type.\n       *\n       * @async\n       * @param {RenderContext} renderContext - The render context.\n       * @param {String} type - The render context.\n       * @return {Promise} A Promise that resolves when the time stamp has been computed.\n       */\n    }, {\n      key: \"resolveTimestampAsync\",\n      value: (function () {\n        var _resolveTimestampAsync3 = (0, _asyncToGenerator2.default)(function* (renderContext) {\n          var _this216 = this;\n          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'render';\n          if (!this.trackTimestamp) return;\n          var renderContextData = this.get(renderContext);\n          if (renderContextData.currentTimestampQueryBuffers === undefined) return;\n          var resultBuffer = renderContextData.currentTimestampQueryBuffers.resultBuffer;\n          if (resultBuffer.mapState === 'unmapped') {\n            resultBuffer.mapAsync(GPUMapMode.READ).then(function () {\n              var times = new BigUint64Array(resultBuffer.getMappedRange());\n              var duration = Number(times[1] - times[0]) / 1000000;\n              _this216.renderer.info.updateTimestamp(type, duration);\n              resultBuffer.unmap();\n            });\n          }\n        });\n        function resolveTimestampAsync(_x47) {\n          return _resolveTimestampAsync3.apply(this, arguments);\n        }\n        return resolveTimestampAsync;\n      }() // node builder\n      /**\n       * Returns a node builder for the given render object.\n       *\n       * @param {RenderObject} object - The render object.\n       * @param {Renderer} renderer - The renderer.\n       * @return {WGSLNodeBuilder} The node builder.\n       */\n      )\n    }, {\n      key: \"createNodeBuilder\",\n      value: function createNodeBuilder(object, renderer) {\n        return new WGSLNodeBuilder(object, renderer);\n      }\n\n      // program\n\n      /**\n       * Creates a shader program from the given programmable stage.\n       *\n       * @param {ProgrammableStage} program - The programmable stage.\n       */\n    }, {\n      key: \"createProgram\",\n      value: function createProgram(program) {\n        var programGPU = this.get(program);\n        programGPU.module = {\n          module: this.device.createShaderModule({\n            code: program.code,\n            label: program.stage + (program.name !== '' ? `_${program.name}` : '')\n          }),\n          entryPoint: 'main'\n        };\n      }\n\n      /**\n       * Destroys the shader program of the given programmable stage.\n       *\n       * @param {ProgrammableStage} program - The programmable stage.\n       */\n    }, {\n      key: \"destroyProgram\",\n      value: function destroyProgram(program) {\n        this.delete(program);\n      }\n\n      // pipelines\n\n      /**\n       * Creates a render pipeline for the given render object.\n       *\n       * @param {RenderObject} renderObject - The render object.\n       * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n       */\n    }, {\n      key: \"createRenderPipeline\",\n      value: function createRenderPipeline(renderObject, promises) {\n        this.pipelineUtils.createRenderPipeline(renderObject, promises);\n      }\n\n      /**\n       * Creates a compute pipeline for the given compute node.\n       *\n       * @param {ComputePipeline} computePipeline - The compute pipeline.\n       * @param {Array<BindGroup>} bindings - The bindings.\n       */\n    }, {\n      key: \"createComputePipeline\",\n      value: function createComputePipeline(computePipeline, bindings) {\n        this.pipelineUtils.createComputePipeline(computePipeline, bindings);\n      }\n\n      /**\n       * Prepares the state for encoding render bundles.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       */\n    }, {\n      key: \"beginBundle\",\n      value: function beginBundle(renderContext) {\n        var renderContextData = this.get(renderContext);\n        renderContextData._currentPass = renderContextData.currentPass;\n        renderContextData._currentSets = renderContextData.currentSets;\n        renderContextData.currentSets = {\n          attributes: {},\n          bindingGroups: [],\n          pipeline: null,\n          index: null\n        };\n        renderContextData.currentPass = this.pipelineUtils.createBundleEncoder(renderContext);\n      }\n\n      /**\n       * After processing render bundles this method finalizes related work.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       * @param {RenderBundle} bundle - The render bundle.\n       */\n    }, {\n      key: \"finishBundle\",\n      value: function finishBundle(renderContext, bundle) {\n        var renderContextData = this.get(renderContext);\n        var bundleEncoder = renderContextData.currentPass;\n        var bundleGPU = bundleEncoder.finish();\n        this.get(bundle).bundleGPU = bundleGPU;\n\n        // restore render pass state\n\n        renderContextData.currentSets = renderContextData._currentSets;\n        renderContextData.currentPass = renderContextData._currentPass;\n      }\n\n      /**\n       * Adds a render bundle to the render context data.\n       *\n       * @param {RenderContext} renderContext - The render context.\n       * @param {RenderBundle} bundle - The render bundle to add.\n       */\n    }, {\n      key: \"addBundle\",\n      value: function addBundle(renderContext, bundle) {\n        var renderContextData = this.get(renderContext);\n        renderContextData.renderBundles.push(this.get(bundle).bundleGPU);\n      }\n\n      // bindings\n\n      /**\n       * Creates bindings from the given bind group definition.\n       *\n       * @param {BindGroup} bindGroup - The bind group.\n       * @param {Array<BindGroup>} bindings - Array of bind groups.\n       * @param {Number} cacheIndex - The cache index.\n       * @param {Number} version - The version.\n       */\n    }, {\n      key: \"createBindings\",\n      value: function createBindings(bindGroup, bindings, cacheIndex, version) {\n        this.bindingUtils.createBindings(bindGroup, bindings, cacheIndex, version);\n      }\n\n      /**\n       * Updates the given bind group definition.\n       *\n       * @param {BindGroup} bindGroup - The bind group.\n       * @param {Array<BindGroup>} bindings - Array of bind groups.\n       * @param {Number} cacheIndex - The cache index.\n       * @param {Number} version - The version.\n       */\n    }, {\n      key: \"updateBindings\",\n      value: function updateBindings(bindGroup, bindings, cacheIndex, version) {\n        this.bindingUtils.createBindings(bindGroup, bindings, cacheIndex, version);\n      }\n\n      /**\n       * Updates a buffer binding.\n       *\n       *  @param {Buffer} binding - The buffer binding to update.\n       */\n    }, {\n      key: \"updateBinding\",\n      value: function updateBinding(binding) {\n        this.bindingUtils.updateBinding(binding);\n      }\n\n      // attributes\n\n      /**\n       * Creates the buffer of an indexed shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The indexed buffer attribute.\n       */\n    }, {\n      key: \"createIndexAttribute\",\n      value: function createIndexAttribute(attribute) {\n        this.attributeUtils.createAttribute(attribute, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);\n      }\n\n      /**\n       * Creates the buffer of a shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createAttribute\",\n      value: function createAttribute(attribute) {\n        this.attributeUtils.createAttribute(attribute, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);\n      }\n\n      /**\n       * Creates the buffer of a storage attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createStorageAttribute\",\n      value: function createStorageAttribute(attribute) {\n        this.attributeUtils.createAttribute(attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);\n      }\n\n      /**\n       * Creates the buffer of an indirect storage attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute.\n       */\n    }, {\n      key: \"createIndirectStorageAttribute\",\n      value: function createIndirectStorageAttribute(attribute) {\n        this.attributeUtils.createAttribute(attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);\n      }\n\n      /**\n       * Updates the buffer of a shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute to update.\n       */\n    }, {\n      key: \"updateAttribute\",\n      value: function updateAttribute(attribute) {\n        this.attributeUtils.updateAttribute(attribute);\n      }\n\n      /**\n       * Destroys the buffer of a shader attribute.\n       *\n       * @param {BufferAttribute} attribute - The buffer attribute to destroy.\n       */\n    }, {\n      key: \"destroyAttribute\",\n      value: function destroyAttribute(attribute) {\n        this.attributeUtils.destroyAttribute(attribute);\n      }\n\n      // canvas\n\n      /**\n       * Triggers an update of the default render pass descriptor.\n       */\n    }, {\n      key: \"updateSize\",\n      value: function updateSize() {\n        this.colorBuffer = this.textureUtils.getColorBuffer();\n        this.defaultRenderPassdescriptor = null;\n      }\n\n      // utils public\n\n      /**\n       * Returns the maximum anisotropy texture filtering value.\n       *\n       * @return {Number} The maximum anisotropy texture filtering value.\n       */\n    }, {\n      key: \"getMaxAnisotropy\",\n      value: function getMaxAnisotropy() {\n        return 16;\n      }\n\n      /**\n       * Checks if the given feature is supported  by the backend.\n       *\n       * @param {String} name - The feature's name.\n       * @return {Boolean} Whether the feature is supported or not.\n       */\n    }, {\n      key: \"hasFeature\",\n      value: function hasFeature(name) {\n        return this.device.features.has(name);\n      }\n\n      /**\n       * Copies data of the given source texture to the given destination texture.\n       *\n       * @param {Texture} srcTexture - The source texture.\n       * @param {Texture} dstTexture - The destination texture.\n       * @param {Vector4?} [srcRegion=null] - The region of the source texture to copy.\n       * @param {(Vector2|Vector3)?} [dstPosition=null] - The destination position of the copy.\n       * @param {Number} [level=0] - The mip level to copy.\n       */\n    }, {\n      key: \"copyTextureToTexture\",\n      value: function copyTextureToTexture(srcTexture, dstTexture) {\n        var srcRegion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var dstPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        var dstX = 0;\n        var dstY = 0;\n        var dstLayer = 0;\n        var srcX = 0;\n        var srcY = 0;\n        var srcLayer = 0;\n        var srcWidth = srcTexture.image.width;\n        var srcHeight = srcTexture.image.height;\n        if (srcRegion !== null) {\n          srcX = srcRegion.x;\n          srcY = srcRegion.y;\n          srcLayer = srcRegion.z || 0;\n          srcWidth = srcRegion.width;\n          srcHeight = srcRegion.height;\n        }\n        if (dstPosition !== null) {\n          dstX = dstPosition.x;\n          dstY = dstPosition.y;\n          dstLayer = dstPosition.z || 0;\n        }\n        var encoder = this.device.createCommandEncoder({\n          label: 'copyTextureToTexture_' + srcTexture.id + '_' + dstTexture.id\n        });\n        var sourceGPU = this.get(srcTexture).texture;\n        var destinationGPU = this.get(dstTexture).texture;\n        encoder.copyTextureToTexture({\n          texture: sourceGPU,\n          mipLevel: level,\n          origin: {\n            x: srcX,\n            y: srcY,\n            z: srcLayer\n          }\n        }, {\n          texture: destinationGPU,\n          mipLevel: level,\n          origin: {\n            x: dstX,\n            y: dstY,\n            z: dstLayer\n          }\n        }, [srcWidth, srcHeight, 1]);\n        this.device.queue.submit([encoder.finish()]);\n      }\n\n      /**\n       * Copies the current bound framebuffer to the given texture.\n       *\n       * @param {Texture} texture - The destination texture.\n       * @param {RenderContext} renderContext - The render context.\n       * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n       */\n    }, {\n      key: \"copyFramebufferToTexture\",\n      value: function copyFramebufferToTexture(texture, renderContext, rectangle) {\n        var renderContextData = this.get(renderContext);\n        var sourceGPU = null;\n        if (renderContext.renderTarget) {\n          if (texture.isDepthTexture) {\n            sourceGPU = this.get(renderContext.depthTexture).texture;\n          } else {\n            sourceGPU = this.get(renderContext.textures[0]).texture;\n          }\n        } else {\n          if (texture.isDepthTexture) {\n            sourceGPU = this.textureUtils.getDepthBuffer(renderContext.depth, renderContext.stencil);\n          } else {\n            sourceGPU = this.context.getCurrentTexture();\n          }\n        }\n        var destinationGPU = this.get(texture).texture;\n        if (sourceGPU.format !== destinationGPU.format) {\n          console.error('WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.', sourceGPU.format, destinationGPU.format);\n          return;\n        }\n        var encoder;\n        if (renderContextData.currentPass) {\n          renderContextData.currentPass.end();\n          encoder = renderContextData.encoder;\n        } else {\n          encoder = this.device.createCommandEncoder({\n            label: 'copyFramebufferToTexture_' + texture.id\n          });\n        }\n        encoder.copyTextureToTexture({\n          texture: sourceGPU,\n          origin: [rectangle.x, rectangle.y, 0]\n        }, {\n          texture: destinationGPU\n        }, [rectangle.z, rectangle.w]);\n        if (texture.generateMipmaps) this.textureUtils.generateMipmaps(texture);\n        if (renderContextData.currentPass) {\n          var descriptor = renderContextData.descriptor;\n          for (var i = 0; i < descriptor.colorAttachments.length; i++) {\n            descriptor.colorAttachments[i].loadOp = GPULoadOp.Load;\n          }\n          if (renderContext.depth) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n          if (renderContext.stencil) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n          renderContextData.currentPass = encoder.beginRenderPass(descriptor);\n          renderContextData.currentSets = {\n            attributes: {},\n            bindingGroups: [],\n            pipeline: null,\n            index: null\n          };\n          if (renderContext.viewport) {\n            this.updateViewport(renderContext);\n          }\n          if (renderContext.scissor) {\n            var _renderContext$scisso4 = renderContext.scissorValue,\n              x = _renderContext$scisso4.x,\n              y = _renderContext$scisso4.y,\n              width = _renderContext$scisso4.width,\n              height = _renderContext$scisso4.height;\n            renderContextData.currentPass.setScissorRect(x, y, width, height);\n          }\n        } else {\n          this.device.queue.submit([encoder.finish()]);\n        }\n      }\n    }]);\n  }(Backend);\n  var IESSpotLight = exports.IESSpotLight = /*#__PURE__*/function (_SpotLight) {\n    function IESSpotLight(color, intensity, distance, angle, penumbra, decay) {\n      var _this217;\n      (0, _classCallCheck2.default)(this, IESSpotLight);\n      _this217 = _callSuper(this, IESSpotLight, [color, intensity, distance, angle, penumbra, decay]);\n      _this217.iesMap = null;\n      return _this217;\n    }\n    (0, _inherits2.default)(IESSpotLight, _SpotLight);\n    return (0, _createClass2.default)(IESSpotLight, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(IESSpotLight, \"copy\", this, 3)([source, recursive]);\n        this.iesMap = source.iesMap;\n        return this;\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SpotLight);\n  /**\n   * This version of a node library represents the standard version\n   * used in {@link WebGPURenderer}. It maps lights, tone mapping\n   * techniques and materials to node-based implementations.\n   *\n   * @private\n   * @augments NodeLibrary\n   */\n  var StandardNodeLibrary = /*#__PURE__*/function (_NodeLibrary) {\n    /**\n     * Constructs a new standard node library.\n     */\n    function StandardNodeLibrary() {\n      var _this218;\n      (0, _classCallCheck2.default)(this, StandardNodeLibrary);\n      _this218 = _callSuper(this, StandardNodeLibrary);\n      _this218.addMaterial(MeshPhongNodeMaterial, 'MeshPhongMaterial');\n      _this218.addMaterial(MeshStandardNodeMaterial, 'MeshStandardMaterial');\n      _this218.addMaterial(MeshPhysicalNodeMaterial, 'MeshPhysicalMaterial');\n      _this218.addMaterial(MeshToonNodeMaterial, 'MeshToonMaterial');\n      _this218.addMaterial(MeshBasicNodeMaterial, 'MeshBasicMaterial');\n      _this218.addMaterial(MeshLambertNodeMaterial, 'MeshLambertMaterial');\n      _this218.addMaterial(MeshNormalNodeMaterial, 'MeshNormalMaterial');\n      _this218.addMaterial(MeshMatcapNodeMaterial, 'MeshMatcapMaterial');\n      _this218.addMaterial(LineBasicNodeMaterial, 'LineBasicMaterial');\n      _this218.addMaterial(LineDashedNodeMaterial, 'LineDashedMaterial');\n      _this218.addMaterial(PointsNodeMaterial, 'PointsMaterial');\n      _this218.addMaterial(SpriteNodeMaterial, 'SpriteMaterial');\n      _this218.addMaterial(ShadowNodeMaterial, 'ShadowMaterial');\n      _this218.addLight(PointLightNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").PointLight);\n      _this218.addLight(DirectionalLightNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").DirectionalLight);\n      _this218.addLight(RectAreaLightNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").RectAreaLight);\n      _this218.addLight(SpotLightNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").SpotLight);\n      _this218.addLight(AmbientLightNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AmbientLight);\n      _this218.addLight(HemisphereLightNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").HemisphereLight);\n      _this218.addLight(LightProbeNode, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LightProbe);\n      _this218.addLight(IESSpotLightNode, IESSpotLight);\n      _this218.addToneMapping(linearToneMapping, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearToneMapping);\n      _this218.addToneMapping(reinhardToneMapping, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ReinhardToneMapping);\n      _this218.addToneMapping(cineonToneMapping, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").CineonToneMapping);\n      _this218.addToneMapping(acesFilmicToneMapping, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ACESFilmicToneMapping);\n      _this218.addToneMapping(agxToneMapping, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").AgXToneMapping);\n      _this218.addToneMapping(neutralToneMapping, _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NeutralToneMapping);\n      return _this218;\n    }\n    (0, _inherits2.default)(StandardNodeLibrary, _NodeLibrary);\n    return (0, _createClass2.default)(StandardNodeLibrary);\n  }(NodeLibrary);\n  /*\n  const debugHandler = {\n  \n  \tget: function ( target, name ) {\n  \n  \t\t// Add |update\n  \t\tif ( /^(create|destroy)/.test( name ) ) console.log( 'WebGPUBackend.' + name );\n  \n  \t\treturn target[ name ];\n  \n  \t}\n  \n  };\n  */\n  /**\n   * This renderer is the new alternative of `WebGLRenderer`. `WebGPURenderer` has the ability\n   * to target different backends. By default, the renderer tries to use a WebGPU backend if the\n   * browser supports WebGPU. If not, `WebGPURenderer` falls backs to a WebGL 2 backend.\n   *\n   * @augments module:Renderer~Renderer\n   */\n  var WebGPURenderer = exports.WebGPURenderer = /*#__PURE__*/function (_Renderer) {\n    /**\n     * Constructs a new WebGPU renderer.\n     *\n     * @param {Object} parameters - The configuration parameter.\n     * @param {Boolean} [parameters.logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n     * @param {Boolean} [parameters.alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n     * @param {Boolean} [parameters.depth=true] - Whether the default framebuffer should have a depth buffer or not.\n     * @param {Boolean} [parameters.stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n     * @param {Boolean} [parameters.antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n     * @param {Number} [parameters.samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0\n     * to overwrite the default.\n     * @param {Boolean} [parameters.forceWebGL=false] - If set to `true`, the renderer uses it\n     * WebGL 2 backend no matter if WebGPU is supported or not.\n     */\n    function WebGPURenderer() {\n      var _this219;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, WebGPURenderer);\n      var BackendClass;\n      if (parameters.forceWebGL) {\n        BackendClass = WebGLBackend;\n      } else {\n        BackendClass = WebGPUBackend;\n        parameters.getFallback = function () {\n          console.warn('THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.');\n          return new WebGLBackend(parameters);\n        };\n      }\n      var backend = new BackendClass(parameters);\n\n      //super( new Proxy( backend, debugHandler ) );\n      _this219 = _callSuper(this, WebGPURenderer, [backend, parameters]);\n\n      /**\n       * The generic default value is overwritten with the\n       * standard node library for type mapping.\n       *\n       * @type {StandardNodeLibrary}\n       */\n      _this219.library = new StandardNodeLibrary();\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this219.isWebGPURenderer = true;\n      return _this219;\n    }\n    (0, _inherits2.default)(WebGPURenderer, _Renderer);\n    return (0, _createClass2.default)(WebGPURenderer);\n  }(Renderer);\n  /**\n   * A specialized group which eanbles applications access to the\n   * Render Bundle API of WebGPU. The group with all its descendant nodes\n   * are considered as one render bundle and processed as such by\n   * the renderer.\n   *\n   * This module is only fully supported by `WebGPURenderer` with a WebGPU backend.\n   * With a WebGL backend, the group can technically be rendered but without\n   * any performance improvements.\n   *\n   * @augments Group\n   */\n  var BundleGroup = exports.BundleGroup = /*#__PURE__*/function (_Group) {\n    /**\n     * Constructs a new bundle group.\n     */\n    function BundleGroup() {\n      var _this220;\n      (0, _classCallCheck2.default)(this, BundleGroup);\n      _this220 = _callSuper(this, BundleGroup);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this220.isBundleGroup = true;\n\n      /**\n       * This property is only relevant for detecting types\n       * during serialization/deserialization. It should always\n       * match the class name.\n       *\n       * @type {String}\n       * @readonly\n       * @default 'BundleGroup'\n       */\n      _this220.type = 'BundleGroup';\n\n      /**\n       * Whether the bundle is static or not. When set to `true`, the structure\n       * is assumed to be static and does not change. E.g. no new objects are\n       * added to the group\n       *\n       * If a change is required, an update can still be forced by setting the\n       * `needsUpdate` flag to `true`.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this220.static = true;\n\n      /**\n       * The bundle group's version.\n       *\n       * @type {Number}\n       * @readonly\n       * @default 0\n       */\n      _this220.version = 0;\n      return _this220;\n    }\n\n    /**\n     * Set this property to `true` when the bundle group has changed.\n     *\n     * @type {Boolean}\n     * @default false\n     * @param {Boolean} value\n     */\n    (0, _inherits2.default)(BundleGroup, _Group);\n    return (0, _createClass2.default)(BundleGroup, [{\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) this.version++;\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Group);\n  var _material = /*@__PURE__*/new NodeMaterial();\n  var _quadMesh = /*@__PURE__*/new QuadMesh(_material);\n\n  /**\n   * This module is responsible to manage the post processing setups in apps.\n   * You usually create a single instance of this class and use it to define\n   * the output of your post processing effect chain.\n   * ```js\n   * const postProcessing = new PostProcessing( renderer );\n   *\n   * const scenePass = pass( scene, camera );\n   *\n   * postProcessing.outputNode = scenePass;\n   * ```\n   */\n  var PostProcessing = exports.PostProcessing = /*#__PURE__*/function () {\n    /**\n     * Constructs a new post processing management module.\n     *\n     * @param {Renderer} renderer - A reference to the renderer.\n     * @param {Node<vec4>} outputNode - An optional output node.\n     */\n    function PostProcessing(renderer) {\n      var outputNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vec4(0, 0, 1, 1);\n      (0, _classCallCheck2.default)(this, PostProcessing);\n      /**\n       * A reference to the renderer.\n       *\n       * @type {Renderer}\n       */\n      this.renderer = renderer;\n\n      /**\n       * A node which defines the final output of the post\n       * processing. This is usually the last node in a chain\n       * of effect nodes.\n       *\n       * @type {Node<vec4>}\n       */\n      this.outputNode = outputNode;\n\n      /**\n       * Whether the default output tone mapping and color\n       * space transformation should be enabled or not.\n       *\n       * It is enabled by default by it must be disabled when\n       * effects must be executed after tone mapping and color\n       * space conversion. A typical example is FXAA which\n       * requires sRGB input.\n       *\n       * When set to `false`, the app must control the output\n       * transformation with `RenderOutputNode`.\n       *\n       * ```js\n       * const outputPass = renderOutput( scenePass );\n       * ```\n       *\n       * @type {Boolean}\n       */\n      this.outputColorTransform = true;\n\n      /**\n       * Must be set to `true` when the output node changes.\n       *\n       * @type {Node<vec4>}\n       */\n      this.needsUpdate = true;\n      _material.name = 'PostProcessing';\n    }\n\n    /**\n     * When `PostProcessing` is used to apply post processing effects,\n     * the application must use this version of `render()` inside\n     * its animation loop (not the one from the renderer).\n     */\n    return (0, _createClass2.default)(PostProcessing, [{\n      key: \"render\",\n      value: function render() {\n        this._update();\n        var renderer = this.renderer;\n        var toneMapping = renderer.toneMapping;\n        var outputColorSpace = renderer.outputColorSpace;\n        renderer.toneMapping = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping;\n        renderer.outputColorSpace = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace;\n\n        //\n\n        _quadMesh.render(renderer);\n\n        //\n\n        renderer.toneMapping = toneMapping;\n        renderer.outputColorSpace = outputColorSpace;\n      }\n\n      /**\n       * Updates the state of the module.\n       *\n       * @private\n       */\n    }, {\n      key: \"_update\",\n      value: function _update() {\n        if (this.needsUpdate === true) {\n          var renderer = this.renderer;\n          var _toneMapping = renderer.toneMapping;\n          var outputColorSpace = renderer.outputColorSpace;\n          _quadMesh.material.fragmentNode = this.outputColorTransform === true ? renderOutput(this.outputNode, _toneMapping, outputColorSpace) : this.outputNode.context({\n            toneMapping: _toneMapping,\n            outputColorSpace: outputColorSpace\n          });\n          _quadMesh.material.needsUpdate = true;\n          this.needsUpdate = false;\n        }\n      }\n\n      /**\n       * When `PostProcessing` is used to apply post processing effects,\n       * the application must use this version of `renderAsync()` inside\n       * its animation loop (not the one from the renderer).\n       *\n       * @async\n       * @return {Promise} A Promise that resolves when the render has been finished.\n       */\n    }, {\n      key: \"renderAsync\",\n      value: (function () {\n        var _renderAsync3 = (0, _asyncToGenerator2.default)(function* () {\n          this._update();\n          var renderer = this.renderer;\n          var toneMapping = renderer.toneMapping;\n          var outputColorSpace = renderer.outputColorSpace;\n          renderer.toneMapping = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").NoToneMapping;\n          renderer.outputColorSpace = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearSRGBColorSpace;\n\n          //\n\n          yield _quadMesh.renderAsync(renderer);\n\n          //\n\n          renderer.toneMapping = toneMapping;\n          renderer.outputColorSpace = outputColorSpace;\n        });\n        function renderAsync() {\n          return _renderAsync3.apply(this, arguments);\n        }\n        return renderAsync;\n      }())\n    }]);\n  }();\n  /**\n   * This special type of texture is intended for compute shaders.\n   * It can be used to compute the data of a texture with a compute shader.\n   *\n   * Note: This type of texture can only be used with `WebGPURenderer`\n   * and a WebGPU backend.\n   *\n   * @augments Texture\n   */\n  var StorageTexture = exports.StorageTexture = /*#__PURE__*/function (_Texture) {\n    /**\n     * Constructs a new storage texture.\n     *\n     * @param {Number} [width=1] - The storage texture's width.\n     * @param {Number} [height=1] - The storage texture's height.\n     */\n    function StorageTexture() {\n      var _this221;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      (0, _classCallCheck2.default)(this, StorageTexture);\n      _this221 = _callSuper(this, StorageTexture);\n\n      /**\n       * The image object which just represents the texture's dimension.\n       *\n       * @type {{width: Number, height:Number}}\n       */\n      _this221.image = {\n        width: width,\n        height: height\n      };\n\n      /**\n       * The default `magFilter` for storage textures is `THREE.LinearFilter`.\n       *\n       * @type {Number}\n       */\n      _this221.magFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter;\n\n      /**\n       * The default `minFilter` for storage textures is `THREE.LinearFilter`.\n       *\n       * @type {Number}\n       */\n      _this221.minFilter = _$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").LinearFilter;\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this221.isStorageTexture = true;\n      return _this221;\n    }\n    (0, _inherits2.default)(StorageTexture, _Texture);\n    return (0, _createClass2.default)(StorageTexture);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Texture);\n  /**\n   * This special type of buffer attribute is intended for compute shaders.\n   * It can be used to encode draw parameters for indirect draw calls.\n   *\n   * Note: This type of buffer attribute can only be used with `WebGPURenderer`\n   * and a WebGPU backend.\n   *\n   * @augments StorageBufferAttribute\n   */\n  var IndirectStorageBufferAttribute = exports.IndirectStorageBufferAttribute = /*#__PURE__*/function (_StorageBufferAttribu) {\n    /**\n     * Constructs a new storage buffer attribute.\n     *\n     * @param {Number|Uint32Array} count - The item count. It is also valid to pass a `Uint32Array` as an argument.\n     * The subsequent parameter is then obsolete.\n     * @param {Number} itemSize - The item size.\n     */\n    function IndirectStorageBufferAttribute(count, itemSize) {\n      var _this222;\n      (0, _classCallCheck2.default)(this, IndirectStorageBufferAttribute);\n      _this222 = _callSuper(this, IndirectStorageBufferAttribute, [count, itemSize, Uint32Array]);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this222.isIndirectStorageBufferAttribute = true;\n      return _this222;\n    }\n    (0, _inherits2.default)(IndirectStorageBufferAttribute, _StorageBufferAttribu);\n    return (0, _createClass2.default)(IndirectStorageBufferAttribute);\n  }(StorageBufferAttribute);\n  /**\n   * A loader for loading node objects in the three.js JSON Object/Scene format.\n   *\n   * @augments Loader\n   */\n  var NodeLoader = exports.NodeLoader = /*#__PURE__*/function (_Loader) {\n    /**\n     * Constructs a new node loader.\n     *\n     * @param {LoadingManager?} manager - A reference to a loading manager.\n     */\n    function NodeLoader(manager) {\n      var _this223;\n      (0, _classCallCheck2.default)(this, NodeLoader);\n      _this223 = _callSuper(this, NodeLoader, [manager]);\n\n      /**\n       * Represents a dictionary of textures.\n       *\n       * @type {Object<String,Texture>}\n       */\n      _this223.textures = {};\n\n      /**\n       * Represents a dictionary of node types.\n       *\n       * @type {Object<String,Node.constructor>}\n       */\n      _this223.nodes = {};\n      return _this223;\n    }\n\n    /**\n     * Loads the node definitions from the given URL.\n     *\n     * @param {String} url - The path/URL of the file to be loaded.\n     * @param {Function} onLoad - Will be called when load completes.\n     * @param {Function} onProgress - Will be called while load progresses.\n     * @param {Function} onError - Will be called when errors are thrown during the loading process.\n     */\n    (0, _inherits2.default)(NodeLoader, _Loader);\n    return (0, _createClass2.default)(NodeLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var _this224 = this;\n        var loader = new (_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").FileLoader)(this.manager);\n        loader.setPath(this.path);\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(url, function (text) {\n          try {\n            onLoad(_this224.parse(JSON.parse(text)));\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            _this224.manager.itemError(url);\n          }\n        }, onProgress, onError);\n      }\n\n      /**\n       * Parse the node dependencies for the loaded node.\n       *\n       * @param {Object} json - The JSON definition\n       * @return {Object<String,Node>} A dictionary with node dependencies.\n       */\n    }, {\n      key: \"parseNodes\",\n      value: function parseNodes(json) {\n        var nodes = {};\n        if (json !== undefined) {\n          for (var nodeJSON of json) {\n            var uuid = nodeJSON.uuid,\n              type = nodeJSON.type;\n            nodes[uuid] = this.createNodeFromType(type);\n            nodes[uuid].uuid = uuid;\n          }\n          var meta = {\n            nodes: nodes,\n            textures: this.textures\n          };\n          for (var _nodeJSON of json) {\n            _nodeJSON.meta = meta;\n            var node = nodes[_nodeJSON.uuid];\n            node.deserialize(_nodeJSON);\n            delete _nodeJSON.meta;\n          }\n        }\n        return nodes;\n      }\n\n      /**\n       * Parses the node from the given JSON.\n       *\n       * @param {Object} json - The JSON definition\n       * @return {Node} The parsed node.\n       */\n    }, {\n      key: \"parse\",\n      value: function parse(json) {\n        var node = this.createNodeFromType(json.type);\n        node.uuid = json.uuid;\n        var nodes = this.parseNodes(json.nodes);\n        var meta = {\n          nodes: nodes,\n          textures: this.textures\n        };\n        json.meta = meta;\n        node.deserialize(json);\n        delete json.meta;\n        return node;\n      }\n\n      /**\n       * Defines the dictionary of textures.\n       *\n       * @param {Object<String,Texture>} value - The texture library defines as `<uuid,texture>`.\n       * @return {NodeLoader} A reference to this loader.\n       */\n    }, {\n      key: \"setTextures\",\n      value: function setTextures(value) {\n        this.textures = value;\n        return this;\n      }\n\n      /**\n       * Defines the dictionary of node types.\n       *\n       * @param {Object<String,Node.constructor>} value - The node library defined as `<classname,class>`.\n       * @return {NodeLoader} A reference to this loader.\n       */\n    }, {\n      key: \"setNodes\",\n      value: function setNodes(value) {\n        this.nodes = value;\n        return this;\n      }\n\n      /**\n       * Creates a node object from the given type.\n       *\n       * @param {String} type - The node type.\n       * @return {Node} The created node instance.\n       */\n    }, {\n      key: \"createNodeFromType\",\n      value: function createNodeFromType(type) {\n        if (this.nodes[type] === undefined) {\n          console.error('THREE.NodeLoader: Node type not found:', type);\n          return float();\n        }\n        return nodeObject(new this.nodes[type]());\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Loader);\n  /**\n   * A special type of material loader for loading node materials.\n   *\n   * @augments MaterialLoader\n   */\n  var NodeMaterialLoader = exports.NodeMaterialLoader = /*#__PURE__*/function (_MaterialLoader) {\n    /**\n     * Constructs a new node material loader.\n     *\n     * @param {LoadingManager?} manager - A reference to a loading manager.\n     */\n    function NodeMaterialLoader(manager) {\n      var _this225;\n      (0, _classCallCheck2.default)(this, NodeMaterialLoader);\n      _this225 = _callSuper(this, NodeMaterialLoader, [manager]);\n\n      /**\n       * Represents a dictionary of node types.\n       *\n       * @type {Object<String,Node.constructor>}\n       */\n      _this225.nodes = {};\n\n      /**\n       * Represents a dictionary of node material types.\n       *\n       * @type {Object<String,NodeMaterial.constructor>}\n       */\n      _this225.nodeMaterials = {};\n      return _this225;\n    }\n\n    /**\n     * Parses the node material from the given JSON.\n     *\n     * @param {Object} json - The JSON definition\n     * @return {NodeMaterial}. The parsed material.\n     */\n    (0, _inherits2.default)(NodeMaterialLoader, _MaterialLoader);\n    return (0, _createClass2.default)(NodeMaterialLoader, [{\n      key: \"parse\",\n      value: function parse(json) {\n        var material = _superPropGet(NodeMaterialLoader, \"parse\", this, 3)([json]);\n        var nodes = this.nodes;\n        var inputNodes = json.inputNodes;\n        for (var _property12 in inputNodes) {\n          var uuid = inputNodes[_property12];\n          material[_property12] = nodes[uuid];\n        }\n        return material;\n      }\n\n      /**\n       * Defines the dictionary of node types.\n       *\n       * @param {Object<String,Node.constructor>} value - The node library defined as `<classname,class>`.\n       * @return {NodeLoader} A reference to this loader.\n       */\n    }, {\n      key: \"setNodes\",\n      value: function setNodes(value) {\n        this.nodes = value;\n        return this;\n      }\n\n      /**\n       * Defines the dictionary of node material types.\n       *\n       * @param {Object<String,NodeMaterial.constructor>} value - The node material library defined as `<classname,class>`.\n       * @return {NodeLoader} A reference to this loader.\n       */\n    }, {\n      key: \"setNodeMaterials\",\n      value: function setNodeMaterials(value) {\n        this.nodeMaterials = value;\n        return this;\n      }\n\n      /**\n       * Creates a node material from the given type.\n       *\n       * @param {String} type - The node material type.\n       * @return {Node} The created node material instance.\n       */\n    }, {\n      key: \"createMaterialFromType\",\n      value: function createMaterialFromType(type) {\n        var materialClass = this.nodeMaterials[type];\n        if (materialClass !== undefined) {\n          return new materialClass();\n        }\n        return _superPropGet(NodeMaterialLoader, \"createMaterialFromType\", this, 3)([type]);\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").MaterialLoader);\n  /**\n   * A special type of object loader for loading 3D objects using\n   * node materials.\n   *\n   * @augments ObjectLoader\n   */\n  var NodeObjectLoader = exports.NodeObjectLoader = /*#__PURE__*/function (_ObjectLoader) {\n    /**\n     * Constructs a new node object loader.\n     *\n     * @param {LoadingManager?} manager - A reference to a loading manager.\n     */\n    function NodeObjectLoader(manager) {\n      var _this226;\n      (0, _classCallCheck2.default)(this, NodeObjectLoader);\n      _this226 = _callSuper(this, NodeObjectLoader, [manager]);\n\n      /**\n       * Represents a dictionary of node types.\n       *\n       * @type {Object<String,Node.constructor>}\n       */\n      _this226.nodes = {};\n\n      /**\n       * Represents a dictionary of node material types.\n       *\n       * @type {Object<String,NodeMaterial.constructor>}\n       */\n      _this226.nodeMaterials = {};\n\n      /**\n       * A reference for holdng the `nodes` JSON property.\n       *\n       * @private\n       * @type {Object?}\n       */\n      _this226._nodesJSON = null;\n      return _this226;\n    }\n\n    /**\n     * Defines the dictionary of node types.\n     *\n     * @param {Object<String,Node.constructor>} value - The node library defined as `<classname,class>`.\n     * @return {NodeLoader} A reference to this loader.\n     */\n    (0, _inherits2.default)(NodeObjectLoader, _ObjectLoader);\n    return (0, _createClass2.default)(NodeObjectLoader, [{\n      key: \"setNodes\",\n      value: function setNodes(value) {\n        this.nodes = value;\n        return this;\n      }\n\n      /**\n       * Defines the dictionary of node material types.\n       *\n       * @param {Object<String,NodeMaterial.constructor>} value - The node material library defined as `<classname,class>`.\n       * @return {NodeLoader} A reference to this loader.\n       */\n    }, {\n      key: \"setNodeMaterials\",\n      value: function setNodeMaterials(value) {\n        this.nodeMaterials = value;\n        return this;\n      }\n\n      /**\n       * Parses the node objects from the given JSON.\n       *\n       * @param {Object} json - The JSON definition\n       * @param {Function} onLoad - The onLoad callback function.\n       * @return {Object3D}. The parsed 3D object.\n       */\n    }, {\n      key: \"parse\",\n      value: function parse(json, onLoad) {\n        this._nodesJSON = json.nodes;\n        var data = _superPropGet(NodeObjectLoader, \"parse\", this, 3)([json, onLoad]);\n        this._nodesJSON = null; // dispose\n\n        return data;\n      }\n\n      /**\n       * Parses the node objects from the given JSON and textures.\n       *\n       * @param {Object} json - The JSON definition\n       * @param {Object<String,Texture>} textures - The texture library.\n       * @return {Object<String,Node>}. The parsed nodes.\n       */\n    }, {\n      key: \"parseNodes\",\n      value: function parseNodes(json, textures) {\n        if (json !== undefined) {\n          var loader = new NodeLoader();\n          loader.setNodes(this.nodes);\n          loader.setTextures(textures);\n          return loader.parseNodes(json);\n        }\n        return {};\n      }\n\n      /**\n       * Parses the node objects from the given JSON and textures.\n       *\n       * @param {Object} json - The JSON definition\n       * @param {Object<String,Texture>} textures - The texture library.\n       * @return {Object<String,NodeMaterial>}. The parsed materials.\n       */\n    }, {\n      key: \"parseMaterials\",\n      value: function parseMaterials(json, textures) {\n        var materials = {};\n        if (json !== undefined) {\n          var nodes = this.parseNodes(this._nodesJSON, textures);\n          var loader = new NodeMaterialLoader();\n          loader.setTextures(textures);\n          loader.setNodes(nodes);\n          loader.setNodeMaterials(this.nodeMaterials);\n          for (var i = 0, l = json.length; i < l; i++) {\n            var data = json[i];\n            materials[data.uuid] = loader.parse(data);\n          }\n        }\n        return materials;\n      }\n    }]);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").ObjectLoader);\n  /**\n   * In earlier three.js versions, clipping was defined globally\n   * on the renderer or on material level. This special version of\n   * `THREE.Group` allows to encode the clipping state into the scene\n   * graph. Meaning if you create an instance of this group, all\n   * descendant 3D objects will be affected by the respective clipping\n   * planes.\n   *\n   * Note: `ClippingGroup` can only be used with `WebGPURenderer`.\n   *\n   * @augments Group\n   */\n  var ClippingGroup = exports.ClippingGroup = /*#__PURE__*/function (_Group2) {\n    /**\n     * Constructs a new clipping group.\n     */\n    function ClippingGroup() {\n      var _this227;\n      (0, _classCallCheck2.default)(this, ClippingGroup);\n      _this227 = _callSuper(this, ClippingGroup);\n\n      /**\n       * This flag can be used for type testing.\n       *\n       * @type {Boolean}\n       * @readonly\n       * @default true\n       */\n      _this227.isClippingGroup = true;\n\n      /**\n       * An array with clipping planes.\n       *\n       * @type {Array<Plane>}\n       */\n      _this227.clippingPlanes = [];\n\n      /**\n       * Whether clipping should be enabled or not.\n       *\n       * @type {Boolean}\n       * @default true\n       */\n      _this227.enabled = true;\n\n      /**\n       * Whether the intersection of the clipping planes is used to clip objects, rather than their union.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this227.clipIntersection = false;\n\n      /**\n       * Whether shadows should be clipped or not.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      _this227.clipShadows = false;\n      return _this227;\n    }\n    (0, _inherits2.default)(ClippingGroup, _Group2);\n    return (0, _createClass2.default)(ClippingGroup);\n  }(_$$_REQUIRE(_dependencyMap[1], \"./three.core.js\").Group);\n},3,[1,4,27,30,5,2,11,17,23,10,26,7,19,31,32],\"../../node_modules/three/build/three.webgpu.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DstAlphaFactor = exports.DoubleSide = exports.DodecahedronGeometry = exports.DiscreteInterpolant = exports.DirectionalLightHelper = exports.DirectionalLight = exports.DetachedBindMode = exports.DepthTexture = exports.DepthStencilFormat = exports.DepthFormat = exports.DefaultLoadingManager = exports.DecrementWrapStencilOp = exports.DecrementStencilOp = exports.DataUtils = exports.DataTextureLoader = exports.DataTexture = exports.DataArrayTexture = exports.Data3DTexture = exports.Cylindrical = exports.CylinderGeometry = exports.CustomToneMapping = exports.CustomBlending = exports.CurvePath = exports.Curve = exports.CullFaceNone = exports.CullFaceFrontBack = exports.CullFaceFront = exports.CullFaceBack = exports.CubicInterpolant = exports.CubicBezierCurve3 = exports.CubicBezierCurve = exports.CubeUVReflectionMapping = exports.CubeTextureLoader = exports.CubeTexture = exports.CubeRefractionMapping = exports.CubeReflectionMapping = exports.CubeCamera = exports.Controls = exports.ConstantColorFactor = exports.ConstantAlphaFactor = exports.ConeGeometry = exports.CompressedTextureLoader = exports.CompressedTexture = exports.CompressedCubeTexture = exports.CompressedArrayTexture = exports.ColorManagement = exports.ColorKeyframeTrack = exports.Color = exports.Clock = exports.ClampToEdgeWrapping = exports.CircleGeometry = exports.CineonToneMapping = exports.CatmullRomCurve3 = exports.CapsuleGeometry = exports.CanvasTexture = exports.CameraHelper = exports.Camera = exports.Cache = exports.ByteType = exports.BufferGeometryLoader = exports.BufferGeometry = exports.BufferAttribute = exports.BoxHelper = exports.BoxGeometry = exports.Box3Helper = exports.Box3 = exports.Box2 = exports.BooleanKeyframeTrack = exports.Bone = exports.BatchedMesh = exports.BasicShadowMap = exports.BasicDepthPacking = exports.BackSide = exports.AxesHelper = exports.AudioLoader = exports.AudioListener = exports.AudioContext = exports.AudioAnalyser = exports.Audio = exports.AttachedBindMode = exports.ArrowHelper = exports.ArrayCamera = exports.ArcCurve = exports.AnimationUtils = exports.AnimationObjectGroup = exports.AnimationMixer = exports.AnimationLoader = exports.AnimationClip = exports.AnimationAction = exports.AmbientLight = exports.AlwaysStencilFunc = exports.AlwaysDepth = exports.AlwaysCompare = exports.AlphaFormat = exports.AgXToneMapping = exports.AdditiveBlending = exports.AdditiveAnimationBlendMode = exports.AddOperation = exports.AddEquation = exports.ACESFilmicToneMapping = void 0;\n  exports.MathUtils = exports.MaterialLoader = exports.Material = exports.MOUSE = exports.LuminanceFormat = exports.LuminanceAlphaFormat = exports.LoopRepeat = exports.LoopPingPong = exports.LoopOnce = exports.LoadingManager = exports.LoaderUtils = exports.Loader = exports.LinearTransfer = exports.LinearToneMapping = exports.LinearSRGBColorSpace = exports.LinearMipmapNearestFilter = exports.LinearMipmapLinearFilter = exports.LinearMipMapNearestFilter = exports.LinearMipMapLinearFilter = exports.LinearInterpolant = exports.LinearFilter = exports.LineSegments = exports.LineLoop = exports.LineDashedMaterial = exports.LineCurve3 = exports.LineCurve = exports.LineBasicMaterial = exports.Line3 = exports.Line = exports.LightProbe = exports.Light = exports.LessStencilFunc = exports.LessEqualStencilFunc = exports.LessEqualDepth = exports.LessEqualCompare = exports.LessDepth = exports.LessCompare = exports.Layers = exports.LatheGeometry = exports.LOD = exports.KeyframeTrack = exports.KeepStencilOp = exports.InvertStencilOp = exports.InterpolateSmooth = exports.InterpolateLinear = exports.InterpolateDiscrete = exports.Interpolant = exports.InterleavedBufferAttribute = exports.InterleavedBuffer = exports.IntType = exports.Int8BufferAttribute = exports.Int32BufferAttribute = exports.Int16BufferAttribute = exports.InstancedMesh = exports.InstancedInterleavedBuffer = exports.InstancedBufferGeometry = exports.InstancedBufferAttribute = exports.IncrementWrapStencilOp = exports.IncrementStencilOp = exports.ImageUtils = exports.ImageLoader = exports.ImageBitmapLoader = exports.IcosahedronGeometry = exports.HemisphereLightHelper = exports.HemisphereLight = exports.HalfFloatType = exports.Group = exports.GridHelper = exports.GreaterStencilFunc = exports.GreaterEqualStencilFunc = exports.GreaterEqualDepth = exports.GreaterEqualCompare = exports.GreaterDepth = exports.GreaterCompare = exports.GLSL3 = exports.GLSL1 = exports.GLBufferAttribute = exports.Frustum = exports.FrontSide = exports.FramebufferTexture = exports.FogExp2 = exports.Fog = exports.FloatType = exports.Float32BufferAttribute = exports.Float16BufferAttribute = exports.FileLoader = exports.ExtrudeGeometry = exports.EventDispatcher = exports.Euler = exports.EquirectangularRefractionMapping = exports.EquirectangularReflectionMapping = exports.EqualStencilFunc = exports.EqualDepth = exports.EqualCompare = exports.EllipseCurve = exports.EdgesGeometry = exports.DynamicReadUsage = exports.DynamicDrawUsage = exports.DynamicCopyUsage = exports.DstColorFactor = void 0;\n  exports.RGBDepthPacking = exports.RGBA_S3TC_DXT5_Format = exports.RGBA_S3TC_DXT3_Format = exports.RGBA_S3TC_DXT1_Format = exports.RGBA_PVRTC_4BPPV1_Format = exports.RGBA_PVRTC_2BPPV1_Format = exports.RGBA_ETC2_EAC_Format = exports.RGBA_BPTC_Format = exports.RGBA_ASTC_8x8_Format = exports.RGBA_ASTC_8x6_Format = exports.RGBA_ASTC_8x5_Format = exports.RGBA_ASTC_6x6_Format = exports.RGBA_ASTC_6x5_Format = exports.RGBA_ASTC_5x5_Format = exports.RGBA_ASTC_5x4_Format = exports.RGBA_ASTC_4x4_Format = exports.RGBA_ASTC_12x12_Format = exports.RGBA_ASTC_12x10_Format = exports.RGBA_ASTC_10x8_Format = exports.RGBA_ASTC_10x6_Format = exports.RGBA_ASTC_10x5_Format = exports.RGBA_ASTC_10x10_Format = exports.RGBAIntegerFormat = exports.RGBAFormat = exports.RGBADepthPacking = exports.REVISION = exports.RED_RGTC1_Format = exports.RED_GREEN_RGTC2_Format = exports.RAD2DEG = exports.QuaternionLinearInterpolant = exports.QuaternionKeyframeTrack = exports.Quaternion = exports.QuadraticBezierCurve3 = exports.QuadraticBezierCurve = exports.PropertyMixer = exports.PropertyBinding = exports.PositionalAudio = exports.PolyhedronGeometry = exports.PolarGridHelper = exports.PointsMaterial = exports.Points = exports.PointLightHelper = exports.PointLight = exports.PlaneHelper = exports.PlaneGeometry = exports.Plane = exports.PerspectiveCamera = exports.Path = exports.PCFSoftShadowMap = exports.PCFShadowMap = exports.OrthographicCamera = exports.OneMinusSrcColorFactor = exports.OneMinusSrcAlphaFactor = exports.OneMinusDstColorFactor = exports.OneMinusDstAlphaFactor = exports.OneMinusConstantColorFactor = exports.OneMinusConstantAlphaFactor = exports.OneFactor = exports.OctahedronGeometry = exports.ObjectSpaceNormalMap = exports.ObjectLoader = exports.Object3D = exports.NumberKeyframeTrack = exports.NotEqualStencilFunc = exports.NotEqualDepth = exports.NotEqualCompare = exports.NormalBlending = exports.NormalAnimationBlendMode = exports.NoToneMapping = exports.NoColorSpace = exports.NoBlending = exports.NeverStencilFunc = exports.NeverDepth = exports.NeverCompare = exports.NeutralToneMapping = exports.NearestMipmapNearestFilter = exports.NearestMipmapLinearFilter = exports.NearestMipMapNearestFilter = exports.NearestMipMapLinearFilter = exports.NearestFilter = exports.MultiplyOperation = exports.MultiplyBlending = exports.MixOperation = exports.MirroredRepeatWrapping = exports.MinEquation = exports.MeshToonMaterial = exports.MeshStandardMaterial = exports.MeshPhysicalMaterial = exports.MeshPhongMaterial = exports.MeshNormalMaterial = exports.MeshMatcapMaterial = exports.MeshLambertMaterial = exports.MeshDistanceMaterial = exports.MeshDepthMaterial = exports.MeshBasicMaterial = exports.Mesh = exports.MaxEquation = exports.Matrix4 = exports.Matrix3 = exports.Matrix2 = void 0;\n  exports.WebGLArrayRenderTarget = exports.WebGL3DRenderTarget = exports.VideoTexture = exports.VectorKeyframeTrack = exports.Vector4 = exports.Vector3 = exports.Vector2 = exports.VSMShadowMap = exports.UnsignedShortType = exports.UnsignedShort5551Type = exports.UnsignedShort4444Type = exports.UnsignedIntType = exports.UnsignedInt5999Type = exports.UnsignedInt248Type = exports.UnsignedByteType = exports.UniformsUtils = exports.UniformsGroup = exports.Uniform = exports.Uint8ClampedBufferAttribute = exports.Uint8BufferAttribute = exports.Uint32BufferAttribute = exports.Uint16BufferAttribute = exports.UVMapping = exports.TubeGeometry = exports.TrianglesDrawMode = exports.TriangleStripDrawMode = exports.TriangleFanDrawMode = exports.Triangle = exports.TorusKnotGeometry = exports.TorusGeometry = exports.TextureUtils = exports.TextureLoader = exports.Texture = exports.TetrahedronGeometry = exports.TangentSpaceNormalMap = exports.TOUCH = exports.SubtractiveBlending = exports.SubtractEquation = exports.StringKeyframeTrack = exports.StreamReadUsage = exports.StreamDrawUsage = exports.StreamCopyUsage = exports.StereoCamera = exports.StaticReadUsage = exports.StaticDrawUsage = exports.StaticCopyUsage = exports.SrcColorFactor = exports.SrcAlphaSaturateFactor = exports.SrcAlphaFactor = exports.SpriteMaterial = exports.Sprite = exports.SpotLightHelper = exports.SpotLight = exports.SplineCurve = exports.SphericalHarmonics3 = exports.Spherical = exports.SphereGeometry = exports.Sphere = exports.Source = exports.SkinnedMesh = exports.SkeletonHelper = exports.Skeleton = exports.ShortType = exports.ShapeUtils = exports.ShapePath = exports.ShapeGeometry = exports.Shape = exports.ShadowMaterial = exports.ShaderMaterial = exports.Scene = exports.SRGBTransfer = exports.SRGBColorSpace = exports.SIGNED_RED_RGTC1_Format = exports.SIGNED_RED_GREEN_RGTC2_Format = exports.RingGeometry = exports.ReverseSubtractEquation = exports.ReplaceStencilOp = exports.RepeatWrapping = exports.RenderTargetArray = exports.RenderTarget3D = exports.RenderTarget = exports.ReinhardToneMapping = exports.RedIntegerFormat = exports.RedFormat = exports.RectAreaLight = exports.Raycaster = exports.Ray = exports.RawShaderMaterial = exports.RGIntegerFormat = exports.RGFormat = exports.RGDepthPacking = exports.RGB_S3TC_DXT1_Format = exports.RGB_PVRTC_4BPPV1_Format = exports.RGB_PVRTC_2BPPV1_Format = exports.RGB_ETC2_Format = exports.RGB_ETC1_Format = exports.RGB_BPTC_UNSIGNED_Format = exports.RGB_BPTC_SIGNED_Format = exports.RGBIntegerFormat = exports.RGBFormat = void 0;\n  exports.ZeroStencilOp = exports.ZeroSlopeEnding = exports.ZeroFactor = exports.ZeroCurvatureEnding = exports.WrapAroundEnding = exports.WireframeGeometry = exports.WebGPUCoordinateSystem = exports.WebGLRenderTarget = exports.WebGLCubeRenderTarget = exports.WebGLCoordinateSystem = void 0;\n  exports.arrayNeedsUint32 = arrayNeedsUint32;\n  exports.cloneUniforms = cloneUniforms;\n  exports.createCanvasElement = createCanvasElement;\n  exports.createElementNS = createElementNS;\n  exports.getByteLength = getByteLength;\n  exports.getUnlitUniformColorSpace = getUnlitUniformColorSpace;\n  exports.mergeUniforms = mergeUniforms;\n  exports.probeAsync = probeAsync;\n  exports.toNormalizedProjectionMatrix = toNormalizedProjectionMatrix;\n  exports.toReversedProjectionMatrix = toReversedProjectionMatrix;\n  exports.warnOnce = warnOnce;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/wrapNativeSuper\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\"));\n  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/get\"));\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"@babel/runtime/helpers/inherits\"));\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"@babel/runtime/helpers/defineProperty\"));\n  var _readOnlyError2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"@babel/runtime/helpers/readOnlyError\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12], \"@babel/runtime/helpers/createClass\"));\n  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  /**\n   * @license\n   * Copyright 2010-2024 Three.js Authors\n   * SPDX-License-Identifier: MIT\n   */\n  var REVISION = exports.REVISION = '172';\n  var MOUSE = exports.MOUSE = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2,\n    ROTATE: 0,\n    DOLLY: 1,\n    PAN: 2\n  };\n  var TOUCH = exports.TOUCH = {\n    ROTATE: 0,\n    PAN: 1,\n    DOLLY_PAN: 2,\n    DOLLY_ROTATE: 3\n  };\n  var CullFaceNone = exports.CullFaceNone = 0;\n  var CullFaceBack = exports.CullFaceBack = 1;\n  var CullFaceFront = exports.CullFaceFront = 2;\n  var CullFaceFrontBack = exports.CullFaceFrontBack = 3;\n  var BasicShadowMap = exports.BasicShadowMap = 0;\n  var PCFShadowMap = exports.PCFShadowMap = 1;\n  var PCFSoftShadowMap = exports.PCFSoftShadowMap = 2;\n  var VSMShadowMap = exports.VSMShadowMap = 3;\n  var FrontSide = exports.FrontSide = 0;\n  var BackSide = exports.BackSide = 1;\n  var DoubleSide = exports.DoubleSide = 2;\n  var NoBlending = exports.NoBlending = 0;\n  var NormalBlending = exports.NormalBlending = 1;\n  var AdditiveBlending = exports.AdditiveBlending = 2;\n  var SubtractiveBlending = exports.SubtractiveBlending = 3;\n  var MultiplyBlending = exports.MultiplyBlending = 4;\n  var CustomBlending = exports.CustomBlending = 5;\n  var AddEquation = exports.AddEquation = 100;\n  var SubtractEquation = exports.SubtractEquation = 101;\n  var ReverseSubtractEquation = exports.ReverseSubtractEquation = 102;\n  var MinEquation = exports.MinEquation = 103;\n  var MaxEquation = exports.MaxEquation = 104;\n  var ZeroFactor = exports.ZeroFactor = 200;\n  var OneFactor = exports.OneFactor = 201;\n  var SrcColorFactor = exports.SrcColorFactor = 202;\n  var OneMinusSrcColorFactor = exports.OneMinusSrcColorFactor = 203;\n  var SrcAlphaFactor = exports.SrcAlphaFactor = 204;\n  var OneMinusSrcAlphaFactor = exports.OneMinusSrcAlphaFactor = 205;\n  var DstAlphaFactor = exports.DstAlphaFactor = 206;\n  var OneMinusDstAlphaFactor = exports.OneMinusDstAlphaFactor = 207;\n  var DstColorFactor = exports.DstColorFactor = 208;\n  var OneMinusDstColorFactor = exports.OneMinusDstColorFactor = 209;\n  var SrcAlphaSaturateFactor = exports.SrcAlphaSaturateFactor = 210;\n  var ConstantColorFactor = exports.ConstantColorFactor = 211;\n  var OneMinusConstantColorFactor = exports.OneMinusConstantColorFactor = 212;\n  var ConstantAlphaFactor = exports.ConstantAlphaFactor = 213;\n  var OneMinusConstantAlphaFactor = exports.OneMinusConstantAlphaFactor = 214;\n  var NeverDepth = exports.NeverDepth = 0;\n  var AlwaysDepth = exports.AlwaysDepth = 1;\n  var LessDepth = exports.LessDepth = 2;\n  var LessEqualDepth = exports.LessEqualDepth = 3;\n  var EqualDepth = exports.EqualDepth = 4;\n  var GreaterEqualDepth = exports.GreaterEqualDepth = 5;\n  var GreaterDepth = exports.GreaterDepth = 6;\n  var NotEqualDepth = exports.NotEqualDepth = 7;\n  var MultiplyOperation = exports.MultiplyOperation = 0;\n  var MixOperation = exports.MixOperation = 1;\n  var AddOperation = exports.AddOperation = 2;\n  var NoToneMapping = exports.NoToneMapping = 0;\n  var LinearToneMapping = exports.LinearToneMapping = 1;\n  var ReinhardToneMapping = exports.ReinhardToneMapping = 2;\n  var CineonToneMapping = exports.CineonToneMapping = 3;\n  var ACESFilmicToneMapping = exports.ACESFilmicToneMapping = 4;\n  var CustomToneMapping = exports.CustomToneMapping = 5;\n  var AgXToneMapping = exports.AgXToneMapping = 6;\n  var NeutralToneMapping = exports.NeutralToneMapping = 7;\n  var AttachedBindMode = exports.AttachedBindMode = 'attached';\n  var DetachedBindMode = exports.DetachedBindMode = 'detached';\n  var UVMapping = exports.UVMapping = 300;\n  var CubeReflectionMapping = exports.CubeReflectionMapping = 301;\n  var CubeRefractionMapping = exports.CubeRefractionMapping = 302;\n  var EquirectangularReflectionMapping = exports.EquirectangularReflectionMapping = 303;\n  var EquirectangularRefractionMapping = exports.EquirectangularRefractionMapping = 304;\n  var CubeUVReflectionMapping = exports.CubeUVReflectionMapping = 306;\n  var RepeatWrapping = exports.RepeatWrapping = 1000;\n  var ClampToEdgeWrapping = exports.ClampToEdgeWrapping = 1001;\n  var MirroredRepeatWrapping = exports.MirroredRepeatWrapping = 1002;\n  var NearestFilter = exports.NearestFilter = 1003;\n  var NearestMipmapNearestFilter = exports.NearestMipmapNearestFilter = 1004;\n  var NearestMipMapNearestFilter = exports.NearestMipMapNearestFilter = 1004;\n  var NearestMipmapLinearFilter = exports.NearestMipmapLinearFilter = 1005;\n  var NearestMipMapLinearFilter = exports.NearestMipMapLinearFilter = 1005;\n  var LinearFilter = exports.LinearFilter = 1006;\n  var LinearMipmapNearestFilter = exports.LinearMipmapNearestFilter = 1007;\n  var LinearMipMapNearestFilter = exports.LinearMipMapNearestFilter = 1007;\n  var LinearMipmapLinearFilter = exports.LinearMipmapLinearFilter = 1008;\n  var LinearMipMapLinearFilter = exports.LinearMipMapLinearFilter = 1008;\n  var UnsignedByteType = exports.UnsignedByteType = 1009;\n  var ByteType = exports.ByteType = 1010;\n  var ShortType = exports.ShortType = 1011;\n  var UnsignedShortType = exports.UnsignedShortType = 1012;\n  var IntType = exports.IntType = 1013;\n  var UnsignedIntType = exports.UnsignedIntType = 1014;\n  var FloatType = exports.FloatType = 1015;\n  var HalfFloatType = exports.HalfFloatType = 1016;\n  var UnsignedShort4444Type = exports.UnsignedShort4444Type = 1017;\n  var UnsignedShort5551Type = exports.UnsignedShort5551Type = 1018;\n  var UnsignedInt248Type = exports.UnsignedInt248Type = 1020;\n  var UnsignedInt5999Type = exports.UnsignedInt5999Type = 35902;\n  var AlphaFormat = exports.AlphaFormat = 1021;\n  var RGBFormat = exports.RGBFormat = 1022;\n  var RGBAFormat = exports.RGBAFormat = 1023;\n  var LuminanceFormat = exports.LuminanceFormat = 1024;\n  var LuminanceAlphaFormat = exports.LuminanceAlphaFormat = 1025;\n  var DepthFormat = exports.DepthFormat = 1026;\n  var DepthStencilFormat = exports.DepthStencilFormat = 1027;\n  var RedFormat = exports.RedFormat = 1028;\n  var RedIntegerFormat = exports.RedIntegerFormat = 1029;\n  var RGFormat = exports.RGFormat = 1030;\n  var RGIntegerFormat = exports.RGIntegerFormat = 1031;\n  var RGBIntegerFormat = exports.RGBIntegerFormat = 1032;\n  var RGBAIntegerFormat = exports.RGBAIntegerFormat = 1033;\n  var RGB_S3TC_DXT1_Format = exports.RGB_S3TC_DXT1_Format = 33776;\n  var RGBA_S3TC_DXT1_Format = exports.RGBA_S3TC_DXT1_Format = 33777;\n  var RGBA_S3TC_DXT3_Format = exports.RGBA_S3TC_DXT3_Format = 33778;\n  var RGBA_S3TC_DXT5_Format = exports.RGBA_S3TC_DXT5_Format = 33779;\n  var RGB_PVRTC_4BPPV1_Format = exports.RGB_PVRTC_4BPPV1_Format = 35840;\n  var RGB_PVRTC_2BPPV1_Format = exports.RGB_PVRTC_2BPPV1_Format = 35841;\n  var RGBA_PVRTC_4BPPV1_Format = exports.RGBA_PVRTC_4BPPV1_Format = 35842;\n  var RGBA_PVRTC_2BPPV1_Format = exports.RGBA_PVRTC_2BPPV1_Format = 35843;\n  var RGB_ETC1_Format = exports.RGB_ETC1_Format = 36196;\n  var RGB_ETC2_Format = exports.RGB_ETC2_Format = 37492;\n  var RGBA_ETC2_EAC_Format = exports.RGBA_ETC2_EAC_Format = 37496;\n  var RGBA_ASTC_4x4_Format = exports.RGBA_ASTC_4x4_Format = 37808;\n  var RGBA_ASTC_5x4_Format = exports.RGBA_ASTC_5x4_Format = 37809;\n  var RGBA_ASTC_5x5_Format = exports.RGBA_ASTC_5x5_Format = 37810;\n  var RGBA_ASTC_6x5_Format = exports.RGBA_ASTC_6x5_Format = 37811;\n  var RGBA_ASTC_6x6_Format = exports.RGBA_ASTC_6x6_Format = 37812;\n  var RGBA_ASTC_8x5_Format = exports.RGBA_ASTC_8x5_Format = 37813;\n  var RGBA_ASTC_8x6_Format = exports.RGBA_ASTC_8x6_Format = 37814;\n  var RGBA_ASTC_8x8_Format = exports.RGBA_ASTC_8x8_Format = 37815;\n  var RGBA_ASTC_10x5_Format = exports.RGBA_ASTC_10x5_Format = 37816;\n  var RGBA_ASTC_10x6_Format = exports.RGBA_ASTC_10x6_Format = 37817;\n  var RGBA_ASTC_10x8_Format = exports.RGBA_ASTC_10x8_Format = 37818;\n  var RGBA_ASTC_10x10_Format = exports.RGBA_ASTC_10x10_Format = 37819;\n  var RGBA_ASTC_12x10_Format = exports.RGBA_ASTC_12x10_Format = 37820;\n  var RGBA_ASTC_12x12_Format = exports.RGBA_ASTC_12x12_Format = 37821;\n  var RGBA_BPTC_Format = exports.RGBA_BPTC_Format = 36492;\n  var RGB_BPTC_SIGNED_Format = exports.RGB_BPTC_SIGNED_Format = 36494;\n  var RGB_BPTC_UNSIGNED_Format = exports.RGB_BPTC_UNSIGNED_Format = 36495;\n  var RED_RGTC1_Format = exports.RED_RGTC1_Format = 36283;\n  var SIGNED_RED_RGTC1_Format = exports.SIGNED_RED_RGTC1_Format = 36284;\n  var RED_GREEN_RGTC2_Format = exports.RED_GREEN_RGTC2_Format = 36285;\n  var SIGNED_RED_GREEN_RGTC2_Format = exports.SIGNED_RED_GREEN_RGTC2_Format = 36286;\n  var LoopOnce = exports.LoopOnce = 2200;\n  var LoopRepeat = exports.LoopRepeat = 2201;\n  var LoopPingPong = exports.LoopPingPong = 2202;\n  var InterpolateDiscrete = exports.InterpolateDiscrete = 2300;\n  var InterpolateLinear = exports.InterpolateLinear = 2301;\n  var InterpolateSmooth = exports.InterpolateSmooth = 2302;\n  var ZeroCurvatureEnding = exports.ZeroCurvatureEnding = 2400;\n  var ZeroSlopeEnding = exports.ZeroSlopeEnding = 2401;\n  var WrapAroundEnding = exports.WrapAroundEnding = 2402;\n  var NormalAnimationBlendMode = exports.NormalAnimationBlendMode = 2500;\n  var AdditiveAnimationBlendMode = exports.AdditiveAnimationBlendMode = 2501;\n  var TrianglesDrawMode = exports.TrianglesDrawMode = 0;\n  var TriangleStripDrawMode = exports.TriangleStripDrawMode = 1;\n  var TriangleFanDrawMode = exports.TriangleFanDrawMode = 2;\n  var BasicDepthPacking = exports.BasicDepthPacking = 3200;\n  var RGBADepthPacking = exports.RGBADepthPacking = 3201;\n  var RGBDepthPacking = exports.RGBDepthPacking = 3202;\n  var RGDepthPacking = exports.RGDepthPacking = 3203;\n  var TangentSpaceNormalMap = exports.TangentSpaceNormalMap = 0;\n  var ObjectSpaceNormalMap = exports.ObjectSpaceNormalMap = 1;\n\n  // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\n  var NoColorSpace = exports.NoColorSpace = '';\n  var SRGBColorSpace = exports.SRGBColorSpace = 'srgb';\n  var LinearSRGBColorSpace = exports.LinearSRGBColorSpace = 'srgb-linear';\n  var LinearTransfer = exports.LinearTransfer = 'linear';\n  var SRGBTransfer = exports.SRGBTransfer = 'srgb';\n  var ZeroStencilOp = exports.ZeroStencilOp = 0;\n  var KeepStencilOp = exports.KeepStencilOp = 7680;\n  var ReplaceStencilOp = exports.ReplaceStencilOp = 7681;\n  var IncrementStencilOp = exports.IncrementStencilOp = 7682;\n  var DecrementStencilOp = exports.DecrementStencilOp = 7683;\n  var IncrementWrapStencilOp = exports.IncrementWrapStencilOp = 34055;\n  var DecrementWrapStencilOp = exports.DecrementWrapStencilOp = 34056;\n  var InvertStencilOp = exports.InvertStencilOp = 5386;\n  var NeverStencilFunc = exports.NeverStencilFunc = 512;\n  var LessStencilFunc = exports.LessStencilFunc = 513;\n  var EqualStencilFunc = exports.EqualStencilFunc = 514;\n  var LessEqualStencilFunc = exports.LessEqualStencilFunc = 515;\n  var GreaterStencilFunc = exports.GreaterStencilFunc = 516;\n  var NotEqualStencilFunc = exports.NotEqualStencilFunc = 517;\n  var GreaterEqualStencilFunc = exports.GreaterEqualStencilFunc = 518;\n  var AlwaysStencilFunc = exports.AlwaysStencilFunc = 519;\n  var NeverCompare = exports.NeverCompare = 512;\n  var LessCompare = exports.LessCompare = 513;\n  var EqualCompare = exports.EqualCompare = 514;\n  var LessEqualCompare = exports.LessEqualCompare = 515;\n  var GreaterCompare = exports.GreaterCompare = 516;\n  var NotEqualCompare = exports.NotEqualCompare = 517;\n  var GreaterEqualCompare = exports.GreaterEqualCompare = 518;\n  var AlwaysCompare = exports.AlwaysCompare = 519;\n  var StaticDrawUsage = exports.StaticDrawUsage = 35044;\n  var DynamicDrawUsage = exports.DynamicDrawUsage = 35048;\n  var StreamDrawUsage = exports.StreamDrawUsage = 35040;\n  var StaticReadUsage = exports.StaticReadUsage = 35045;\n  var DynamicReadUsage = exports.DynamicReadUsage = 35049;\n  var StreamReadUsage = exports.StreamReadUsage = 35041;\n  var StaticCopyUsage = exports.StaticCopyUsage = 35046;\n  var DynamicCopyUsage = exports.DynamicCopyUsage = 35050;\n  var StreamCopyUsage = exports.StreamCopyUsage = 35042;\n  var GLSL1 = exports.GLSL1 = '100';\n  var GLSL3 = exports.GLSL3 = '300 es';\n  var WebGLCoordinateSystem = exports.WebGLCoordinateSystem = 2000;\n  var WebGPUCoordinateSystem = exports.WebGPUCoordinateSystem = 2001;\n\n  /**\n   * https://github.com/mrdoob/eventdispatcher.js/\n   */\n  var EventDispatcher = exports.EventDispatcher = /*#__PURE__*/function () {\n    function EventDispatcher() {\n      (0, _classCallCheck2.default)(this, EventDispatcher);\n    }\n    return (0, _createClass2.default)(EventDispatcher, [{\n      key: \"addEventListener\",\n      value: function addEventListener(type, listener) {\n        if (this._listeners === undefined) this._listeners = {};\n        var listeners = this._listeners;\n        if (listeners[type] === undefined) {\n          listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n          listeners[type].push(listener);\n        }\n      }\n    }, {\n      key: \"hasEventListener\",\n      value: function hasEventListener(type, listener) {\n        if (this._listeners === undefined) return false;\n        var listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(type, listener) {\n        if (this._listeners === undefined) return;\n        var listeners = this._listeners;\n        var listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n          var index = listenerArray.indexOf(listener);\n          if (index !== -1) {\n            listenerArray.splice(index, 1);\n          }\n        }\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        if (this._listeners === undefined) return;\n        var listeners = this._listeners;\n        var listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n          event.target = this;\n\n          // Make a copy, in case listeners are removed while iterating.\n          var array = listenerArray.slice(0);\n          for (var i = 0, l = array.length; i < l; i++) {\n            array[i].call(this, event);\n          }\n          event.target = null;\n        }\n      }\n    }]);\n  }();\n  var _lut = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'];\n  var _seed = 1234567;\n  var DEG2RAD = Math.PI / 180;\n  var RAD2DEG = exports.RAD2DEG = 180 / Math.PI;\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n  function generateUUID() {\n    var d0 = Math.random() * 0xffffffff | 0;\n    var d1 = Math.random() * 0xffffffff | 0;\n    var d2 = Math.random() * 0xffffffff | 0;\n    var d3 = Math.random() * 0xffffffff | 0;\n    var uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\n\n    // .toLowerCase() here flattens concatenated strings to save heap memory space.\n    return uuid.toLowerCase();\n  }\n  function _clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n  }\n\n  // compute euclidean modulo of m % n\n  // https://en.wikipedia.org/wiki/Modulo_operation\n  function euclideanModulo(n, m) {\n    return (n % m + m) % m;\n  }\n\n  // Linear mapping from range <a1, a2> to range <b1, b2>\n  function mapLinear(x, a1, a2, b1, b2) {\n    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n  }\n\n  // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n  function inverseLerp(x, y, value) {\n    if (x !== y) {\n      return (value - x) / (y - x);\n    } else {\n      return 0;\n    }\n  }\n\n  // https://en.wikipedia.org/wiki/Linear_interpolation\n  function lerp(x, y, t) {\n    return (1 - t) * x + t * y;\n  }\n\n  // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n  function damp(x, y, lambda, dt) {\n    return lerp(x, y, 1 - Math.exp(-lambda * dt));\n  }\n\n  // https://www.desmos.com/calculator/vcsjnyz7x4\n  function pingpong(x) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return length - Math.abs(euclideanModulo(x, length * 2) - length);\n  }\n\n  // http://en.wikipedia.org/wiki/Smoothstep\n  function smoothstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * (3 - 2 * x);\n  }\n  function smootherstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * x * (x * (x * 6 - 15) + 10);\n  }\n\n  // Random integer from <low, high> interval\n  function randInt(low, high) {\n    return low + Math.floor(Math.random() * (high - low + 1));\n  }\n\n  // Random float from <low, high> interval\n  function randFloat(low, high) {\n    return low + Math.random() * (high - low);\n  }\n\n  // Random float from <-range/2, range/2> interval\n  function randFloatSpread(range) {\n    return range * (0.5 - Math.random());\n  }\n\n  // Deterministic pseudo-random float in the interval [ 0, 1 ]\n  function seededRandom(s) {\n    if (s !== undefined) _seed = s;\n\n    // Mulberry32 generator\n\n    var t = _seed += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n  function degToRad(degrees) {\n    return degrees * DEG2RAD;\n  }\n  function radToDeg(radians) {\n    return radians * RAD2DEG;\n  }\n  function isPowerOfTwo(value) {\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function ceilPowerOfTwo(value) {\n    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n  }\n  function floorPowerOfTwo(value) {\n    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n  }\n  function setQuaternionFromProperEuler(q, a, b, c, order) {\n    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n    // rotations are applied to the axes in the order specified by 'order'\n    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n    // angles are in radians\n\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var c2 = cos(b / 2);\n    var s2 = sin(b / 2);\n    var c13 = cos((a + c) / 2);\n    var s13 = sin((a + c) / 2);\n    var c1_3 = cos((a - c) / 2);\n    var s1_3 = sin((a - c) / 2);\n    var c3_1 = cos((c - a) / 2);\n    var s3_1 = sin((c - a) / 2);\n    switch (order) {\n      case 'XYX':\n        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n        break;\n      case 'YZY':\n        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n        break;\n      case 'ZXZ':\n        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n        break;\n      case 'XZX':\n        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n        break;\n      case 'YXY':\n        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n        break;\n      case 'ZYZ':\n        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n        break;\n      default:\n        console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n    }\n  }\n  function denormalize(value, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        return value;\n      case Uint32Array:\n        return value / 4294967295.0;\n      case Uint16Array:\n        return value / 65535.0;\n      case Uint8Array:\n        return value / 255.0;\n      case Int32Array:\n        return Math.max(value / 2147483647.0, -1.0);\n      case Int16Array:\n        return Math.max(value / 32767.0, -1.0);\n      case Int8Array:\n        return Math.max(value / 127.0, -1.0);\n      default:\n        throw new Error('Invalid component type.');\n    }\n  }\n  function normalize(value, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        return value;\n      case Uint32Array:\n        return Math.round(value * 4294967295.0);\n      case Uint16Array:\n        return Math.round(value * 65535.0);\n      case Uint8Array:\n        return Math.round(value * 255.0);\n      case Int32Array:\n        return Math.round(value * 2147483647.0);\n      case Int16Array:\n        return Math.round(value * 32767.0);\n      case Int8Array:\n        return Math.round(value * 127.0);\n      default:\n        throw new Error('Invalid component type.');\n    }\n  }\n  var MathUtils = exports.MathUtils = {\n    DEG2RAD: DEG2RAD,\n    RAD2DEG: RAD2DEG,\n    generateUUID: generateUUID,\n    clamp: _clamp,\n    euclideanModulo: euclideanModulo,\n    mapLinear: mapLinear,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    damp: damp,\n    pingpong: pingpong,\n    smoothstep: smoothstep,\n    smootherstep: smootherstep,\n    randInt: randInt,\n    randFloat: randFloat,\n    randFloatSpread: randFloatSpread,\n    seededRandom: seededRandom,\n    degToRad: degToRad,\n    radToDeg: radToDeg,\n    isPowerOfTwo: isPowerOfTwo,\n    ceilPowerOfTwo: ceilPowerOfTwo,\n    floorPowerOfTwo: floorPowerOfTwo,\n    setQuaternionFromProperEuler: setQuaternionFromProperEuler,\n    normalize: normalize,\n    denormalize: denormalize\n  };\n  var Vector2 = exports.Vector2 = /*#__PURE__*/function () {\n    function Vector2() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, Vector2);\n      Vector2.prototype.isVector2 = true;\n      this.x = x;\n      this.y = y;\n    }\n    return (0, _createClass2.default)(Vector2, [{\n      key: \"width\",\n      get: function get() {\n        return this.x;\n      },\n      set: function set(value) {\n        this.x = value;\n      }\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this.y;\n      },\n      set: function set(value) {\n        this.y = value;\n      }\n    }, {\n      key: \"set\",\n      value: function set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n      }\n    }, {\n      key: \"setScalar\",\n      value: function setScalar(scalar) {\n        this.x = scalar;\n        this.y = scalar;\n        return this;\n      }\n    }, {\n      key: \"setX\",\n      value: function setX(x) {\n        this.x = x;\n        return this;\n      }\n    }, {\n      key: \"setY\",\n      value: function setY(y) {\n        this.y = y;\n        return this;\n      }\n    }, {\n      key: \"setComponent\",\n      value: function setComponent(index, value) {\n        switch (index) {\n          case 0:\n            this.x = value;\n            break;\n          case 1:\n            this.y = value;\n            break;\n          default:\n            throw new Error('index is out of range: ' + index);\n        }\n        return this;\n      }\n    }, {\n      key: \"getComponent\",\n      value: function getComponent(index) {\n        switch (index) {\n          case 0:\n            return this.x;\n          case 1:\n            return this.y;\n          default:\n            throw new Error('index is out of range: ' + index);\n        }\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.x, this.y);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(v) {\n        this.x = v.x;\n        this.y = v.y;\n        return this;\n      }\n    }, {\n      key: \"add\",\n      value: function add(v) {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n      }\n    }, {\n      key: \"addScalar\",\n      value: function addScalar(s) {\n        this.x += s;\n        this.y += s;\n        return this;\n      }\n    }, {\n      key: \"addVectors\",\n      value: function addVectors(a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        return this;\n      }\n    }, {\n      key: \"addScaledVector\",\n      value: function addScaledVector(v, s) {\n        this.x += v.x * s;\n        this.y += v.y * s;\n        return this;\n      }\n    }, {\n      key: \"sub\",\n      value: function sub(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n      }\n    }, {\n      key: \"subScalar\",\n      value: function subScalar(s) {\n        this.x -= s;\n        this.y -= s;\n        return this;\n      }\n    }, {\n      key: \"subVectors\",\n      value: function subVectors(a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(v) {\n        this.x *= v.x;\n        this.y *= v.y;\n        return this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n      }\n    }, {\n      key: \"divide\",\n      value: function divide(v) {\n        this.x /= v.x;\n        this.y /= v.y;\n        return this;\n      }\n    }, {\n      key: \"divideScalar\",\n      value: function divideScalar(scalar) {\n        return this.multiplyScalar(1 / scalar);\n      }\n    }, {\n      key: \"applyMatrix3\",\n      value: function applyMatrix3(m) {\n        var x = this.x,\n          y = this.y;\n        var e = m.elements;\n        this.x = e[0] * x + e[3] * y + e[6];\n        this.y = e[1] * x + e[4] * y + e[7];\n        return this;\n      }\n    }, {\n      key: \"min\",\n      value: function min(v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        return this;\n      }\n    }, {\n      key: \"max\",\n      value: function max(v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        return this;\n      }\n    }, {\n      key: \"clamp\",\n      value: function clamp(min, max) {\n        // assumes min < max, componentwise\n\n        this.x = _clamp(this.x, min.x, max.x);\n        this.y = _clamp(this.y, min.y, max.y);\n        return this;\n      }\n    }, {\n      key: \"clampScalar\",\n      value: function clampScalar(minVal, maxVal) {\n        this.x = _clamp(this.x, minVal, maxVal);\n        this.y = _clamp(this.y, minVal, maxVal);\n        return this;\n      }\n    }, {\n      key: \"clampLength\",\n      value: function clampLength(min, max) {\n        var length = this.length();\n        return this.divideScalar(length || 1).multiplyScalar(_clamp(length, min, max));\n      }\n    }, {\n      key: \"floor\",\n      value: function floor() {\n        this.x = Math.floor(this.x);\n        this.y = Math.floor(this.y);\n        return this;\n      }\n    }, {\n      key: \"ceil\",\n      value: function ceil() {\n        this.x = Math.ceil(this.x);\n        this.y = Math.ceil(this.y);\n        return this;\n      }\n    }, {\n      key: \"round\",\n      value: function round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n      }\n    }, {\n      key: \"roundToZero\",\n      value: function roundToZero() {\n        this.x = Math.trunc(this.x);\n        this.y = Math.trunc(this.y);\n        return this;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n      }\n    }, {\n      key: \"dot\",\n      value: function dot(v) {\n        return this.x * v.x + this.y * v.y;\n      }\n    }, {\n      key: \"cross\",\n      value: function cross(v) {\n        return this.x * v.y - this.y * v.x;\n      }\n    }, {\n      key: \"lengthSq\",\n      value: function lengthSq() {\n        return this.x * this.x + this.y * this.y;\n      }\n    }, {\n      key: \"length\",\n      value: function length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      }\n    }, {\n      key: \"manhattanLength\",\n      value: function manhattanLength() {\n        return Math.abs(this.x) + Math.abs(this.y);\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize() {\n        return this.divideScalar(this.length() || 1);\n      }\n    }, {\n      key: \"angle\",\n      value: function angle() {\n        // computes the angle in radians with respect to the positive x-axis\n\n        var angle = Math.atan2(-this.y, -this.x) + Math.PI;\n        return angle;\n      }\n    }, {\n      key: \"angleTo\",\n      value: function angleTo(v) {\n        var denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n        if (denominator === 0) return Math.PI / 2;\n        var theta = this.dot(v) / denominator;\n\n        // clamp, to handle numerical problems\n\n        return Math.acos(_clamp(theta, -1, 1));\n      }\n    }, {\n      key: \"distanceTo\",\n      value: function distanceTo(v) {\n        return Math.sqrt(this.distanceToSquared(v));\n      }\n    }, {\n      key: \"distanceToSquared\",\n      value: function distanceToSquared(v) {\n        var dx = this.x - v.x,\n          dy = this.y - v.y;\n        return dx * dx + dy * dy;\n      }\n    }, {\n      key: \"manhattanDistanceTo\",\n      value: function manhattanDistanceTo(v) {\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n      }\n    }, {\n      key: \"setLength\",\n      value: function setLength(length) {\n        return this.normalize().multiplyScalar(length);\n      }\n    }, {\n      key: \"lerp\",\n      value: function lerp(v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n        return this;\n      }\n    }, {\n      key: \"lerpVectors\",\n      value: function lerpVectors(v1, v2, alpha) {\n        this.x = v1.x + (v2.x - v1.x) * alpha;\n        this.y = v1.y + (v2.y - v1.y) * alpha;\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(v) {\n        return v.x === this.x && v.y === this.y;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        this.x = array[offset];\n        this.y = array[offset + 1];\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        return array;\n      }\n    }, {\n      key: \"fromBufferAttribute\",\n      value: function fromBufferAttribute(attribute, index) {\n        this.x = attribute.getX(index);\n        this.y = attribute.getY(index);\n        return this;\n      }\n    }, {\n      key: \"rotateAround\",\n      value: function rotateAround(center, angle) {\n        var c = Math.cos(angle),\n          s = Math.sin(angle);\n        var x = this.x - center.x;\n        var y = this.y - center.y;\n        this.x = x * c - y * s + center.x;\n        this.y = x * s + y * c + center.y;\n        return this;\n      }\n    }, {\n      key: \"random\",\n      value: function random() {\n        this.x = Math.random();\n        this.y = Math.random();\n        return this;\n      }\n    }, {\n      key: Symbol.iterator,\n      value: function* value() {\n        yield this.x;\n        yield this.y;\n      }\n    }]);\n  }();\n  var Matrix3 = exports.Matrix3 = /*#__PURE__*/function () {\n    function Matrix3(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n      (0, _classCallCheck2.default)(this, Matrix3);\n      Matrix3.prototype.isMatrix3 = true;\n      this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n      if (n11 !== undefined) {\n        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);\n      }\n    }\n    return (0, _createClass2.default)(Matrix3, [{\n      key: \"set\",\n      value: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n        var te = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[2] = n31;\n        te[3] = n12;\n        te[4] = n22;\n        te[5] = n32;\n        te[6] = n13;\n        te[7] = n23;\n        te[8] = n33;\n        return this;\n      }\n    }, {\n      key: \"identity\",\n      value: function identity() {\n        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(m) {\n        var te = this.elements;\n        var me = m.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        return this;\n      }\n    }, {\n      key: \"extractBasis\",\n      value: function extractBasis(xAxis, yAxis, zAxis) {\n        xAxis.setFromMatrix3Column(this, 0);\n        yAxis.setFromMatrix3Column(this, 1);\n        zAxis.setFromMatrix3Column(this, 2);\n        return this;\n      }\n    }, {\n      key: \"setFromMatrix4\",\n      value: function setFromMatrix4(m) {\n        var me = m.elements;\n        this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(m) {\n        return this.multiplyMatrices(this, m);\n      }\n    }, {\n      key: \"premultiply\",\n      value: function premultiply(m) {\n        return this.multiplyMatrices(m, this);\n      }\n    }, {\n      key: \"multiplyMatrices\",\n      value: function multiplyMatrices(a, b) {\n        var ae = a.elements;\n        var be = b.elements;\n        var te = this.elements;\n        var a11 = ae[0],\n          a12 = ae[3],\n          a13 = ae[6];\n        var a21 = ae[1],\n          a22 = ae[4],\n          a23 = ae[7];\n        var a31 = ae[2],\n          a32 = ae[5],\n          a33 = ae[8];\n        var b11 = be[0],\n          b12 = be[3],\n          b13 = be[6];\n        var b21 = be[1],\n          b22 = be[4],\n          b23 = be[7];\n        var b31 = be[2],\n          b32 = be[5],\n          b33 = be[8];\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n        return this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function multiplyScalar(s) {\n        var te = this.elements;\n        te[0] *= s;\n        te[3] *= s;\n        te[6] *= s;\n        te[1] *= s;\n        te[4] *= s;\n        te[7] *= s;\n        te[2] *= s;\n        te[5] *= s;\n        te[8] *= s;\n        return this;\n      }\n    }, {\n      key: \"determinant\",\n      value: function determinant() {\n        var te = this.elements;\n        var a = te[0],\n          b = te[1],\n          c = te[2],\n          d = te[3],\n          e = te[4],\n          f = te[5],\n          g = te[6],\n          h = te[7],\n          i = te[8];\n        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n      }\n    }, {\n      key: \"invert\",\n      value: function invert() {\n        var te = this.elements,\n          n11 = te[0],\n          n21 = te[1],\n          n31 = te[2],\n          n12 = te[3],\n          n22 = te[4],\n          n32 = te[5],\n          n13 = te[6],\n          n23 = te[7],\n          n33 = te[8],\n          t11 = n33 * n22 - n32 * n23,\n          t12 = n32 * n13 - n33 * n12,\n          t13 = n23 * n12 - n22 * n13,\n          det = n11 * t11 + n21 * t12 + n31 * t13;\n        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n        var detInv = 1 / det;\n        te[0] = t11 * detInv;\n        te[1] = (n31 * n23 - n33 * n21) * detInv;\n        te[2] = (n32 * n21 - n31 * n22) * detInv;\n        te[3] = t12 * detInv;\n        te[4] = (n33 * n11 - n31 * n13) * detInv;\n        te[5] = (n31 * n12 - n32 * n11) * detInv;\n        te[6] = t13 * detInv;\n        te[7] = (n21 * n13 - n23 * n11) * detInv;\n        te[8] = (n22 * n11 - n21 * n12) * detInv;\n        return this;\n      }\n    }, {\n      key: \"transpose\",\n      value: function transpose() {\n        var tmp;\n        var m = this.elements;\n        tmp = m[1];\n        m[1] = m[3];\n        m[3] = tmp;\n        tmp = m[2];\n        m[2] = m[6];\n        m[6] = tmp;\n        tmp = m[5];\n        m[5] = m[7];\n        m[7] = tmp;\n        return this;\n      }\n    }, {\n      key: \"getNormalMatrix\",\n      value: function getNormalMatrix(matrix4) {\n        return this.setFromMatrix4(matrix4).invert().transpose();\n      }\n    }, {\n      key: \"transposeIntoArray\",\n      value: function transposeIntoArray(r) {\n        var m = this.elements;\n        r[0] = m[0];\n        r[1] = m[3];\n        r[2] = m[6];\n        r[3] = m[1];\n        r[4] = m[4];\n        r[5] = m[7];\n        r[6] = m[2];\n        r[7] = m[5];\n        r[8] = m[8];\n        return this;\n      }\n    }, {\n      key: \"setUvTransform\",\n      value: function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n        var c = Math.cos(rotation);\n        var s = Math.sin(rotation);\n        this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n        return this;\n      }\n\n      //\n    }, {\n      key: \"scale\",\n      value: function scale(sx, sy) {\n        this.premultiply(_m3.makeScale(sx, sy));\n        return this;\n      }\n    }, {\n      key: \"rotate\",\n      value: function rotate(theta) {\n        this.premultiply(_m3.makeRotation(-theta));\n        return this;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate(tx, ty) {\n        this.premultiply(_m3.makeTranslation(tx, ty));\n        return this;\n      }\n\n      // for 2D Transforms\n    }, {\n      key: \"makeTranslation\",\n      value: function makeTranslation(x, y) {\n        if (x.isVector2) {\n          this.set(1, 0, x.x, 0, 1, x.y, 0, 0, 1);\n        } else {\n          this.set(1, 0, x, 0, 1, y, 0, 0, 1);\n        }\n        return this;\n      }\n    }, {\n      key: \"makeRotation\",\n      value: function makeRotation(theta) {\n        // counterclockwise\n\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n        this.set(c, -s, 0, s, c, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"makeScale\",\n      value: function makeScale(x, y) {\n        this.set(x, 0, 0, 0, y, 0, 0, 0, 1);\n        return this;\n      }\n\n      //\n    }, {\n      key: \"equals\",\n      value: function equals(matrix) {\n        var te = this.elements;\n        var me = matrix.elements;\n        for (var i = 0; i < 9; i++) {\n          if (te[i] !== me[i]) return false;\n        }\n        return true;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        for (var i = 0; i < 9; i++) {\n          this.elements[i] = array[i + offset];\n        }\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n        return array;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().fromArray(this.elements);\n      }\n    }]);\n  }();\n  var _m3 = /*@__PURE__*/new Matrix3();\n  function arrayNeedsUint32(array) {\n    // assumes larger values usually on last\n\n    for (var i = array.length - 1; i >= 0; --i) {\n      if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n    }\n    return false;\n  }\n  var TYPED_ARRAYS = {\n    Int8Array: Int8Array,\n    Uint8Array: Uint8Array,\n    Uint8ClampedArray: Uint8ClampedArray,\n    Int16Array: Int16Array,\n    Uint16Array: Uint16Array,\n    Int32Array: Int32Array,\n    Uint32Array: Uint32Array,\n    Float32Array: Float32Array,\n    Float64Array: Float64Array\n  };\n  function getTypedArray(type, buffer) {\n    return new TYPED_ARRAYS[type](buffer);\n  }\n  function createElementNS(name) {\n    return document.createElementNS('http://www.w3.org/1999/xhtml', name);\n  }\n  function createCanvasElement() {\n    var canvas = createElementNS('canvas');\n    canvas.style.display = 'block';\n    return canvas;\n  }\n  var _cache = {};\n  function warnOnce(message) {\n    if (message in _cache) return;\n    _cache[message] = true;\n    console.warn(message);\n  }\n  function probeAsync(gl, sync, interval) {\n    return new Promise(function (resolve, reject) {\n      function probe() {\n        switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {\n          case gl.WAIT_FAILED:\n            reject();\n            break;\n          case gl.TIMEOUT_EXPIRED:\n            setTimeout(probe, interval);\n            break;\n          default:\n            resolve();\n        }\n      }\n      setTimeout(probe, interval);\n    });\n  }\n  function toNormalizedProjectionMatrix(projectionMatrix) {\n    var m = projectionMatrix.elements;\n\n    // Convert [-1, 1] to [0, 1] projection matrix\n    m[2] = 0.5 * m[2] + 0.5 * m[3];\n    m[6] = 0.5 * m[6] + 0.5 * m[7];\n    m[10] = 0.5 * m[10] + 0.5 * m[11];\n    m[14] = 0.5 * m[14] + 0.5 * m[15];\n  }\n  function toReversedProjectionMatrix(projectionMatrix) {\n    var m = projectionMatrix.elements;\n    var isPerspectiveMatrix = m[11] === -1;\n\n    // Reverse [0, 1] projection matrix\n    if (isPerspectiveMatrix) {\n      m[10] = -m[10] - 1;\n      m[14] = -m[14];\n    } else {\n      m[10] = -m[10];\n      m[14] = -m[14] + 1;\n    }\n  }\n  var LINEAR_REC709_TO_XYZ = /*@__PURE__*/new Matrix3().set(0.4123908, 0.3575843, 0.1804808, 0.2126390, 0.7151687, 0.0721923, 0.0193308, 0.1191948, 0.9505322);\n  var XYZ_TO_LINEAR_REC709 = /*@__PURE__*/new Matrix3().set(3.2409699, -1.5373832, -0.4986108, -0.9692436, 1.8759675, 0.0415551, 0.0556301, -0.2039770, 1.0569715);\n  function createColorManagement() {\n    var ColorManagement = {\n      enabled: true,\n      workingColorSpace: LinearSRGBColorSpace,\n      /**\n       * Implementations of supported color spaces.\n       *\n       * Required:\n       *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n       *\t- whitePoint: reference white [ x y ]\n       *\t- transfer: transfer function (pre-defined)\n       *\t- toXYZ: Matrix3 RGB to XYZ transform\n       *\t- fromXYZ: Matrix3 XYZ to RGB transform\n       *\t- luminanceCoefficients: RGB luminance coefficients\n       *\n       * Optional:\n       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n       *\n       * Reference:\n       * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n       */\n      spaces: {},\n      convert: function convert(color, sourceColorSpace, targetColorSpace) {\n        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {\n          return color;\n        }\n        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {\n          color.r = SRGBToLinear(color.r);\n          color.g = SRGBToLinear(color.g);\n          color.b = SRGBToLinear(color.b);\n        }\n        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {\n          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);\n          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);\n        }\n        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {\n          color.r = LinearToSRGB(color.r);\n          color.g = LinearToSRGB(color.g);\n          color.b = LinearToSRGB(color.b);\n        }\n        return color;\n      },\n      fromWorkingColorSpace: function fromWorkingColorSpace(color, targetColorSpace) {\n        return this.convert(color, this.workingColorSpace, targetColorSpace);\n      },\n      toWorkingColorSpace: function toWorkingColorSpace(color, sourceColorSpace) {\n        return this.convert(color, sourceColorSpace, this.workingColorSpace);\n      },\n      getPrimaries: function getPrimaries(colorSpace) {\n        return this.spaces[colorSpace].primaries;\n      },\n      getTransfer: function getTransfer(colorSpace) {\n        if (colorSpace === NoColorSpace) return LinearTransfer;\n        return this.spaces[colorSpace].transfer;\n      },\n      getLuminanceCoefficients: function getLuminanceCoefficients(target) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.workingColorSpace;\n        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);\n      },\n      define: function define(colorSpaces) {\n        Object.assign(this.spaces, colorSpaces);\n      },\n      // Internal APIs\n\n      _getMatrix: function _getMatrix(targetMatrix, sourceColorSpace, targetColorSpace) {\n        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);\n      },\n      _getDrawingBufferColorSpace: function _getDrawingBufferColorSpace(colorSpace) {\n        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;\n      },\n      _getUnpackColorSpace: function _getUnpackColorSpace() {\n        var colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.workingColorSpace;\n        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;\n      }\n    };\n\n    /******************************************************************************\n     * sRGB definitions\n     */\n\n    var REC709_PRIMARIES = [0.640, 0.330, 0.300, 0.600, 0.150, 0.060];\n    var REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];\n    var D65 = [0.3127, 0.3290];\n    ColorManagement.define((0, _defineProperty2.default)((0, _defineProperty2.default)({}, LinearSRGBColorSpace, {\n      primaries: REC709_PRIMARIES,\n      whitePoint: D65,\n      transfer: LinearTransfer,\n      toXYZ: LINEAR_REC709_TO_XYZ,\n      fromXYZ: XYZ_TO_LINEAR_REC709,\n      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n      workingColorSpaceConfig: {\n        unpackColorSpace: SRGBColorSpace\n      },\n      outputColorSpaceConfig: {\n        drawingBufferColorSpace: SRGBColorSpace\n      }\n    }), SRGBColorSpace, {\n      primaries: REC709_PRIMARIES,\n      whitePoint: D65,\n      transfer: SRGBTransfer,\n      toXYZ: LINEAR_REC709_TO_XYZ,\n      fromXYZ: XYZ_TO_LINEAR_REC709,\n      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n      outputColorSpaceConfig: {\n        drawingBufferColorSpace: SRGBColorSpace\n      }\n    }));\n    return ColorManagement;\n  }\n  var ColorManagement = exports.ColorManagement = /*@__PURE__*/createColorManagement();\n  function SRGBToLinear(c) {\n    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n  }\n  function LinearToSRGB(c) {\n    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n  }\n  var _canvas;\n  var ImageUtils = exports.ImageUtils = /*#__PURE__*/function () {\n    function ImageUtils() {\n      (0, _classCallCheck2.default)(this, ImageUtils);\n    }\n    return (0, _createClass2.default)(ImageUtils, null, [{\n      key: \"getDataURL\",\n      value: function getDataURL(image) {\n        if (/^data:/i.test(image.src)) {\n          return image.src;\n        }\n        if (typeof HTMLCanvasElement === 'undefined') {\n          return image.src;\n        }\n        var canvas;\n        if (image instanceof HTMLCanvasElement) {\n          canvas = image;\n        } else {\n          if (_canvas === undefined) _canvas = createElementNS('canvas');\n          _canvas.width = image.width;\n          _canvas.height = image.height;\n          var context = _canvas.getContext('2d');\n          if (image instanceof ImageData) {\n            context.putImageData(image, 0, 0);\n          } else {\n            context.drawImage(image, 0, 0, image.width, image.height);\n          }\n          canvas = _canvas;\n        }\n        if (canvas.width > 2048 || canvas.height > 2048) {\n          console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n          return canvas.toDataURL('image/jpeg', 0.6);\n        } else {\n          return canvas.toDataURL('image/png');\n        }\n      }\n    }, {\n      key: \"sRGBToLinear\",\n      value: function sRGBToLinear(image) {\n        if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n          var canvas = createElementNS('canvas');\n          canvas.width = image.width;\n          canvas.height = image.height;\n          var context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, image.width, image.height);\n          var imageData = context.getImageData(0, 0, image.width, image.height);\n          var data = imageData.data;\n          for (var i = 0; i < data.length; i++) {\n            data[i] = SRGBToLinear(data[i] / 255) * 255;\n          }\n          context.putImageData(imageData, 0, 0);\n          return canvas;\n        } else if (image.data) {\n          var _data = image.data.slice(0);\n          for (var _i = 0; _i < _data.length; _i++) {\n            if (_data instanceof Uint8Array || _data instanceof Uint8ClampedArray) {\n              _data[_i] = Math.floor(SRGBToLinear(_data[_i] / 255) * 255);\n            } else {\n              // assuming float\n\n              _data[_i] = SRGBToLinear(_data[_i]);\n            }\n          }\n          return {\n            data: _data,\n            width: image.width,\n            height: image.height\n          };\n        } else {\n          console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');\n          return image;\n        }\n      }\n    }]);\n  }();\n  var _sourceId = 0;\n  var Source = exports.Source = /*#__PURE__*/function () {\n    function Source() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, Source);\n      this.isSource = true;\n      Object.defineProperty(this, 'id', {\n        value: _sourceId++\n      });\n      this.uuid = generateUUID();\n      this.data = data;\n      this.dataReady = true;\n      this.version = 0;\n    }\n    return (0, _createClass2.default)(Source, [{\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) this.version++;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var isRootObject = meta === undefined || typeof meta === 'string';\n        if (!isRootObject && meta.images[this.uuid] !== undefined) {\n          return meta.images[this.uuid];\n        }\n        var output = {\n          uuid: this.uuid,\n          url: ''\n        };\n        var data = this.data;\n        if (data !== null) {\n          var url;\n          if (Array.isArray(data)) {\n            // cube texture\n\n            url = [];\n            for (var i = 0, l = data.length; i < l; i++) {\n              if (data[i].isDataTexture) {\n                url.push(serializeImage(data[i].image));\n              } else {\n                url.push(serializeImage(data[i]));\n              }\n            }\n          } else {\n            // texture\n\n            url = serializeImage(data);\n          }\n          output.url = url;\n        }\n        if (!isRootObject) {\n          meta.images[this.uuid] = output;\n        }\n        return output;\n      }\n    }]);\n  }();\n  function serializeImage(image) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      // default images\n\n      return ImageUtils.getDataURL(image);\n    } else {\n      if (image.data) {\n        // images of DataTexture\n\n        return {\n          data: Array.from(image.data),\n          width: image.width,\n          height: image.height,\n          type: image.data.constructor.name\n        };\n      } else {\n        console.warn('THREE.Texture: Unable to serialize Texture.');\n        return {};\n      }\n    }\n  }\n  var _textureId = 0;\n  var Texture = exports.Texture = /*#__PURE__*/function (_EventDispatcher) {\n    function Texture() {\n      var _this;\n      var image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Texture.DEFAULT_IMAGE;\n      var mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Texture.DEFAULT_MAPPING;\n      var wrapS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ClampToEdgeWrapping;\n      var wrapT = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ClampToEdgeWrapping;\n      var magFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : LinearFilter;\n      var minFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LinearMipmapLinearFilter;\n      var format = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : RGBAFormat;\n      var type = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : UnsignedByteType;\n      var anisotropy = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : Texture.DEFAULT_ANISOTROPY;\n      var colorSpace = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NoColorSpace;\n      (0, _classCallCheck2.default)(this, Texture);\n      _this = _callSuper(this, Texture);\n      _this.isTexture = true;\n      Object.defineProperty(_this, 'id', {\n        value: _textureId++\n      });\n      _this.uuid = generateUUID();\n      _this.name = '';\n      _this.source = new Source(image);\n      _this.mipmaps = [];\n      _this.mapping = mapping;\n      _this.channel = 0;\n      _this.wrapS = wrapS;\n      _this.wrapT = wrapT;\n      _this.magFilter = magFilter;\n      _this.minFilter = minFilter;\n      _this.anisotropy = anisotropy;\n      _this.format = format;\n      _this.internalFormat = null;\n      _this.type = type;\n      _this.offset = new Vector2(0, 0);\n      _this.repeat = new Vector2(1, 1);\n      _this.center = new Vector2(0, 0);\n      _this.rotation = 0;\n      _this.matrixAutoUpdate = true;\n      _this.matrix = new Matrix3();\n      _this.generateMipmaps = true;\n      _this.premultiplyAlpha = false;\n      _this.flipY = true;\n      _this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n      _this.colorSpace = colorSpace;\n      _this.userData = {};\n      _this.version = 0;\n      _this.onUpdate = null;\n      _this.renderTarget = null; // assign texture to a render target\n      _this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\n      _this.pmremVersion = 0; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\n      return _this;\n    }\n    (0, _inherits2.default)(Texture, _EventDispatcher);\n    return (0, _createClass2.default)(Texture, [{\n      key: \"image\",\n      get: function get() {\n        return this.source.data;\n      },\n      set: function set() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this.source.data = value;\n      }\n    }, {\n      key: \"updateMatrix\",\n      value: function updateMatrix() {\n        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.name = source.name;\n        this.source = source.source;\n        this.mipmaps = source.mipmaps.slice(0);\n        this.mapping = source.mapping;\n        this.channel = source.channel;\n        this.wrapS = source.wrapS;\n        this.wrapT = source.wrapT;\n        this.magFilter = source.magFilter;\n        this.minFilter = source.minFilter;\n        this.anisotropy = source.anisotropy;\n        this.format = source.format;\n        this.internalFormat = source.internalFormat;\n        this.type = source.type;\n        this.offset.copy(source.offset);\n        this.repeat.copy(source.repeat);\n        this.center.copy(source.center);\n        this.rotation = source.rotation;\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrix.copy(source.matrix);\n        this.generateMipmaps = source.generateMipmaps;\n        this.premultiplyAlpha = source.premultiplyAlpha;\n        this.flipY = source.flipY;\n        this.unpackAlignment = source.unpackAlignment;\n        this.colorSpace = source.colorSpace;\n        this.renderTarget = source.renderTarget;\n        this.isRenderTargetTexture = source.isRenderTargetTexture;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        this.needsUpdate = true;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var isRootObject = meta === undefined || typeof meta === 'string';\n        if (!isRootObject && meta.textures[this.uuid] !== undefined) {\n          return meta.textures[this.uuid];\n        }\n        var output = {\n          metadata: {\n            version: 4.6,\n            type: 'Texture',\n            generator: 'Texture.toJSON'\n          },\n          uuid: this.uuid,\n          name: this.name,\n          image: this.source.toJSON(meta).uuid,\n          mapping: this.mapping,\n          channel: this.channel,\n          repeat: [this.repeat.x, this.repeat.y],\n          offset: [this.offset.x, this.offset.y],\n          center: [this.center.x, this.center.y],\n          rotation: this.rotation,\n          wrap: [this.wrapS, this.wrapT],\n          format: this.format,\n          internalFormat: this.internalFormat,\n          type: this.type,\n          colorSpace: this.colorSpace,\n          minFilter: this.minFilter,\n          magFilter: this.magFilter,\n          anisotropy: this.anisotropy,\n          flipY: this.flipY,\n          generateMipmaps: this.generateMipmaps,\n          premultiplyAlpha: this.premultiplyAlpha,\n          unpackAlignment: this.unpackAlignment\n        };\n        if (Object.keys(this.userData).length > 0) output.userData = this.userData;\n        if (!isRootObject) {\n          meta.textures[this.uuid] = output;\n        }\n        return output;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n      }\n    }, {\n      key: \"transformUv\",\n      value: function transformUv(uv) {\n        if (this.mapping !== UVMapping) return uv;\n        uv.applyMatrix3(this.matrix);\n        if (uv.x < 0 || uv.x > 1) {\n          switch (this.wrapS) {\n            case RepeatWrapping:\n              uv.x = uv.x - Math.floor(uv.x);\n              break;\n            case ClampToEdgeWrapping:\n              uv.x = uv.x < 0 ? 0 : 1;\n              break;\n            case MirroredRepeatWrapping:\n              if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n                uv.x = Math.ceil(uv.x) - uv.x;\n              } else {\n                uv.x = uv.x - Math.floor(uv.x);\n              }\n              break;\n          }\n        }\n        if (uv.y < 0 || uv.y > 1) {\n          switch (this.wrapT) {\n            case RepeatWrapping:\n              uv.y = uv.y - Math.floor(uv.y);\n              break;\n            case ClampToEdgeWrapping:\n              uv.y = uv.y < 0 ? 0 : 1;\n              break;\n            case MirroredRepeatWrapping:\n              if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n                uv.y = Math.ceil(uv.y) - uv.y;\n              } else {\n                uv.y = uv.y - Math.floor(uv.y);\n              }\n              break;\n          }\n        }\n        if (this.flipY) {\n          uv.y = 1 - uv.y;\n        }\n        return uv;\n      }\n    }, {\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) {\n          this.version++;\n          this.source.needsUpdate = true;\n        }\n      }\n    }, {\n      key: \"needsPMREMUpdate\",\n      set: function set(value) {\n        if (value === true) {\n          this.pmremVersion++;\n        }\n      }\n    }]);\n  }(EventDispatcher);\n  Texture.DEFAULT_IMAGE = null;\n  Texture.DEFAULT_MAPPING = UVMapping;\n  Texture.DEFAULT_ANISOTROPY = 1;\n  var Vector4 = exports.Vector4 = /*#__PURE__*/function () {\n    function Vector4() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, Vector4);\n      Vector4.prototype.isVector4 = true;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n    }\n    return (0, _createClass2.default)(Vector4, [{\n      key: \"width\",\n      get: function get() {\n        return this.z;\n      },\n      set: function set(value) {\n        this.z = value;\n      }\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this.w;\n      },\n      set: function set(value) {\n        this.w = value;\n      }\n    }, {\n      key: \"set\",\n      value: function set(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n      }\n    }, {\n      key: \"setScalar\",\n      value: function setScalar(scalar) {\n        this.x = scalar;\n        this.y = scalar;\n        this.z = scalar;\n        this.w = scalar;\n        return this;\n      }\n    }, {\n      key: \"setX\",\n      value: function setX(x) {\n        this.x = x;\n        return this;\n      }\n    }, {\n      key: \"setY\",\n      value: function setY(y) {\n        this.y = y;\n        return this;\n      }\n    }, {\n      key: \"setZ\",\n      value: function setZ(z) {\n        this.z = z;\n        return this;\n      }\n    }, {\n      key: \"setW\",\n      value: function setW(w) {\n        this.w = w;\n        return this;\n      }\n    }, {\n      key: \"setComponent\",\n      value: function setComponent(index, value) {\n        switch (index) {\n          case 0:\n            this.x = value;\n            break;\n          case 1:\n            this.y = value;\n            break;\n          case 2:\n            this.z = value;\n            break;\n          case 3:\n            this.w = value;\n            break;\n          default:\n            throw new Error('index is out of range: ' + index);\n        }\n        return this;\n      }\n    }, {\n      key: \"getComponent\",\n      value: function getComponent(index) {\n        switch (index) {\n          case 0:\n            return this.x;\n          case 1:\n            return this.y;\n          case 2:\n            return this.z;\n          case 3:\n            return this.w;\n          default:\n            throw new Error('index is out of range: ' + index);\n        }\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.x, this.y, this.z, this.w);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(v) {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n        this.w = v.w !== undefined ? v.w : 1;\n        return this;\n      }\n    }, {\n      key: \"add\",\n      value: function add(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        this.w += v.w;\n        return this;\n      }\n    }, {\n      key: \"addScalar\",\n      value: function addScalar(s) {\n        this.x += s;\n        this.y += s;\n        this.z += s;\n        this.w += s;\n        return this;\n      }\n    }, {\n      key: \"addVectors\",\n      value: function addVectors(a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n        this.w = a.w + b.w;\n        return this;\n      }\n    }, {\n      key: \"addScaledVector\",\n      value: function addScaledVector(v, s) {\n        this.x += v.x * s;\n        this.y += v.y * s;\n        this.z += v.z * s;\n        this.w += v.w * s;\n        return this;\n      }\n    }, {\n      key: \"sub\",\n      value: function sub(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        this.w -= v.w;\n        return this;\n      }\n    }, {\n      key: \"subScalar\",\n      value: function subScalar(s) {\n        this.x -= s;\n        this.y -= s;\n        this.z -= s;\n        this.w -= s;\n        return this;\n      }\n    }, {\n      key: \"subVectors\",\n      value: function subVectors(a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n        this.w = a.w - b.w;\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(v) {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        this.w *= v.w;\n        return this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        this.w *= scalar;\n        return this;\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(m) {\n        var x = this.x,\n          y = this.y,\n          z = this.z,\n          w = this.w;\n        var e = m.elements;\n        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n        return this;\n      }\n    }, {\n      key: \"divide\",\n      value: function divide(v) {\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n        this.w /= v.w;\n        return this;\n      }\n    }, {\n      key: \"divideScalar\",\n      value: function divideScalar(scalar) {\n        return this.multiplyScalar(1 / scalar);\n      }\n    }, {\n      key: \"setAxisAngleFromQuaternion\",\n      value: function setAxisAngleFromQuaternion(q) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n        // q is assumed to be normalized\n\n        this.w = 2 * Math.acos(q.w);\n        var s = Math.sqrt(1 - q.w * q.w);\n        if (s < 0.0001) {\n          this.x = 1;\n          this.y = 0;\n          this.z = 0;\n        } else {\n          this.x = q.x / s;\n          this.y = q.y / s;\n          this.z = q.z / s;\n        }\n        return this;\n      }\n    }, {\n      key: \"setAxisAngleFromRotationMatrix\",\n      value: function setAxisAngleFromRotationMatrix(m) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        var angle, x, y, z; // variables for result\n        var epsilon = 0.01,\n          // margin to allow for rounding errors\n          epsilon2 = 0.1,\n          // margin to distinguish between 0 and 180 degrees\n\n          te = m.elements,\n          m11 = te[0],\n          m12 = te[4],\n          m13 = te[8],\n          m21 = te[1],\n          m22 = te[5],\n          m23 = te[9],\n          m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n          // singularity found\n          // first check for identity matrix which must have +1 for all terms\n          // in leading diagonal and zero in other terms\n\n          if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n            // this singularity is identity matrix so angle = 0\n\n            this.set(1, 0, 0, 0);\n            return this; // zero angle, arbitrary axis\n          }\n\n          // otherwise this singularity is angle = 180\n\n          angle = Math.PI;\n          var xx = (m11 + 1) / 2;\n          var yy = (m22 + 1) / 2;\n          var zz = (m33 + 1) / 2;\n          var xy = (m12 + m21) / 4;\n          var xz = (m13 + m31) / 4;\n          var yz = (m23 + m32) / 4;\n          if (xx > yy && xx > zz) {\n            // m11 is the largest diagonal term\n\n            if (xx < epsilon) {\n              x = 0;\n              y = 0.707106781;\n              z = 0.707106781;\n            } else {\n              x = Math.sqrt(xx);\n              y = xy / x;\n              z = xz / x;\n            }\n          } else if (yy > zz) {\n            // m22 is the largest diagonal term\n\n            if (yy < epsilon) {\n              x = 0.707106781;\n              y = 0;\n              z = 0.707106781;\n            } else {\n              y = Math.sqrt(yy);\n              x = xy / y;\n              z = yz / y;\n            }\n          } else {\n            // m33 is the largest diagonal term so base result on this\n\n            if (zz < epsilon) {\n              x = 0.707106781;\n              y = 0.707106781;\n              z = 0;\n            } else {\n              z = Math.sqrt(zz);\n              x = xz / z;\n              y = yz / z;\n            }\n          }\n          this.set(x, y, z, angle);\n          return this; // return 180 deg rotation\n        }\n\n        // as we have reached here there are no singularities so we can handle normally\n\n        var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n        if (Math.abs(s) < 0.001) s = 1;\n\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\n        // caught by singularity test above, but I've left it in just in case\n\n        this.x = (m32 - m23) / s;\n        this.y = (m13 - m31) / s;\n        this.z = (m21 - m12) / s;\n        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n        return this;\n      }\n    }, {\n      key: \"setFromMatrixPosition\",\n      value: function setFromMatrixPosition(m) {\n        var e = m.elements;\n        this.x = e[12];\n        this.y = e[13];\n        this.z = e[14];\n        this.w = e[15];\n        return this;\n      }\n    }, {\n      key: \"min\",\n      value: function min(v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        this.z = Math.min(this.z, v.z);\n        this.w = Math.min(this.w, v.w);\n        return this;\n      }\n    }, {\n      key: \"max\",\n      value: function max(v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        this.z = Math.max(this.z, v.z);\n        this.w = Math.max(this.w, v.w);\n        return this;\n      }\n    }, {\n      key: \"clamp\",\n      value: function clamp(min, max) {\n        // assumes min < max, componentwise\n\n        this.x = _clamp(this.x, min.x, max.x);\n        this.y = _clamp(this.y, min.y, max.y);\n        this.z = _clamp(this.z, min.z, max.z);\n        this.w = _clamp(this.w, min.w, max.w);\n        return this;\n      }\n    }, {\n      key: \"clampScalar\",\n      value: function clampScalar(minVal, maxVal) {\n        this.x = _clamp(this.x, minVal, maxVal);\n        this.y = _clamp(this.y, minVal, maxVal);\n        this.z = _clamp(this.z, minVal, maxVal);\n        this.w = _clamp(this.w, minVal, maxVal);\n        return this;\n      }\n    }, {\n      key: \"clampLength\",\n      value: function clampLength(min, max) {\n        var length = this.length();\n        return this.divideScalar(length || 1).multiplyScalar(_clamp(length, min, max));\n      }\n    }, {\n      key: \"floor\",\n      value: function floor() {\n        this.x = Math.floor(this.x);\n        this.y = Math.floor(this.y);\n        this.z = Math.floor(this.z);\n        this.w = Math.floor(this.w);\n        return this;\n      }\n    }, {\n      key: \"ceil\",\n      value: function ceil() {\n        this.x = Math.ceil(this.x);\n        this.y = Math.ceil(this.y);\n        this.z = Math.ceil(this.z);\n        this.w = Math.ceil(this.w);\n        return this;\n      }\n    }, {\n      key: \"round\",\n      value: function round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        this.z = Math.round(this.z);\n        this.w = Math.round(this.w);\n        return this;\n      }\n    }, {\n      key: \"roundToZero\",\n      value: function roundToZero() {\n        this.x = Math.trunc(this.x);\n        this.y = Math.trunc(this.y);\n        this.z = Math.trunc(this.z);\n        this.w = Math.trunc(this.w);\n        return this;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        this.w = -this.w;\n        return this;\n      }\n    }, {\n      key: \"dot\",\n      value: function dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n      }\n    }, {\n      key: \"lengthSq\",\n      value: function lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n    }, {\n      key: \"length\",\n      value: function length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n      }\n    }, {\n      key: \"manhattanLength\",\n      value: function manhattanLength() {\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize() {\n        return this.divideScalar(this.length() || 1);\n      }\n    }, {\n      key: \"setLength\",\n      value: function setLength(length) {\n        return this.normalize().multiplyScalar(length);\n      }\n    }, {\n      key: \"lerp\",\n      value: function lerp(v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n        this.z += (v.z - this.z) * alpha;\n        this.w += (v.w - this.w) * alpha;\n        return this;\n      }\n    }, {\n      key: \"lerpVectors\",\n      value: function lerpVectors(v1, v2, alpha) {\n        this.x = v1.x + (v2.x - v1.x) * alpha;\n        this.y = v1.y + (v2.y - v1.y) * alpha;\n        this.z = v1.z + (v2.z - v1.z) * alpha;\n        this.w = v1.w + (v2.w - v1.w) * alpha;\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(v) {\n        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        this.x = array[offset];\n        this.y = array[offset + 1];\n        this.z = array[offset + 2];\n        this.w = array[offset + 3];\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n      }\n    }, {\n      key: \"fromBufferAttribute\",\n      value: function fromBufferAttribute(attribute, index) {\n        this.x = attribute.getX(index);\n        this.y = attribute.getY(index);\n        this.z = attribute.getZ(index);\n        this.w = attribute.getW(index);\n        return this;\n      }\n    }, {\n      key: \"random\",\n      value: function random() {\n        this.x = Math.random();\n        this.y = Math.random();\n        this.z = Math.random();\n        this.w = Math.random();\n        return this;\n      }\n    }, {\n      key: Symbol.iterator,\n      value: function* value() {\n        yield this.x;\n        yield this.y;\n        yield this.z;\n        yield this.w;\n      }\n    }]);\n  }();\n  /*\n   In options, we can specify:\n   * Texture parameters for an auto-generated target texture\n   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n  */\n  var RenderTarget = exports.RenderTarget = /*#__PURE__*/function (_EventDispatcher2) {\n    function RenderTarget() {\n      var _this2;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      (0, _classCallCheck2.default)(this, RenderTarget);\n      _this2 = _callSuper(this, RenderTarget);\n      _this2.isRenderTarget = true;\n      _this2.width = width;\n      _this2.height = height;\n      _this2.depth = 1;\n      _this2.scissor = new Vector4(0, 0, width, height);\n      _this2.scissorTest = false;\n      _this2.viewport = new Vector4(0, 0, width, height);\n      var image = {\n        width: width,\n        height: height,\n        depth: 1\n      };\n      options = Object.assign({\n        generateMipmaps: false,\n        internalFormat: null,\n        minFilter: LinearFilter,\n        depthBuffer: true,\n        stencilBuffer: false,\n        resolveDepthBuffer: true,\n        resolveStencilBuffer: true,\n        depthTexture: null,\n        samples: 0,\n        count: 1\n      }, options);\n      var texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);\n      texture.flipY = false;\n      texture.generateMipmaps = options.generateMipmaps;\n      texture.internalFormat = options.internalFormat;\n      _this2.textures = [];\n      var count = options.count;\n      for (var i = 0; i < count; i++) {\n        _this2.textures[i] = texture.clone();\n        _this2.textures[i].isRenderTargetTexture = true;\n        _this2.textures[i].renderTarget = _this2;\n      }\n      _this2.depthBuffer = options.depthBuffer;\n      _this2.stencilBuffer = options.stencilBuffer;\n      _this2.resolveDepthBuffer = options.resolveDepthBuffer;\n      _this2.resolveStencilBuffer = options.resolveStencilBuffer;\n      _this2._depthTexture = null;\n      _this2.depthTexture = options.depthTexture;\n      _this2.samples = options.samples;\n      return _this2;\n    }\n    (0, _inherits2.default)(RenderTarget, _EventDispatcher2);\n    return (0, _createClass2.default)(RenderTarget, [{\n      key: \"texture\",\n      get: function get() {\n        return this.textures[0];\n      },\n      set: function set(value) {\n        this.textures[0] = value;\n      }\n    }, {\n      key: \"depthTexture\",\n      get: function get() {\n        return this._depthTexture;\n      },\n      set: function set(current) {\n        if (this._depthTexture !== null) this._depthTexture.renderTarget = null;\n        if (current !== null) current.renderTarget = this;\n        this._depthTexture = current;\n      }\n    }, {\n      key: \"setSize\",\n      value: function setSize(width, height) {\n        var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        if (this.width !== width || this.height !== height || this.depth !== depth) {\n          this.width = width;\n          this.height = height;\n          this.depth = depth;\n          for (var i = 0, il = this.textures.length; i < il; i++) {\n            this.textures[i].image.width = width;\n            this.textures[i].image.height = height;\n            this.textures[i].image.depth = depth;\n          }\n          this.dispose();\n        }\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.width = source.width;\n        this.height = source.height;\n        this.depth = source.depth;\n        this.scissor.copy(source.scissor);\n        this.scissorTest = source.scissorTest;\n        this.viewport.copy(source.viewport);\n        this.textures.length = 0;\n        for (var i = 0, il = source.textures.length; i < il; i++) {\n          this.textures[i] = source.textures[i].clone();\n          this.textures[i].isRenderTargetTexture = true;\n          this.textures[i].renderTarget = this;\n        }\n\n        // ensure image object is not shared, see #20328\n\n        var image = Object.assign({}, source.texture.image);\n        this.texture.source = new Source(image);\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        this.resolveDepthBuffer = source.resolveDepthBuffer;\n        this.resolveStencilBuffer = source.resolveStencilBuffer;\n        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();\n        this.samples = source.samples;\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n      }\n    }]);\n  }(EventDispatcher);\n  var WebGLRenderTarget = exports.WebGLRenderTarget = /*#__PURE__*/function (_RenderTarget) {\n    function WebGLRenderTarget() {\n      var _this3;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      (0, _classCallCheck2.default)(this, WebGLRenderTarget);\n      _this3 = _callSuper(this, WebGLRenderTarget, [width, height, options]);\n      _this3.isWebGLRenderTarget = true;\n      return _this3;\n    }\n    (0, _inherits2.default)(WebGLRenderTarget, _RenderTarget);\n    return (0, _createClass2.default)(WebGLRenderTarget);\n  }(RenderTarget);\n  var DataArrayTexture = exports.DataArrayTexture = /*#__PURE__*/function (_Texture) {\n    function DataArrayTexture() {\n      var _this4;\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, DataArrayTexture);\n      _this4 = _callSuper(this, DataArrayTexture, [null]);\n      _this4.isDataArrayTexture = true;\n      _this4.image = {\n        data: data,\n        width: width,\n        height: height,\n        depth: depth\n      };\n      _this4.magFilter = NearestFilter;\n      _this4.minFilter = NearestFilter;\n      _this4.wrapR = ClampToEdgeWrapping;\n      _this4.generateMipmaps = false;\n      _this4.flipY = false;\n      _this4.unpackAlignment = 1;\n      _this4.layerUpdates = new Set();\n      return _this4;\n    }\n    (0, _inherits2.default)(DataArrayTexture, _Texture);\n    return (0, _createClass2.default)(DataArrayTexture, [{\n      key: \"addLayerUpdate\",\n      value: function addLayerUpdate(layerIndex) {\n        this.layerUpdates.add(layerIndex);\n      }\n    }, {\n      key: \"clearLayerUpdates\",\n      value: function clearLayerUpdates() {\n        this.layerUpdates.clear();\n      }\n    }]);\n  }(Texture);\n  var WebGLArrayRenderTarget = exports.WebGLArrayRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n    function WebGLArrayRenderTarget() {\n      var _this5;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      (0, _classCallCheck2.default)(this, WebGLArrayRenderTarget);\n      _this5 = _callSuper(this, WebGLArrayRenderTarget, [width, height, options]);\n      _this5.isWebGLArrayRenderTarget = true;\n      _this5.depth = depth;\n      _this5.texture = new DataArrayTexture(null, width, height, depth);\n      _this5.texture.isRenderTargetTexture = true;\n      return _this5;\n    }\n    (0, _inherits2.default)(WebGLArrayRenderTarget, _WebGLRenderTarget);\n    return (0, _createClass2.default)(WebGLArrayRenderTarget);\n  }(WebGLRenderTarget);\n  var Data3DTexture = exports.Data3DTexture = /*#__PURE__*/function (_Texture2) {\n    function Data3DTexture() {\n      var _this6;\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, Data3DTexture);\n      // We're going to add .setXXX() methods for setting properties later.\n      // Users can still set in Data3DTexture directly.\n      //\n      //\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n      // \ttexture.anisotropy = 16;\n      //\n      // See #14839\n\n      _this6 = _callSuper(this, Data3DTexture, [null]);\n      _this6.isData3DTexture = true;\n      _this6.image = {\n        data: data,\n        width: width,\n        height: height,\n        depth: depth\n      };\n      _this6.magFilter = NearestFilter;\n      _this6.minFilter = NearestFilter;\n      _this6.wrapR = ClampToEdgeWrapping;\n      _this6.generateMipmaps = false;\n      _this6.flipY = false;\n      _this6.unpackAlignment = 1;\n      return _this6;\n    }\n    (0, _inherits2.default)(Data3DTexture, _Texture2);\n    return (0, _createClass2.default)(Data3DTexture);\n  }(Texture);\n  var WebGL3DRenderTarget = exports.WebGL3DRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget2) {\n    function WebGL3DRenderTarget() {\n      var _this7;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      (0, _classCallCheck2.default)(this, WebGL3DRenderTarget);\n      _this7 = _callSuper(this, WebGL3DRenderTarget, [width, height, options]);\n      _this7.isWebGL3DRenderTarget = true;\n      _this7.depth = depth;\n      _this7.texture = new Data3DTexture(null, width, height, depth);\n      _this7.texture.isRenderTargetTexture = true;\n      return _this7;\n    }\n    (0, _inherits2.default)(WebGL3DRenderTarget, _WebGLRenderTarget2);\n    return (0, _createClass2.default)(WebGL3DRenderTarget);\n  }(WebGLRenderTarget);\n  var Quaternion = exports.Quaternion = /*#__PURE__*/function () {\n    function Quaternion() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, Quaternion);\n      this.isQuaternion = true;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._w = w;\n    }\n    return (0, _createClass2.default)(Quaternion, [{\n      key: \"x\",\n      get: function get() {\n        return this._x;\n      },\n      set: function set(value) {\n        this._x = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"y\",\n      get: function get() {\n        return this._y;\n      },\n      set: function set(value) {\n        this._y = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"z\",\n      get: function get() {\n        return this._z;\n      },\n      set: function set(value) {\n        this._z = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"w\",\n      get: function get() {\n        return this._w;\n      },\n      set: function set(value) {\n        this._w = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"set\",\n      value: function set(x, y, z, w) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this._x, this._y, this._z, this._w);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(quaternion) {\n        this._x = quaternion.x;\n        this._y = quaternion.y;\n        this._z = quaternion.z;\n        this._w = quaternion.w;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"setFromEuler\",\n      value: function setFromEuler(euler) {\n        var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var x = euler._x,\n          y = euler._y,\n          z = euler._z,\n          order = euler._order;\n\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        var cos = Math.cos;\n        var sin = Math.sin;\n        var c1 = cos(x / 2);\n        var c2 = cos(y / 2);\n        var c3 = cos(z / 2);\n        var s1 = sin(x / 2);\n        var s2 = sin(y / 2);\n        var s3 = sin(z / 2);\n        switch (order) {\n          case 'XYZ':\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n          case 'YXZ':\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n          case 'ZXY':\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n          case 'ZYX':\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n          case 'YZX':\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n          case 'XZY':\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n          default:\n            console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n        }\n        if (update === true) this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"setFromAxisAngle\",\n      value: function setFromAxisAngle(axis, angle) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n        // assumes axis is normalized\n\n        var halfAngle = angle / 2,\n          s = Math.sin(halfAngle);\n        this._x = axis.x * s;\n        this._y = axis.y * s;\n        this._z = axis.z * s;\n        this._w = Math.cos(halfAngle);\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"setFromRotationMatrix\",\n      value: function setFromRotationMatrix(m) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        var te = m.elements,\n          m11 = te[0],\n          m12 = te[4],\n          m13 = te[8],\n          m21 = te[1],\n          m22 = te[5],\n          m23 = te[9],\n          m31 = te[2],\n          m32 = te[6],\n          m33 = te[10],\n          trace = m11 + m22 + m33;\n        if (trace > 0) {\n          var s = 0.5 / Math.sqrt(trace + 1.0);\n          this._w = 0.25 / s;\n          this._x = (m32 - m23) * s;\n          this._y = (m13 - m31) * s;\n          this._z = (m21 - m12) * s;\n        } else if (m11 > m22 && m11 > m33) {\n          var _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n          this._w = (m32 - m23) / _s;\n          this._x = 0.25 * _s;\n          this._y = (m12 + m21) / _s;\n          this._z = (m13 + m31) / _s;\n        } else if (m22 > m33) {\n          var _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n          this._w = (m13 - m31) / _s2;\n          this._x = (m12 + m21) / _s2;\n          this._y = 0.25 * _s2;\n          this._z = (m23 + m32) / _s2;\n        } else {\n          var _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n          this._w = (m21 - m12) / _s3;\n          this._x = (m13 + m31) / _s3;\n          this._y = (m23 + m32) / _s3;\n          this._z = 0.25 * _s3;\n        }\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"setFromUnitVectors\",\n      value: function setFromUnitVectors(vFrom, vTo) {\n        // assumes direction vectors vFrom and vTo are normalized\n\n        var r = vFrom.dot(vTo) + 1;\n        if (r < Number.EPSILON) {\n          // vFrom and vTo point in opposite directions\n\n          r = 0;\n          if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n            this._x = -vFrom.y;\n            this._y = vFrom.x;\n            this._z = 0;\n            this._w = r;\n          } else {\n            this._x = 0;\n            this._y = -vFrom.z;\n            this._z = vFrom.y;\n            this._w = r;\n          }\n        } else {\n          // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n          this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n          this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n          this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n          this._w = r;\n        }\n        return this.normalize();\n      }\n    }, {\n      key: \"angleTo\",\n      value: function angleTo(q) {\n        return 2 * Math.acos(Math.abs(_clamp(this.dot(q), -1, 1)));\n      }\n    }, {\n      key: \"rotateTowards\",\n      value: function rotateTowards(q, step) {\n        var angle = this.angleTo(q);\n        if (angle === 0) return this;\n        var t = Math.min(1, step / angle);\n        this.slerp(q, t);\n        return this;\n      }\n    }, {\n      key: \"identity\",\n      value: function identity() {\n        return this.set(0, 0, 0, 1);\n      }\n    }, {\n      key: \"invert\",\n      value: function invert() {\n        // quaternion is assumed to have unit length\n\n        return this.conjugate();\n      }\n    }, {\n      key: \"conjugate\",\n      value: function conjugate() {\n        this._x *= -1;\n        this._y *= -1;\n        this._z *= -1;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"dot\",\n      value: function dot(v) {\n        return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n      }\n    }, {\n      key: \"lengthSq\",\n      value: function lengthSq() {\n        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n      }\n    }, {\n      key: \"length\",\n      value: function length() {\n        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize() {\n        var l = this.length();\n        if (l === 0) {\n          this._x = 0;\n          this._y = 0;\n          this._z = 0;\n          this._w = 1;\n        } else {\n          l = 1 / l;\n          this._x = this._x * l;\n          this._y = this._y * l;\n          this._z = this._z * l;\n          this._w = this._w * l;\n        }\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(q) {\n        return this.multiplyQuaternions(this, q);\n      }\n    }, {\n      key: \"premultiply\",\n      value: function premultiply(q) {\n        return this.multiplyQuaternions(q, this);\n      }\n    }, {\n      key: \"multiplyQuaternions\",\n      value: function multiplyQuaternions(a, b) {\n        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n        var qax = a._x,\n          qay = a._y,\n          qaz = a._z,\n          qaw = a._w;\n        var qbx = b._x,\n          qby = b._y,\n          qbz = b._z,\n          qbw = b._w;\n        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"slerp\",\n      value: function slerp(qb, t) {\n        if (t === 0) return this;\n        if (t === 1) return this.copy(qb);\n        var x = this._x,\n          y = this._y,\n          z = this._z,\n          w = this._w;\n\n        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n        var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n        if (cosHalfTheta < 0) {\n          this._w = -qb._w;\n          this._x = -qb._x;\n          this._y = -qb._y;\n          this._z = -qb._z;\n          cosHalfTheta = -cosHalfTheta;\n        } else {\n          this.copy(qb);\n        }\n        if (cosHalfTheta >= 1.0) {\n          this._w = w;\n          this._x = x;\n          this._y = y;\n          this._z = z;\n          return this;\n        }\n        var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n        if (sqrSinHalfTheta <= Number.EPSILON) {\n          var s = 1 - t;\n          this._w = s * w + t * this._w;\n          this._x = s * x + t * this._x;\n          this._y = s * y + t * this._y;\n          this._z = s * z + t * this._z;\n          this.normalize(); // normalize calls _onChangeCallback()\n\n          return this;\n        }\n        var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n        var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n        var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n          ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n        this._w = w * ratioA + this._w * ratioB;\n        this._x = x * ratioA + this._x * ratioB;\n        this._y = y * ratioA + this._y * ratioB;\n        this._z = z * ratioA + this._z * ratioB;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"slerpQuaternions\",\n      value: function slerpQuaternions(qa, qb, t) {\n        return this.copy(qa).slerp(qb, t);\n      }\n    }, {\n      key: \"random\",\n      value: function random() {\n        // sets this quaternion to a uniform random unit quaternnion\n\n        // Ken Shoemake\n        // Uniform random rotations\n        // D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n        var theta1 = 2 * Math.PI * Math.random();\n        var theta2 = 2 * Math.PI * Math.random();\n        var x0 = Math.random();\n        var r1 = Math.sqrt(1 - x0);\n        var r2 = Math.sqrt(x0);\n        return this.set(r1 * Math.sin(theta1), r1 * Math.cos(theta1), r2 * Math.sin(theta2), r2 * Math.cos(theta2));\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(quaternion) {\n        return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        this._x = array[offset];\n        this._y = array[offset + 1];\n        this._z = array[offset + 2];\n        this._w = array[offset + 3];\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        array[offset] = this._x;\n        array[offset + 1] = this._y;\n        array[offset + 2] = this._z;\n        array[offset + 3] = this._w;\n        return array;\n      }\n    }, {\n      key: \"fromBufferAttribute\",\n      value: function fromBufferAttribute(attribute, index) {\n        this._x = attribute.getX(index);\n        this._y = attribute.getY(index);\n        this._z = attribute.getZ(index);\n        this._w = attribute.getW(index);\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return this.toArray();\n      }\n    }, {\n      key: \"_onChange\",\n      value: function _onChange(callback) {\n        this._onChangeCallback = callback;\n        return this;\n      }\n    }, {\n      key: \"_onChangeCallback\",\n      value: function _onChangeCallback() {}\n    }, {\n      key: Symbol.iterator,\n      value: function* value() {\n        yield this._x;\n        yield this._y;\n        yield this._z;\n        yield this._w;\n      }\n    }], [{\n      key: \"slerpFlat\",\n      value: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n        // fuzz-free, array-based Quaternion SLERP operation\n\n        var x0 = src0[srcOffset0 + 0],\n          y0 = src0[srcOffset0 + 1],\n          z0 = src0[srcOffset0 + 2],\n          w0 = src0[srcOffset0 + 3];\n        var x1 = src1[srcOffset1 + 0],\n          y1 = src1[srcOffset1 + 1],\n          z1 = src1[srcOffset1 + 2],\n          w1 = src1[srcOffset1 + 3];\n        if (t === 0) {\n          dst[dstOffset + 0] = x0;\n          dst[dstOffset + 1] = y0;\n          dst[dstOffset + 2] = z0;\n          dst[dstOffset + 3] = w0;\n          return;\n        }\n        if (t === 1) {\n          dst[dstOffset + 0] = x1;\n          dst[dstOffset + 1] = y1;\n          dst[dstOffset + 2] = z1;\n          dst[dstOffset + 3] = w1;\n          return;\n        }\n        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n          var s = 1 - t;\n          var cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n            dir = cos >= 0 ? 1 : -1,\n            sqrSin = 1 - cos * cos;\n\n          // Skip the Slerp for tiny steps to avoid numeric problems:\n          if (sqrSin > Number.EPSILON) {\n            var sin = Math.sqrt(sqrSin),\n              len = Math.atan2(sin, cos * dir);\n            s = Math.sin(s * len) / sin;\n            t = Math.sin(t * len) / sin;\n          }\n          var tDir = t * dir;\n          x0 = x0 * s + x1 * tDir;\n          y0 = y0 * s + y1 * tDir;\n          z0 = z0 * s + z1 * tDir;\n          w0 = w0 * s + w1 * tDir;\n\n          // Normalize in case we just did a lerp:\n          if (s === 1 - t) {\n            var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n            x0 *= f;\n            y0 *= f;\n            z0 *= f;\n            w0 *= f;\n          }\n        }\n        dst[dstOffset] = x0;\n        dst[dstOffset + 1] = y0;\n        dst[dstOffset + 2] = z0;\n        dst[dstOffset + 3] = w0;\n      }\n    }, {\n      key: \"multiplyQuaternionsFlat\",\n      value: function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n        var x0 = src0[srcOffset0];\n        var y0 = src0[srcOffset0 + 1];\n        var z0 = src0[srcOffset0 + 2];\n        var w0 = src0[srcOffset0 + 3];\n        var x1 = src1[srcOffset1];\n        var y1 = src1[srcOffset1 + 1];\n        var z1 = src1[srcOffset1 + 2];\n        var w1 = src1[srcOffset1 + 3];\n        dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n        dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n        dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n        dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n        return dst;\n      }\n    }]);\n  }();\n  var Vector3 = exports.Vector3 = /*#__PURE__*/function () {\n    function Vector3() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      (0, _classCallCheck2.default)(this, Vector3);\n      Vector3.prototype.isVector3 = true;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n    return (0, _createClass2.default)(Vector3, [{\n      key: \"set\",\n      value: function set(x, y, z) {\n        if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n      }\n    }, {\n      key: \"setScalar\",\n      value: function setScalar(scalar) {\n        this.x = scalar;\n        this.y = scalar;\n        this.z = scalar;\n        return this;\n      }\n    }, {\n      key: \"setX\",\n      value: function setX(x) {\n        this.x = x;\n        return this;\n      }\n    }, {\n      key: \"setY\",\n      value: function setY(y) {\n        this.y = y;\n        return this;\n      }\n    }, {\n      key: \"setZ\",\n      value: function setZ(z) {\n        this.z = z;\n        return this;\n      }\n    }, {\n      key: \"setComponent\",\n      value: function setComponent(index, value) {\n        switch (index) {\n          case 0:\n            this.x = value;\n            break;\n          case 1:\n            this.y = value;\n            break;\n          case 2:\n            this.z = value;\n            break;\n          default:\n            throw new Error('index is out of range: ' + index);\n        }\n        return this;\n      }\n    }, {\n      key: \"getComponent\",\n      value: function getComponent(index) {\n        switch (index) {\n          case 0:\n            return this.x;\n          case 1:\n            return this.y;\n          case 2:\n            return this.z;\n          default:\n            throw new Error('index is out of range: ' + index);\n        }\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.x, this.y, this.z);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(v) {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n        return this;\n      }\n    }, {\n      key: \"add\",\n      value: function add(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        return this;\n      }\n    }, {\n      key: \"addScalar\",\n      value: function addScalar(s) {\n        this.x += s;\n        this.y += s;\n        this.z += s;\n        return this;\n      }\n    }, {\n      key: \"addVectors\",\n      value: function addVectors(a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n        return this;\n      }\n    }, {\n      key: \"addScaledVector\",\n      value: function addScaledVector(v, s) {\n        this.x += v.x * s;\n        this.y += v.y * s;\n        this.z += v.z * s;\n        return this;\n      }\n    }, {\n      key: \"sub\",\n      value: function sub(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        return this;\n      }\n    }, {\n      key: \"subScalar\",\n      value: function subScalar(s) {\n        this.x -= s;\n        this.y -= s;\n        this.z -= s;\n        return this;\n      }\n    }, {\n      key: \"subVectors\",\n      value: function subVectors(a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(v) {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        return this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        return this;\n      }\n    }, {\n      key: \"multiplyVectors\",\n      value: function multiplyVectors(a, b) {\n        this.x = a.x * b.x;\n        this.y = a.y * b.y;\n        this.z = a.z * b.z;\n        return this;\n      }\n    }, {\n      key: \"applyEuler\",\n      value: function applyEuler(euler) {\n        return this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n      }\n    }, {\n      key: \"applyAxisAngle\",\n      value: function applyAxisAngle(axis, angle) {\n        return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n      }\n    }, {\n      key: \"applyMatrix3\",\n      value: function applyMatrix3(m) {\n        var x = this.x,\n          y = this.y,\n          z = this.z;\n        var e = m.elements;\n        this.x = e[0] * x + e[3] * y + e[6] * z;\n        this.y = e[1] * x + e[4] * y + e[7] * z;\n        this.z = e[2] * x + e[5] * y + e[8] * z;\n        return this;\n      }\n    }, {\n      key: \"applyNormalMatrix\",\n      value: function applyNormalMatrix(m) {\n        return this.applyMatrix3(m).normalize();\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(m) {\n        var x = this.x,\n          y = this.y,\n          z = this.z;\n        var e = m.elements;\n        var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n        return this;\n      }\n    }, {\n      key: \"applyQuaternion\",\n      value: function applyQuaternion(q) {\n        // quaternion q is assumed to have unit length\n\n        var vx = this.x,\n          vy = this.y,\n          vz = this.z;\n        var qx = q.x,\n          qy = q.y,\n          qz = q.z,\n          qw = q.w;\n\n        // t = 2 * cross( q.xyz, v );\n        var tx = 2 * (qy * vz - qz * vy);\n        var ty = 2 * (qz * vx - qx * vz);\n        var tz = 2 * (qx * vy - qy * vx);\n\n        // v + q.w * t + cross( q.xyz, t );\n        this.x = vx + qw * tx + qy * tz - qz * ty;\n        this.y = vy + qw * ty + qz * tx - qx * tz;\n        this.z = vz + qw * tz + qx * ty - qy * tx;\n        return this;\n      }\n    }, {\n      key: \"project\",\n      value: function project(camera) {\n        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n      }\n    }, {\n      key: \"unproject\",\n      value: function unproject(camera) {\n        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n      }\n    }, {\n      key: \"transformDirection\",\n      value: function transformDirection(m) {\n        // input: THREE.Matrix4 affine matrix\n        // vector interpreted as a direction\n\n        var x = this.x,\n          y = this.y,\n          z = this.z;\n        var e = m.elements;\n        this.x = e[0] * x + e[4] * y + e[8] * z;\n        this.y = e[1] * x + e[5] * y + e[9] * z;\n        this.z = e[2] * x + e[6] * y + e[10] * z;\n        return this.normalize();\n      }\n    }, {\n      key: \"divide\",\n      value: function divide(v) {\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n        return this;\n      }\n    }, {\n      key: \"divideScalar\",\n      value: function divideScalar(scalar) {\n        return this.multiplyScalar(1 / scalar);\n      }\n    }, {\n      key: \"min\",\n      value: function min(v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        this.z = Math.min(this.z, v.z);\n        return this;\n      }\n    }, {\n      key: \"max\",\n      value: function max(v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        this.z = Math.max(this.z, v.z);\n        return this;\n      }\n    }, {\n      key: \"clamp\",\n      value: function clamp(min, max) {\n        // assumes min < max, componentwise\n\n        this.x = _clamp(this.x, min.x, max.x);\n        this.y = _clamp(this.y, min.y, max.y);\n        this.z = _clamp(this.z, min.z, max.z);\n        return this;\n      }\n    }, {\n      key: \"clampScalar\",\n      value: function clampScalar(minVal, maxVal) {\n        this.x = _clamp(this.x, minVal, maxVal);\n        this.y = _clamp(this.y, minVal, maxVal);\n        this.z = _clamp(this.z, minVal, maxVal);\n        return this;\n      }\n    }, {\n      key: \"clampLength\",\n      value: function clampLength(min, max) {\n        var length = this.length();\n        return this.divideScalar(length || 1).multiplyScalar(_clamp(length, min, max));\n      }\n    }, {\n      key: \"floor\",\n      value: function floor() {\n        this.x = Math.floor(this.x);\n        this.y = Math.floor(this.y);\n        this.z = Math.floor(this.z);\n        return this;\n      }\n    }, {\n      key: \"ceil\",\n      value: function ceil() {\n        this.x = Math.ceil(this.x);\n        this.y = Math.ceil(this.y);\n        this.z = Math.ceil(this.z);\n        return this;\n      }\n    }, {\n      key: \"round\",\n      value: function round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        this.z = Math.round(this.z);\n        return this;\n      }\n    }, {\n      key: \"roundToZero\",\n      value: function roundToZero() {\n        this.x = Math.trunc(this.x);\n        this.y = Math.trunc(this.y);\n        this.z = Math.trunc(this.z);\n        return this;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        return this;\n      }\n    }, {\n      key: \"dot\",\n      value: function dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n      }\n\n      // TODO lengthSquared?\n    }, {\n      key: \"lengthSq\",\n      value: function lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n      }\n    }, {\n      key: \"length\",\n      value: function length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n      }\n    }, {\n      key: \"manhattanLength\",\n      value: function manhattanLength() {\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize() {\n        return this.divideScalar(this.length() || 1);\n      }\n    }, {\n      key: \"setLength\",\n      value: function setLength(length) {\n        return this.normalize().multiplyScalar(length);\n      }\n    }, {\n      key: \"lerp\",\n      value: function lerp(v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n        this.z += (v.z - this.z) * alpha;\n        return this;\n      }\n    }, {\n      key: \"lerpVectors\",\n      value: function lerpVectors(v1, v2, alpha) {\n        this.x = v1.x + (v2.x - v1.x) * alpha;\n        this.y = v1.y + (v2.y - v1.y) * alpha;\n        this.z = v1.z + (v2.z - v1.z) * alpha;\n        return this;\n      }\n    }, {\n      key: \"cross\",\n      value: function cross(v) {\n        return this.crossVectors(this, v);\n      }\n    }, {\n      key: \"crossVectors\",\n      value: function crossVectors(a, b) {\n        var ax = a.x,\n          ay = a.y,\n          az = a.z;\n        var bx = b.x,\n          by = b.y,\n          bz = b.z;\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n        return this;\n      }\n    }, {\n      key: \"projectOnVector\",\n      value: function projectOnVector(v) {\n        var denominator = v.lengthSq();\n        if (denominator === 0) return this.set(0, 0, 0);\n        var scalar = v.dot(this) / denominator;\n        return this.copy(v).multiplyScalar(scalar);\n      }\n    }, {\n      key: \"projectOnPlane\",\n      value: function projectOnPlane(planeNormal) {\n        _vector$c.copy(this).projectOnVector(planeNormal);\n        return this.sub(_vector$c);\n      }\n    }, {\n      key: \"reflect\",\n      value: function reflect(normal) {\n        // reflect incident vector off plane orthogonal to normal\n        // normal is assumed to have unit length\n\n        return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n      }\n    }, {\n      key: \"angleTo\",\n      value: function angleTo(v) {\n        var denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n        if (denominator === 0) return Math.PI / 2;\n        var theta = this.dot(v) / denominator;\n\n        // clamp, to handle numerical problems\n\n        return Math.acos(_clamp(theta, -1, 1));\n      }\n    }, {\n      key: \"distanceTo\",\n      value: function distanceTo(v) {\n        return Math.sqrt(this.distanceToSquared(v));\n      }\n    }, {\n      key: \"distanceToSquared\",\n      value: function distanceToSquared(v) {\n        var dx = this.x - v.x,\n          dy = this.y - v.y,\n          dz = this.z - v.z;\n        return dx * dx + dy * dy + dz * dz;\n      }\n    }, {\n      key: \"manhattanDistanceTo\",\n      value: function manhattanDistanceTo(v) {\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n      }\n    }, {\n      key: \"setFromSpherical\",\n      value: function setFromSpherical(s) {\n        return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n      }\n    }, {\n      key: \"setFromSphericalCoords\",\n      value: function setFromSphericalCoords(radius, phi, theta) {\n        var sinPhiRadius = Math.sin(phi) * radius;\n        this.x = sinPhiRadius * Math.sin(theta);\n        this.y = Math.cos(phi) * radius;\n        this.z = sinPhiRadius * Math.cos(theta);\n        return this;\n      }\n    }, {\n      key: \"setFromCylindrical\",\n      value: function setFromCylindrical(c) {\n        return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n      }\n    }, {\n      key: \"setFromCylindricalCoords\",\n      value: function setFromCylindricalCoords(radius, theta, y) {\n        this.x = radius * Math.sin(theta);\n        this.y = y;\n        this.z = radius * Math.cos(theta);\n        return this;\n      }\n    }, {\n      key: \"setFromMatrixPosition\",\n      value: function setFromMatrixPosition(m) {\n        var e = m.elements;\n        this.x = e[12];\n        this.y = e[13];\n        this.z = e[14];\n        return this;\n      }\n    }, {\n      key: \"setFromMatrixScale\",\n      value: function setFromMatrixScale(m) {\n        var sx = this.setFromMatrixColumn(m, 0).length();\n        var sy = this.setFromMatrixColumn(m, 1).length();\n        var sz = this.setFromMatrixColumn(m, 2).length();\n        this.x = sx;\n        this.y = sy;\n        this.z = sz;\n        return this;\n      }\n    }, {\n      key: \"setFromMatrixColumn\",\n      value: function setFromMatrixColumn(m, index) {\n        return this.fromArray(m.elements, index * 4);\n      }\n    }, {\n      key: \"setFromMatrix3Column\",\n      value: function setFromMatrix3Column(m, index) {\n        return this.fromArray(m.elements, index * 3);\n      }\n    }, {\n      key: \"setFromEuler\",\n      value: function setFromEuler(e) {\n        this.x = e._x;\n        this.y = e._y;\n        this.z = e._z;\n        return this;\n      }\n    }, {\n      key: \"setFromColor\",\n      value: function setFromColor(c) {\n        this.x = c.r;\n        this.y = c.g;\n        this.z = c.b;\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(v) {\n        return v.x === this.x && v.y === this.y && v.z === this.z;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        this.x = array[offset];\n        this.y = array[offset + 1];\n        this.z = array[offset + 2];\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        return array;\n      }\n    }, {\n      key: \"fromBufferAttribute\",\n      value: function fromBufferAttribute(attribute, index) {\n        this.x = attribute.getX(index);\n        this.y = attribute.getY(index);\n        this.z = attribute.getZ(index);\n        return this;\n      }\n    }, {\n      key: \"random\",\n      value: function random() {\n        this.x = Math.random();\n        this.y = Math.random();\n        this.z = Math.random();\n        return this;\n      }\n    }, {\n      key: \"randomDirection\",\n      value: function randomDirection() {\n        // https://mathworld.wolfram.com/SpherePointPicking.html\n\n        var theta = Math.random() * Math.PI * 2;\n        var u = Math.random() * 2 - 1;\n        var c = Math.sqrt(1 - u * u);\n        this.x = c * Math.cos(theta);\n        this.y = u;\n        this.z = c * Math.sin(theta);\n        return this;\n      }\n    }, {\n      key: Symbol.iterator,\n      value: function* value() {\n        yield this.x;\n        yield this.y;\n        yield this.z;\n      }\n    }]);\n  }();\n  var _vector$c = /*@__PURE__*/new Vector3();\n  var _quaternion$4 = /*@__PURE__*/new Quaternion();\n  var Box3 = exports.Box3 = /*#__PURE__*/function () {\n    function Box3() {\n      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(+Infinity, +Infinity, +Infinity);\n      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(-Infinity, -Infinity, -Infinity);\n      (0, _classCallCheck2.default)(this, Box3);\n      this.isBox3 = true;\n      this.min = min;\n      this.max = max;\n    }\n    return (0, _createClass2.default)(Box3, [{\n      key: \"set\",\n      value: function set(min, max) {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n      }\n    }, {\n      key: \"setFromArray\",\n      value: function setFromArray(array) {\n        this.makeEmpty();\n        for (var i = 0, il = array.length; i < il; i += 3) {\n          this.expandByPoint(_vector$b.fromArray(array, i));\n        }\n        return this;\n      }\n    }, {\n      key: \"setFromBufferAttribute\",\n      value: function setFromBufferAttribute(attribute) {\n        this.makeEmpty();\n        for (var i = 0, il = attribute.count; i < il; i++) {\n          this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));\n        }\n        return this;\n      }\n    }, {\n      key: \"setFromPoints\",\n      value: function setFromPoints(points) {\n        this.makeEmpty();\n        for (var i = 0, il = points.length; i < il; i++) {\n          this.expandByPoint(points[i]);\n        }\n        return this;\n      }\n    }, {\n      key: \"setFromCenterAndSize\",\n      value: function setFromCenterAndSize(center, size) {\n        var halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n      }\n    }, {\n      key: \"setFromObject\",\n      value: function setFromObject(object) {\n        var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        this.makeEmpty();\n        return this.expandByObject(object, precise);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(box) {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n      }\n    }, {\n      key: \"makeEmpty\",\n      value: function makeEmpty() {\n        this.min.x = this.min.y = this.min.z = +Infinity;\n        this.max.x = this.max.y = this.max.z = -Infinity;\n        return this;\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter(target) {\n        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n      }\n    }, {\n      key: \"getSize\",\n      value: function getSize(target) {\n        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n      }\n    }, {\n      key: \"expandByPoint\",\n      value: function expandByPoint(point) {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n      }\n    }, {\n      key: \"expandByVector\",\n      value: function expandByVector(vector) {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n      }\n    }, {\n      key: \"expandByScalar\",\n      value: function expandByScalar(scalar) {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n      }\n    }, {\n      key: \"expandByObject\",\n      value: function expandByObject(object) {\n        var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        // Computes the world-axis-aligned bounding box of an object (including its children),\n        // accounting for both the object's, and children's, world transforms\n\n        object.updateWorldMatrix(false, false);\n        var geometry = object.geometry;\n        if (geometry !== undefined) {\n          var positionAttribute = geometry.getAttribute('position');\n\n          // precise AABB computation based on vertex data requires at least a position attribute.\n          // instancing isn't supported so far and uses the normal (conservative) code path.\n\n          if (precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true) {\n            for (var i = 0, l = positionAttribute.count; i < l; i++) {\n              if (object.isMesh === true) {\n                object.getVertexPosition(i, _vector$b);\n              } else {\n                _vector$b.fromBufferAttribute(positionAttribute, i);\n              }\n              _vector$b.applyMatrix4(object.matrixWorld);\n              this.expandByPoint(_vector$b);\n            }\n          } else {\n            if (object.boundingBox !== undefined) {\n              // object-level bounding box\n\n              if (object.boundingBox === null) {\n                object.computeBoundingBox();\n              }\n              _box$4.copy(object.boundingBox);\n            } else {\n              // geometry-level bounding box\n\n              if (geometry.boundingBox === null) {\n                geometry.computeBoundingBox();\n              }\n              _box$4.copy(geometry.boundingBox);\n            }\n            _box$4.applyMatrix4(object.matrixWorld);\n            this.union(_box$4);\n          }\n        }\n        var children = object.children;\n        for (var _i2 = 0, _l = children.length; _i2 < _l; _i2++) {\n          this.expandByObject(children[_i2], precise);\n        }\n        return this;\n      }\n    }, {\n      key: \"containsPoint\",\n      value: function containsPoint(point) {\n        return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;\n      }\n    }, {\n      key: \"containsBox\",\n      value: function containsBox(box) {\n        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n      }\n    }, {\n      key: \"getParameter\",\n      value: function getParameter(point, target) {\n        // This can potentially have a divide by zero if the box\n        // has a size dimension of 0.\n\n        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        // using 6 splitting planes to rule out intersections.\n        return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;\n      }\n    }, {\n      key: \"intersectsSphere\",\n      value: function intersectsSphere(sphere) {\n        // Find the point on the AABB closest to the sphere center.\n        this.clampPoint(sphere.center, _vector$b);\n\n        // If that point is inside the sphere, the AABB and sphere intersect.\n        return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n      }\n    }, {\n      key: \"intersectsPlane\",\n      value: function intersectsPlane(plane) {\n        // We compute the minimum and maximum dot product values. If those values\n        // are on the same side (back or front) of the plane, then there is no intersection.\n\n        var min, max;\n        if (plane.normal.x > 0) {\n          min = plane.normal.x * this.min.x;\n          max = plane.normal.x * this.max.x;\n        } else {\n          min = plane.normal.x * this.max.x;\n          max = plane.normal.x * this.min.x;\n        }\n        if (plane.normal.y > 0) {\n          min += plane.normal.y * this.min.y;\n          max += plane.normal.y * this.max.y;\n        } else {\n          min += plane.normal.y * this.max.y;\n          max += plane.normal.y * this.min.y;\n        }\n        if (plane.normal.z > 0) {\n          min += plane.normal.z * this.min.z;\n          max += plane.normal.z * this.max.z;\n        } else {\n          min += plane.normal.z * this.max.z;\n          max += plane.normal.z * this.min.z;\n        }\n        return min <= -plane.constant && max >= -plane.constant;\n      }\n    }, {\n      key: \"intersectsTriangle\",\n      value: function intersectsTriangle(triangle) {\n        if (this.isEmpty()) {\n          return false;\n        }\n\n        // compute box center and extents\n        this.getCenter(_center);\n        _extents.subVectors(this.max, _center);\n\n        // translate triangle to aabb origin\n        _v0$2.subVectors(triangle.a, _center);\n        _v1$7.subVectors(triangle.b, _center);\n        _v2$4.subVectors(triangle.c, _center);\n\n        // compute edge vectors for triangle\n        _f0.subVectors(_v1$7, _v0$2);\n        _f1.subVectors(_v2$4, _v1$7);\n        _f2.subVectors(_v0$2, _v2$4);\n\n        // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n        // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n        // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n        var axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {\n          return false;\n        }\n\n        // test 3 face normals from the aabb\n        axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {\n          return false;\n        }\n\n        // finally testing the face normal of the triangle\n        // use already existing triangle edge vectors here\n        _triangleNormal.crossVectors(_f0, _f1);\n        axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n        return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);\n      }\n    }, {\n      key: \"clampPoint\",\n      value: function clampPoint(point, target) {\n        return target.copy(point).clamp(this.min, this.max);\n      }\n    }, {\n      key: \"distanceToPoint\",\n      value: function distanceToPoint(point) {\n        return this.clampPoint(point, _vector$b).distanceTo(point);\n      }\n    }, {\n      key: \"getBoundingSphere\",\n      value: function getBoundingSphere(target) {\n        if (this.isEmpty()) {\n          target.makeEmpty();\n        } else {\n          this.getCenter(target.center);\n          target.radius = this.getSize(_vector$b).length() * 0.5;\n        }\n        return target;\n      }\n    }, {\n      key: \"intersect\",\n      value: function intersect(box) {\n        this.min.max(box.min);\n        this.max.min(box.max);\n\n        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n        if (this.isEmpty()) this.makeEmpty();\n        return this;\n      }\n    }, {\n      key: \"union\",\n      value: function union(box) {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix) {\n        // transform of empty box is an empty box.\n        if (this.isEmpty()) return this;\n\n        // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n        _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n        _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n        _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n        _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n        _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n        _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n        _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n        _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n        this.setFromPoints(_points);\n        return this;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate(offset) {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(box) {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n      }\n    }]);\n  }();\n  var _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n  var _vector$b = /*@__PURE__*/new Vector3();\n  var _box$4 = /*@__PURE__*/new Box3();\n\n  // triangle centered vertices\n\n  var _v0$2 = /*@__PURE__*/new Vector3();\n  var _v1$7 = /*@__PURE__*/new Vector3();\n  var _v2$4 = /*@__PURE__*/new Vector3();\n\n  // triangle edge vectors\n\n  var _f0 = /*@__PURE__*/new Vector3();\n  var _f1 = /*@__PURE__*/new Vector3();\n  var _f2 = /*@__PURE__*/new Vector3();\n  var _center = /*@__PURE__*/new Vector3();\n  var _extents = /*@__PURE__*/new Vector3();\n  var _triangleNormal = /*@__PURE__*/new Vector3();\n  var _testAxis = /*@__PURE__*/new Vector3();\n  function satForAxes(axes, v0, v1, v2, extents) {\n    for (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n      _testAxis.fromArray(axes, i);\n      // project the aabb onto the separating axis\n      var r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);\n      // project all 3 vertices of the triangle onto the separating axis\n      var p0 = v0.dot(_testAxis);\n      var p1 = v1.dot(_testAxis);\n      var p2 = v2.dot(_testAxis);\n      // actual test, basically see if either of the most extreme of the triangle points intersects r\n      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n        // points of the projected triangle are outside the projected half-length of the aabb\n        // the axis is separating and we can exit\n        return false;\n      }\n    }\n    return true;\n  }\n  var _box$3 = /*@__PURE__*/new Box3();\n  var _v1$6 = /*@__PURE__*/new Vector3();\n  var _v2$3 = /*@__PURE__*/new Vector3();\n  var Sphere = exports.Sphere = /*#__PURE__*/function () {\n    function Sphere() {\n      var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      (0, _classCallCheck2.default)(this, Sphere);\n      this.isSphere = true;\n      this.center = center;\n      this.radius = radius;\n    }\n    return (0, _createClass2.default)(Sphere, [{\n      key: \"set\",\n      value: function set(center, radius) {\n        this.center.copy(center);\n        this.radius = radius;\n        return this;\n      }\n    }, {\n      key: \"setFromPoints\",\n      value: function setFromPoints(points, optionalCenter) {\n        var center = this.center;\n        if (optionalCenter !== undefined) {\n          center.copy(optionalCenter);\n        } else {\n          _box$3.setFromPoints(points).getCenter(center);\n        }\n        var maxRadiusSq = 0;\n        for (var i = 0, il = points.length; i < il; i++) {\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n        }\n        this.radius = Math.sqrt(maxRadiusSq);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(sphere) {\n        this.center.copy(sphere.center);\n        this.radius = sphere.radius;\n        return this;\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        return this.radius < 0;\n      }\n    }, {\n      key: \"makeEmpty\",\n      value: function makeEmpty() {\n        this.center.set(0, 0, 0);\n        this.radius = -1;\n        return this;\n      }\n    }, {\n      key: \"containsPoint\",\n      value: function containsPoint(point) {\n        return point.distanceToSquared(this.center) <= this.radius * this.radius;\n      }\n    }, {\n      key: \"distanceToPoint\",\n      value: function distanceToPoint(point) {\n        return point.distanceTo(this.center) - this.radius;\n      }\n    }, {\n      key: \"intersectsSphere\",\n      value: function intersectsSphere(sphere) {\n        var radiusSum = this.radius + sphere.radius;\n        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        return box.intersectsSphere(this);\n      }\n    }, {\n      key: \"intersectsPlane\",\n      value: function intersectsPlane(plane) {\n        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n      }\n    }, {\n      key: \"clampPoint\",\n      value: function clampPoint(point, target) {\n        var deltaLengthSq = this.center.distanceToSquared(point);\n        target.copy(point);\n        if (deltaLengthSq > this.radius * this.radius) {\n          target.sub(this.center).normalize();\n          target.multiplyScalar(this.radius).add(this.center);\n        }\n        return target;\n      }\n    }, {\n      key: \"getBoundingBox\",\n      value: function getBoundingBox(target) {\n        if (this.isEmpty()) {\n          // Empty sphere produces empty bounding box\n          target.makeEmpty();\n          return target;\n        }\n        target.set(this.center, this.center);\n        target.expandByScalar(this.radius);\n        return target;\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix) {\n        this.center.applyMatrix4(matrix);\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\n        return this;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate(offset) {\n        this.center.add(offset);\n        return this;\n      }\n    }, {\n      key: \"expandByPoint\",\n      value: function expandByPoint(point) {\n        if (this.isEmpty()) {\n          this.center.copy(point);\n          this.radius = 0;\n          return this;\n        }\n        _v1$6.subVectors(point, this.center);\n        var lengthSq = _v1$6.lengthSq();\n        if (lengthSq > this.radius * this.radius) {\n          // calculate the minimal sphere\n\n          var length = Math.sqrt(lengthSq);\n          var delta = (length - this.radius) * 0.5;\n          this.center.addScaledVector(_v1$6, delta / length);\n          this.radius += delta;\n        }\n        return this;\n      }\n    }, {\n      key: \"union\",\n      value: function union(sphere) {\n        if (sphere.isEmpty()) {\n          return this;\n        }\n        if (this.isEmpty()) {\n          this.copy(sphere);\n          return this;\n        }\n        if (this.center.equals(sphere.center) === true) {\n          this.radius = Math.max(this.radius, sphere.radius);\n        } else {\n          _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);\n          this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));\n          this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));\n        }\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(sphere) {\n        return sphere.center.equals(this.center) && sphere.radius === this.radius;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  var _vector$a = /*@__PURE__*/new Vector3();\n  var _segCenter = /*@__PURE__*/new Vector3();\n  var _segDir = /*@__PURE__*/new Vector3();\n  var _diff = /*@__PURE__*/new Vector3();\n  var _edge1 = /*@__PURE__*/new Vector3();\n  var _edge2 = /*@__PURE__*/new Vector3();\n  var _normal$1 = /*@__PURE__*/new Vector3();\n  var Ray = exports.Ray = /*#__PURE__*/function () {\n    function Ray() {\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, -1);\n      (0, _classCallCheck2.default)(this, Ray);\n      this.origin = origin;\n      this.direction = direction;\n    }\n    return (0, _createClass2.default)(Ray, [{\n      key: \"set\",\n      value: function set(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(ray) {\n        this.origin.copy(ray.origin);\n        this.direction.copy(ray.direction);\n        return this;\n      }\n    }, {\n      key: \"at\",\n      value: function at(t, target) {\n        return target.copy(this.origin).addScaledVector(this.direction, t);\n      }\n    }, {\n      key: \"lookAt\",\n      value: function lookAt(v) {\n        this.direction.copy(v).sub(this.origin).normalize();\n        return this;\n      }\n    }, {\n      key: \"recast\",\n      value: function recast(t) {\n        this.origin.copy(this.at(t, _vector$a));\n        return this;\n      }\n    }, {\n      key: \"closestPointToPoint\",\n      value: function closestPointToPoint(point, target) {\n        target.subVectors(point, this.origin);\n        var directionDistance = target.dot(this.direction);\n        if (directionDistance < 0) {\n          return target.copy(this.origin);\n        }\n        return target.copy(this.origin).addScaledVector(this.direction, directionDistance);\n      }\n    }, {\n      key: \"distanceToPoint\",\n      value: function distanceToPoint(point) {\n        return Math.sqrt(this.distanceSqToPoint(point));\n      }\n    }, {\n      key: \"distanceSqToPoint\",\n      value: function distanceSqToPoint(point) {\n        var directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);\n\n        // point behind the ray\n\n        if (directionDistance < 0) {\n          return this.origin.distanceToSquared(point);\n        }\n        _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);\n        return _vector$a.distanceToSquared(point);\n      }\n    }, {\n      key: \"distanceSqToSegment\",\n      value: function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n\n        _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n        _segDir.copy(v1).sub(v0).normalize();\n        _diff.copy(this.origin).sub(_segCenter);\n        var segExtent = v0.distanceTo(v1) * 0.5;\n        var a01 = -this.direction.dot(_segDir);\n        var b0 = _diff.dot(this.direction);\n        var b1 = -_diff.dot(_segDir);\n        var c = _diff.lengthSq();\n        var det = Math.abs(1 - a01 * a01);\n        var s0, s1, sqrDist, extDet;\n        if (det > 0) {\n          // The ray and segment are not parallel.\n\n          s0 = a01 * b1 - b0;\n          s1 = a01 * b0 - b1;\n          extDet = segExtent * det;\n          if (s0 >= 0) {\n            if (s1 >= -extDet) {\n              if (s1 <= extDet) {\n                // region 0\n                // Minimum at interior points of ray and segment.\n\n                var invDet = 1 / det;\n                s0 *= invDet;\n                s1 *= invDet;\n                sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n              } else {\n                // region 1\n\n                s1 = segExtent;\n                s0 = Math.max(0, -(a01 * s1 + b0));\n                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n              }\n            } else {\n              // region 5\n\n              s1 = -segExtent;\n              s0 = Math.max(0, -(a01 * s1 + b0));\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          } else {\n            if (s1 <= -extDet) {\n              // region 4\n\n              s0 = Math.max(0, -(-a01 * segExtent + b0));\n              s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            } else if (s1 <= extDet) {\n              // region 3\n\n              s0 = 0;\n              s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = s1 * (s1 + 2 * b1) + c;\n            } else {\n              // region 2\n\n              s0 = Math.max(0, -(a01 * segExtent + b0));\n              s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          }\n        } else {\n          // Ray and segment are parallel.\n\n          s1 = a01 > 0 ? -segExtent : segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n        if (optionalPointOnRay) {\n          optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);\n        }\n        if (optionalPointOnSegment) {\n          optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);\n        }\n        return sqrDist;\n      }\n    }, {\n      key: \"intersectSphere\",\n      value: function intersectSphere(sphere, target) {\n        _vector$a.subVectors(sphere.center, this.origin);\n        var tca = _vector$a.dot(this.direction);\n        var d2 = _vector$a.dot(_vector$a) - tca * tca;\n        var radius2 = sphere.radius * sphere.radius;\n        if (d2 > radius2) return null;\n        var thc = Math.sqrt(radius2 - d2);\n\n        // t0 = first intersect point - entrance on front of sphere\n        var t0 = tca - thc;\n\n        // t1 = second intersect point - exit point on back of sphere\n        var t1 = tca + thc;\n\n        // test to see if t1 is behind the ray - if so, return null\n        if (t1 < 0) return null;\n\n        // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n        if (t0 < 0) return this.at(t1, target);\n\n        // else t0 is in front of the ray, so return the first collision point scaled by t0\n        return this.at(t0, target);\n      }\n    }, {\n      key: \"intersectsSphere\",\n      value: function intersectsSphere(sphere) {\n        return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n      }\n    }, {\n      key: \"distanceToPlane\",\n      value: function distanceToPlane(plane) {\n        var denominator = plane.normal.dot(this.direction);\n        if (denominator === 0) {\n          // line is coplanar, return origin\n          if (plane.distanceToPoint(this.origin) === 0) {\n            return 0;\n          }\n\n          // Null is preferable to undefined since undefined means.... it is undefined\n\n          return null;\n        }\n        var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n\n        // Return if the ray never intersects the plane\n\n        return t >= 0 ? t : null;\n      }\n    }, {\n      key: \"intersectPlane\",\n      value: function intersectPlane(plane, target) {\n        var t = this.distanceToPlane(plane);\n        if (t === null) {\n          return null;\n        }\n        return this.at(t, target);\n      }\n    }, {\n      key: \"intersectsPlane\",\n      value: function intersectsPlane(plane) {\n        // check if the ray lies on the plane first\n\n        var distToPoint = plane.distanceToPoint(this.origin);\n        if (distToPoint === 0) {\n          return true;\n        }\n        var denominator = plane.normal.dot(this.direction);\n        if (denominator * distToPoint < 0) {\n          return true;\n        }\n\n        // ray origin is behind the plane (and is pointing behind it)\n\n        return false;\n      }\n    }, {\n      key: \"intersectBox\",\n      value: function intersectBox(box, target) {\n        var tmin, tmax, tymin, tymax, tzmin, tzmax;\n        var invdirx = 1 / this.direction.x,\n          invdiry = 1 / this.direction.y,\n          invdirz = 1 / this.direction.z;\n        var origin = this.origin;\n        if (invdirx >= 0) {\n          tmin = (box.min.x - origin.x) * invdirx;\n          tmax = (box.max.x - origin.x) * invdirx;\n        } else {\n          tmin = (box.max.x - origin.x) * invdirx;\n          tmax = (box.min.x - origin.x) * invdirx;\n        }\n        if (invdiry >= 0) {\n          tymin = (box.min.y - origin.y) * invdiry;\n          tymax = (box.max.y - origin.y) * invdiry;\n        } else {\n          tymin = (box.max.y - origin.y) * invdiry;\n          tymax = (box.min.y - origin.y) * invdiry;\n        }\n        if (tmin > tymax || tymin > tmax) return null;\n        if (tymin > tmin || isNaN(tmin)) tmin = tymin;\n        if (tymax < tmax || isNaN(tmax)) tmax = tymax;\n        if (invdirz >= 0) {\n          tzmin = (box.min.z - origin.z) * invdirz;\n          tzmax = (box.max.z - origin.z) * invdirz;\n        } else {\n          tzmin = (box.max.z - origin.z) * invdirz;\n          tzmax = (box.min.z - origin.z) * invdirz;\n        }\n        if (tmin > tzmax || tzmin > tmax) return null;\n        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n\n        //return point closest to the ray (positive side)\n\n        if (tmax < 0) return null;\n        return this.at(tmin >= 0 ? tmin : tmax, target);\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        return this.intersectBox(box, _vector$a) !== null;\n      }\n    }, {\n      key: \"intersectTriangle\",\n      value: function intersectTriangle(a, b, c, backfaceCulling, target) {\n        // Compute the offset origin, edges, and normal.\n\n        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n        _edge1.subVectors(b, a);\n        _edge2.subVectors(c, a);\n        _normal$1.crossVectors(_edge1, _edge2);\n\n        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n        var DdN = this.direction.dot(_normal$1);\n        var sign;\n        if (DdN > 0) {\n          if (backfaceCulling) return null;\n          sign = 1;\n        } else if (DdN < 0) {\n          sign = -1;\n          DdN = -DdN;\n        } else {\n          return null;\n        }\n        _diff.subVectors(this.origin, a);\n        var DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));\n\n        // b1 < 0, no intersection\n        if (DdQxE2 < 0) {\n          return null;\n        }\n        var DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));\n\n        // b2 < 0, no intersection\n        if (DdE1xQ < 0) {\n          return null;\n        }\n\n        // b1+b2 > 1, no intersection\n        if (DdQxE2 + DdE1xQ > DdN) {\n          return null;\n        }\n\n        // Line intersects triangle, check if ray does.\n        var QdN = -sign * _diff.dot(_normal$1);\n\n        // t < 0, no intersection\n        if (QdN < 0) {\n          return null;\n        }\n\n        // Ray intersects triangle.\n        return this.at(QdN / DdN, target);\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix4) {\n        this.origin.applyMatrix4(matrix4);\n        this.direction.transformDirection(matrix4);\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(ray) {\n        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  var Matrix4 = exports.Matrix4 = /*#__PURE__*/function () {\n    function Matrix4(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n      (0, _classCallCheck2.default)(this, Matrix4);\n      Matrix4.prototype.isMatrix4 = true;\n      this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n      if (n11 !== undefined) {\n        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);\n      }\n    }\n    return (0, _createClass2.default)(Matrix4, [{\n      key: \"set\",\n      value: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n        var te = this.elements;\n        te[0] = n11;\n        te[4] = n12;\n        te[8] = n13;\n        te[12] = n14;\n        te[1] = n21;\n        te[5] = n22;\n        te[9] = n23;\n        te[13] = n24;\n        te[2] = n31;\n        te[6] = n32;\n        te[10] = n33;\n        te[14] = n34;\n        te[3] = n41;\n        te[7] = n42;\n        te[11] = n43;\n        te[15] = n44;\n        return this;\n      }\n    }, {\n      key: \"identity\",\n      value: function identity() {\n        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new Matrix4().fromArray(this.elements);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(m) {\n        var te = this.elements;\n        var me = m.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        te[9] = me[9];\n        te[10] = me[10];\n        te[11] = me[11];\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        te[15] = me[15];\n        return this;\n      }\n    }, {\n      key: \"copyPosition\",\n      value: function copyPosition(m) {\n        var te = this.elements,\n          me = m.elements;\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        return this;\n      }\n    }, {\n      key: \"setFromMatrix3\",\n      value: function setFromMatrix3(m) {\n        var me = m.elements;\n        this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"extractBasis\",\n      value: function extractBasis(xAxis, yAxis, zAxis) {\n        xAxis.setFromMatrixColumn(this, 0);\n        yAxis.setFromMatrixColumn(this, 1);\n        zAxis.setFromMatrixColumn(this, 2);\n        return this;\n      }\n    }, {\n      key: \"makeBasis\",\n      value: function makeBasis(xAxis, yAxis, zAxis) {\n        this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"extractRotation\",\n      value: function extractRotation(m) {\n        // this method does not support reflection matrices\n\n        var te = this.elements;\n        var me = m.elements;\n        var scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n        var scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n        var scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n        te[0] = me[0] * scaleX;\n        te[1] = me[1] * scaleX;\n        te[2] = me[2] * scaleX;\n        te[3] = 0;\n        te[4] = me[4] * scaleY;\n        te[5] = me[5] * scaleY;\n        te[6] = me[6] * scaleY;\n        te[7] = 0;\n        te[8] = me[8] * scaleZ;\n        te[9] = me[9] * scaleZ;\n        te[10] = me[10] * scaleZ;\n        te[11] = 0;\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n      }\n    }, {\n      key: \"makeRotationFromEuler\",\n      value: function makeRotationFromEuler(euler) {\n        var te = this.elements;\n        var x = euler.x,\n          y = euler.y,\n          z = euler.z;\n        var a = Math.cos(x),\n          b = Math.sin(x);\n        var c = Math.cos(y),\n          d = Math.sin(y);\n        var e = Math.cos(z),\n          f = Math.sin(z);\n        if (euler.order === 'XYZ') {\n          var ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n          te[0] = c * e;\n          te[4] = -c * f;\n          te[8] = d;\n          te[1] = af + be * d;\n          te[5] = ae - bf * d;\n          te[9] = -b * c;\n          te[2] = bf - ae * d;\n          te[6] = be + af * d;\n          te[10] = a * c;\n        } else if (euler.order === 'YXZ') {\n          var ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n          te[0] = ce + df * b;\n          te[4] = de * b - cf;\n          te[8] = a * d;\n          te[1] = a * f;\n          te[5] = a * e;\n          te[9] = -b;\n          te[2] = cf * b - de;\n          te[6] = df + ce * b;\n          te[10] = a * c;\n        } else if (euler.order === 'ZXY') {\n          var _ce = c * e,\n            _cf = c * f,\n            _de = d * e,\n            _df = d * f;\n          te[0] = _ce - _df * b;\n          te[4] = -a * f;\n          te[8] = _de + _cf * b;\n          te[1] = _cf + _de * b;\n          te[5] = a * e;\n          te[9] = _df - _ce * b;\n          te[2] = -a * d;\n          te[6] = b;\n          te[10] = a * c;\n        } else if (euler.order === 'ZYX') {\n          var _ae = a * e,\n            _af = a * f,\n            _be = b * e,\n            _bf = b * f;\n          te[0] = c * e;\n          te[4] = _be * d - _af;\n          te[8] = _ae * d + _bf;\n          te[1] = c * f;\n          te[5] = _bf * d + _ae;\n          te[9] = _af * d - _be;\n          te[2] = -d;\n          te[6] = b * c;\n          te[10] = a * c;\n        } else if (euler.order === 'YZX') {\n          var ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n          te[0] = c * e;\n          te[4] = bd - ac * f;\n          te[8] = bc * f + ad;\n          te[1] = f;\n          te[5] = a * e;\n          te[9] = -b * e;\n          te[2] = -d * e;\n          te[6] = ad * f + bc;\n          te[10] = ac - bd * f;\n        } else if (euler.order === 'XZY') {\n          var _ac = a * c,\n            _ad = a * d,\n            _bc = b * c,\n            _bd = b * d;\n          te[0] = c * e;\n          te[4] = -f;\n          te[8] = d * e;\n          te[1] = _ac * f + _bd;\n          te[5] = a * e;\n          te[9] = _ad * f - _bc;\n          te[2] = _bc * f - _ad;\n          te[6] = b * e;\n          te[10] = _bd * f + _ac;\n        }\n\n        // bottom row\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // last column\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n      }\n    }, {\n      key: \"makeRotationFromQuaternion\",\n      value: function makeRotationFromQuaternion(q) {\n        return this.compose(_zero, q, _one);\n      }\n    }, {\n      key: \"lookAt\",\n      value: function lookAt(eye, target, up) {\n        var te = this.elements;\n        _z.subVectors(eye, target);\n        if (_z.lengthSq() === 0) {\n          // eye and target are in the same position\n\n          _z.z = 1;\n        }\n        _z.normalize();\n        _x.crossVectors(up, _z);\n        if (_x.lengthSq() === 0) {\n          // up and z are parallel\n\n          if (Math.abs(up.z) === 1) {\n            _z.x += 0.0001;\n          } else {\n            _z.z += 0.0001;\n          }\n          _z.normalize();\n          _x.crossVectors(up, _z);\n        }\n        _x.normalize();\n        _y.crossVectors(_z, _x);\n        te[0] = _x.x;\n        te[4] = _y.x;\n        te[8] = _z.x;\n        te[1] = _x.y;\n        te[5] = _y.y;\n        te[9] = _z.y;\n        te[2] = _x.z;\n        te[6] = _y.z;\n        te[10] = _z.z;\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(m) {\n        return this.multiplyMatrices(this, m);\n      }\n    }, {\n      key: \"premultiply\",\n      value: function premultiply(m) {\n        return this.multiplyMatrices(m, this);\n      }\n    }, {\n      key: \"multiplyMatrices\",\n      value: function multiplyMatrices(a, b) {\n        var ae = a.elements;\n        var be = b.elements;\n        var te = this.elements;\n        var a11 = ae[0],\n          a12 = ae[4],\n          a13 = ae[8],\n          a14 = ae[12];\n        var a21 = ae[1],\n          a22 = ae[5],\n          a23 = ae[9],\n          a24 = ae[13];\n        var a31 = ae[2],\n          a32 = ae[6],\n          a33 = ae[10],\n          a34 = ae[14];\n        var a41 = ae[3],\n          a42 = ae[7],\n          a43 = ae[11],\n          a44 = ae[15];\n        var b11 = be[0],\n          b12 = be[4],\n          b13 = be[8],\n          b14 = be[12];\n        var b21 = be[1],\n          b22 = be[5],\n          b23 = be[9],\n          b24 = be[13];\n        var b31 = be[2],\n          b32 = be[6],\n          b33 = be[10],\n          b34 = be[14];\n        var b41 = be[3],\n          b42 = be[7],\n          b43 = be[11],\n          b44 = be[15];\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n        return this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function multiplyScalar(s) {\n        var te = this.elements;\n        te[0] *= s;\n        te[4] *= s;\n        te[8] *= s;\n        te[12] *= s;\n        te[1] *= s;\n        te[5] *= s;\n        te[9] *= s;\n        te[13] *= s;\n        te[2] *= s;\n        te[6] *= s;\n        te[10] *= s;\n        te[14] *= s;\n        te[3] *= s;\n        te[7] *= s;\n        te[11] *= s;\n        te[15] *= s;\n        return this;\n      }\n    }, {\n      key: \"determinant\",\n      value: function determinant() {\n        var te = this.elements;\n        var n11 = te[0],\n          n12 = te[4],\n          n13 = te[8],\n          n14 = te[12];\n        var n21 = te[1],\n          n22 = te[5],\n          n23 = te[9],\n          n24 = te[13];\n        var n31 = te[2],\n          n32 = te[6],\n          n33 = te[10],\n          n34 = te[14];\n        var n41 = te[3],\n          n42 = te[7],\n          n43 = te[11],\n          n44 = te[15];\n\n        //TODO: make this more efficient\n        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n      }\n    }, {\n      key: \"transpose\",\n      value: function transpose() {\n        var te = this.elements;\n        var tmp;\n        tmp = te[1];\n        te[1] = te[4];\n        te[4] = tmp;\n        tmp = te[2];\n        te[2] = te[8];\n        te[8] = tmp;\n        tmp = te[6];\n        te[6] = te[9];\n        te[9] = tmp;\n        tmp = te[3];\n        te[3] = te[12];\n        te[12] = tmp;\n        tmp = te[7];\n        te[7] = te[13];\n        te[13] = tmp;\n        tmp = te[11];\n        te[11] = te[14];\n        te[14] = tmp;\n        return this;\n      }\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(x, y, z) {\n        var te = this.elements;\n        if (x.isVector3) {\n          te[12] = x.x;\n          te[13] = x.y;\n          te[14] = x.z;\n        } else {\n          te[12] = x;\n          te[13] = y;\n          te[14] = z;\n        }\n        return this;\n      }\n    }, {\n      key: \"invert\",\n      value: function invert() {\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n        var te = this.elements,\n          n11 = te[0],\n          n21 = te[1],\n          n31 = te[2],\n          n41 = te[3],\n          n12 = te[4],\n          n22 = te[5],\n          n32 = te[6],\n          n42 = te[7],\n          n13 = te[8],\n          n23 = te[9],\n          n33 = te[10],\n          n43 = te[11],\n          n14 = te[12],\n          n24 = te[13],\n          n34 = te[14],\n          n44 = te[15],\n          t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n          t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n          t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n          t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n        var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n        var detInv = 1 / det;\n        te[0] = t11 * detInv;\n        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n        te[4] = t12 * detInv;\n        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n        te[8] = t13 * detInv;\n        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n        te[12] = t14 * detInv;\n        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n        return this;\n      }\n    }, {\n      key: \"scale\",\n      value: function scale(v) {\n        var te = this.elements;\n        var x = v.x,\n          y = v.y,\n          z = v.z;\n        te[0] *= x;\n        te[4] *= y;\n        te[8] *= z;\n        te[1] *= x;\n        te[5] *= y;\n        te[9] *= z;\n        te[2] *= x;\n        te[6] *= y;\n        te[10] *= z;\n        te[3] *= x;\n        te[7] *= y;\n        te[11] *= z;\n        return this;\n      }\n    }, {\n      key: \"getMaxScaleOnAxis\",\n      value: function getMaxScaleOnAxis() {\n        var te = this.elements;\n        var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n        var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n        var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n      }\n    }, {\n      key: \"makeTranslation\",\n      value: function makeTranslation(x, y, z) {\n        if (x.isVector3) {\n          this.set(1, 0, 0, x.x, 0, 1, 0, x.y, 0, 0, 1, x.z, 0, 0, 0, 1);\n        } else {\n          this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n        }\n        return this;\n      }\n    }, {\n      key: \"makeRotationX\",\n      value: function makeRotationX(theta) {\n        var c = Math.cos(theta),\n          s = Math.sin(theta);\n        this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"makeRotationY\",\n      value: function makeRotationY(theta) {\n        var c = Math.cos(theta),\n          s = Math.sin(theta);\n        this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"makeRotationZ\",\n      value: function makeRotationZ(theta) {\n        var c = Math.cos(theta),\n          s = Math.sin(theta);\n        this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"makeRotationAxis\",\n      value: function makeRotationAxis(axis, angle) {\n        // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n        var c = Math.cos(angle);\n        var s = Math.sin(angle);\n        var t = 1 - c;\n        var x = axis.x,\n          y = axis.y,\n          z = axis.z;\n        var tx = t * x,\n          ty = t * y;\n        this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"makeScale\",\n      value: function makeScale(x, y, z) {\n        this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"makeShear\",\n      value: function makeShear(xy, xz, yx, yz, zx, zy) {\n        this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"compose\",\n      value: function compose(position, quaternion, scale) {\n        var te = this.elements;\n        var x = quaternion._x,\n          y = quaternion._y,\n          z = quaternion._z,\n          w = quaternion._w;\n        var x2 = x + x,\n          y2 = y + y,\n          z2 = z + z;\n        var xx = x * x2,\n          xy = x * y2,\n          xz = x * z2;\n        var yy = y * y2,\n          yz = y * z2,\n          zz = z * z2;\n        var wx = w * x2,\n          wy = w * y2,\n          wz = w * z2;\n        var sx = scale.x,\n          sy = scale.y,\n          sz = scale.z;\n        te[0] = (1 - (yy + zz)) * sx;\n        te[1] = (xy + wz) * sx;\n        te[2] = (xz - wy) * sx;\n        te[3] = 0;\n        te[4] = (xy - wz) * sy;\n        te[5] = (1 - (xx + zz)) * sy;\n        te[6] = (yz + wx) * sy;\n        te[7] = 0;\n        te[8] = (xz + wy) * sz;\n        te[9] = (yz - wx) * sz;\n        te[10] = (1 - (xx + yy)) * sz;\n        te[11] = 0;\n        te[12] = position.x;\n        te[13] = position.y;\n        te[14] = position.z;\n        te[15] = 1;\n        return this;\n      }\n    }, {\n      key: \"decompose\",\n      value: function decompose(position, quaternion, scale) {\n        var te = this.elements;\n        var sx = _v1$5.set(te[0], te[1], te[2]).length();\n        var sy = _v1$5.set(te[4], te[5], te[6]).length();\n        var sz = _v1$5.set(te[8], te[9], te[10]).length();\n\n        // if determine is negative, we need to invert one scale\n        var det = this.determinant();\n        if (det < 0) sx = -sx;\n        position.x = te[12];\n        position.y = te[13];\n        position.z = te[14];\n\n        // scale the rotation part\n        _m1$2.copy(this);\n        var invSX = 1 / sx;\n        var invSY = 1 / sy;\n        var invSZ = 1 / sz;\n        _m1$2.elements[0] *= invSX;\n        _m1$2.elements[1] *= invSX;\n        _m1$2.elements[2] *= invSX;\n        _m1$2.elements[4] *= invSY;\n        _m1$2.elements[5] *= invSY;\n        _m1$2.elements[6] *= invSY;\n        _m1$2.elements[8] *= invSZ;\n        _m1$2.elements[9] *= invSZ;\n        _m1$2.elements[10] *= invSZ;\n        quaternion.setFromRotationMatrix(_m1$2);\n        scale.x = sx;\n        scale.y = sy;\n        scale.z = sz;\n        return this;\n      }\n    }, {\n      key: \"makePerspective\",\n      value: function makePerspective(left, right, top, bottom, near, far) {\n        var coordinateSystem = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : WebGLCoordinateSystem;\n        var te = this.elements;\n        var x = 2 * near / (right - left);\n        var y = 2 * near / (top - bottom);\n        var a = (right + left) / (right - left);\n        var b = (top + bottom) / (top - bottom);\n        var c, d;\n        if (coordinateSystem === WebGLCoordinateSystem) {\n          c = -(far + near) / (far - near);\n          d = -2 * far * near / (far - near);\n        } else if (coordinateSystem === WebGPUCoordinateSystem) {\n          c = -far / (far - near);\n          d = -far * near / (far - near);\n        } else {\n          throw new Error('THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem);\n        }\n        te[0] = x;\n        te[4] = 0;\n        te[8] = a;\n        te[12] = 0;\n        te[1] = 0;\n        te[5] = y;\n        te[9] = b;\n        te[13] = 0;\n        te[2] = 0;\n        te[6] = 0;\n        te[10] = c;\n        te[14] = d;\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = -1;\n        te[15] = 0;\n        return this;\n      }\n    }, {\n      key: \"makeOrthographic\",\n      value: function makeOrthographic(left, right, top, bottom, near, far) {\n        var coordinateSystem = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : WebGLCoordinateSystem;\n        var te = this.elements;\n        var w = 1.0 / (right - left);\n        var h = 1.0 / (top - bottom);\n        var p = 1.0 / (far - near);\n        var x = (right + left) * w;\n        var y = (top + bottom) * h;\n        var z, zInv;\n        if (coordinateSystem === WebGLCoordinateSystem) {\n          z = (far + near) * p;\n          zInv = -2 * p;\n        } else if (coordinateSystem === WebGPUCoordinateSystem) {\n          z = near * p;\n          zInv = -1 * p;\n        } else {\n          throw new Error('THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem);\n        }\n        te[0] = 2 * w;\n        te[4] = 0;\n        te[8] = 0;\n        te[12] = -x;\n        te[1] = 0;\n        te[5] = 2 * h;\n        te[9] = 0;\n        te[13] = -y;\n        te[2] = 0;\n        te[6] = 0;\n        te[10] = zInv;\n        te[14] = -z;\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n        te[15] = 1;\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(matrix) {\n        var te = this.elements;\n        var me = matrix.elements;\n        for (var i = 0; i < 16; i++) {\n          if (te[i] !== me[i]) return false;\n        }\n        return true;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        for (var i = 0; i < 16; i++) {\n          this.elements[i] = array[i + offset];\n        }\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n        array[offset + 9] = te[9];\n        array[offset + 10] = te[10];\n        array[offset + 11] = te[11];\n        array[offset + 12] = te[12];\n        array[offset + 13] = te[13];\n        array[offset + 14] = te[14];\n        array[offset + 15] = te[15];\n        return array;\n      }\n    }]);\n  }();\n  var _v1$5 = /*@__PURE__*/new Vector3();\n  var _m1$2 = /*@__PURE__*/new Matrix4();\n  var _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n  var _one = /*@__PURE__*/new Vector3(1, 1, 1);\n  var _x = /*@__PURE__*/new Vector3();\n  var _y = /*@__PURE__*/new Vector3();\n  var _z = /*@__PURE__*/new Vector3();\n  var _matrix$2 = /*@__PURE__*/new Matrix4();\n  var _quaternion$3 = /*@__PURE__*/new Quaternion();\n  var Euler = exports.Euler = /*#__PURE__*/function () {\n    function Euler() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DEFAULT_ORDER;\n      (0, _classCallCheck2.default)(this, Euler);\n      this.isEuler = true;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._order = order;\n    }\n    return (0, _createClass2.default)(Euler, [{\n      key: \"x\",\n      get: function get() {\n        return this._x;\n      },\n      set: function set(value) {\n        this._x = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"y\",\n      get: function get() {\n        return this._y;\n      },\n      set: function set(value) {\n        this._y = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"z\",\n      get: function get() {\n        return this._z;\n      },\n      set: function set(value) {\n        this._z = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"order\",\n      get: function get() {\n        return this._order;\n      },\n      set: function set(value) {\n        this._order = value;\n        this._onChangeCallback();\n      }\n    }, {\n      key: \"set\",\n      value: function set(x, y, z) {\n        var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._order;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._order = order;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this._x, this._y, this._z, this._order);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(euler) {\n        this._x = euler._x;\n        this._y = euler._y;\n        this._z = euler._z;\n        this._order = euler._order;\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"setFromRotationMatrix\",\n      value: function setFromRotationMatrix(m) {\n        var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n        var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        var te = m.elements;\n        var m11 = te[0],\n          m12 = te[4],\n          m13 = te[8];\n        var m21 = te[1],\n          m22 = te[5],\n          m23 = te[9];\n        var m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n        switch (order) {\n          case 'XYZ':\n            this._y = Math.asin(_clamp(m13, -1, 1));\n            if (Math.abs(m13) < 0.9999999) {\n              this._x = Math.atan2(-m23, m33);\n              this._z = Math.atan2(-m12, m11);\n            } else {\n              this._x = Math.atan2(m32, m22);\n              this._z = 0;\n            }\n            break;\n          case 'YXZ':\n            this._x = Math.asin(-_clamp(m23, -1, 1));\n            if (Math.abs(m23) < 0.9999999) {\n              this._y = Math.atan2(m13, m33);\n              this._z = Math.atan2(m21, m22);\n            } else {\n              this._y = Math.atan2(-m31, m11);\n              this._z = 0;\n            }\n            break;\n          case 'ZXY':\n            this._x = Math.asin(_clamp(m32, -1, 1));\n            if (Math.abs(m32) < 0.9999999) {\n              this._y = Math.atan2(-m31, m33);\n              this._z = Math.atan2(-m12, m22);\n            } else {\n              this._y = 0;\n              this._z = Math.atan2(m21, m11);\n            }\n            break;\n          case 'ZYX':\n            this._y = Math.asin(-_clamp(m31, -1, 1));\n            if (Math.abs(m31) < 0.9999999) {\n              this._x = Math.atan2(m32, m33);\n              this._z = Math.atan2(m21, m11);\n            } else {\n              this._x = 0;\n              this._z = Math.atan2(-m12, m22);\n            }\n            break;\n          case 'YZX':\n            this._z = Math.asin(_clamp(m21, -1, 1));\n            if (Math.abs(m21) < 0.9999999) {\n              this._x = Math.atan2(-m23, m22);\n              this._y = Math.atan2(-m31, m11);\n            } else {\n              this._x = 0;\n              this._y = Math.atan2(m13, m33);\n            }\n            break;\n          case 'XZY':\n            this._z = Math.asin(-_clamp(m12, -1, 1));\n            if (Math.abs(m12) < 0.9999999) {\n              this._x = Math.atan2(m32, m22);\n              this._y = Math.atan2(m13, m11);\n            } else {\n              this._x = Math.atan2(-m23, m33);\n              this._y = 0;\n            }\n            break;\n          default:\n            console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n        }\n        this._order = order;\n        if (update === true) this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"setFromQuaternion\",\n      value: function setFromQuaternion(q, order, update) {\n        _matrix$2.makeRotationFromQuaternion(q);\n        return this.setFromRotationMatrix(_matrix$2, order, update);\n      }\n    }, {\n      key: \"setFromVector3\",\n      value: function setFromVector3(v) {\n        var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n        return this.set(v.x, v.y, v.z, order);\n      }\n    }, {\n      key: \"reorder\",\n      value: function reorder(newOrder) {\n        // WARNING: this discards revolution information -bhouston\n\n        _quaternion$3.setFromEuler(this);\n        return this.setFromQuaternion(_quaternion$3, newOrder);\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(euler) {\n        return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        this._x = array[0];\n        this._y = array[1];\n        this._z = array[2];\n        if (array[3] !== undefined) this._order = array[3];\n        this._onChangeCallback();\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        array[offset] = this._x;\n        array[offset + 1] = this._y;\n        array[offset + 2] = this._z;\n        array[offset + 3] = this._order;\n        return array;\n      }\n    }, {\n      key: \"_onChange\",\n      value: function _onChange(callback) {\n        this._onChangeCallback = callback;\n        return this;\n      }\n    }, {\n      key: \"_onChangeCallback\",\n      value: function _onChangeCallback() {}\n    }, {\n      key: Symbol.iterator,\n      value: function* value() {\n        yield this._x;\n        yield this._y;\n        yield this._z;\n        yield this._order;\n      }\n    }]);\n  }();\n  Euler.DEFAULT_ORDER = 'XYZ';\n  var Layers = exports.Layers = /*#__PURE__*/function () {\n    function Layers() {\n      (0, _classCallCheck2.default)(this, Layers);\n      this.mask = 1 | 0;\n    }\n    return (0, _createClass2.default)(Layers, [{\n      key: \"set\",\n      value: function set(channel) {\n        this.mask = (1 << channel | 0) >>> 0;\n      }\n    }, {\n      key: \"enable\",\n      value: function enable(channel) {\n        this.mask |= 1 << channel | 0;\n      }\n    }, {\n      key: \"enableAll\",\n      value: function enableAll() {\n        this.mask = 0xffffffff | 0;\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle(channel) {\n        this.mask ^= 1 << channel | 0;\n      }\n    }, {\n      key: \"disable\",\n      value: function disable(channel) {\n        this.mask &= ~(1 << channel | 0);\n      }\n    }, {\n      key: \"disableAll\",\n      value: function disableAll() {\n        this.mask = 0;\n      }\n    }, {\n      key: \"test\",\n      value: function test(layers) {\n        return (this.mask & layers.mask) !== 0;\n      }\n    }, {\n      key: \"isEnabled\",\n      value: function isEnabled(channel) {\n        return (this.mask & (1 << channel | 0)) !== 0;\n      }\n    }]);\n  }();\n  var _object3DId = 0;\n  var _v1$4 = /*@__PURE__*/new Vector3();\n  var _q1 = /*@__PURE__*/new Quaternion();\n  var _m1$1 = /*@__PURE__*/new Matrix4();\n  var _target = /*@__PURE__*/new Vector3();\n  var _position$3 = /*@__PURE__*/new Vector3();\n  var _scale$2 = /*@__PURE__*/new Vector3();\n  var _quaternion$2 = /*@__PURE__*/new Quaternion();\n  var _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n  var _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n  var _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n  var _addedEvent = {\n    type: 'added'\n  };\n  var _removedEvent = {\n    type: 'removed'\n  };\n  var _childaddedEvent = {\n    type: 'childadded',\n    child: null\n  };\n  var _childremovedEvent = {\n    type: 'childremoved',\n    child: null\n  };\n  var Object3D = exports.Object3D = /*#__PURE__*/function (_EventDispatcher3) {\n    function Object3D() {\n      var _this8;\n      (0, _classCallCheck2.default)(this, Object3D);\n      _this8 = _callSuper(this, Object3D);\n      _this8.isObject3D = true;\n      Object.defineProperty(_this8, 'id', {\n        value: _object3DId++\n      });\n      _this8.uuid = generateUUID();\n      _this8.name = '';\n      _this8.type = 'Object3D';\n      _this8.parent = null;\n      _this8.children = [];\n      _this8.up = Object3D.DEFAULT_UP.clone();\n      var position = new Vector3();\n      var rotation = new Euler();\n      var quaternion = new Quaternion();\n      var scale = new Vector3(1, 1, 1);\n      function onRotationChange() {\n        quaternion.setFromEuler(rotation, false);\n      }\n      function onQuaternionChange() {\n        rotation.setFromQuaternion(quaternion, undefined, false);\n      }\n      rotation._onChange(onRotationChange);\n      quaternion._onChange(onQuaternionChange);\n      Object.defineProperties(_this8, {\n        position: {\n          configurable: true,\n          enumerable: true,\n          value: position\n        },\n        rotation: {\n          configurable: true,\n          enumerable: true,\n          value: rotation\n        },\n        quaternion: {\n          configurable: true,\n          enumerable: true,\n          value: quaternion\n        },\n        scale: {\n          configurable: true,\n          enumerable: true,\n          value: scale\n        },\n        modelViewMatrix: {\n          value: new Matrix4()\n        },\n        normalMatrix: {\n          value: new Matrix3()\n        }\n      });\n      _this8.matrix = new Matrix4();\n      _this8.matrixWorld = new Matrix4();\n      _this8.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n      _this8.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n      _this8.matrixWorldNeedsUpdate = false;\n      _this8.layers = new Layers();\n      _this8.visible = true;\n      _this8.castShadow = false;\n      _this8.receiveShadow = false;\n      _this8.frustumCulled = true;\n      _this8.renderOrder = 0;\n      _this8.animations = [];\n      _this8.userData = {};\n      return _this8;\n    }\n    (0, _inherits2.default)(Object3D, _EventDispatcher3);\n    return (0, _createClass2.default)(Object3D, [{\n      key: \"onBeforeShadow\",\n      value: function onBeforeShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */) {}\n    }, {\n      key: \"onAfterShadow\",\n      value: function onAfterShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */) {}\n    }, {\n      key: \"onBeforeRender\",\n      value: function onBeforeRender(/* renderer, scene, camera, geometry, material, group */) {}\n    }, {\n      key: \"onAfterRender\",\n      value: function onAfterRender(/* renderer, scene, camera, geometry, material, group */) {}\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        this.matrix.premultiply(matrix);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n      }\n    }, {\n      key: \"applyQuaternion\",\n      value: function applyQuaternion(q) {\n        this.quaternion.premultiply(q);\n        return this;\n      }\n    }, {\n      key: \"setRotationFromAxisAngle\",\n      value: function setRotationFromAxisAngle(axis, angle) {\n        // assumes axis is normalized\n\n        this.quaternion.setFromAxisAngle(axis, angle);\n      }\n    }, {\n      key: \"setRotationFromEuler\",\n      value: function setRotationFromEuler(euler) {\n        this.quaternion.setFromEuler(euler, true);\n      }\n    }, {\n      key: \"setRotationFromMatrix\",\n      value: function setRotationFromMatrix(m) {\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        this.quaternion.setFromRotationMatrix(m);\n      }\n    }, {\n      key: \"setRotationFromQuaternion\",\n      value: function setRotationFromQuaternion(q) {\n        // assumes q is normalized\n\n        this.quaternion.copy(q);\n      }\n    }, {\n      key: \"rotateOnAxis\",\n      value: function rotateOnAxis(axis, angle) {\n        // rotate object on axis in object space\n        // axis is assumed to be normalized\n\n        _q1.setFromAxisAngle(axis, angle);\n        this.quaternion.multiply(_q1);\n        return this;\n      }\n    }, {\n      key: \"rotateOnWorldAxis\",\n      value: function rotateOnWorldAxis(axis, angle) {\n        // rotate object on axis in world space\n        // axis is assumed to be normalized\n        // method assumes no rotated parent\n\n        _q1.setFromAxisAngle(axis, angle);\n        this.quaternion.premultiply(_q1);\n        return this;\n      }\n    }, {\n      key: \"rotateX\",\n      value: function rotateX(angle) {\n        return this.rotateOnAxis(_xAxis, angle);\n      }\n    }, {\n      key: \"rotateY\",\n      value: function rotateY(angle) {\n        return this.rotateOnAxis(_yAxis, angle);\n      }\n    }, {\n      key: \"rotateZ\",\n      value: function rotateZ(angle) {\n        return this.rotateOnAxis(_zAxis, angle);\n      }\n    }, {\n      key: \"translateOnAxis\",\n      value: function translateOnAxis(axis, distance) {\n        // translate object by distance along axis in object space\n        // axis is assumed to be normalized\n\n        _v1$4.copy(axis).applyQuaternion(this.quaternion);\n        this.position.add(_v1$4.multiplyScalar(distance));\n        return this;\n      }\n    }, {\n      key: \"translateX\",\n      value: function translateX(distance) {\n        return this.translateOnAxis(_xAxis, distance);\n      }\n    }, {\n      key: \"translateY\",\n      value: function translateY(distance) {\n        return this.translateOnAxis(_yAxis, distance);\n      }\n    }, {\n      key: \"translateZ\",\n      value: function translateZ(distance) {\n        return this.translateOnAxis(_zAxis, distance);\n      }\n    }, {\n      key: \"localToWorld\",\n      value: function localToWorld(vector) {\n        this.updateWorldMatrix(true, false);\n        return vector.applyMatrix4(this.matrixWorld);\n      }\n    }, {\n      key: \"worldToLocal\",\n      value: function worldToLocal(vector) {\n        this.updateWorldMatrix(true, false);\n        return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n      }\n    }, {\n      key: \"lookAt\",\n      value: function lookAt(x, y, z) {\n        // This method does not support objects having non-uniformly-scaled parent(s)\n\n        if (x.isVector3) {\n          _target.copy(x);\n        } else {\n          _target.set(x, y, z);\n        }\n        var parent = this.parent;\n        this.updateWorldMatrix(true, false);\n        _position$3.setFromMatrixPosition(this.matrixWorld);\n        if (this.isCamera || this.isLight) {\n          _m1$1.lookAt(_position$3, _target, this.up);\n        } else {\n          _m1$1.lookAt(_target, _position$3, this.up);\n        }\n        this.quaternion.setFromRotationMatrix(_m1$1);\n        if (parent) {\n          _m1$1.extractRotation(parent.matrixWorld);\n          _q1.setFromRotationMatrix(_m1$1);\n          this.quaternion.premultiply(_q1.invert());\n        }\n      }\n    }, {\n      key: \"add\",\n      value: function add(object) {\n        if (arguments.length > 1) {\n          for (var i = 0; i < arguments.length; i++) {\n            this.add(arguments[i]);\n          }\n          return this;\n        }\n        if (object === this) {\n          console.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n          return this;\n        }\n        if (object && object.isObject3D) {\n          object.removeFromParent();\n          object.parent = this;\n          this.children.push(object);\n          object.dispatchEvent(_addedEvent);\n          _childaddedEvent.child = object;\n          this.dispatchEvent(_childaddedEvent);\n          _childaddedEvent.child = null;\n        } else {\n          console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n        }\n        return this;\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(object) {\n        if (arguments.length > 1) {\n          for (var i = 0; i < arguments.length; i++) {\n            this.remove(arguments[i]);\n          }\n          return this;\n        }\n        var index = this.children.indexOf(object);\n        if (index !== -1) {\n          object.parent = null;\n          this.children.splice(index, 1);\n          object.dispatchEvent(_removedEvent);\n          _childremovedEvent.child = object;\n          this.dispatchEvent(_childremovedEvent);\n          _childremovedEvent.child = null;\n        }\n        return this;\n      }\n    }, {\n      key: \"removeFromParent\",\n      value: function removeFromParent() {\n        var parent = this.parent;\n        if (parent !== null) {\n          parent.remove(this);\n        }\n        return this;\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        return this.remove.apply(this, (0, _toConsumableArray2.default)(this.children));\n      }\n    }, {\n      key: \"attach\",\n      value: function attach(object) {\n        // adds object as a child of this, while maintaining the object's world transform\n\n        // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n        this.updateWorldMatrix(true, false);\n        _m1$1.copy(this.matrixWorld).invert();\n        if (object.parent !== null) {\n          object.parent.updateWorldMatrix(true, false);\n          _m1$1.multiply(object.parent.matrixWorld);\n        }\n        object.applyMatrix4(_m1$1);\n        object.removeFromParent();\n        object.parent = this;\n        this.children.push(object);\n        object.updateWorldMatrix(false, true);\n        object.dispatchEvent(_addedEvent);\n        _childaddedEvent.child = object;\n        this.dispatchEvent(_childaddedEvent);\n        _childaddedEvent.child = null;\n        return this;\n      }\n    }, {\n      key: \"getObjectById\",\n      value: function getObjectById(id) {\n        return this.getObjectByProperty('id', id);\n      }\n    }, {\n      key: \"getObjectByName\",\n      value: function getObjectByName(name) {\n        return this.getObjectByProperty('name', name);\n      }\n    }, {\n      key: \"getObjectByProperty\",\n      value: function getObjectByProperty(name, value) {\n        if (this[name] === value) return this;\n        for (var i = 0, l = this.children.length; i < l; i++) {\n          var child = this.children[i];\n          var object = child.getObjectByProperty(name, value);\n          if (object !== undefined) {\n            return object;\n          }\n        }\n        return undefined;\n      }\n    }, {\n      key: \"getObjectsByProperty\",\n      value: function getObjectsByProperty(name, value) {\n        var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        if (this[name] === value) result.push(this);\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n          children[i].getObjectsByProperty(name, value, result);\n        }\n        return result;\n      }\n    }, {\n      key: \"getWorldPosition\",\n      value: function getWorldPosition(target) {\n        this.updateWorldMatrix(true, false);\n        return target.setFromMatrixPosition(this.matrixWorld);\n      }\n    }, {\n      key: \"getWorldQuaternion\",\n      value: function getWorldQuaternion(target) {\n        this.updateWorldMatrix(true, false);\n        this.matrixWorld.decompose(_position$3, target, _scale$2);\n        return target;\n      }\n    }, {\n      key: \"getWorldScale\",\n      value: function getWorldScale(target) {\n        this.updateWorldMatrix(true, false);\n        this.matrixWorld.decompose(_position$3, _quaternion$2, target);\n        return target;\n      }\n    }, {\n      key: \"getWorldDirection\",\n      value: function getWorldDirection(target) {\n        this.updateWorldMatrix(true, false);\n        var e = this.matrixWorld.elements;\n        return target.set(e[8], e[9], e[10]).normalize();\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(/* raycaster, intersects */) {}\n    }, {\n      key: \"traverse\",\n      value: function traverse(callback) {\n        callback(this);\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n          children[i].traverse(callback);\n        }\n      }\n    }, {\n      key: \"traverseVisible\",\n      value: function traverseVisible(callback) {\n        if (this.visible === false) return;\n        callback(this);\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n          children[i].traverseVisible(callback);\n        }\n      }\n    }, {\n      key: \"traverseAncestors\",\n      value: function traverseAncestors(callback) {\n        var parent = this.parent;\n        if (parent !== null) {\n          callback(parent);\n          parent.traverseAncestors(callback);\n        }\n      }\n    }, {\n      key: \"updateMatrix\",\n      value: function updateMatrix() {\n        this.matrix.compose(this.position, this.quaternion, this.scale);\n        this.matrixWorldNeedsUpdate = true;\n      }\n    }, {\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.matrixWorldNeedsUpdate || force) {\n          if (this.matrixWorldAutoUpdate === true) {\n            if (this.parent === null) {\n              this.matrixWorld.copy(this.matrix);\n            } else {\n              this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n            }\n          }\n          this.matrixWorldNeedsUpdate = false;\n          force = true;\n        }\n\n        // make sure descendants are updated if required\n\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n          var child = children[i];\n          child.updateMatrixWorld(force);\n        }\n      }\n    }, {\n      key: \"updateWorldMatrix\",\n      value: function updateWorldMatrix(updateParents, updateChildren) {\n        var parent = this.parent;\n        if (updateParents === true && parent !== null) {\n          parent.updateWorldMatrix(true, false);\n        }\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.matrixWorldAutoUpdate === true) {\n          if (this.parent === null) {\n            this.matrixWorld.copy(this.matrix);\n          } else {\n            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n          }\n        }\n\n        // make sure descendants are updated\n\n        if (updateChildren === true) {\n          var children = this.children;\n          for (var i = 0, l = children.length; i < l; i++) {\n            var child = children[i];\n            child.updateWorldMatrix(false, true);\n          }\n        }\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        // meta is a string when called from JSON.stringify\n        var isRootObject = meta === undefined || typeof meta === 'string';\n        var output = {};\n\n        // meta is a hash used to collect geometries, materials.\n        // not providing it implies that this is the root object\n        // being serialized.\n        if (isRootObject) {\n          // initialize meta obj\n          meta = {\n            geometries: {},\n            materials: {},\n            textures: {},\n            images: {},\n            shapes: {},\n            skeletons: {},\n            animations: {},\n            nodes: {}\n          };\n          output.metadata = {\n            version: 4.6,\n            type: 'Object',\n            generator: 'Object3D.toJSON'\n          };\n        }\n\n        // standard Object3D serialization\n\n        var object = {};\n        object.uuid = this.uuid;\n        object.type = this.type;\n        if (this.name !== '') object.name = this.name;\n        if (this.castShadow === true) object.castShadow = true;\n        if (this.receiveShadow === true) object.receiveShadow = true;\n        if (this.visible === false) object.visible = false;\n        if (this.frustumCulled === false) object.frustumCulled = false;\n        if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n        if (Object.keys(this.userData).length > 0) object.userData = this.userData;\n        object.layers = this.layers.mask;\n        object.matrix = this.matrix.toArray();\n        object.up = this.up.toArray();\n        if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;\n\n        // object specific properties\n\n        if (this.isInstancedMesh) {\n          object.type = 'InstancedMesh';\n          object.count = this.count;\n          object.instanceMatrix = this.instanceMatrix.toJSON();\n          if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n        }\n        if (this.isBatchedMesh) {\n          object.type = 'BatchedMesh';\n          object.perObjectFrustumCulled = this.perObjectFrustumCulled;\n          object.sortObjects = this.sortObjects;\n          object.drawRanges = this._drawRanges;\n          object.reservedRanges = this._reservedRanges;\n          object.visibility = this._visibility;\n          object.active = this._active;\n          object.bounds = this._bounds.map(function (bound) {\n            return {\n              boxInitialized: bound.boxInitialized,\n              boxMin: bound.box.min.toArray(),\n              boxMax: bound.box.max.toArray(),\n              sphereInitialized: bound.sphereInitialized,\n              sphereRadius: bound.sphere.radius,\n              sphereCenter: bound.sphere.center.toArray()\n            };\n          });\n          object.maxInstanceCount = this._maxInstanceCount;\n          object.maxVertexCount = this._maxVertexCount;\n          object.maxIndexCount = this._maxIndexCount;\n          object.geometryInitialized = this._geometryInitialized;\n          object.geometryCount = this._geometryCount;\n          object.matricesTexture = this._matricesTexture.toJSON(meta);\n          if (this._colorsTexture !== null) object.colorsTexture = this._colorsTexture.toJSON(meta);\n          if (this.boundingSphere !== null) {\n            object.boundingSphere = {\n              center: object.boundingSphere.center.toArray(),\n              radius: object.boundingSphere.radius\n            };\n          }\n          if (this.boundingBox !== null) {\n            object.boundingBox = {\n              min: object.boundingBox.min.toArray(),\n              max: object.boundingBox.max.toArray()\n            };\n          }\n        }\n\n        //\n\n        function serialize(library, element) {\n          if (library[element.uuid] === undefined) {\n            library[element.uuid] = element.toJSON(meta);\n          }\n          return element.uuid;\n        }\n        if (this.isScene) {\n          if (this.background) {\n            if (this.background.isColor) {\n              object.background = this.background.toJSON();\n            } else if (this.background.isTexture) {\n              object.background = this.background.toJSON(meta).uuid;\n            }\n          }\n          if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {\n            object.environment = this.environment.toJSON(meta).uuid;\n          }\n        } else if (this.isMesh || this.isLine || this.isPoints) {\n          object.geometry = serialize(meta.geometries, this.geometry);\n          var parameters = this.geometry.parameters;\n          if (parameters !== undefined && parameters.shapes !== undefined) {\n            var shapes = parameters.shapes;\n            if (Array.isArray(shapes)) {\n              for (var i = 0, l = shapes.length; i < l; i++) {\n                var shape = shapes[i];\n                serialize(meta.shapes, shape);\n              }\n            } else {\n              serialize(meta.shapes, shapes);\n            }\n          }\n        }\n        if (this.isSkinnedMesh) {\n          object.bindMode = this.bindMode;\n          object.bindMatrix = this.bindMatrix.toArray();\n          if (this.skeleton !== undefined) {\n            serialize(meta.skeletons, this.skeleton);\n            object.skeleton = this.skeleton.uuid;\n          }\n        }\n        if (this.material !== undefined) {\n          if (Array.isArray(this.material)) {\n            var uuids = [];\n            for (var _i3 = 0, _l2 = this.material.length; _i3 < _l2; _i3++) {\n              uuids.push(serialize(meta.materials, this.material[_i3]));\n            }\n            object.material = uuids;\n          } else {\n            object.material = serialize(meta.materials, this.material);\n          }\n        }\n\n        //\n\n        if (this.children.length > 0) {\n          object.children = [];\n          for (var _i4 = 0; _i4 < this.children.length; _i4++) {\n            object.children.push(this.children[_i4].toJSON(meta).object);\n          }\n        }\n\n        //\n\n        if (this.animations.length > 0) {\n          object.animations = [];\n          for (var _i5 = 0; _i5 < this.animations.length; _i5++) {\n            var animation = this.animations[_i5];\n            object.animations.push(serialize(meta.animations, animation));\n          }\n        }\n        if (isRootObject) {\n          var geometries = extractFromCache(meta.geometries);\n          var materials = extractFromCache(meta.materials);\n          var textures = extractFromCache(meta.textures);\n          var images = extractFromCache(meta.images);\n          var _shapes = extractFromCache(meta.shapes);\n          var skeletons = extractFromCache(meta.skeletons);\n          var animations = extractFromCache(meta.animations);\n          var nodes = extractFromCache(meta.nodes);\n          if (geometries.length > 0) output.geometries = geometries;\n          if (materials.length > 0) output.materials = materials;\n          if (textures.length > 0) output.textures = textures;\n          if (images.length > 0) output.images = images;\n          if (_shapes.length > 0) output.shapes = _shapes;\n          if (skeletons.length > 0) output.skeletons = skeletons;\n          if (animations.length > 0) output.animations = animations;\n          if (nodes.length > 0) output.nodes = nodes;\n        }\n        output.object = object;\n        return output;\n\n        // extract data from the cache hash\n        // remove metadata on each item\n        // and return as array\n        function extractFromCache(cache) {\n          var values = [];\n          for (var key in cache) {\n            var data = cache[key];\n            delete data.metadata;\n            values.push(data);\n          }\n          return values;\n        }\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(recursive) {\n        return new this.constructor().copy(this, recursive);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        this.name = source.name;\n        this.up.copy(source.up);\n        this.position.copy(source.position);\n        this.rotation.order = source.rotation.order;\n        this.quaternion.copy(source.quaternion);\n        this.scale.copy(source.scale);\n        this.matrix.copy(source.matrix);\n        this.matrixWorld.copy(source.matrixWorld);\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n        this.layers.mask = source.layers.mask;\n        this.visible = source.visible;\n        this.castShadow = source.castShadow;\n        this.receiveShadow = source.receiveShadow;\n        this.frustumCulled = source.frustumCulled;\n        this.renderOrder = source.renderOrder;\n        this.animations = source.animations.slice();\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        if (recursive === true) {\n          for (var i = 0; i < source.children.length; i++) {\n            var child = source.children[i];\n            this.add(child.clone());\n          }\n        }\n        return this;\n      }\n    }]);\n  }(EventDispatcher);\n  Object3D.DEFAULT_UP = /*@__PURE__*/new Vector3(0, 1, 0);\n  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n  var _v0$1 = /*@__PURE__*/new Vector3();\n  var _v1$3 = /*@__PURE__*/new Vector3();\n  var _v2$2 = /*@__PURE__*/new Vector3();\n  var _v3$2 = /*@__PURE__*/new Vector3();\n  var _vab = /*@__PURE__*/new Vector3();\n  var _vac = /*@__PURE__*/new Vector3();\n  var _vbc = /*@__PURE__*/new Vector3();\n  var _vap = /*@__PURE__*/new Vector3();\n  var _vbp = /*@__PURE__*/new Vector3();\n  var _vcp = /*@__PURE__*/new Vector3();\n  var _v40 = /*@__PURE__*/new Vector4();\n  var _v41 = /*@__PURE__*/new Vector4();\n  var _v42 = /*@__PURE__*/new Vector4();\n  var Triangle = exports.Triangle = /*#__PURE__*/function () {\n    function Triangle() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n      (0, _classCallCheck2.default)(this, Triangle);\n      this.a = a;\n      this.b = b;\n      this.c = c;\n    }\n    return (0, _createClass2.default)(Triangle, [{\n      key: \"set\",\n      value: function set(a, b, c) {\n        this.a.copy(a);\n        this.b.copy(b);\n        this.c.copy(c);\n        return this;\n      }\n    }, {\n      key: \"setFromPointsAndIndices\",\n      value: function setFromPointsAndIndices(points, i0, i1, i2) {\n        this.a.copy(points[i0]);\n        this.b.copy(points[i1]);\n        this.c.copy(points[i2]);\n        return this;\n      }\n    }, {\n      key: \"setFromAttributeAndIndices\",\n      value: function setFromAttributeAndIndices(attribute, i0, i1, i2) {\n        this.a.fromBufferAttribute(attribute, i0);\n        this.b.fromBufferAttribute(attribute, i1);\n        this.c.fromBufferAttribute(attribute, i2);\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(triangle) {\n        this.a.copy(triangle.a);\n        this.b.copy(triangle.b);\n        this.c.copy(triangle.c);\n        return this;\n      }\n    }, {\n      key: \"getArea\",\n      value: function getArea() {\n        _v0$1.subVectors(this.c, this.b);\n        _v1$3.subVectors(this.a, this.b);\n        return _v0$1.cross(_v1$3).length() * 0.5;\n      }\n    }, {\n      key: \"getMidpoint\",\n      value: function getMidpoint(target) {\n        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n      }\n    }, {\n      key: \"getNormal\",\n      value: function getNormal(target) {\n        return Triangle.getNormal(this.a, this.b, this.c, target);\n      }\n    }, {\n      key: \"getPlane\",\n      value: function getPlane(target) {\n        return target.setFromCoplanarPoints(this.a, this.b, this.c);\n      }\n    }, {\n      key: \"getBarycoord\",\n      value: function getBarycoord(point, target) {\n        return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n      }\n    }, {\n      key: \"getInterpolation\",\n      value: function getInterpolation(point, v1, v2, v3, target) {\n        return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);\n      }\n    }, {\n      key: \"containsPoint\",\n      value: function containsPoint(point) {\n        return Triangle.containsPoint(point, this.a, this.b, this.c);\n      }\n    }, {\n      key: \"isFrontFacing\",\n      value: function isFrontFacing(direction) {\n        return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        return box.intersectsTriangle(this);\n      }\n    }, {\n      key: \"closestPointToPoint\",\n      value: function closestPointToPoint(p, target) {\n        var a = this.a,\n          b = this.b,\n          c = this.c;\n        var v, w;\n\n        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n        // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n        // basically, we're distinguishing which of the voronoi regions of the triangle\n        // the point lies in with the minimum amount of redundant computation.\n\n        _vab.subVectors(b, a);\n        _vac.subVectors(c, a);\n        _vap.subVectors(p, a);\n        var d1 = _vab.dot(_vap);\n        var d2 = _vac.dot(_vap);\n        if (d1 <= 0 && d2 <= 0) {\n          // vertex region of A; barycentric coords (1, 0, 0)\n          return target.copy(a);\n        }\n        _vbp.subVectors(p, b);\n        var d3 = _vab.dot(_vbp);\n        var d4 = _vac.dot(_vbp);\n        if (d3 >= 0 && d4 <= d3) {\n          // vertex region of B; barycentric coords (0, 1, 0)\n          return target.copy(b);\n        }\n        var vc = d1 * d4 - d3 * d2;\n        if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n          v = d1 / (d1 - d3);\n          // edge region of AB; barycentric coords (1-v, v, 0)\n          return target.copy(a).addScaledVector(_vab, v);\n        }\n        _vcp.subVectors(p, c);\n        var d5 = _vab.dot(_vcp);\n        var d6 = _vac.dot(_vcp);\n        if (d6 >= 0 && d5 <= d6) {\n          // vertex region of C; barycentric coords (0, 0, 1)\n          return target.copy(c);\n        }\n        var vb = d5 * d2 - d1 * d6;\n        if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n          w = d2 / (d2 - d6);\n          // edge region of AC; barycentric coords (1-w, 0, w)\n          return target.copy(a).addScaledVector(_vac, w);\n        }\n        var va = d3 * d6 - d5 * d4;\n        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n          _vbc.subVectors(c, b);\n          w = (d4 - d3) / (d4 - d3 + (d5 - d6));\n          // edge region of BC; barycentric coords (0, 1-w, w)\n          return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n        }\n\n        // face region\n        var denom = 1 / (va + vb + vc);\n        // u = va * denom\n        v = vb * denom;\n        w = vc * denom;\n        return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(triangle) {\n        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n      }\n    }], [{\n      key: \"getNormal\",\n      value: function getNormal(a, b, c, target) {\n        target.subVectors(c, b);\n        _v0$1.subVectors(a, b);\n        target.cross(_v0$1);\n        var targetLengthSq = target.lengthSq();\n        if (targetLengthSq > 0) {\n          return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n        }\n        return target.set(0, 0, 0);\n      }\n\n      // static/instance method to calculate barycentric coordinates\n      // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    }, {\n      key: \"getBarycoord\",\n      value: function getBarycoord(point, a, b, c, target) {\n        _v0$1.subVectors(c, a);\n        _v1$3.subVectors(b, a);\n        _v2$2.subVectors(point, a);\n        var dot00 = _v0$1.dot(_v0$1);\n        var dot01 = _v0$1.dot(_v1$3);\n        var dot02 = _v0$1.dot(_v2$2);\n        var dot11 = _v1$3.dot(_v1$3);\n        var dot12 = _v1$3.dot(_v2$2);\n        var denom = dot00 * dot11 - dot01 * dot01;\n\n        // collinear or singular triangle\n        if (denom === 0) {\n          target.set(0, 0, 0);\n          return null;\n        }\n        var invDenom = 1 / denom;\n        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        var v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n        // barycentric coordinates must always sum to 1\n        return target.set(1 - u - v, v, u);\n      }\n    }, {\n      key: \"containsPoint\",\n      value: function containsPoint(point, a, b, c) {\n        // if the triangle is degenerate then we can't contain a point\n        if (this.getBarycoord(point, a, b, c, _v3$2) === null) {\n          return false;\n        }\n        return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;\n      }\n    }, {\n      key: \"getInterpolation\",\n      value: function getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {\n        if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {\n          target.x = 0;\n          target.y = 0;\n          if ('z' in target) target.z = 0;\n          if ('w' in target) target.w = 0;\n          return null;\n        }\n        target.setScalar(0);\n        target.addScaledVector(v1, _v3$2.x);\n        target.addScaledVector(v2, _v3$2.y);\n        target.addScaledVector(v3, _v3$2.z);\n        return target;\n      }\n    }, {\n      key: \"getInterpolatedAttribute\",\n      value: function getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {\n        _v40.setScalar(0);\n        _v41.setScalar(0);\n        _v42.setScalar(0);\n        _v40.fromBufferAttribute(attr, i1);\n        _v41.fromBufferAttribute(attr, i2);\n        _v42.fromBufferAttribute(attr, i3);\n        target.setScalar(0);\n        target.addScaledVector(_v40, barycoord.x);\n        target.addScaledVector(_v41, barycoord.y);\n        target.addScaledVector(_v42, barycoord.z);\n        return target;\n      }\n    }, {\n      key: \"isFrontFacing\",\n      value: function isFrontFacing(a, b, c, direction) {\n        _v0$1.subVectors(c, b);\n        _v1$3.subVectors(a, b);\n\n        // strictly front facing\n        return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n      }\n    }]);\n  }();\n  var _colorKeywords = {\n    'aliceblue': 0xF0F8FF,\n    'antiquewhite': 0xFAEBD7,\n    'aqua': 0x00FFFF,\n    'aquamarine': 0x7FFFD4,\n    'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC,\n    'bisque': 0xFFE4C4,\n    'black': 0x000000,\n    'blanchedalmond': 0xFFEBCD,\n    'blue': 0x0000FF,\n    'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A,\n    'burlywood': 0xDEB887,\n    'cadetblue': 0x5F9EA0,\n    'chartreuse': 0x7FFF00,\n    'chocolate': 0xD2691E,\n    'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED,\n    'cornsilk': 0xFFF8DC,\n    'crimson': 0xDC143C,\n    'cyan': 0x00FFFF,\n    'darkblue': 0x00008B,\n    'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B,\n    'darkgray': 0xA9A9A9,\n    'darkgreen': 0x006400,\n    'darkgrey': 0xA9A9A9,\n    'darkkhaki': 0xBDB76B,\n    'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F,\n    'darkorange': 0xFF8C00,\n    'darkorchid': 0x9932CC,\n    'darkred': 0x8B0000,\n    'darksalmon': 0xE9967A,\n    'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B,\n    'darkslategray': 0x2F4F4F,\n    'darkslategrey': 0x2F4F4F,\n    'darkturquoise': 0x00CED1,\n    'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493,\n    'deepskyblue': 0x00BFFF,\n    'dimgray': 0x696969,\n    'dimgrey': 0x696969,\n    'dodgerblue': 0x1E90FF,\n    'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0,\n    'forestgreen': 0x228B22,\n    'fuchsia': 0xFF00FF,\n    'gainsboro': 0xDCDCDC,\n    'ghostwhite': 0xF8F8FF,\n    'gold': 0xFFD700,\n    'goldenrod': 0xDAA520,\n    'gray': 0x808080,\n    'green': 0x008000,\n    'greenyellow': 0xADFF2F,\n    'grey': 0x808080,\n    'honeydew': 0xF0FFF0,\n    'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C,\n    'indigo': 0x4B0082,\n    'ivory': 0xFFFFF0,\n    'khaki': 0xF0E68C,\n    'lavender': 0xE6E6FA,\n    'lavenderblush': 0xFFF0F5,\n    'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD,\n    'lightblue': 0xADD8E6,\n    'lightcoral': 0xF08080,\n    'lightcyan': 0xE0FFFF,\n    'lightgoldenrodyellow': 0xFAFAD2,\n    'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90,\n    'lightgrey': 0xD3D3D3,\n    'lightpink': 0xFFB6C1,\n    'lightsalmon': 0xFFA07A,\n    'lightseagreen': 0x20B2AA,\n    'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899,\n    'lightslategrey': 0x778899,\n    'lightsteelblue': 0xB0C4DE,\n    'lightyellow': 0xFFFFE0,\n    'lime': 0x00FF00,\n    'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6,\n    'magenta': 0xFF00FF,\n    'maroon': 0x800000,\n    'mediumaquamarine': 0x66CDAA,\n    'mediumblue': 0x0000CD,\n    'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB,\n    'mediumseagreen': 0x3CB371,\n    'mediumslateblue': 0x7B68EE,\n    'mediumspringgreen': 0x00FA9A,\n    'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585,\n    'midnightblue': 0x191970,\n    'mintcream': 0xF5FFFA,\n    'mistyrose': 0xFFE4E1,\n    'moccasin': 0xFFE4B5,\n    'navajowhite': 0xFFDEAD,\n    'navy': 0x000080,\n    'oldlace': 0xFDF5E6,\n    'olive': 0x808000,\n    'olivedrab': 0x6B8E23,\n    'orange': 0xFFA500,\n    'orangered': 0xFF4500,\n    'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA,\n    'palegreen': 0x98FB98,\n    'paleturquoise': 0xAFEEEE,\n    'palevioletred': 0xDB7093,\n    'papayawhip': 0xFFEFD5,\n    'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F,\n    'pink': 0xFFC0CB,\n    'plum': 0xDDA0DD,\n    'powderblue': 0xB0E0E6,\n    'purple': 0x800080,\n    'rebeccapurple': 0x663399,\n    'red': 0xFF0000,\n    'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1,\n    'saddlebrown': 0x8B4513,\n    'salmon': 0xFA8072,\n    'sandybrown': 0xF4A460,\n    'seagreen': 0x2E8B57,\n    'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D,\n    'silver': 0xC0C0C0,\n    'skyblue': 0x87CEEB,\n    'slateblue': 0x6A5ACD,\n    'slategray': 0x708090,\n    'slategrey': 0x708090,\n    'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F,\n    'steelblue': 0x4682B4,\n    'tan': 0xD2B48C,\n    'teal': 0x008080,\n    'thistle': 0xD8BFD8,\n    'tomato': 0xFF6347,\n    'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE,\n    'wheat': 0xF5DEB3,\n    'white': 0xFFFFFF,\n    'whitesmoke': 0xF5F5F5,\n    'yellow': 0xFFFF00,\n    'yellowgreen': 0x9ACD32\n  };\n  var _hslA = {\n    h: 0,\n    s: 0,\n    l: 0\n  };\n  var _hslB = {\n    h: 0,\n    s: 0,\n    l: 0\n  };\n  function hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n    return p;\n  }\n  var Color = exports.Color = /*#__PURE__*/function () {\n    function Color(r, g, b) {\n      (0, _classCallCheck2.default)(this, Color);\n      this.isColor = true;\n      this.r = 1;\n      this.g = 1;\n      this.b = 1;\n      return this.set(r, g, b);\n    }\n    return (0, _createClass2.default)(Color, [{\n      key: \"set\",\n      value: function set(r, g, b) {\n        if (g === undefined && b === undefined) {\n          // r is THREE.Color, hex or string\n\n          var value = r;\n          if (value && value.isColor) {\n            this.copy(value);\n          } else if (typeof value === 'number') {\n            this.setHex(value);\n          } else if (typeof value === 'string') {\n            this.setStyle(value);\n          }\n        } else {\n          this.setRGB(r, g, b);\n        }\n        return this;\n      }\n    }, {\n      key: \"setScalar\",\n      value: function setScalar(scalar) {\n        this.r = scalar;\n        this.g = scalar;\n        this.b = scalar;\n        return this;\n      }\n    }, {\n      key: \"setHex\",\n      value: function setHex(hex) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n        hex = Math.floor(hex);\n        this.r = (hex >> 16 & 255) / 255;\n        this.g = (hex >> 8 & 255) / 255;\n        this.b = (hex & 255) / 255;\n        ColorManagement.toWorkingColorSpace(this, colorSpace);\n        return this;\n      }\n    }, {\n      key: \"setRGB\",\n      value: function setRGB(r, g, b) {\n        var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorManagement.workingColorSpace;\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        ColorManagement.toWorkingColorSpace(this, colorSpace);\n        return this;\n      }\n    }, {\n      key: \"setHSL\",\n      value: function setHSL(h, s, l) {\n        var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorManagement.workingColorSpace;\n        // h,s,l ranges are in 0.0 - 1.0\n        h = euclideanModulo(h, 1);\n        s = _clamp(s, 0, 1);\n        l = _clamp(l, 0, 1);\n        if (s === 0) {\n          this.r = this.g = this.b = l;\n        } else {\n          var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n          var q = 2 * l - p;\n          this.r = hue2rgb(q, p, h + 1 / 3);\n          this.g = hue2rgb(q, p, h);\n          this.b = hue2rgb(q, p, h - 1 / 3);\n        }\n        ColorManagement.toWorkingColorSpace(this, colorSpace);\n        return this;\n      }\n    }, {\n      key: \"setStyle\",\n      value: function setStyle(style) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n        function handleAlpha(string) {\n          if (string === undefined) return;\n          if (parseFloat(string) < 1) {\n            console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n          }\n        }\n        var m;\n        if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {\n          // rgb / hsl\n\n          var color;\n          var name = m[1];\n          var components = m[2];\n          switch (name) {\n            case 'rgb':\n            case 'rgba':\n              if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n                // rgb(255,0,0) rgba(255,0,0,0.5)\n\n                handleAlpha(color[4]);\n                return this.setRGB(Math.min(255, parseInt(color[1], 10)) / 255, Math.min(255, parseInt(color[2], 10)) / 255, Math.min(255, parseInt(color[3], 10)) / 255, colorSpace);\n              }\n              if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n                // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n                handleAlpha(color[4]);\n                return this.setRGB(Math.min(100, parseInt(color[1], 10)) / 100, Math.min(100, parseInt(color[2], 10)) / 100, Math.min(100, parseInt(color[3], 10)) / 100, colorSpace);\n              }\n              break;\n            case 'hsl':\n            case 'hsla':\n              if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n                // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n                handleAlpha(color[4]);\n                return this.setHSL(parseFloat(color[1]) / 360, parseFloat(color[2]) / 100, parseFloat(color[3]) / 100, colorSpace);\n              }\n              break;\n            default:\n              console.warn('THREE.Color: Unknown color model ' + style);\n          }\n        } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n          // hex color\n\n          var hex = m[1];\n          var size = hex.length;\n          if (size === 3) {\n            // #ff0\n            return this.setRGB(parseInt(hex.charAt(0), 16) / 15, parseInt(hex.charAt(1), 16) / 15, parseInt(hex.charAt(2), 16) / 15, colorSpace);\n          } else if (size === 6) {\n            // #ff0000\n            return this.setHex(parseInt(hex, 16), colorSpace);\n          } else {\n            console.warn('THREE.Color: Invalid hex color ' + style);\n          }\n        } else if (style && style.length > 0) {\n          return this.setColorName(style, colorSpace);\n        }\n        return this;\n      }\n    }, {\n      key: \"setColorName\",\n      value: function setColorName(style) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n        // color keywords\n        var hex = _colorKeywords[style.toLowerCase()];\n        if (hex !== undefined) {\n          // red\n          this.setHex(hex, colorSpace);\n        } else {\n          // unknown color\n          console.warn('THREE.Color: Unknown color ' + style);\n        }\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.r, this.g, this.b);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(color) {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        return this;\n      }\n    }, {\n      key: \"copySRGBToLinear\",\n      value: function copySRGBToLinear(color) {\n        this.r = SRGBToLinear(color.r);\n        this.g = SRGBToLinear(color.g);\n        this.b = SRGBToLinear(color.b);\n        return this;\n      }\n    }, {\n      key: \"copyLinearToSRGB\",\n      value: function copyLinearToSRGB(color) {\n        this.r = LinearToSRGB(color.r);\n        this.g = LinearToSRGB(color.g);\n        this.b = LinearToSRGB(color.b);\n        return this;\n      }\n    }, {\n      key: \"convertSRGBToLinear\",\n      value: function convertSRGBToLinear() {\n        this.copySRGBToLinear(this);\n        return this;\n      }\n    }, {\n      key: \"convertLinearToSRGB\",\n      value: function convertLinearToSRGB() {\n        this.copyLinearToSRGB(this);\n        return this;\n      }\n    }, {\n      key: \"getHex\",\n      value: function getHex() {\n        var colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n        return Math.round(_clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(_clamp(_color.g * 255, 0, 255)) * 256 + Math.round(_clamp(_color.b * 255, 0, 255));\n      }\n    }, {\n      key: \"getHexString\",\n      value: function getHexString() {\n        var colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n        return ('000000' + this.getHex(colorSpace).toString(16)).slice(-6);\n      }\n    }, {\n      key: \"getHSL\",\n      value: function getHSL(target) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ColorManagement.workingColorSpace;\n        // h,s,l ranges are in 0.0 - 1.0\n\n        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n        var r = _color.r,\n          g = _color.g,\n          b = _color.b;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var hue, saturation;\n        var lightness = (min + max) / 2.0;\n        if (min === max) {\n          hue = 0;\n          saturation = 0;\n        } else {\n          var delta = max - min;\n          saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n          switch (max) {\n            case r:\n              hue = (g - b) / delta + (g < b ? 6 : 0);\n              break;\n            case g:\n              hue = (b - r) / delta + 2;\n              break;\n            case b:\n              hue = (r - g) / delta + 4;\n              break;\n          }\n          hue /= 6;\n        }\n        target.h = hue;\n        target.s = saturation;\n        target.l = lightness;\n        return target;\n      }\n    }, {\n      key: \"getRGB\",\n      value: function getRGB(target) {\n        var colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ColorManagement.workingColorSpace;\n        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n        target.r = _color.r;\n        target.g = _color.g;\n        target.b = _color.b;\n        return target;\n      }\n    }, {\n      key: \"getStyle\",\n      value: function getStyle() {\n        var colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n        var r = _color.r,\n          g = _color.g,\n          b = _color.b;\n        if (colorSpace !== SRGBColorSpace) {\n          // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n          return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;\n        }\n        return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;\n      }\n    }, {\n      key: \"offsetHSL\",\n      value: function offsetHSL(h, s, l) {\n        this.getHSL(_hslA);\n        return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);\n      }\n    }, {\n      key: \"add\",\n      value: function add(color) {\n        this.r += color.r;\n        this.g += color.g;\n        this.b += color.b;\n        return this;\n      }\n    }, {\n      key: \"addColors\",\n      value: function addColors(color1, color2) {\n        this.r = color1.r + color2.r;\n        this.g = color1.g + color2.g;\n        this.b = color1.b + color2.b;\n        return this;\n      }\n    }, {\n      key: \"addScalar\",\n      value: function addScalar(s) {\n        this.r += s;\n        this.g += s;\n        this.b += s;\n        return this;\n      }\n    }, {\n      key: \"sub\",\n      value: function sub(color) {\n        this.r = Math.max(0, this.r - color.r);\n        this.g = Math.max(0, this.g - color.g);\n        this.b = Math.max(0, this.b - color.b);\n        return this;\n      }\n    }, {\n      key: \"multiply\",\n      value: function multiply(color) {\n        this.r *= color.r;\n        this.g *= color.g;\n        this.b *= color.b;\n        return this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function multiplyScalar(s) {\n        this.r *= s;\n        this.g *= s;\n        this.b *= s;\n        return this;\n      }\n    }, {\n      key: \"lerp\",\n      value: function lerp(color, alpha) {\n        this.r += (color.r - this.r) * alpha;\n        this.g += (color.g - this.g) * alpha;\n        this.b += (color.b - this.b) * alpha;\n        return this;\n      }\n    }, {\n      key: \"lerpColors\",\n      value: function lerpColors(color1, color2, alpha) {\n        this.r = color1.r + (color2.r - color1.r) * alpha;\n        this.g = color1.g + (color2.g - color1.g) * alpha;\n        this.b = color1.b + (color2.b - color1.b) * alpha;\n        return this;\n      }\n    }, {\n      key: \"lerpHSL\",\n      value: function lerpHSL(color, alpha) {\n        this.getHSL(_hslA);\n        color.getHSL(_hslB);\n        var h = lerp(_hslA.h, _hslB.h, alpha);\n        var s = lerp(_hslA.s, _hslB.s, alpha);\n        var l = lerp(_hslA.l, _hslB.l, alpha);\n        this.setHSL(h, s, l);\n        return this;\n      }\n    }, {\n      key: \"setFromVector3\",\n      value: function setFromVector3(v) {\n        this.r = v.x;\n        this.g = v.y;\n        this.b = v.z;\n        return this;\n      }\n    }, {\n      key: \"applyMatrix3\",\n      value: function applyMatrix3(m) {\n        var r = this.r,\n          g = this.g,\n          b = this.b;\n        var e = m.elements;\n        this.r = e[0] * r + e[3] * g + e[6] * b;\n        this.g = e[1] * r + e[4] * g + e[7] * b;\n        this.b = e[2] * r + e[5] * g + e[8] * b;\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(c) {\n        return c.r === this.r && c.g === this.g && c.b === this.b;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        this.r = array[offset];\n        this.g = array[offset + 1];\n        this.b = array[offset + 2];\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        array[offset] = this.r;\n        array[offset + 1] = this.g;\n        array[offset + 2] = this.b;\n        return array;\n      }\n    }, {\n      key: \"fromBufferAttribute\",\n      value: function fromBufferAttribute(attribute, index) {\n        this.r = attribute.getX(index);\n        this.g = attribute.getY(index);\n        this.b = attribute.getZ(index);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return this.getHex();\n      }\n    }, {\n      key: Symbol.iterator,\n      value: function* value() {\n        yield this.r;\n        yield this.g;\n        yield this.b;\n      }\n    }]);\n  }();\n  var _color = /*@__PURE__*/new Color();\n  Color.NAMES = _colorKeywords;\n  var _materialId = 0;\n  var Material = exports.Material = /*#__PURE__*/function (_EventDispatcher4) {\n    function Material() {\n      var _this9;\n      (0, _classCallCheck2.default)(this, Material);\n      _this9 = _callSuper(this, Material);\n      _this9.isMaterial = true;\n      Object.defineProperty(_this9, 'id', {\n        value: _materialId++\n      });\n      _this9.uuid = generateUUID();\n      _this9.name = '';\n      _this9.type = 'Material';\n      _this9.blending = NormalBlending;\n      _this9.side = FrontSide;\n      _this9.vertexColors = false;\n      _this9.opacity = 1;\n      _this9.transparent = false;\n      _this9.alphaHash = false;\n      _this9.blendSrc = SrcAlphaFactor;\n      _this9.blendDst = OneMinusSrcAlphaFactor;\n      _this9.blendEquation = AddEquation;\n      _this9.blendSrcAlpha = null;\n      _this9.blendDstAlpha = null;\n      _this9.blendEquationAlpha = null;\n      _this9.blendColor = new Color(0, 0, 0);\n      _this9.blendAlpha = 0;\n      _this9.depthFunc = LessEqualDepth;\n      _this9.depthTest = true;\n      _this9.depthWrite = true;\n      _this9.stencilWriteMask = 0xff;\n      _this9.stencilFunc = AlwaysStencilFunc;\n      _this9.stencilRef = 0;\n      _this9.stencilFuncMask = 0xff;\n      _this9.stencilFail = KeepStencilOp;\n      _this9.stencilZFail = KeepStencilOp;\n      _this9.stencilZPass = KeepStencilOp;\n      _this9.stencilWrite = false;\n      _this9.clippingPlanes = null;\n      _this9.clipIntersection = false;\n      _this9.clipShadows = false;\n      _this9.shadowSide = null;\n      _this9.colorWrite = true;\n      _this9.precision = null; // override the renderer's default precision for this material\n\n      _this9.polygonOffset = false;\n      _this9.polygonOffsetFactor = 0;\n      _this9.polygonOffsetUnits = 0;\n      _this9.dithering = false;\n      _this9.alphaToCoverage = false;\n      _this9.premultipliedAlpha = false;\n      _this9.forceSinglePass = false;\n      _this9.visible = true;\n      _this9.toneMapped = true;\n      _this9.userData = {};\n      _this9.version = 0;\n      _this9._alphaTest = 0;\n      return _this9;\n    }\n    (0, _inherits2.default)(Material, _EventDispatcher4);\n    return (0, _createClass2.default)(Material, [{\n      key: \"alphaTest\",\n      get: function get() {\n        return this._alphaTest;\n      },\n      set: function set(value) {\n        if (this._alphaTest > 0 !== value > 0) {\n          this.version++;\n        }\n        this._alphaTest = value;\n      }\n\n      // onBeforeRender and onBeforeCompile only supported in WebGLRenderer\n    }, {\n      key: \"onBeforeRender\",\n      value: function onBeforeRender(/* renderer, scene, camera, geometry, object, group */) {}\n    }, {\n      key: \"onBeforeCompile\",\n      value: function onBeforeCompile(/* shaderobject, renderer */) {}\n    }, {\n      key: \"customProgramCacheKey\",\n      value: function customProgramCacheKey() {\n        return this.onBeforeCompile.toString();\n      }\n    }, {\n      key: \"setValues\",\n      value: function setValues(values) {\n        if (values === undefined) return;\n        for (var key in values) {\n          var newValue = values[key];\n          if (newValue === undefined) {\n            console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);\n            continue;\n          }\n          var currentValue = this[key];\n          if (currentValue === undefined) {\n            console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);\n            continue;\n          }\n          if (currentValue && currentValue.isColor) {\n            currentValue.set(newValue);\n          } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n            currentValue.copy(newValue);\n          } else {\n            this[key] = newValue;\n          }\n        }\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var isRootObject = meta === undefined || typeof meta === 'string';\n        if (isRootObject) {\n          meta = {\n            textures: {},\n            images: {}\n          };\n        }\n        var data = {\n          metadata: {\n            version: 4.6,\n            type: 'Material',\n            generator: 'Material.toJSON'\n          }\n        };\n\n        // standard Material serialization\n        data.uuid = this.uuid;\n        data.type = this.type;\n        if (this.name !== '') data.name = this.name;\n        if (this.color && this.color.isColor) data.color = this.color.getHex();\n        if (this.roughness !== undefined) data.roughness = this.roughness;\n        if (this.metalness !== undefined) data.metalness = this.metalness;\n        if (this.sheen !== undefined) data.sheen = this.sheen;\n        if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n        if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n        if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n        if (this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n        if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n        if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n        if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n        if (this.shininess !== undefined) data.shininess = this.shininess;\n        if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n        if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n        if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n          data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n        }\n        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n          data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n        }\n        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n          data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n          data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n        }\n        if (this.dispersion !== undefined) data.dispersion = this.dispersion;\n        if (this.iridescence !== undefined) data.iridescence = this.iridescence;\n        if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;\n        if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n        if (this.iridescenceMap && this.iridescenceMap.isTexture) {\n          data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;\n        }\n        if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {\n          data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;\n        }\n        if (this.anisotropy !== undefined) data.anisotropy = this.anisotropy;\n        if (this.anisotropyRotation !== undefined) data.anisotropyRotation = this.anisotropyRotation;\n        if (this.anisotropyMap && this.anisotropyMap.isTexture) {\n          data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;\n        }\n        if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n        if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n        if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n        if (this.lightMap && this.lightMap.isTexture) {\n          data.lightMap = this.lightMap.toJSON(meta).uuid;\n          data.lightMapIntensity = this.lightMapIntensity;\n        }\n        if (this.aoMap && this.aoMap.isTexture) {\n          data.aoMap = this.aoMap.toJSON(meta).uuid;\n          data.aoMapIntensity = this.aoMapIntensity;\n        }\n        if (this.bumpMap && this.bumpMap.isTexture) {\n          data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n          data.bumpScale = this.bumpScale;\n        }\n        if (this.normalMap && this.normalMap.isTexture) {\n          data.normalMap = this.normalMap.toJSON(meta).uuid;\n          data.normalMapType = this.normalMapType;\n          data.normalScale = this.normalScale.toArray();\n        }\n        if (this.displacementMap && this.displacementMap.isTexture) {\n          data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n          data.displacementScale = this.displacementScale;\n          data.displacementBias = this.displacementBias;\n        }\n        if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n        if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n        if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n        if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n        if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n        if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n        if (this.envMap && this.envMap.isTexture) {\n          data.envMap = this.envMap.toJSON(meta).uuid;\n          if (this.combine !== undefined) data.combine = this.combine;\n        }\n        if (this.envMapRotation !== undefined) data.envMapRotation = this.envMapRotation.toArray();\n        if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n        if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n        if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n        if (this.gradientMap && this.gradientMap.isTexture) {\n          data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n        }\n        if (this.transmission !== undefined) data.transmission = this.transmission;\n        if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n        if (this.thickness !== undefined) data.thickness = this.thickness;\n        if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n        if (this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;\n        if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n        if (this.size !== undefined) data.size = this.size;\n        if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n        if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n        if (this.blending !== NormalBlending) data.blending = this.blending;\n        if (this.side !== FrontSide) data.side = this.side;\n        if (this.vertexColors === true) data.vertexColors = true;\n        if (this.opacity < 1) data.opacity = this.opacity;\n        if (this.transparent === true) data.transparent = true;\n        if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;\n        if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;\n        if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;\n        if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;\n        if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;\n        if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;\n        if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();\n        if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;\n        if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;\n        if (this.depthTest === false) data.depthTest = this.depthTest;\n        if (this.depthWrite === false) data.depthWrite = this.depthWrite;\n        if (this.colorWrite === false) data.colorWrite = this.colorWrite;\n        if (this.stencilWriteMask !== 0xff) data.stencilWriteMask = this.stencilWriteMask;\n        if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;\n        if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;\n        if (this.stencilFuncMask !== 0xff) data.stencilFuncMask = this.stencilFuncMask;\n        if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;\n        if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;\n        if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;\n        if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;\n\n        // rotation (SpriteMaterial)\n        if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;\n        if (this.polygonOffset === true) data.polygonOffset = true;\n        if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n        if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n        if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;\n        if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n        if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n        if (this.scale !== undefined) data.scale = this.scale;\n        if (this.dithering === true) data.dithering = true;\n        if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n        if (this.alphaHash === true) data.alphaHash = true;\n        if (this.alphaToCoverage === true) data.alphaToCoverage = true;\n        if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;\n        if (this.forceSinglePass === true) data.forceSinglePass = true;\n        if (this.wireframe === true) data.wireframe = true;\n        if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n        if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n        if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n        if (this.flatShading === true) data.flatShading = true;\n        if (this.visible === false) data.visible = false;\n        if (this.toneMapped === false) data.toneMapped = false;\n        if (this.fog === false) data.fog = false;\n        if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n        // TODO: Copied from Object3D.toJSON\n\n        function extractFromCache(cache) {\n          var values = [];\n          for (var key in cache) {\n            var _data2 = cache[key];\n            delete _data2.metadata;\n            values.push(_data2);\n          }\n          return values;\n        }\n        if (isRootObject) {\n          var textures = extractFromCache(meta.textures);\n          var images = extractFromCache(meta.images);\n          if (textures.length > 0) data.textures = textures;\n          if (images.length > 0) data.images = images;\n        }\n        return data;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.name = source.name;\n        this.blending = source.blending;\n        this.side = source.side;\n        this.vertexColors = source.vertexColors;\n        this.opacity = source.opacity;\n        this.transparent = source.transparent;\n        this.blendSrc = source.blendSrc;\n        this.blendDst = source.blendDst;\n        this.blendEquation = source.blendEquation;\n        this.blendSrcAlpha = source.blendSrcAlpha;\n        this.blendDstAlpha = source.blendDstAlpha;\n        this.blendEquationAlpha = source.blendEquationAlpha;\n        this.blendColor.copy(source.blendColor);\n        this.blendAlpha = source.blendAlpha;\n        this.depthFunc = source.depthFunc;\n        this.depthTest = source.depthTest;\n        this.depthWrite = source.depthWrite;\n        this.stencilWriteMask = source.stencilWriteMask;\n        this.stencilFunc = source.stencilFunc;\n        this.stencilRef = source.stencilRef;\n        this.stencilFuncMask = source.stencilFuncMask;\n        this.stencilFail = source.stencilFail;\n        this.stencilZFail = source.stencilZFail;\n        this.stencilZPass = source.stencilZPass;\n        this.stencilWrite = source.stencilWrite;\n        var srcPlanes = source.clippingPlanes;\n        var dstPlanes = null;\n        if (srcPlanes !== null) {\n          var n = srcPlanes.length;\n          dstPlanes = new Array(n);\n          for (var i = 0; i !== n; ++i) {\n            dstPlanes[i] = srcPlanes[i].clone();\n          }\n        }\n        this.clippingPlanes = dstPlanes;\n        this.clipIntersection = source.clipIntersection;\n        this.clipShadows = source.clipShadows;\n        this.shadowSide = source.shadowSide;\n        this.colorWrite = source.colorWrite;\n        this.precision = source.precision;\n        this.polygonOffset = source.polygonOffset;\n        this.polygonOffsetFactor = source.polygonOffsetFactor;\n        this.polygonOffsetUnits = source.polygonOffsetUnits;\n        this.dithering = source.dithering;\n        this.alphaTest = source.alphaTest;\n        this.alphaHash = source.alphaHash;\n        this.alphaToCoverage = source.alphaToCoverage;\n        this.premultipliedAlpha = source.premultipliedAlpha;\n        this.forceSinglePass = source.forceSinglePass;\n        this.visible = source.visible;\n        this.toneMapped = source.toneMapped;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n      }\n    }, {\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) this.version++;\n      }\n    }, {\n      key: \"onBuild\",\n      value: function onBuild(/* shaderobject, renderer */\n      ) {\n        console.warn('Material: onBuild() has been removed.'); // @deprecated, r166\n      }\n    }]);\n  }(EventDispatcher);\n  var MeshBasicMaterial = exports.MeshBasicMaterial = /*#__PURE__*/function (_Material) {\n    function MeshBasicMaterial(parameters) {\n      var _this10;\n      (0, _classCallCheck2.default)(this, MeshBasicMaterial);\n      _this10 = _callSuper(this, MeshBasicMaterial);\n      _this10.isMeshBasicMaterial = true;\n      _this10.type = 'MeshBasicMaterial';\n      _this10.color = new Color(0xffffff); // emissive\n\n      _this10.map = null;\n      _this10.lightMap = null;\n      _this10.lightMapIntensity = 1.0;\n      _this10.aoMap = null;\n      _this10.aoMapIntensity = 1.0;\n      _this10.specularMap = null;\n      _this10.alphaMap = null;\n      _this10.envMap = null;\n      _this10.envMapRotation = new Euler();\n      _this10.combine = MultiplyOperation;\n      _this10.reflectivity = 1;\n      _this10.refractionRatio = 0.98;\n      _this10.wireframe = false;\n      _this10.wireframeLinewidth = 1;\n      _this10.wireframeLinecap = 'round';\n      _this10.wireframeLinejoin = 'round';\n      _this10.fog = true;\n      _this10.setValues(parameters);\n      return _this10;\n    }\n    (0, _inherits2.default)(MeshBasicMaterial, _Material);\n    return (0, _createClass2.default)(MeshBasicMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshBasicMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.specularMap = source.specularMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.envMapRotation.copy(source.envMapRotation);\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material); // Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  var _tables = /*@__PURE__*/_generateTables();\n  function _generateTables() {\n    // float32 to float16 helpers\n\n    var buffer = new ArrayBuffer(4);\n    var floatView = new Float32Array(buffer);\n    var uint32View = new Uint32Array(buffer);\n    var baseTable = new Uint32Array(512);\n    var shiftTable = new Uint32Array(512);\n    for (var i = 0; i < 256; ++i) {\n      var e = i - 127;\n\n      // very small number (0, -0)\n\n      if (e < -27) {\n        baseTable[i] = 0x0000;\n        baseTable[i | 0x100] = 0x8000;\n        shiftTable[i] = 24;\n        shiftTable[i | 0x100] = 24;\n\n        // small number (denorm)\n      } else if (e < -14) {\n        baseTable[i] = 0x0400 >> -e - 14;\n        baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n        shiftTable[i] = -e - 1;\n        shiftTable[i | 0x100] = -e - 1;\n\n        // normal number\n      } else if (e <= 15) {\n        baseTable[i] = e + 15 << 10;\n        baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n        shiftTable[i] = 13;\n        shiftTable[i | 0x100] = 13;\n\n        // large number (Infinity, -Infinity)\n      } else if (e < 128) {\n        baseTable[i] = 0x7c00;\n        baseTable[i | 0x100] = 0xfc00;\n        shiftTable[i] = 24;\n        shiftTable[i | 0x100] = 24;\n\n        // stay (NaN, Infinity, -Infinity)\n      } else {\n        baseTable[i] = 0x7c00;\n        baseTable[i | 0x100] = 0xfc00;\n        shiftTable[i] = 13;\n        shiftTable[i | 0x100] = 13;\n      }\n    }\n\n    // float16 to float32 helpers\n\n    var mantissaTable = new Uint32Array(2048);\n    var exponentTable = new Uint32Array(64);\n    var offsetTable = new Uint32Array(64);\n    for (var _i6 = 1; _i6 < 1024; ++_i6) {\n      var m = _i6 << 13; // zero pad mantissa bits\n      var _e = 0; // zero exponent\n\n      // normalized\n      while ((m & 0x00800000) === 0) {\n        m <<= 1;\n        _e -= 0x00800000; // decrement exponent\n      }\n      m &= ~0x00800000; // clear leading 1 bit\n      _e += 0x38800000; // adjust bias\n\n      mantissaTable[_i6] = m | _e;\n    }\n    for (var _i7 = 1024; _i7 < 2048; ++_i7) {\n      mantissaTable[_i7] = 0x38000000 + (_i7 - 1024 << 13);\n    }\n    for (var _i8 = 1; _i8 < 31; ++_i8) {\n      exponentTable[_i8] = _i8 << 23;\n    }\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    for (var _i9 = 33; _i9 < 63; ++_i9) {\n      exponentTable[_i9] = 0x80000000 + (_i9 - 32 << 23);\n    }\n    exponentTable[63] = 0xc7800000;\n    for (var _i10 = 1; _i10 < 64; ++_i10) {\n      if (_i10 !== 32) {\n        offsetTable[_i10] = 1024;\n      }\n    }\n    return {\n      floatView: floatView,\n      uint32View: uint32View,\n      baseTable: baseTable,\n      shiftTable: shiftTable,\n      mantissaTable: mantissaTable,\n      exponentTable: exponentTable,\n      offsetTable: offsetTable\n    };\n  }\n\n  // float32 to float16\n\n  function toHalfFloat(val) {\n    if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');\n    val = _clamp(val, -65504, 65504);\n    _tables.floatView[0] = val;\n    var f = _tables.uint32View[0];\n    var e = f >> 23 & 0x1ff;\n    return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);\n  }\n\n  // float16 to float32\n\n  function fromHalfFloat(val) {\n    var m = val >> 10;\n    _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 0x3ff)] + _tables.exponentTable[m];\n    return _tables.floatView[0];\n  }\n  var DataUtils = exports.DataUtils = {\n    toHalfFloat: toHalfFloat,\n    fromHalfFloat: fromHalfFloat\n  };\n  var _vector$9 = /*@__PURE__*/new Vector3();\n  var _vector2$1 = /*@__PURE__*/new Vector2();\n  var BufferAttribute = exports.BufferAttribute = /*#__PURE__*/function () {\n    function BufferAttribute(array, itemSize) {\n      var normalized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      (0, _classCallCheck2.default)(this, BufferAttribute);\n      if (Array.isArray(array)) {\n        throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n      }\n      this.isBufferAttribute = true;\n      this.name = '';\n      this.array = array;\n      this.itemSize = itemSize;\n      this.count = array !== undefined ? array.length / itemSize : 0;\n      this.normalized = normalized;\n      this.usage = StaticDrawUsage;\n      this.updateRanges = [];\n      this.gpuType = FloatType;\n      this.version = 0;\n    }\n    return (0, _createClass2.default)(BufferAttribute, [{\n      key: \"onUploadCallback\",\n      value: function onUploadCallback() {}\n    }, {\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) this.version++;\n      }\n    }, {\n      key: \"setUsage\",\n      value: function setUsage(value) {\n        this.usage = value;\n        return this;\n      }\n    }, {\n      key: \"addUpdateRange\",\n      value: function addUpdateRange(start, count) {\n        this.updateRanges.push({\n          start: start,\n          count: count\n        });\n      }\n    }, {\n      key: \"clearUpdateRanges\",\n      value: function clearUpdateRanges() {\n        this.updateRanges.length = 0;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.name = source.name;\n        this.array = new source.array.constructor(source.array);\n        this.itemSize = source.itemSize;\n        this.count = source.count;\n        this.normalized = source.normalized;\n        this.usage = source.usage;\n        this.gpuType = source.gpuType;\n        return this;\n      }\n    }, {\n      key: \"copyAt\",\n      value: function copyAt(index1, attribute, index2) {\n        index1 *= this.itemSize;\n        index2 *= attribute.itemSize;\n        for (var i = 0, l = this.itemSize; i < l; i++) {\n          this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n      }\n    }, {\n      key: \"copyArray\",\n      value: function copyArray(array) {\n        this.array.set(array);\n        return this;\n      }\n    }, {\n      key: \"applyMatrix3\",\n      value: function applyMatrix3(m) {\n        if (this.itemSize === 2) {\n          for (var i = 0, l = this.count; i < l; i++) {\n            _vector2$1.fromBufferAttribute(this, i);\n            _vector2$1.applyMatrix3(m);\n            this.setXY(i, _vector2$1.x, _vector2$1.y);\n          }\n        } else if (this.itemSize === 3) {\n          for (var _i11 = 0, _l3 = this.count; _i11 < _l3; _i11++) {\n            _vector$9.fromBufferAttribute(this, _i11);\n            _vector$9.applyMatrix3(m);\n            this.setXYZ(_i11, _vector$9.x, _vector$9.y, _vector$9.z);\n          }\n        }\n        return this;\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(m) {\n        for (var i = 0, l = this.count; i < l; i++) {\n          _vector$9.fromBufferAttribute(this, i);\n          _vector$9.applyMatrix4(m);\n          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n        }\n        return this;\n      }\n    }, {\n      key: \"applyNormalMatrix\",\n      value: function applyNormalMatrix(m) {\n        for (var i = 0, l = this.count; i < l; i++) {\n          _vector$9.fromBufferAttribute(this, i);\n          _vector$9.applyNormalMatrix(m);\n          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n        }\n        return this;\n      }\n    }, {\n      key: \"transformDirection\",\n      value: function transformDirection(m) {\n        for (var i = 0, l = this.count; i < l; i++) {\n          _vector$9.fromBufferAttribute(this, i);\n          _vector$9.transformDirection(m);\n          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n        }\n        return this;\n      }\n    }, {\n      key: \"set\",\n      value: function set(value) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        // Matching BufferAttribute constructor, do not normalize the array.\n        this.array.set(value, offset);\n        return this;\n      }\n    }, {\n      key: \"getComponent\",\n      value: function getComponent(index, component) {\n        var value = this.array[index * this.itemSize + component];\n        if (this.normalized) value = denormalize(value, this.array);\n        return value;\n      }\n    }, {\n      key: \"setComponent\",\n      value: function setComponent(index, component, value) {\n        if (this.normalized) value = normalize(value, this.array);\n        this.array[index * this.itemSize + component] = value;\n        return this;\n      }\n    }, {\n      key: \"getX\",\n      value: function getX(index) {\n        var x = this.array[index * this.itemSize];\n        if (this.normalized) x = denormalize(x, this.array);\n        return x;\n      }\n    }, {\n      key: \"setX\",\n      value: function setX(index, x) {\n        if (this.normalized) x = normalize(x, this.array);\n        this.array[index * this.itemSize] = x;\n        return this;\n      }\n    }, {\n      key: \"getY\",\n      value: function getY(index) {\n        var y = this.array[index * this.itemSize + 1];\n        if (this.normalized) y = denormalize(y, this.array);\n        return y;\n      }\n    }, {\n      key: \"setY\",\n      value: function setY(index, y) {\n        if (this.normalized) y = normalize(y, this.array);\n        this.array[index * this.itemSize + 1] = y;\n        return this;\n      }\n    }, {\n      key: \"getZ\",\n      value: function getZ(index) {\n        var z = this.array[index * this.itemSize + 2];\n        if (this.normalized) z = denormalize(z, this.array);\n        return z;\n      }\n    }, {\n      key: \"setZ\",\n      value: function setZ(index, z) {\n        if (this.normalized) z = normalize(z, this.array);\n        this.array[index * this.itemSize + 2] = z;\n        return this;\n      }\n    }, {\n      key: \"getW\",\n      value: function getW(index) {\n        var w = this.array[index * this.itemSize + 3];\n        if (this.normalized) w = denormalize(w, this.array);\n        return w;\n      }\n    }, {\n      key: \"setW\",\n      value: function setW(index, w) {\n        if (this.normalized) w = normalize(w, this.array);\n        this.array[index * this.itemSize + 3] = w;\n        return this;\n      }\n    }, {\n      key: \"setXY\",\n      value: function setXY(index, x, y) {\n        index *= this.itemSize;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n        }\n        this.array[index + 0] = x;\n        this.array[index + 1] = y;\n        return this;\n      }\n    }, {\n      key: \"setXYZ\",\n      value: function setXYZ(index, x, y, z) {\n        index *= this.itemSize;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n          z = normalize(z, this.array);\n        }\n        this.array[index + 0] = x;\n        this.array[index + 1] = y;\n        this.array[index + 2] = z;\n        return this;\n      }\n    }, {\n      key: \"setXYZW\",\n      value: function setXYZW(index, x, y, z, w) {\n        index *= this.itemSize;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n          z = normalize(z, this.array);\n          w = normalize(w, this.array);\n        }\n        this.array[index + 0] = x;\n        this.array[index + 1] = y;\n        this.array[index + 2] = z;\n        this.array[index + 3] = w;\n        return this;\n      }\n    }, {\n      key: \"onUpload\",\n      value: function onUpload(callback) {\n        this.onUploadCallback = callback;\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.array, this.itemSize).copy(this);\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = {\n          itemSize: this.itemSize,\n          type: this.array.constructor.name,\n          array: Array.from(this.array),\n          normalized: this.normalized\n        };\n        if (this.name !== '') data.name = this.name;\n        if (this.usage !== StaticDrawUsage) data.usage = this.usage;\n        return data;\n      }\n    }]);\n  }(); //\n  var Int8BufferAttribute = exports.Int8BufferAttribute = /*#__PURE__*/function (_BufferAttribute) {\n    function Int8BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Int8BufferAttribute);\n      return _callSuper(this, Int8BufferAttribute, [new Int8Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Int8BufferAttribute, _BufferAttribute);\n    return (0, _createClass2.default)(Int8BufferAttribute);\n  }(BufferAttribute);\n  var Uint8BufferAttribute = exports.Uint8BufferAttribute = /*#__PURE__*/function (_BufferAttribute2) {\n    function Uint8BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Uint8BufferAttribute);\n      return _callSuper(this, Uint8BufferAttribute, [new Uint8Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Uint8BufferAttribute, _BufferAttribute2);\n    return (0, _createClass2.default)(Uint8BufferAttribute);\n  }(BufferAttribute);\n  var Uint8ClampedBufferAttribute = exports.Uint8ClampedBufferAttribute = /*#__PURE__*/function (_BufferAttribute3) {\n    function Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Uint8ClampedBufferAttribute);\n      return _callSuper(this, Uint8ClampedBufferAttribute, [new Uint8ClampedArray(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Uint8ClampedBufferAttribute, _BufferAttribute3);\n    return (0, _createClass2.default)(Uint8ClampedBufferAttribute);\n  }(BufferAttribute);\n  var Int16BufferAttribute = exports.Int16BufferAttribute = /*#__PURE__*/function (_BufferAttribute4) {\n    function Int16BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Int16BufferAttribute);\n      return _callSuper(this, Int16BufferAttribute, [new Int16Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Int16BufferAttribute, _BufferAttribute4);\n    return (0, _createClass2.default)(Int16BufferAttribute);\n  }(BufferAttribute);\n  var Uint16BufferAttribute = exports.Uint16BufferAttribute = /*#__PURE__*/function (_BufferAttribute5) {\n    function Uint16BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Uint16BufferAttribute);\n      return _callSuper(this, Uint16BufferAttribute, [new Uint16Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Uint16BufferAttribute, _BufferAttribute5);\n    return (0, _createClass2.default)(Uint16BufferAttribute);\n  }(BufferAttribute);\n  var Int32BufferAttribute = exports.Int32BufferAttribute = /*#__PURE__*/function (_BufferAttribute6) {\n    function Int32BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Int32BufferAttribute);\n      return _callSuper(this, Int32BufferAttribute, [new Int32Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Int32BufferAttribute, _BufferAttribute6);\n    return (0, _createClass2.default)(Int32BufferAttribute);\n  }(BufferAttribute);\n  var Uint32BufferAttribute = exports.Uint32BufferAttribute = /*#__PURE__*/function (_BufferAttribute7) {\n    function Uint32BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Uint32BufferAttribute);\n      return _callSuper(this, Uint32BufferAttribute, [new Uint32Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Uint32BufferAttribute, _BufferAttribute7);\n    return (0, _createClass2.default)(Uint32BufferAttribute);\n  }(BufferAttribute);\n  var Float16BufferAttribute = exports.Float16BufferAttribute = /*#__PURE__*/function (_BufferAttribute8) {\n    function Float16BufferAttribute(array, itemSize, normalized) {\n      var _this11;\n      (0, _classCallCheck2.default)(this, Float16BufferAttribute);\n      _this11 = _callSuper(this, Float16BufferAttribute, [new Uint16Array(array), itemSize, normalized]);\n      _this11.isFloat16BufferAttribute = true;\n      return _this11;\n    }\n    (0, _inherits2.default)(Float16BufferAttribute, _BufferAttribute8);\n    return (0, _createClass2.default)(Float16BufferAttribute, [{\n      key: \"getX\",\n      value: function getX(index) {\n        var x = fromHalfFloat(this.array[index * this.itemSize]);\n        if (this.normalized) x = denormalize(x, this.array);\n        return x;\n      }\n    }, {\n      key: \"setX\",\n      value: function setX(index, x) {\n        if (this.normalized) x = normalize(x, this.array);\n        this.array[index * this.itemSize] = toHalfFloat(x);\n        return this;\n      }\n    }, {\n      key: \"getY\",\n      value: function getY(index) {\n        var y = fromHalfFloat(this.array[index * this.itemSize + 1]);\n        if (this.normalized) y = denormalize(y, this.array);\n        return y;\n      }\n    }, {\n      key: \"setY\",\n      value: function setY(index, y) {\n        if (this.normalized) y = normalize(y, this.array);\n        this.array[index * this.itemSize + 1] = toHalfFloat(y);\n        return this;\n      }\n    }, {\n      key: \"getZ\",\n      value: function getZ(index) {\n        var z = fromHalfFloat(this.array[index * this.itemSize + 2]);\n        if (this.normalized) z = denormalize(z, this.array);\n        return z;\n      }\n    }, {\n      key: \"setZ\",\n      value: function setZ(index, z) {\n        if (this.normalized) z = normalize(z, this.array);\n        this.array[index * this.itemSize + 2] = toHalfFloat(z);\n        return this;\n      }\n    }, {\n      key: \"getW\",\n      value: function getW(index) {\n        var w = fromHalfFloat(this.array[index * this.itemSize + 3]);\n        if (this.normalized) w = denormalize(w, this.array);\n        return w;\n      }\n    }, {\n      key: \"setW\",\n      value: function setW(index, w) {\n        if (this.normalized) w = normalize(w, this.array);\n        this.array[index * this.itemSize + 3] = toHalfFloat(w);\n        return this;\n      }\n    }, {\n      key: \"setXY\",\n      value: function setXY(index, x, y) {\n        index *= this.itemSize;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n        }\n        this.array[index + 0] = toHalfFloat(x);\n        this.array[index + 1] = toHalfFloat(y);\n        return this;\n      }\n    }, {\n      key: \"setXYZ\",\n      value: function setXYZ(index, x, y, z) {\n        index *= this.itemSize;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n          z = normalize(z, this.array);\n        }\n        this.array[index + 0] = toHalfFloat(x);\n        this.array[index + 1] = toHalfFloat(y);\n        this.array[index + 2] = toHalfFloat(z);\n        return this;\n      }\n    }, {\n      key: \"setXYZW\",\n      value: function setXYZW(index, x, y, z, w) {\n        index *= this.itemSize;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n          z = normalize(z, this.array);\n          w = normalize(w, this.array);\n        }\n        this.array[index + 0] = toHalfFloat(x);\n        this.array[index + 1] = toHalfFloat(y);\n        this.array[index + 2] = toHalfFloat(z);\n        this.array[index + 3] = toHalfFloat(w);\n        return this;\n      }\n    }]);\n  }(BufferAttribute);\n  var Float32BufferAttribute = exports.Float32BufferAttribute = /*#__PURE__*/function (_BufferAttribute9) {\n    function Float32BufferAttribute(array, itemSize, normalized) {\n      (0, _classCallCheck2.default)(this, Float32BufferAttribute);\n      return _callSuper(this, Float32BufferAttribute, [new Float32Array(array), itemSize, normalized]);\n    }\n    (0, _inherits2.default)(Float32BufferAttribute, _BufferAttribute9);\n    return (0, _createClass2.default)(Float32BufferAttribute);\n  }(BufferAttribute);\n  var _id$1 = 0;\n  var _m1 = /*@__PURE__*/new Matrix4();\n  var _obj = /*@__PURE__*/new Object3D();\n  var _offset = /*@__PURE__*/new Vector3();\n  var _box$2 = /*@__PURE__*/new Box3();\n  var _boxMorphTargets = /*@__PURE__*/new Box3();\n  var _vector$8 = /*@__PURE__*/new Vector3();\n  var BufferGeometry = exports.BufferGeometry = /*#__PURE__*/function (_EventDispatcher5) {\n    function BufferGeometry() {\n      var _this12;\n      (0, _classCallCheck2.default)(this, BufferGeometry);\n      _this12 = _callSuper(this, BufferGeometry);\n      _this12.isBufferGeometry = true;\n      Object.defineProperty(_this12, 'id', {\n        value: _id$1++\n      });\n      _this12.uuid = generateUUID();\n      _this12.name = '';\n      _this12.type = 'BufferGeometry';\n      _this12.index = null;\n      _this12.indirect = null;\n      _this12.attributes = {};\n      _this12.morphAttributes = {};\n      _this12.morphTargetsRelative = false;\n      _this12.groups = [];\n      _this12.boundingBox = null;\n      _this12.boundingSphere = null;\n      _this12.drawRange = {\n        start: 0,\n        count: Infinity\n      };\n      _this12.userData = {};\n      return _this12;\n    }\n    (0, _inherits2.default)(BufferGeometry, _EventDispatcher5);\n    return (0, _createClass2.default)(BufferGeometry, [{\n      key: \"getIndex\",\n      value: function getIndex() {\n        return this.index;\n      }\n    }, {\n      key: \"setIndex\",\n      value: function setIndex(index) {\n        if (Array.isArray(index)) {\n          this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n        } else {\n          this.index = index;\n        }\n        return this;\n      }\n    }, {\n      key: \"setIndirect\",\n      value: function setIndirect(indirect) {\n        this.indirect = indirect;\n        return this;\n      }\n    }, {\n      key: \"getIndirect\",\n      value: function getIndirect() {\n        return this.indirect;\n      }\n    }, {\n      key: \"getAttribute\",\n      value: function getAttribute(name) {\n        return this.attributes[name];\n      }\n    }, {\n      key: \"setAttribute\",\n      value: function setAttribute(name, attribute) {\n        this.attributes[name] = attribute;\n        return this;\n      }\n    }, {\n      key: \"deleteAttribute\",\n      value: function deleteAttribute(name) {\n        delete this.attributes[name];\n        return this;\n      }\n    }, {\n      key: \"hasAttribute\",\n      value: function hasAttribute(name) {\n        return this.attributes[name] !== undefined;\n      }\n    }, {\n      key: \"addGroup\",\n      value: function addGroup(start, count) {\n        var materialIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        this.groups.push({\n          start: start,\n          count: count,\n          materialIndex: materialIndex\n        });\n      }\n    }, {\n      key: \"clearGroups\",\n      value: function clearGroups() {\n        this.groups = [];\n      }\n    }, {\n      key: \"setDrawRange\",\n      value: function setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix) {\n        var position = this.attributes.position;\n        if (position !== undefined) {\n          position.applyMatrix4(matrix);\n          position.needsUpdate = true;\n        }\n        var normal = this.attributes.normal;\n        if (normal !== undefined) {\n          var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n          normal.applyNormalMatrix(normalMatrix);\n          normal.needsUpdate = true;\n        }\n        var tangent = this.attributes.tangent;\n        if (tangent !== undefined) {\n          tangent.transformDirection(matrix);\n          tangent.needsUpdate = true;\n        }\n        if (this.boundingBox !== null) {\n          this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n          this.computeBoundingSphere();\n        }\n        return this;\n      }\n    }, {\n      key: \"applyQuaternion\",\n      value: function applyQuaternion(q) {\n        _m1.makeRotationFromQuaternion(q);\n        this.applyMatrix4(_m1);\n        return this;\n      }\n    }, {\n      key: \"rotateX\",\n      value: function rotateX(angle) {\n        // rotate geometry around world x-axis\n\n        _m1.makeRotationX(angle);\n        this.applyMatrix4(_m1);\n        return this;\n      }\n    }, {\n      key: \"rotateY\",\n      value: function rotateY(angle) {\n        // rotate geometry around world y-axis\n\n        _m1.makeRotationY(angle);\n        this.applyMatrix4(_m1);\n        return this;\n      }\n    }, {\n      key: \"rotateZ\",\n      value: function rotateZ(angle) {\n        // rotate geometry around world z-axis\n\n        _m1.makeRotationZ(angle);\n        this.applyMatrix4(_m1);\n        return this;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate(x, y, z) {\n        // translate geometry\n\n        _m1.makeTranslation(x, y, z);\n        this.applyMatrix4(_m1);\n        return this;\n      }\n    }, {\n      key: \"scale\",\n      value: function scale(x, y, z) {\n        // scale geometry\n\n        _m1.makeScale(x, y, z);\n        this.applyMatrix4(_m1);\n        return this;\n      }\n    }, {\n      key: \"lookAt\",\n      value: function lookAt(vector) {\n        _obj.lookAt(vector);\n        _obj.updateMatrix();\n        this.applyMatrix4(_obj.matrix);\n        return this;\n      }\n    }, {\n      key: \"center\",\n      value: function center() {\n        this.computeBoundingBox();\n        this.boundingBox.getCenter(_offset).negate();\n        this.translate(_offset.x, _offset.y, _offset.z);\n        return this;\n      }\n    }, {\n      key: \"setFromPoints\",\n      value: function setFromPoints(points) {\n        var positionAttribute = this.getAttribute('position');\n        if (positionAttribute === undefined) {\n          var position = [];\n          for (var i = 0, l = points.length; i < l; i++) {\n            var point = points[i];\n            position.push(point.x, point.y, point.z || 0);\n          }\n          this.setAttribute('position', new Float32BufferAttribute(position, 3));\n        } else {\n          var _l4 = Math.min(points.length, positionAttribute.count); // make sure data do not exceed buffer size\n\n          for (var _i12 = 0; _i12 < _l4; _i12++) {\n            var _point = points[_i12];\n            positionAttribute.setXYZ(_i12, _point.x, _point.y, _point.z || 0);\n          }\n          if (points.length > positionAttribute.count) {\n            console.warn('THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.');\n          }\n          positionAttribute.needsUpdate = true;\n        }\n        return this;\n      }\n    }, {\n      key: \"computeBoundingBox\",\n      value: function computeBoundingBox() {\n        if (this.boundingBox === null) {\n          this.boundingBox = new Box3();\n        }\n        var position = this.attributes.position;\n        var morphAttributesPosition = this.morphAttributes.position;\n        if (position && position.isGLBufferAttribute) {\n          console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this);\n          this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n          return;\n        }\n        if (position !== undefined) {\n          this.boundingBox.setFromBufferAttribute(position);\n\n          // process morph attributes if present\n\n          if (morphAttributesPosition) {\n            for (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n              var morphAttribute = morphAttributesPosition[i];\n              _box$2.setFromBufferAttribute(morphAttribute);\n              if (this.morphTargetsRelative) {\n                _vector$8.addVectors(this.boundingBox.min, _box$2.min);\n                this.boundingBox.expandByPoint(_vector$8);\n                _vector$8.addVectors(this.boundingBox.max, _box$2.max);\n                this.boundingBox.expandByPoint(_vector$8);\n              } else {\n                this.boundingBox.expandByPoint(_box$2.min);\n                this.boundingBox.expandByPoint(_box$2.max);\n              }\n            }\n          }\n        } else {\n          this.boundingBox.makeEmpty();\n        }\n        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n          console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n        }\n      }\n    }, {\n      key: \"computeBoundingSphere\",\n      value: function computeBoundingSphere() {\n        if (this.boundingSphere === null) {\n          this.boundingSphere = new Sphere();\n        }\n        var position = this.attributes.position;\n        var morphAttributesPosition = this.morphAttributes.position;\n        if (position && position.isGLBufferAttribute) {\n          console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this);\n          this.boundingSphere.set(new Vector3(), Infinity);\n          return;\n        }\n        if (position) {\n          // first, find the center of the bounding sphere\n\n          var center = this.boundingSphere.center;\n          _box$2.setFromBufferAttribute(position);\n\n          // process morph attributes if present\n\n          if (morphAttributesPosition) {\n            for (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n              var morphAttribute = morphAttributesPosition[i];\n              _boxMorphTargets.setFromBufferAttribute(morphAttribute);\n              if (this.morphTargetsRelative) {\n                _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);\n                _box$2.expandByPoint(_vector$8);\n                _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);\n                _box$2.expandByPoint(_vector$8);\n              } else {\n                _box$2.expandByPoint(_boxMorphTargets.min);\n                _box$2.expandByPoint(_boxMorphTargets.max);\n              }\n            }\n          }\n          _box$2.getCenter(center);\n\n          // second, try to find a boundingSphere with a radius smaller than the\n          // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n          var maxRadiusSq = 0;\n          for (var _i13 = 0, _il = position.count; _i13 < _il; _i13++) {\n            _vector$8.fromBufferAttribute(position, _i13);\n            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n          }\n\n          // process morph attributes if present\n\n          if (morphAttributesPosition) {\n            for (var _i14 = 0, _il2 = morphAttributesPosition.length; _i14 < _il2; _i14++) {\n              var _morphAttribute = morphAttributesPosition[_i14];\n              var morphTargetsRelative = this.morphTargetsRelative;\n              for (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n                _vector$8.fromBufferAttribute(_morphAttribute, j);\n                if (morphTargetsRelative) {\n                  _offset.fromBufferAttribute(position, j);\n                  _vector$8.add(_offset);\n                }\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n              }\n            }\n          }\n          this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n          if (isNaN(this.boundingSphere.radius)) {\n            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n          }\n        }\n      }\n    }, {\n      key: \"computeTangents\",\n      value: function computeTangents() {\n        var index = this.index;\n        var attributes = this.attributes;\n\n        // based on http://www.terathon.com/code/tangent.html\n        // (per vertex tangents)\n\n        if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n          console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n          return;\n        }\n        var positionAttribute = attributes.position;\n        var normalAttribute = attributes.normal;\n        var uvAttribute = attributes.uv;\n        if (this.hasAttribute('tangent') === false) {\n          this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));\n        }\n        var tangentAttribute = this.getAttribute('tangent');\n        var tan1 = [],\n          tan2 = [];\n        for (var i = 0; i < positionAttribute.count; i++) {\n          tan1[i] = new Vector3();\n          tan2[i] = new Vector3();\n        }\n        var vA = new Vector3(),\n          vB = new Vector3(),\n          vC = new Vector3(),\n          uvA = new Vector2(),\n          uvB = new Vector2(),\n          uvC = new Vector2(),\n          sdir = new Vector3(),\n          tdir = new Vector3();\n        function handleTriangle(a, b, c) {\n          vA.fromBufferAttribute(positionAttribute, a);\n          vB.fromBufferAttribute(positionAttribute, b);\n          vC.fromBufferAttribute(positionAttribute, c);\n          uvA.fromBufferAttribute(uvAttribute, a);\n          uvB.fromBufferAttribute(uvAttribute, b);\n          uvC.fromBufferAttribute(uvAttribute, c);\n          vB.sub(vA);\n          vC.sub(vA);\n          uvB.sub(uvA);\n          uvC.sub(uvA);\n          var r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);\n\n          // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n          if (!isFinite(r)) return;\n          sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n          tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n          tan1[a].add(sdir);\n          tan1[b].add(sdir);\n          tan1[c].add(sdir);\n          tan2[a].add(tdir);\n          tan2[b].add(tdir);\n          tan2[c].add(tdir);\n        }\n        var groups = this.groups;\n        if (groups.length === 0) {\n          groups = [{\n            start: 0,\n            count: index.count\n          }];\n        }\n        for (var _i15 = 0, il = groups.length; _i15 < il; ++_i15) {\n          var group = groups[_i15];\n          var start = group.start;\n          var count = group.count;\n          for (var j = start, jl = start + count; j < jl; j += 3) {\n            handleTriangle(index.getX(j + 0), index.getX(j + 1), index.getX(j + 2));\n          }\n        }\n        var tmp = new Vector3(),\n          tmp2 = new Vector3();\n        var n = new Vector3(),\n          n2 = new Vector3();\n        function handleVertex(v) {\n          n.fromBufferAttribute(normalAttribute, v);\n          n2.copy(n);\n          var t = tan1[v];\n\n          // Gram-Schmidt orthogonalize\n\n          tmp.copy(t);\n          tmp.sub(n.multiplyScalar(n.dot(t))).normalize();\n\n          // Calculate handedness\n\n          tmp2.crossVectors(n2, t);\n          var test = tmp2.dot(tan2[v]);\n          var w = test < 0.0 ? -1.0 : 1.0;\n          tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);\n        }\n        for (var _i16 = 0, _il3 = groups.length; _i16 < _il3; ++_i16) {\n          var _group = groups[_i16];\n          var _start2 = _group.start;\n          var _count = _group.count;\n          for (var _j = _start2, _jl = _start2 + _count; _j < _jl; _j += 3) {\n            handleVertex(index.getX(_j + 0));\n            handleVertex(index.getX(_j + 1));\n            handleVertex(index.getX(_j + 2));\n          }\n        }\n      }\n    }, {\n      key: \"computeVertexNormals\",\n      value: function computeVertexNormals() {\n        var index = this.index;\n        var positionAttribute = this.getAttribute('position');\n        if (positionAttribute !== undefined) {\n          var normalAttribute = this.getAttribute('normal');\n          if (normalAttribute === undefined) {\n            normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n            this.setAttribute('normal', normalAttribute);\n          } else {\n            // reset existing normals to zero\n\n            for (var i = 0, il = normalAttribute.count; i < il; i++) {\n              normalAttribute.setXYZ(i, 0, 0, 0);\n            }\n          }\n          var pA = new Vector3(),\n            pB = new Vector3(),\n            pC = new Vector3();\n          var nA = new Vector3(),\n            nB = new Vector3(),\n            nC = new Vector3();\n          var cb = new Vector3(),\n            ab = new Vector3();\n\n          // indexed elements\n\n          if (index) {\n            for (var _i17 = 0, _il4 = index.count; _i17 < _il4; _i17 += 3) {\n              var vA = index.getX(_i17 + 0);\n              var vB = index.getX(_i17 + 1);\n              var vC = index.getX(_i17 + 2);\n              pA.fromBufferAttribute(positionAttribute, vA);\n              pB.fromBufferAttribute(positionAttribute, vB);\n              pC.fromBufferAttribute(positionAttribute, vC);\n              cb.subVectors(pC, pB);\n              ab.subVectors(pA, pB);\n              cb.cross(ab);\n              nA.fromBufferAttribute(normalAttribute, vA);\n              nB.fromBufferAttribute(normalAttribute, vB);\n              nC.fromBufferAttribute(normalAttribute, vC);\n              nA.add(cb);\n              nB.add(cb);\n              nC.add(cb);\n              normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n              normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n              normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n            }\n          } else {\n            // non-indexed elements (unconnected triangle soup)\n\n            for (var _i18 = 0, _il5 = positionAttribute.count; _i18 < _il5; _i18 += 3) {\n              pA.fromBufferAttribute(positionAttribute, _i18 + 0);\n              pB.fromBufferAttribute(positionAttribute, _i18 + 1);\n              pC.fromBufferAttribute(positionAttribute, _i18 + 2);\n              cb.subVectors(pC, pB);\n              ab.subVectors(pA, pB);\n              cb.cross(ab);\n              normalAttribute.setXYZ(_i18 + 0, cb.x, cb.y, cb.z);\n              normalAttribute.setXYZ(_i18 + 1, cb.x, cb.y, cb.z);\n              normalAttribute.setXYZ(_i18 + 2, cb.x, cb.y, cb.z);\n            }\n          }\n          this.normalizeNormals();\n          normalAttribute.needsUpdate = true;\n        }\n      }\n    }, {\n      key: \"normalizeNormals\",\n      value: function normalizeNormals() {\n        var normals = this.attributes.normal;\n        for (var i = 0, il = normals.count; i < il; i++) {\n          _vector$8.fromBufferAttribute(normals, i);\n          _vector$8.normalize();\n          normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n        }\n      }\n    }, {\n      key: \"toNonIndexed\",\n      value: function toNonIndexed() {\n        function convertBufferAttribute(attribute, indices) {\n          var array = attribute.array;\n          var itemSize = attribute.itemSize;\n          var normalized = attribute.normalized;\n          var array2 = new array.constructor(indices.length * itemSize);\n          var index = 0,\n            index2 = 0;\n          for (var i = 0, l = indices.length; i < l; i++) {\n            if (attribute.isInterleavedBufferAttribute) {\n              index = indices[i] * attribute.data.stride + attribute.offset;\n            } else {\n              index = indices[i] * itemSize;\n            }\n            for (var j = 0; j < itemSize; j++) {\n              array2[index2++] = array[index++];\n            }\n          }\n          return new BufferAttribute(array2, itemSize, normalized);\n        }\n\n        //\n\n        if (this.index === null) {\n          console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n          return this;\n        }\n        var geometry2 = new BufferGeometry();\n        var indices = this.index.array;\n        var attributes = this.attributes;\n\n        // attributes\n\n        for (var name in attributes) {\n          var attribute = attributes[name];\n          var newAttribute = convertBufferAttribute(attribute, indices);\n          geometry2.setAttribute(name, newAttribute);\n        }\n\n        // morph attributes\n\n        var morphAttributes = this.morphAttributes;\n        for (var _name in morphAttributes) {\n          var morphArray = [];\n          var morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n          for (var i = 0, il = morphAttribute.length; i < il; i++) {\n            var _attribute = morphAttribute[i];\n            var _newAttribute = convertBufferAttribute(_attribute, indices);\n            morphArray.push(_newAttribute);\n          }\n          geometry2.morphAttributes[_name] = morphArray;\n        }\n        geometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n        // groups\n\n        var groups = this.groups;\n        for (var _i19 = 0, l = groups.length; _i19 < l; _i19++) {\n          var group = groups[_i19];\n          geometry2.addGroup(group.start, group.count, group.materialIndex);\n        }\n        return geometry2;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = {\n          metadata: {\n            version: 4.6,\n            type: 'BufferGeometry',\n            generator: 'BufferGeometry.toJSON'\n          }\n        };\n\n        // standard BufferGeometry serialization\n\n        data.uuid = this.uuid;\n        data.type = this.type;\n        if (this.name !== '') data.name = this.name;\n        if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n        if (this.parameters !== undefined) {\n          var parameters = this.parameters;\n          for (var key in parameters) {\n            if (parameters[key] !== undefined) data[key] = parameters[key];\n          }\n          return data;\n        }\n\n        // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n        data.data = {\n          attributes: {}\n        };\n        var index = this.index;\n        if (index !== null) {\n          data.data.index = {\n            type: index.array.constructor.name,\n            array: Array.prototype.slice.call(index.array)\n          };\n        }\n        var attributes = this.attributes;\n        for (var _key in attributes) {\n          var attribute = attributes[_key];\n          data.data.attributes[_key] = attribute.toJSON(data.data);\n        }\n        var morphAttributes = {};\n        var hasMorphAttributes = false;\n        for (var _key2 in this.morphAttributes) {\n          var attributeArray = this.morphAttributes[_key2];\n          var array = [];\n          for (var i = 0, il = attributeArray.length; i < il; i++) {\n            var _attribute2 = attributeArray[i];\n            array.push(_attribute2.toJSON(data.data));\n          }\n          if (array.length > 0) {\n            morphAttributes[_key2] = array;\n            hasMorphAttributes = true;\n          }\n        }\n        if (hasMorphAttributes) {\n          data.data.morphAttributes = morphAttributes;\n          data.data.morphTargetsRelative = this.morphTargetsRelative;\n        }\n        var groups = this.groups;\n        if (groups.length > 0) {\n          data.data.groups = JSON.parse(JSON.stringify(groups));\n        }\n        var boundingSphere = this.boundingSphere;\n        if (boundingSphere !== null) {\n          data.data.boundingSphere = {\n            center: boundingSphere.center.toArray(),\n            radius: boundingSphere.radius\n          };\n        }\n        return data;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        // reset\n\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n\n        // used for storing cloned, shared data\n\n        var data = {};\n\n        // name\n\n        this.name = source.name;\n\n        // index\n\n        var index = source.index;\n        if (index !== null) {\n          this.setIndex(index.clone(data));\n        }\n\n        // attributes\n\n        var attributes = source.attributes;\n        for (var name in attributes) {\n          var attribute = attributes[name];\n          this.setAttribute(name, attribute.clone(data));\n        }\n\n        // morph attributes\n\n        var morphAttributes = source.morphAttributes;\n        for (var _name2 in morphAttributes) {\n          var array = [];\n          var morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n          for (var i = 0, l = morphAttribute.length; i < l; i++) {\n            array.push(morphAttribute[i].clone(data));\n          }\n          this.morphAttributes[_name2] = array;\n        }\n        this.morphTargetsRelative = source.morphTargetsRelative;\n\n        // groups\n\n        var groups = source.groups;\n        for (var _i20 = 0, _l5 = groups.length; _i20 < _l5; _i20++) {\n          var group = groups[_i20];\n          this.addGroup(group.start, group.count, group.materialIndex);\n        }\n\n        // bounding box\n\n        var boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n          this.boundingBox = boundingBox.clone();\n        }\n\n        // bounding sphere\n\n        var boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n          this.boundingSphere = boundingSphere.clone();\n        }\n\n        // draw range\n\n        this.drawRange.start = source.drawRange.start;\n        this.drawRange.count = source.drawRange.count;\n\n        // user data\n\n        this.userData = source.userData;\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n      }\n    }]);\n  }(EventDispatcher);\n  var _inverseMatrix$3 = /*@__PURE__*/new Matrix4();\n  var _ray$3 = /*@__PURE__*/new Ray();\n  var _sphere$6 = /*@__PURE__*/new Sphere();\n  var _sphereHitAt = /*@__PURE__*/new Vector3();\n  var _vA$1 = /*@__PURE__*/new Vector3();\n  var _vB$1 = /*@__PURE__*/new Vector3();\n  var _vC$1 = /*@__PURE__*/new Vector3();\n  var _tempA = /*@__PURE__*/new Vector3();\n  var _morphA = /*@__PURE__*/new Vector3();\n  var _intersectionPoint = /*@__PURE__*/new Vector3();\n  var _intersectionPointWorld = /*@__PURE__*/new Vector3();\n  var Mesh = exports.Mesh = /*#__PURE__*/function (_Object3D) {\n    function Mesh() {\n      var _this13;\n      var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n      var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new MeshBasicMaterial();\n      (0, _classCallCheck2.default)(this, Mesh);\n      _this13 = _callSuper(this, Mesh);\n      _this13.isMesh = true;\n      _this13.type = 'Mesh';\n      _this13.geometry = geometry;\n      _this13.material = material;\n      _this13.updateMorphTargets();\n      return _this13;\n    }\n    (0, _inherits2.default)(Mesh, _Object3D);\n    return (0, _createClass2.default)(Mesh, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Mesh, \"copy\", this, 3)([source, recursive]);\n        if (source.morphTargetInfluences !== undefined) {\n          this.morphTargetInfluences = source.morphTargetInfluences.slice();\n        }\n        if (source.morphTargetDictionary !== undefined) {\n          this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n        }\n        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n        this.geometry = source.geometry;\n        return this;\n      }\n    }, {\n      key: \"updateMorphTargets\",\n      value: function updateMorphTargets() {\n        var geometry = this.geometry;\n        var morphAttributes = geometry.morphAttributes;\n        var keys = Object.keys(morphAttributes);\n        if (keys.length > 0) {\n          var morphAttribute = morphAttributes[keys[0]];\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n            for (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n              var name = morphAttribute[m].name || String(m);\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      }\n    }, {\n      key: \"getVertexPosition\",\n      value: function getVertexPosition(index, target) {\n        var geometry = this.geometry;\n        var position = geometry.attributes.position;\n        var morphPosition = geometry.morphAttributes.position;\n        var morphTargetsRelative = geometry.morphTargetsRelative;\n        target.fromBufferAttribute(position, index);\n        var morphInfluences = this.morphTargetInfluences;\n        if (morphPosition && morphInfluences) {\n          _morphA.set(0, 0, 0);\n          for (var i = 0, il = morphPosition.length; i < il; i++) {\n            var influence = morphInfluences[i];\n            var morphAttribute = morphPosition[i];\n            if (influence === 0) continue;\n            _tempA.fromBufferAttribute(morphAttribute, index);\n            if (morphTargetsRelative) {\n              _morphA.addScaledVector(_tempA, influence);\n            } else {\n              _morphA.addScaledVector(_tempA.sub(target), influence);\n            }\n          }\n          target.add(_morphA);\n        }\n        return target;\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var geometry = this.geometry;\n        var material = this.material;\n        var matrixWorld = this.matrixWorld;\n        if (material === undefined) return;\n\n        // test with bounding sphere in world space\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        _sphere$6.copy(geometry.boundingSphere);\n        _sphere$6.applyMatrix4(matrixWorld);\n\n        // check distance from ray origin to bounding sphere\n\n        _ray$3.copy(raycaster.ray).recast(raycaster.near);\n        if (_sphere$6.containsPoint(_ray$3.origin) === false) {\n          if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;\n          if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;\n        }\n\n        // convert ray to local space of mesh\n\n        _inverseMatrix$3.copy(matrixWorld).invert();\n        _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);\n\n        // test with bounding box in local space\n\n        if (geometry.boundingBox !== null) {\n          if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;\n        }\n\n        // test for intersections with geometry\n\n        this._computeIntersections(raycaster, intersects, _ray$3);\n      }\n    }, {\n      key: \"_computeIntersections\",\n      value: function _computeIntersections(raycaster, intersects, rayLocalSpace) {\n        var intersection;\n        var geometry = this.geometry;\n        var material = this.material;\n        var index = geometry.index;\n        var position = geometry.attributes.position;\n        var uv = geometry.attributes.uv;\n        var uv1 = geometry.attributes.uv1;\n        var normal = geometry.attributes.normal;\n        var groups = geometry.groups;\n        var drawRange = geometry.drawRange;\n        if (index !== null) {\n          // indexed buffer geometry\n\n          if (Array.isArray(material)) {\n            for (var i = 0, il = groups.length; i < il; i++) {\n              var group = groups[i];\n              var groupMaterial = material[group.materialIndex];\n              var start = Math.max(group.start, drawRange.start);\n              var end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n              for (var j = start, jl = end; j < jl; j += 3) {\n                var a = index.getX(j);\n                var b = index.getX(j + 1);\n                var c = index.getX(j + 2);\n                intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n                if (intersection) {\n                  intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n                  intersection.face.materialIndex = group.materialIndex;\n                  intersects.push(intersection);\n                }\n              }\n            }\n          } else {\n            var _start3 = Math.max(0, drawRange.start);\n            var _end2 = Math.min(index.count, drawRange.start + drawRange.count);\n            for (var _i21 = _start3, _il6 = _end2; _i21 < _il6; _i21 += 3) {\n              var _a = index.getX(_i21);\n              var _b = index.getX(_i21 + 1);\n              var _c = index.getX(_i21 + 2);\n              intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, _a, _b, _c);\n              if (intersection) {\n                intersection.faceIndex = Math.floor(_i21 / 3); // triangle number in indexed buffer semantics\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else if (position !== undefined) {\n          // non-indexed buffer geometry\n\n          if (Array.isArray(material)) {\n            for (var _i22 = 0, _il7 = groups.length; _i22 < _il7; _i22++) {\n              var _group2 = groups[_i22];\n              var _groupMaterial = material[_group2.materialIndex];\n              var _start4 = Math.max(_group2.start, drawRange.start);\n              var _end3 = Math.min(position.count, Math.min(_group2.start + _group2.count, drawRange.start + drawRange.count));\n              for (var _j2 = _start4, _jl2 = _end3; _j2 < _jl2; _j2 += 3) {\n                var _a2 = _j2;\n                var _b2 = _j2 + 1;\n                var _c2 = _j2 + 2;\n                intersection = checkGeometryIntersection(this, _groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, _a2, _b2, _c2);\n                if (intersection) {\n                  intersection.faceIndex = Math.floor(_j2 / 3); // triangle number in non-indexed buffer semantics\n                  intersection.face.materialIndex = _group2.materialIndex;\n                  intersects.push(intersection);\n                }\n              }\n            }\n          } else {\n            var _start5 = Math.max(0, drawRange.start);\n            var _end4 = Math.min(position.count, drawRange.start + drawRange.count);\n            for (var _i23 = _start5, _il8 = _end4; _i23 < _il8; _i23 += 3) {\n              var _a3 = _i23;\n              var _b3 = _i23 + 1;\n              var _c3 = _i23 + 2;\n              intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, _a3, _b3, _c3);\n              if (intersection) {\n                intersection.faceIndex = Math.floor(_i23 / 3); // triangle number in non-indexed buffer semantics\n                intersects.push(intersection);\n              }\n            }\n          }\n        }\n      }\n    }]);\n  }(Object3D);\n  function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {\n    var intersect;\n    if (material.side === BackSide) {\n      intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n    } else {\n      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);\n    }\n    if (intersect === null) return null;\n    _intersectionPointWorld.copy(point);\n    _intersectionPointWorld.applyMatrix4(object.matrixWorld);\n    var distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n    if (distance < raycaster.near || distance > raycaster.far) return null;\n    return {\n      distance: distance,\n      point: _intersectionPointWorld.clone(),\n      object: object\n    };\n  }\n  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {\n    object.getVertexPosition(a, _vA$1);\n    object.getVertexPosition(b, _vB$1);\n    object.getVertexPosition(c, _vC$1);\n    var intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n    if (intersection) {\n      var barycoord = new Vector3();\n      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);\n      if (uv) {\n        intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());\n      }\n      if (uv1) {\n        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());\n      }\n      if (normal) {\n        intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());\n        if (intersection.normal.dot(ray.direction) > 0) {\n          intersection.normal.multiplyScalar(-1);\n        }\n      }\n      var face = {\n        a: a,\n        b: b,\n        c: c,\n        normal: new Vector3(),\n        materialIndex: 0\n      };\n      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n      intersection.face = face;\n      intersection.barycoord = barycoord;\n    }\n    return intersection;\n  }\n  var BoxGeometry = exports.BoxGeometry = /*#__PURE__*/function (_BufferGeometry) {\n    function BoxGeometry() {\n      var _this14;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var widthSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n      var depthSegments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      (0, _classCallCheck2.default)(this, BoxGeometry);\n      _this14 = _callSuper(this, BoxGeometry);\n      _this14.type = 'BoxGeometry';\n      _this14.parameters = {\n        width: width,\n        height: height,\n        depth: depth,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        depthSegments: depthSegments\n      };\n      var scope = _this14;\n\n      // segments\n\n      widthSegments = Math.floor(widthSegments);\n      heightSegments = Math.floor(heightSegments);\n      depthSegments = Math.floor(depthSegments);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // helper variables\n\n      var numberOfVertices = 0;\n      var groupStart = 0;\n\n      // build each side of the box geometry\n\n      buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n      buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n      buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n      buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n      buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n      buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\n      // build geometry\n\n      _this14.setIndex(indices);\n      _this14.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this14.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this14.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n        var segmentWidth = width / gridX;\n        var segmentHeight = height / gridY;\n        var widthHalf = width / 2;\n        var heightHalf = height / 2;\n        var depthHalf = depth / 2;\n        var gridX1 = gridX + 1;\n        var gridY1 = gridY + 1;\n        var vertexCounter = 0;\n        var groupCount = 0;\n        var vector = new Vector3();\n\n        // generate vertices, normals and uvs\n\n        for (var iy = 0; iy < gridY1; iy++) {\n          var y = iy * segmentHeight - heightHalf;\n          for (var ix = 0; ix < gridX1; ix++) {\n            var x = ix * segmentWidth - widthHalf;\n\n            // set values to correct vector component\n\n            vector[u] = x * udir;\n            vector[v] = y * vdir;\n            vector[w] = depthHalf;\n\n            // now apply vector to vertex buffer\n\n            vertices.push(vector.x, vector.y, vector.z);\n\n            // set values to correct vector component\n\n            vector[u] = 0;\n            vector[v] = 0;\n            vector[w] = depth > 0 ? 1 : -1;\n\n            // now apply vector to normal buffer\n\n            normals.push(vector.x, vector.y, vector.z);\n\n            // uvs\n\n            uvs.push(ix / gridX);\n            uvs.push(1 - iy / gridY);\n\n            // counters\n\n            vertexCounter += 1;\n          }\n        }\n\n        // indices\n\n        // 1. you need three indices to draw a single face\n        // 2. a single segment consists of two faces\n        // 3. so we need to generate six (2*3) indices per segment\n\n        for (var _iy = 0; _iy < gridY; _iy++) {\n          for (var _ix = 0; _ix < gridX; _ix++) {\n            var a = numberOfVertices + _ix + gridX1 * _iy;\n            var b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n            var c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n            var d = numberOfVertices + (_ix + 1) + gridX1 * _iy;\n\n            // faces\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n\n            // increase counter\n\n            groupCount += 6;\n          }\n        }\n\n        // add a group to the geometry. this will ensure multi material support\n\n        scope.addGroup(groupStart, groupCount, materialIndex);\n\n        // calculate new start value for groups\n\n        groupStart += groupCount;\n\n        // update total number of vertices\n\n        numberOfVertices += vertexCounter;\n      }\n      return _this14;\n    }\n    (0, _inherits2.default)(BoxGeometry, _BufferGeometry);\n    return (0, _createClass2.default)(BoxGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(BoxGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n      }\n    }]);\n  }(BufferGeometry);\n  /**\n   * Uniform Utilities\n   */\n  function cloneUniforms(src) {\n    var dst = {};\n    for (var u in src) {\n      dst[u] = {};\n      for (var p in src[u]) {\n        var property = src[u][p];\n        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n          if (property.isRenderTargetTexture) {\n            console.warn('UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().');\n            dst[u][p] = null;\n          } else {\n            dst[u][p] = property.clone();\n          }\n        } else if (Array.isArray(property)) {\n          dst[u][p] = property.slice();\n        } else {\n          dst[u][p] = property;\n        }\n      }\n    }\n    return dst;\n  }\n  function mergeUniforms(uniforms) {\n    var merged = {};\n    for (var u = 0; u < uniforms.length; u++) {\n      var _tmp = cloneUniforms(uniforms[u]);\n      for (var p in _tmp) {\n        merged[p] = _tmp[p];\n      }\n    }\n    return merged;\n  }\n  function cloneUniformsGroups(src) {\n    var dst = [];\n    for (var u = 0; u < src.length; u++) {\n      dst.push(src[u].clone());\n    }\n    return dst;\n  }\n  function getUnlitUniformColorSpace(renderer) {\n    var currentRenderTarget = renderer.getRenderTarget();\n    if (currentRenderTarget === null) {\n      // https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n      return renderer.outputColorSpace;\n    }\n\n    // https://github.com/mrdoob/three.js/issues/27868\n    if (currentRenderTarget.isXRRenderTarget === true) {\n      return currentRenderTarget.texture.colorSpace;\n    }\n    return ColorManagement.workingColorSpace;\n  }\n\n  // Legacy\n\n  var UniformsUtils = exports.UniformsUtils = {\n    clone: cloneUniforms,\n    merge: mergeUniforms\n  };\n  var default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n  var default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n  var ShaderMaterial = exports.ShaderMaterial = /*#__PURE__*/function (_Material2) {\n    function ShaderMaterial(parameters) {\n      var _this15;\n      (0, _classCallCheck2.default)(this, ShaderMaterial);\n      _this15 = _callSuper(this, ShaderMaterial);\n      _this15.isShaderMaterial = true;\n      _this15.type = 'ShaderMaterial';\n      _this15.defines = {};\n      _this15.uniforms = {};\n      _this15.uniformsGroups = [];\n      _this15.vertexShader = default_vertex;\n      _this15.fragmentShader = default_fragment;\n      _this15.linewidth = 1;\n      _this15.wireframe = false;\n      _this15.wireframeLinewidth = 1;\n      _this15.fog = false; // set to use scene fog\n      _this15.lights = false; // set to use scene lights\n      _this15.clipping = false; // set to use user-defined clipping planes\n\n      _this15.forceSinglePass = true;\n      _this15.extensions = {\n        clipCullDistance: false,\n        // set to use vertex shader clipping\n        multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n      };\n\n      // When rendered geometry doesn't include these attributes but the material does,\n      // use these default values in WebGL. This avoids errors when buffer data is missing.\n      _this15.defaultAttributeValues = {\n        'color': [1, 1, 1],\n        'uv': [0, 0],\n        'uv1': [0, 0]\n      };\n      _this15.index0AttributeName = undefined;\n      _this15.uniformsNeedUpdate = false;\n      _this15.glslVersion = null;\n      if (parameters !== undefined) {\n        _this15.setValues(parameters);\n      }\n      return _this15;\n    }\n    (0, _inherits2.default)(ShaderMaterial, _Material2);\n    return (0, _createClass2.default)(ShaderMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(ShaderMaterial, \"copy\", this, 3)([source]);\n        this.fragmentShader = source.fragmentShader;\n        this.vertexShader = source.vertexShader;\n        this.uniforms = cloneUniforms(source.uniforms);\n        this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);\n        this.defines = Object.assign({}, source.defines);\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.fog = source.fog;\n        this.lights = source.lights;\n        this.clipping = source.clipping;\n        this.extensions = Object.assign({}, source.extensions);\n        this.glslVersion = source.glslVersion;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(ShaderMaterial, \"toJSON\", this, 3)([meta]);\n        data.glslVersion = this.glslVersion;\n        data.uniforms = {};\n        for (var name in this.uniforms) {\n          var uniform = this.uniforms[name];\n          var value = uniform.value;\n          if (value && value.isTexture) {\n            data.uniforms[name] = {\n              type: 't',\n              value: value.toJSON(meta).uuid\n            };\n          } else if (value && value.isColor) {\n            data.uniforms[name] = {\n              type: 'c',\n              value: value.getHex()\n            };\n          } else if (value && value.isVector2) {\n            data.uniforms[name] = {\n              type: 'v2',\n              value: value.toArray()\n            };\n          } else if (value && value.isVector3) {\n            data.uniforms[name] = {\n              type: 'v3',\n              value: value.toArray()\n            };\n          } else if (value && value.isVector4) {\n            data.uniforms[name] = {\n              type: 'v4',\n              value: value.toArray()\n            };\n          } else if (value && value.isMatrix3) {\n            data.uniforms[name] = {\n              type: 'm3',\n              value: value.toArray()\n            };\n          } else if (value && value.isMatrix4) {\n            data.uniforms[name] = {\n              type: 'm4',\n              value: value.toArray()\n            };\n          } else {\n            data.uniforms[name] = {\n              value: value\n            };\n\n            // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n          }\n        }\n        if (Object.keys(this.defines).length > 0) data.defines = this.defines;\n        data.vertexShader = this.vertexShader;\n        data.fragmentShader = this.fragmentShader;\n        data.lights = this.lights;\n        data.clipping = this.clipping;\n        var extensions = {};\n        for (var key in this.extensions) {\n          if (this.extensions[key] === true) extensions[key] = true;\n        }\n        if (Object.keys(extensions).length > 0) data.extensions = extensions;\n        return data;\n      }\n    }]);\n  }(Material);\n  var Camera = exports.Camera = /*#__PURE__*/function (_Object3D2) {\n    function Camera() {\n      var _this16;\n      (0, _classCallCheck2.default)(this, Camera);\n      _this16 = _callSuper(this, Camera);\n      _this16.isCamera = true;\n      _this16.type = 'Camera';\n      _this16.matrixWorldInverse = new Matrix4();\n      _this16.projectionMatrix = new Matrix4();\n      _this16.projectionMatrixInverse = new Matrix4();\n      _this16.coordinateSystem = WebGLCoordinateSystem;\n      return _this16;\n    }\n    (0, _inherits2.default)(Camera, _Object3D2);\n    return (0, _createClass2.default)(Camera, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Camera, \"copy\", this, 3)([source, recursive]);\n        this.matrixWorldInverse.copy(source.matrixWorldInverse);\n        this.projectionMatrix.copy(source.projectionMatrix);\n        this.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n        this.coordinateSystem = source.coordinateSystem;\n        return this;\n      }\n    }, {\n      key: \"getWorldDirection\",\n      value: function getWorldDirection(target) {\n        return _superPropGet(Camera, \"getWorldDirection\", this, 3)([target]).negate();\n      }\n    }, {\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        _superPropGet(Camera, \"updateMatrixWorld\", this, 3)([force]);\n        this.matrixWorldInverse.copy(this.matrixWorld).invert();\n      }\n    }, {\n      key: \"updateWorldMatrix\",\n      value: function updateWorldMatrix(updateParents, updateChildren) {\n        _superPropGet(Camera, \"updateWorldMatrix\", this, 3)([updateParents, updateChildren]);\n        this.matrixWorldInverse.copy(this.matrixWorld).invert();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }(Object3D);\n  var _v3$1 = /*@__PURE__*/new Vector3();\n  var _minTarget = /*@__PURE__*/new Vector2();\n  var _maxTarget = /*@__PURE__*/new Vector2();\n  var PerspectiveCamera = exports.PerspectiveCamera = /*#__PURE__*/function (_Camera) {\n    function PerspectiveCamera() {\n      var _this17;\n      var fov = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      var aspect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n      var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2000;\n      (0, _classCallCheck2.default)(this, PerspectiveCamera);\n      _this17 = _callSuper(this, PerspectiveCamera);\n      _this17.isPerspectiveCamera = true;\n      _this17.type = 'PerspectiveCamera';\n      _this17.fov = fov;\n      _this17.zoom = 1;\n      _this17.near = near;\n      _this17.far = far;\n      _this17.focus = 10;\n      _this17.aspect = aspect;\n      _this17.view = null;\n      _this17.filmGauge = 35; // width of the film (default in millimeters)\n      _this17.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n      _this17.updateProjectionMatrix();\n      return _this17;\n    }\n    (0, _inherits2.default)(PerspectiveCamera, _Camera);\n    return (0, _createClass2.default)(PerspectiveCamera, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(PerspectiveCamera, \"copy\", this, 3)([source, recursive]);\n        this.fov = source.fov;\n        this.zoom = source.zoom;\n        this.near = source.near;\n        this.far = source.far;\n        this.focus = source.focus;\n        this.aspect = source.aspect;\n        this.view = source.view === null ? null : Object.assign({}, source.view);\n        this.filmGauge = source.filmGauge;\n        this.filmOffset = source.filmOffset;\n        return this;\n      }\n\n      /**\n       * Sets the FOV by focal length in respect to the current .filmGauge.\n       *\n       * The default film gauge is 35, so that the focal length can be specified for\n       * a 35mm (full frame) camera.\n       *\n       * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n       */\n    }, {\n      key: \"setFocalLength\",\n      value: function setFocalLength(focalLength) {\n        /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n        var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n        this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n        this.updateProjectionMatrix();\n      }\n\n      /**\n       * Calculates the focal length from the current .fov and .filmGauge.\n       *\n       * @returns {number}\n       */\n    }, {\n      key: \"getFocalLength\",\n      value: function getFocalLength() {\n        var vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n        return 0.5 * this.getFilmHeight() / vExtentSlope;\n      }\n    }, {\n      key: \"getEffectiveFOV\",\n      value: function getEffectiveFOV() {\n        return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n      }\n    }, {\n      key: \"getFilmWidth\",\n      value: function getFilmWidth() {\n        // film not completely covered in portrait format (aspect < 1)\n        return this.filmGauge * Math.min(this.aspect, 1);\n      }\n    }, {\n      key: \"getFilmHeight\",\n      value: function getFilmHeight() {\n        // film not completely covered in landscape format (aspect > 1)\n        return this.filmGauge / Math.max(this.aspect, 1);\n      }\n\n      /**\n       * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n       * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.\n       *\n       * @param {number} distance\n       * @param {Vector2} minTarget\n       * @param {Vector2} maxTarget\n       */\n    }, {\n      key: \"getViewBounds\",\n      value: function getViewBounds(distance, minTarget, maxTarget) {\n        _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);\n        minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);\n        _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);\n        maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);\n      }\n\n      /**\n       * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n       *\n       * @param {number} distance\n       * @param {Vector2} target - Vector2 target used to store result where x is width and y is height.\n       * @returns {Vector2}\n       */\n    }, {\n      key: \"getViewSize\",\n      value: function getViewSize(distance, target) {\n        this.getViewBounds(distance, _minTarget, _maxTarget);\n        return target.subVectors(_maxTarget, _minTarget);\n      }\n\n      /**\n       * Sets an offset in a larger frustum. This is useful for multi-window or\n       * multi-monitor/multi-machine setups.\n       *\n       * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n       * the monitors are in grid like this\n       *\n       *   +---+---+---+\n       *   | A | B | C |\n       *   +---+---+---+\n       *   | D | E | F |\n       *   +---+---+---+\n       *\n       * then for each monitor you would call it like this\n       *\n       *   const w = 1920;\n       *   const h = 1080;\n       *   const fullWidth = w * 3;\n       *   const fullHeight = h * 2;\n       *\n       *   --A--\n       *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n       *   --B--\n       *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n       *   --C--\n       *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n       *   --D--\n       *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n       *   --E--\n       *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n       *   --F--\n       *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n       *\n       *   Note there is no reason monitors have to be the same size or in a grid.\n       *\n       * @param {number} fullWidth\n       * @param {number} fullHeight\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       */\n    }, {\n      key: \"setViewOffset\",\n      value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n        this.aspect = fullWidth / fullHeight;\n        if (this.view === null) {\n          this.view = {\n            enabled: true,\n            fullWidth: 1,\n            fullHeight: 1,\n            offsetX: 0,\n            offsetY: 0,\n            width: 1,\n            height: 1\n          };\n        }\n        this.view.enabled = true;\n        this.view.fullWidth = fullWidth;\n        this.view.fullHeight = fullHeight;\n        this.view.offsetX = x;\n        this.view.offsetY = y;\n        this.view.width = width;\n        this.view.height = height;\n        this.updateProjectionMatrix();\n      }\n    }, {\n      key: \"clearViewOffset\",\n      value: function clearViewOffset() {\n        if (this.view !== null) {\n          this.view.enabled = false;\n        }\n        this.updateProjectionMatrix();\n      }\n    }, {\n      key: \"updateProjectionMatrix\",\n      value: function updateProjectionMatrix() {\n        var near = this.near;\n        var top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n        var height = 2 * top;\n        var width = this.aspect * height;\n        var left = -0.5 * width;\n        var view = this.view;\n        if (this.view !== null && this.view.enabled) {\n          var fullWidth = view.fullWidth,\n            fullHeight = view.fullHeight;\n          left += view.offsetX * width / fullWidth;\n          top -= view.offsetY * height / fullHeight;\n          width *= view.width / fullWidth;\n          height *= view.height / fullHeight;\n        }\n        var skew = this.filmOffset;\n        if (skew !== 0) left += near * skew / this.getFilmWidth();\n        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);\n        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(PerspectiveCamera, \"toJSON\", this, 3)([meta]);\n        data.object.fov = this.fov;\n        data.object.zoom = this.zoom;\n        data.object.near = this.near;\n        data.object.far = this.far;\n        data.object.focus = this.focus;\n        data.object.aspect = this.aspect;\n        if (this.view !== null) data.object.view = Object.assign({}, this.view);\n        data.object.filmGauge = this.filmGauge;\n        data.object.filmOffset = this.filmOffset;\n        return data;\n      }\n    }]);\n  }(Camera);\n  var fov = -90; // negative fov is not an error\n  var aspect = 1;\n  var CubeCamera = exports.CubeCamera = /*#__PURE__*/function (_Object3D3) {\n    function CubeCamera(near, far, renderTarget) {\n      var _this18;\n      (0, _classCallCheck2.default)(this, CubeCamera);\n      _this18 = _callSuper(this, CubeCamera);\n      _this18.type = 'CubeCamera';\n      _this18.renderTarget = renderTarget;\n      _this18.coordinateSystem = null;\n      _this18.activeMipmapLevel = 0;\n      var cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n      cameraPX.layers = _this18.layers;\n      _this18.add(cameraPX);\n      var cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n      cameraNX.layers = _this18.layers;\n      _this18.add(cameraNX);\n      var cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n      cameraPY.layers = _this18.layers;\n      _this18.add(cameraPY);\n      var cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n      cameraNY.layers = _this18.layers;\n      _this18.add(cameraNY);\n      var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n      cameraPZ.layers = _this18.layers;\n      _this18.add(cameraPZ);\n      var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n      cameraNZ.layers = _this18.layers;\n      _this18.add(cameraNZ);\n      return _this18;\n    }\n    (0, _inherits2.default)(CubeCamera, _Object3D3);\n    return (0, _createClass2.default)(CubeCamera, [{\n      key: \"updateCoordinateSystem\",\n      value: function updateCoordinateSystem() {\n        var coordinateSystem = this.coordinateSystem;\n        var cameras = this.children.concat();\n        var _cameras = (0, _slicedToArray2.default)(cameras, 6),\n          cameraPX = _cameras[0],\n          cameraNX = _cameras[1],\n          cameraPY = _cameras[2],\n          cameraNY = _cameras[3],\n          cameraPZ = _cameras[4],\n          cameraNZ = _cameras[5];\n        for (var camera of cameras) this.remove(camera);\n        if (coordinateSystem === WebGLCoordinateSystem) {\n          cameraPX.up.set(0, 1, 0);\n          cameraPX.lookAt(1, 0, 0);\n          cameraNX.up.set(0, 1, 0);\n          cameraNX.lookAt(-1, 0, 0);\n          cameraPY.up.set(0, 0, -1);\n          cameraPY.lookAt(0, 1, 0);\n          cameraNY.up.set(0, 0, 1);\n          cameraNY.lookAt(0, -1, 0);\n          cameraPZ.up.set(0, 1, 0);\n          cameraPZ.lookAt(0, 0, 1);\n          cameraNZ.up.set(0, 1, 0);\n          cameraNZ.lookAt(0, 0, -1);\n        } else if (coordinateSystem === WebGPUCoordinateSystem) {\n          cameraPX.up.set(0, -1, 0);\n          cameraPX.lookAt(-1, 0, 0);\n          cameraNX.up.set(0, -1, 0);\n          cameraNX.lookAt(1, 0, 0);\n          cameraPY.up.set(0, 0, 1);\n          cameraPY.lookAt(0, 1, 0);\n          cameraNY.up.set(0, 0, -1);\n          cameraNY.lookAt(0, -1, 0);\n          cameraPZ.up.set(0, -1, 0);\n          cameraPZ.lookAt(0, 0, 1);\n          cameraNZ.up.set(0, -1, 0);\n          cameraNZ.lookAt(0, 0, -1);\n        } else {\n          throw new Error('THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem);\n        }\n        for (var _camera2 of cameras) {\n          this.add(_camera2);\n          _camera2.updateMatrixWorld();\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(renderer, scene) {\n        if (this.parent === null) this.updateMatrixWorld();\n        var renderTarget = this.renderTarget,\n          activeMipmapLevel = this.activeMipmapLevel;\n        if (this.coordinateSystem !== renderer.coordinateSystem) {\n          this.coordinateSystem = renderer.coordinateSystem;\n          this.updateCoordinateSystem();\n        }\n        var _this$children = (0, _slicedToArray2.default)(this.children, 6),\n          cameraPX = _this$children[0],\n          cameraNX = _this$children[1],\n          cameraPY = _this$children[2],\n          cameraNY = _this$children[3],\n          cameraPZ = _this$children[4],\n          cameraNZ = _this$children[5];\n        var currentRenderTarget = renderer.getRenderTarget();\n        var currentActiveCubeFace = renderer.getActiveCubeFace();\n        var currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n        var currentXrEnabled = renderer.xr.enabled;\n        renderer.xr.enabled = false;\n        var generateMipmaps = renderTarget.texture.generateMipmaps;\n        renderTarget.texture.generateMipmaps = false;\n        renderer.setRenderTarget(renderTarget, 0, activeMipmapLevel);\n        renderer.render(scene, cameraPX);\n        renderer.setRenderTarget(renderTarget, 1, activeMipmapLevel);\n        renderer.render(scene, cameraNX);\n        renderer.setRenderTarget(renderTarget, 2, activeMipmapLevel);\n        renderer.render(scene, cameraPY);\n        renderer.setRenderTarget(renderTarget, 3, activeMipmapLevel);\n        renderer.render(scene, cameraNY);\n        renderer.setRenderTarget(renderTarget, 4, activeMipmapLevel);\n        renderer.render(scene, cameraPZ);\n\n        // mipmaps are generated during the last call of render()\n        // at this point, all sides of the cube render target are defined\n\n        renderTarget.texture.generateMipmaps = generateMipmaps;\n        renderer.setRenderTarget(renderTarget, 5, activeMipmapLevel);\n        renderer.render(scene, cameraNZ);\n        renderer.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);\n        renderer.xr.enabled = currentXrEnabled;\n        renderTarget.texture.needsPMREMUpdate = true;\n      }\n    }]);\n  }(Object3D);\n  var CubeTexture = exports.CubeTexture = /*#__PURE__*/function (_Texture3) {\n    function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {\n      var _this19;\n      (0, _classCallCheck2.default)(this, CubeTexture);\n      images = images !== undefined ? images : [];\n      mapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n      _this19 = _callSuper(this, CubeTexture, [images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace]);\n      _this19.isCubeTexture = true;\n      _this19.flipY = false;\n      return _this19;\n    }\n    (0, _inherits2.default)(CubeTexture, _Texture3);\n    return (0, _createClass2.default)(CubeTexture, [{\n      key: \"images\",\n      get: function get() {\n        return this.image;\n      },\n      set: function set(value) {\n        this.image = value;\n      }\n    }]);\n  }(Texture);\n  var WebGLCubeRenderTarget = exports.WebGLCubeRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget3) {\n    function WebGLCubeRenderTarget() {\n      var _this20;\n      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, WebGLCubeRenderTarget);\n      _this20 = _callSuper(this, WebGLCubeRenderTarget, [size, size, options]);\n      _this20.isWebGLCubeRenderTarget = true;\n      var image = {\n        width: size,\n        height: size,\n        depth: 1\n      };\n      var images = [image, image, image, image, image, image];\n      _this20.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);\n\n      // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n      // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n      // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n      // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n      // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n      // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n      _this20.texture.isRenderTargetTexture = true;\n      _this20.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n      _this20.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n      return _this20;\n    }\n    (0, _inherits2.default)(WebGLCubeRenderTarget, _WebGLRenderTarget3);\n    return (0, _createClass2.default)(WebGLCubeRenderTarget, [{\n      key: \"fromEquirectangularTexture\",\n      value: function fromEquirectangularTexture(renderer, texture) {\n        this.texture.type = texture.type;\n        this.texture.colorSpace = texture.colorSpace;\n        this.texture.generateMipmaps = texture.generateMipmaps;\n        this.texture.minFilter = texture.minFilter;\n        this.texture.magFilter = texture.magFilter;\n        var shader = {\n          uniforms: {\n            tEquirect: {\n              value: null\n            }\n          },\n          vertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n          fragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n        };\n        var geometry = new BoxGeometry(5, 5, 5);\n        var material = new ShaderMaterial({\n          name: 'CubemapFromEquirect',\n          uniforms: cloneUniforms(shader.uniforms),\n          vertexShader: shader.vertexShader,\n          fragmentShader: shader.fragmentShader,\n          side: BackSide,\n          blending: NoBlending\n        });\n        material.uniforms.tEquirect.value = texture;\n        var mesh = new Mesh(geometry, material);\n        var currentMinFilter = texture.minFilter;\n\n        // Avoid blurred poles\n        if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n        var camera = new CubeCamera(1, 10, this);\n        camera.update(renderer, mesh);\n        texture.minFilter = currentMinFilter;\n        mesh.geometry.dispose();\n        mesh.material.dispose();\n        return this;\n      }\n    }, {\n      key: \"clear\",\n      value: function clear(renderer, color, depth, stencil) {\n        var currentRenderTarget = renderer.getRenderTarget();\n        for (var i = 0; i < 6; i++) {\n          renderer.setRenderTarget(this, i);\n          renderer.clear(color, depth, stencil);\n        }\n        renderer.setRenderTarget(currentRenderTarget);\n      }\n    }]);\n  }(WebGLRenderTarget);\n  var FogExp2 = exports.FogExp2 = /*#__PURE__*/function () {\n    function FogExp2(color) {\n      var density = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00025;\n      (0, _classCallCheck2.default)(this, FogExp2);\n      this.isFogExp2 = true;\n      this.name = '';\n      this.color = new Color(color);\n      this.density = density;\n    }\n    return (0, _createClass2.default)(FogExp2, [{\n      key: \"clone\",\n      value: function clone() {\n        return new FogExp2(this.color, this.density);\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(/* meta */\n      ) {\n        return {\n          type: 'FogExp2',\n          name: this.name,\n          color: this.color.getHex(),\n          density: this.density\n        };\n      }\n    }]);\n  }();\n  var Fog = exports.Fog = /*#__PURE__*/function () {\n    function Fog(color) {\n      var near = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var far = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n      (0, _classCallCheck2.default)(this, Fog);\n      this.isFog = true;\n      this.name = '';\n      this.color = new Color(color);\n      this.near = near;\n      this.far = far;\n    }\n    return (0, _createClass2.default)(Fog, [{\n      key: \"clone\",\n      value: function clone() {\n        return new Fog(this.color, this.near, this.far);\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(/* meta */\n      ) {\n        return {\n          type: 'Fog',\n          name: this.name,\n          color: this.color.getHex(),\n          near: this.near,\n          far: this.far\n        };\n      }\n    }]);\n  }();\n  var Scene = exports.Scene = /*#__PURE__*/function (_Object3D4) {\n    function Scene() {\n      var _this21;\n      (0, _classCallCheck2.default)(this, Scene);\n      _this21 = _callSuper(this, Scene);\n      _this21.isScene = true;\n      _this21.type = 'Scene';\n      _this21.background = null;\n      _this21.environment = null;\n      _this21.fog = null;\n      _this21.backgroundBlurriness = 0;\n      _this21.backgroundIntensity = 1;\n      _this21.backgroundRotation = new Euler();\n      _this21.environmentIntensity = 1;\n      _this21.environmentRotation = new Euler();\n      _this21.overrideMaterial = null;\n      if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n          detail: _this21\n        }));\n      }\n      return _this21;\n    }\n    (0, _inherits2.default)(Scene, _Object3D4);\n    return (0, _createClass2.default)(Scene, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Scene, \"copy\", this, 3)([source, recursive]);\n        if (source.background !== null) this.background = source.background.clone();\n        if (source.environment !== null) this.environment = source.environment.clone();\n        if (source.fog !== null) this.fog = source.fog.clone();\n        this.backgroundBlurriness = source.backgroundBlurriness;\n        this.backgroundIntensity = source.backgroundIntensity;\n        this.backgroundRotation.copy(source.backgroundRotation);\n        this.environmentIntensity = source.environmentIntensity;\n        this.environmentRotation.copy(source.environmentRotation);\n        if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(Scene, \"toJSON\", this, 3)([meta]);\n        if (this.fog !== null) data.object.fog = this.fog.toJSON();\n        if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;\n        if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;\n        data.object.backgroundRotation = this.backgroundRotation.toArray();\n        if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;\n        data.object.environmentRotation = this.environmentRotation.toArray();\n        return data;\n      }\n    }]);\n  }(Object3D);\n  var InterleavedBuffer = exports.InterleavedBuffer = /*#__PURE__*/function () {\n    function InterleavedBuffer(array, stride) {\n      (0, _classCallCheck2.default)(this, InterleavedBuffer);\n      this.isInterleavedBuffer = true;\n      this.array = array;\n      this.stride = stride;\n      this.count = array !== undefined ? array.length / stride : 0;\n      this.usage = StaticDrawUsage;\n      this.updateRanges = [];\n      this.version = 0;\n      this.uuid = generateUUID();\n    }\n    return (0, _createClass2.default)(InterleavedBuffer, [{\n      key: \"onUploadCallback\",\n      value: function onUploadCallback() {}\n    }, {\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) this.version++;\n      }\n    }, {\n      key: \"setUsage\",\n      value: function setUsage(value) {\n        this.usage = value;\n        return this;\n      }\n    }, {\n      key: \"addUpdateRange\",\n      value: function addUpdateRange(start, count) {\n        this.updateRanges.push({\n          start: start,\n          count: count\n        });\n      }\n    }, {\n      key: \"clearUpdateRanges\",\n      value: function clearUpdateRanges() {\n        this.updateRanges.length = 0;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.array = new source.array.constructor(source.array);\n        this.count = source.count;\n        this.stride = source.stride;\n        this.usage = source.usage;\n        return this;\n      }\n    }, {\n      key: \"copyAt\",\n      value: function copyAt(index1, attribute, index2) {\n        index1 *= this.stride;\n        index2 *= attribute.stride;\n        for (var i = 0, l = this.stride; i < l; i++) {\n          this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n      }\n    }, {\n      key: \"set\",\n      value: function set(value) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        this.array.set(value, offset);\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(data) {\n        if (data.arrayBuffers === undefined) {\n          data.arrayBuffers = {};\n        }\n        if (this.array.buffer._uuid === undefined) {\n          this.array.buffer._uuid = generateUUID();\n        }\n        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n          data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n        }\n        var array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n        var ib = new this.constructor(array, this.stride);\n        ib.setUsage(this.usage);\n        return ib;\n      }\n    }, {\n      key: \"onUpload\",\n      value: function onUpload(callback) {\n        this.onUploadCallback = callback;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(data) {\n        if (data.arrayBuffers === undefined) {\n          data.arrayBuffers = {};\n        }\n\n        // generate UUID for array buffer if necessary\n\n        if (this.array.buffer._uuid === undefined) {\n          this.array.buffer._uuid = generateUUID();\n        }\n        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n          data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));\n        }\n\n        //\n\n        return {\n          uuid: this.uuid,\n          buffer: this.array.buffer._uuid,\n          type: this.array.constructor.name,\n          stride: this.stride\n        };\n      }\n    }]);\n  }();\n  var _vector$7 = /*@__PURE__*/new Vector3();\n  var InterleavedBufferAttribute = exports.InterleavedBufferAttribute = /*#__PURE__*/function () {\n    function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset) {\n      var normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      (0, _classCallCheck2.default)(this, InterleavedBufferAttribute);\n      this.isInterleavedBufferAttribute = true;\n      this.name = '';\n      this.data = interleavedBuffer;\n      this.itemSize = itemSize;\n      this.offset = offset;\n      this.normalized = normalized;\n    }\n    return (0, _createClass2.default)(InterleavedBufferAttribute, [{\n      key: \"count\",\n      get: function get() {\n        return this.data.count;\n      }\n    }, {\n      key: \"array\",\n      get: function get() {\n        return this.data.array;\n      }\n    }, {\n      key: \"needsUpdate\",\n      set: function set(value) {\n        this.data.needsUpdate = value;\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(m) {\n        for (var i = 0, l = this.data.count; i < l; i++) {\n          _vector$7.fromBufferAttribute(this, i);\n          _vector$7.applyMatrix4(m);\n          this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n        }\n        return this;\n      }\n    }, {\n      key: \"applyNormalMatrix\",\n      value: function applyNormalMatrix(m) {\n        for (var i = 0, l = this.count; i < l; i++) {\n          _vector$7.fromBufferAttribute(this, i);\n          _vector$7.applyNormalMatrix(m);\n          this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n        }\n        return this;\n      }\n    }, {\n      key: \"transformDirection\",\n      value: function transformDirection(m) {\n        for (var i = 0, l = this.count; i < l; i++) {\n          _vector$7.fromBufferAttribute(this, i);\n          _vector$7.transformDirection(m);\n          this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n        }\n        return this;\n      }\n    }, {\n      key: \"getComponent\",\n      value: function getComponent(index, component) {\n        var value = this.array[index * this.data.stride + this.offset + component];\n        if (this.normalized) value = denormalize(value, this.array);\n        return value;\n      }\n    }, {\n      key: \"setComponent\",\n      value: function setComponent(index, component, value) {\n        if (this.normalized) value = normalize(value, this.array);\n        this.data.array[index * this.data.stride + this.offset + component] = value;\n        return this;\n      }\n    }, {\n      key: \"setX\",\n      value: function setX(index, x) {\n        if (this.normalized) x = normalize(x, this.array);\n        this.data.array[index * this.data.stride + this.offset] = x;\n        return this;\n      }\n    }, {\n      key: \"setY\",\n      value: function setY(index, y) {\n        if (this.normalized) y = normalize(y, this.array);\n        this.data.array[index * this.data.stride + this.offset + 1] = y;\n        return this;\n      }\n    }, {\n      key: \"setZ\",\n      value: function setZ(index, z) {\n        if (this.normalized) z = normalize(z, this.array);\n        this.data.array[index * this.data.stride + this.offset + 2] = z;\n        return this;\n      }\n    }, {\n      key: \"setW\",\n      value: function setW(index, w) {\n        if (this.normalized) w = normalize(w, this.array);\n        this.data.array[index * this.data.stride + this.offset + 3] = w;\n        return this;\n      }\n    }, {\n      key: \"getX\",\n      value: function getX(index) {\n        var x = this.data.array[index * this.data.stride + this.offset];\n        if (this.normalized) x = denormalize(x, this.array);\n        return x;\n      }\n    }, {\n      key: \"getY\",\n      value: function getY(index) {\n        var y = this.data.array[index * this.data.stride + this.offset + 1];\n        if (this.normalized) y = denormalize(y, this.array);\n        return y;\n      }\n    }, {\n      key: \"getZ\",\n      value: function getZ(index) {\n        var z = this.data.array[index * this.data.stride + this.offset + 2];\n        if (this.normalized) z = denormalize(z, this.array);\n        return z;\n      }\n    }, {\n      key: \"getW\",\n      value: function getW(index) {\n        var w = this.data.array[index * this.data.stride + this.offset + 3];\n        if (this.normalized) w = denormalize(w, this.array);\n        return w;\n      }\n    }, {\n      key: \"setXY\",\n      value: function setXY(index, x, y) {\n        index = index * this.data.stride + this.offset;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n        }\n        this.data.array[index + 0] = x;\n        this.data.array[index + 1] = y;\n        return this;\n      }\n    }, {\n      key: \"setXYZ\",\n      value: function setXYZ(index, x, y, z) {\n        index = index * this.data.stride + this.offset;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n          z = normalize(z, this.array);\n        }\n        this.data.array[index + 0] = x;\n        this.data.array[index + 1] = y;\n        this.data.array[index + 2] = z;\n        return this;\n      }\n    }, {\n      key: \"setXYZW\",\n      value: function setXYZW(index, x, y, z, w) {\n        index = index * this.data.stride + this.offset;\n        if (this.normalized) {\n          x = normalize(x, this.array);\n          y = normalize(y, this.array);\n          z = normalize(z, this.array);\n          w = normalize(w, this.array);\n        }\n        this.data.array[index + 0] = x;\n        this.data.array[index + 1] = y;\n        this.data.array[index + 2] = z;\n        this.data.array[index + 3] = w;\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(data) {\n        if (data === undefined) {\n          console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.');\n          var array = [];\n          for (var i = 0; i < this.count; i++) {\n            var index = i * this.data.stride + this.offset;\n            for (var j = 0; j < this.itemSize; j++) {\n              array.push(this.data.array[index + j]);\n            }\n          }\n          return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n        } else {\n          if (data.interleavedBuffers === undefined) {\n            data.interleavedBuffers = {};\n          }\n          if (data.interleavedBuffers[this.data.uuid] === undefined) {\n            data.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n          }\n          return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n        }\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(data) {\n        if (data === undefined) {\n          console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.');\n          var array = [];\n          for (var i = 0; i < this.count; i++) {\n            var index = i * this.data.stride + this.offset;\n            for (var j = 0; j < this.itemSize; j++) {\n              array.push(this.data.array[index + j]);\n            }\n          }\n\n          // de-interleave data and save it as an ordinary buffer attribute for now\n\n          return {\n            itemSize: this.itemSize,\n            type: this.array.constructor.name,\n            array: array,\n            normalized: this.normalized\n          };\n        } else {\n          // save as true interleaved attribute\n\n          if (data.interleavedBuffers === undefined) {\n            data.interleavedBuffers = {};\n          }\n          if (data.interleavedBuffers[this.data.uuid] === undefined) {\n            data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n          }\n          return {\n            isInterleavedBufferAttribute: true,\n            itemSize: this.itemSize,\n            data: this.data.uuid,\n            offset: this.offset,\n            normalized: this.normalized\n          };\n        }\n      }\n    }]);\n  }();\n  var SpriteMaterial = exports.SpriteMaterial = /*#__PURE__*/function (_Material3) {\n    function SpriteMaterial(parameters) {\n      var _this22;\n      (0, _classCallCheck2.default)(this, SpriteMaterial);\n      _this22 = _callSuper(this, SpriteMaterial);\n      _this22.isSpriteMaterial = true;\n      _this22.type = 'SpriteMaterial';\n      _this22.color = new Color(0xffffff);\n      _this22.map = null;\n      _this22.alphaMap = null;\n      _this22.rotation = 0;\n      _this22.sizeAttenuation = true;\n      _this22.transparent = true;\n      _this22.fog = true;\n      _this22.setValues(parameters);\n      return _this22;\n    }\n    (0, _inherits2.default)(SpriteMaterial, _Material3);\n    return (0, _createClass2.default)(SpriteMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(SpriteMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.rotation = source.rotation;\n        this.sizeAttenuation = source.sizeAttenuation;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var _geometry;\n  var _intersectPoint = /*@__PURE__*/new Vector3();\n  var _worldScale = /*@__PURE__*/new Vector3();\n  var _mvPosition = /*@__PURE__*/new Vector3();\n  var _alignedPosition = /*@__PURE__*/new Vector2();\n  var _rotatedPosition = /*@__PURE__*/new Vector2();\n  var _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n  var _vA = /*@__PURE__*/new Vector3();\n  var _vB = /*@__PURE__*/new Vector3();\n  var _vC = /*@__PURE__*/new Vector3();\n  var _uvA = /*@__PURE__*/new Vector2();\n  var _uvB = /*@__PURE__*/new Vector2();\n  var _uvC = /*@__PURE__*/new Vector2();\n  var Sprite = exports.Sprite = /*#__PURE__*/function (_Object3D5) {\n    function Sprite() {\n      var _this23;\n      var material = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SpriteMaterial();\n      (0, _classCallCheck2.default)(this, Sprite);\n      _this23 = _callSuper(this, Sprite);\n      _this23.isSprite = true;\n      _this23.type = 'Sprite';\n      if (_geometry === undefined) {\n        _geometry = new BufferGeometry();\n        var float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n        var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n        _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n        _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n        _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n      }\n      _this23.geometry = _geometry;\n      _this23.material = material;\n      _this23.center = new Vector2(0.5, 0.5);\n      return _this23;\n    }\n    (0, _inherits2.default)(Sprite, _Object3D5);\n    return (0, _createClass2.default)(Sprite, [{\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        if (raycaster.camera === null) {\n          console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n        }\n        _worldScale.setFromMatrixScale(this.matrixWorld);\n        _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n        this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n        _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n        if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n          _worldScale.multiplyScalar(-_mvPosition.z);\n        }\n        var rotation = this.material.rotation;\n        var sin, cos;\n        if (rotation !== 0) {\n          cos = Math.cos(rotation);\n          sin = Math.sin(rotation);\n        }\n        var center = this.center;\n        transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n        transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n        transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n        _uvA.set(0, 0);\n        _uvB.set(1, 0);\n        _uvC.set(1, 1);\n\n        // check first triangle\n        var intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n        if (intersect === null) {\n          // check second triangle\n          transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n          _uvB.set(0, 1);\n          intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n          if (intersect === null) {\n            return;\n          }\n        }\n        var distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n        if (distance < raycaster.near || distance > raycaster.far) return;\n        intersects.push({\n          distance: distance,\n          point: _intersectPoint.clone(),\n          uv: Triangle.getInterpolation(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n          face: null,\n          object: this\n        });\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Sprite, \"copy\", this, 3)([source, recursive]);\n        if (source.center !== undefined) this.center.copy(source.center);\n        this.material = source.material;\n        return this;\n      }\n    }]);\n  }(Object3D);\n  function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n    // compute position in camera space\n    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);\n\n    // to check if rotation is not zero\n    if (sin !== undefined) {\n      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n    } else {\n      _rotatedPosition.copy(_alignedPosition);\n    }\n    vertexPosition.copy(mvPosition);\n    vertexPosition.x += _rotatedPosition.x;\n    vertexPosition.y += _rotatedPosition.y;\n\n    // transform to world space\n    vertexPosition.applyMatrix4(_viewWorldMatrix);\n  }\n  var _v1$2 = /*@__PURE__*/new Vector3();\n  var _v2$1 = /*@__PURE__*/new Vector3();\n  var LOD = exports.LOD = /*#__PURE__*/function (_Object3D6) {\n    function LOD() {\n      var _this24;\n      (0, _classCallCheck2.default)(this, LOD);\n      _this24 = _callSuper(this, LOD);\n      _this24._currentLevel = 0;\n      _this24.type = 'LOD';\n      Object.defineProperties(_this24, {\n        levels: {\n          enumerable: true,\n          value: []\n        },\n        isLOD: {\n          value: true\n        }\n      });\n      _this24.autoUpdate = true;\n      return _this24;\n    }\n    (0, _inherits2.default)(LOD, _Object3D6);\n    return (0, _createClass2.default)(LOD, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LOD, \"copy\", this, 3)([source, false]);\n        var levels = source.levels;\n        for (var i = 0, l = levels.length; i < l; i++) {\n          var level = levels[i];\n          this.addLevel(level.object.clone(), level.distance, level.hysteresis);\n        }\n        this.autoUpdate = source.autoUpdate;\n        return this;\n      }\n    }, {\n      key: \"addLevel\",\n      value: function addLevel(object) {\n        var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var hysteresis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        distance = Math.abs(distance);\n        var levels = this.levels;\n        var l;\n        for (l = 0; l < levels.length; l++) {\n          if (distance < levels[l].distance) {\n            break;\n          }\n        }\n        levels.splice(l, 0, {\n          distance: distance,\n          hysteresis: hysteresis,\n          object: object\n        });\n        this.add(object);\n        return this;\n      }\n    }, {\n      key: \"removeLevel\",\n      value: function removeLevel(distance) {\n        var levels = this.levels;\n        for (var i = 0; i < levels.length; i++) {\n          if (levels[i].distance === distance) {\n            var removedElements = levels.splice(i, 1);\n            this.remove(removedElements[0].object);\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"getCurrentLevel\",\n      value: function getCurrentLevel() {\n        return this._currentLevel;\n      }\n    }, {\n      key: \"getObjectForDistance\",\n      value: function getObjectForDistance(distance) {\n        var levels = this.levels;\n        if (levels.length > 0) {\n          var i, l;\n          for (i = 1, l = levels.length; i < l; i++) {\n            var levelDistance = levels[i].distance;\n            if (levels[i].object.visible) {\n              levelDistance -= levelDistance * levels[i].hysteresis;\n            }\n            if (distance < levelDistance) {\n              break;\n            }\n          }\n          return levels[i - 1].object;\n        }\n        return null;\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var levels = this.levels;\n        if (levels.length > 0) {\n          _v1$2.setFromMatrixPosition(this.matrixWorld);\n          var distance = raycaster.ray.origin.distanceTo(_v1$2);\n          this.getObjectForDistance(distance).raycast(raycaster, intersects);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(camera) {\n        var levels = this.levels;\n        if (levels.length > 1) {\n          _v1$2.setFromMatrixPosition(camera.matrixWorld);\n          _v2$1.setFromMatrixPosition(this.matrixWorld);\n          var distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n          levels[0].object.visible = true;\n          var i, l;\n          for (i = 1, l = levels.length; i < l; i++) {\n            var levelDistance = levels[i].distance;\n            if (levels[i].object.visible) {\n              levelDistance -= levelDistance * levels[i].hysteresis;\n            }\n            if (distance >= levelDistance) {\n              levels[i - 1].object.visible = false;\n              levels[i].object.visible = true;\n            } else {\n              break;\n            }\n          }\n          this._currentLevel = i - 1;\n          for (; i < l; i++) {\n            levels[i].object.visible = false;\n          }\n        }\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(LOD, \"toJSON\", this, 3)([meta]);\n        if (this.autoUpdate === false) data.object.autoUpdate = false;\n        data.object.levels = [];\n        var levels = this.levels;\n        for (var i = 0, l = levels.length; i < l; i++) {\n          var level = levels[i];\n          data.object.levels.push({\n            object: level.object.uuid,\n            distance: level.distance,\n            hysteresis: level.hysteresis\n          });\n        }\n        return data;\n      }\n    }]);\n  }(Object3D);\n  var _basePosition = /*@__PURE__*/new Vector3();\n  var _skinIndex = /*@__PURE__*/new Vector4();\n  var _skinWeight = /*@__PURE__*/new Vector4();\n  var _vector3 = /*@__PURE__*/new Vector3();\n  var _matrix4 = /*@__PURE__*/new Matrix4();\n  var _vertex = /*@__PURE__*/new Vector3();\n  var _sphere$5 = /*@__PURE__*/new Sphere();\n  var _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n  var _ray$2 = /*@__PURE__*/new Ray();\n  var SkinnedMesh = exports.SkinnedMesh = /*#__PURE__*/function (_Mesh) {\n    function SkinnedMesh(geometry, material) {\n      var _this25;\n      (0, _classCallCheck2.default)(this, SkinnedMesh);\n      _this25 = _callSuper(this, SkinnedMesh, [geometry, material]);\n      _this25.isSkinnedMesh = true;\n      _this25.type = 'SkinnedMesh';\n      _this25.bindMode = AttachedBindMode;\n      _this25.bindMatrix = new Matrix4();\n      _this25.bindMatrixInverse = new Matrix4();\n      _this25.boundingBox = null;\n      _this25.boundingSphere = null;\n      return _this25;\n    }\n    (0, _inherits2.default)(SkinnedMesh, _Mesh);\n    return (0, _createClass2.default)(SkinnedMesh, [{\n      key: \"computeBoundingBox\",\n      value: function computeBoundingBox() {\n        var geometry = this.geometry;\n        if (this.boundingBox === null) {\n          this.boundingBox = new Box3();\n        }\n        this.boundingBox.makeEmpty();\n        var positionAttribute = geometry.getAttribute('position');\n        for (var i = 0; i < positionAttribute.count; i++) {\n          this.getVertexPosition(i, _vertex);\n          this.boundingBox.expandByPoint(_vertex);\n        }\n      }\n    }, {\n      key: \"computeBoundingSphere\",\n      value: function computeBoundingSphere() {\n        var geometry = this.geometry;\n        if (this.boundingSphere === null) {\n          this.boundingSphere = new Sphere();\n        }\n        this.boundingSphere.makeEmpty();\n        var positionAttribute = geometry.getAttribute('position');\n        for (var i = 0; i < positionAttribute.count; i++) {\n          this.getVertexPosition(i, _vertex);\n          this.boundingSphere.expandByPoint(_vertex);\n        }\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(SkinnedMesh, \"copy\", this, 3)([source, recursive]);\n        this.bindMode = source.bindMode;\n        this.bindMatrix.copy(source.bindMatrix);\n        this.bindMatrixInverse.copy(source.bindMatrixInverse);\n        this.skeleton = source.skeleton;\n        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();\n        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();\n        return this;\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var material = this.material;\n        var matrixWorld = this.matrixWorld;\n        if (material === undefined) return;\n\n        // test with bounding sphere in world space\n\n        if (this.boundingSphere === null) this.computeBoundingSphere();\n        _sphere$5.copy(this.boundingSphere);\n        _sphere$5.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(_sphere$5) === false) return;\n\n        // convert ray to local space of skinned mesh\n\n        _inverseMatrix$2.copy(matrixWorld).invert();\n        _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n        // test with bounding box in local space\n\n        if (this.boundingBox !== null) {\n          if (_ray$2.intersectsBox(this.boundingBox) === false) return;\n        }\n\n        // test for intersections with geometry\n\n        this._computeIntersections(raycaster, intersects, _ray$2);\n      }\n    }, {\n      key: \"getVertexPosition\",\n      value: function getVertexPosition(index, target) {\n        _superPropGet(SkinnedMesh, \"getVertexPosition\", this, 3)([index, target]);\n        this.applyBoneTransform(index, target);\n        return target;\n      }\n    }, {\n      key: \"bind\",\n      value: function bind(skeleton, bindMatrix) {\n        this.skeleton = skeleton;\n        if (bindMatrix === undefined) {\n          this.updateMatrixWorld(true);\n          this.skeleton.calculateInverses();\n          bindMatrix = this.matrixWorld;\n        }\n        this.bindMatrix.copy(bindMatrix);\n        this.bindMatrixInverse.copy(bindMatrix).invert();\n      }\n    }, {\n      key: \"pose\",\n      value: function pose() {\n        this.skeleton.pose();\n      }\n    }, {\n      key: \"normalizeSkinWeights\",\n      value: function normalizeSkinWeights() {\n        var vector = new Vector4();\n        var skinWeight = this.geometry.attributes.skinWeight;\n        for (var i = 0, l = skinWeight.count; i < l; i++) {\n          vector.fromBufferAttribute(skinWeight, i);\n          var scale = 1.0 / vector.manhattanLength();\n          if (scale !== Infinity) {\n            vector.multiplyScalar(scale);\n          } else {\n            vector.set(1, 0, 0, 0); // do something reasonable\n          }\n          skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n        }\n      }\n    }, {\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        _superPropGet(SkinnedMesh, \"updateMatrixWorld\", this, 3)([force]);\n        if (this.bindMode === AttachedBindMode) {\n          this.bindMatrixInverse.copy(this.matrixWorld).invert();\n        } else if (this.bindMode === DetachedBindMode) {\n          this.bindMatrixInverse.copy(this.bindMatrix).invert();\n        } else {\n          console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n        }\n      }\n    }, {\n      key: \"applyBoneTransform\",\n      value: function applyBoneTransform(index, vector) {\n        var skeleton = this.skeleton;\n        var geometry = this.geometry;\n        _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n        _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n        _basePosition.copy(vector).applyMatrix4(this.bindMatrix);\n        vector.set(0, 0, 0);\n        for (var i = 0; i < 4; i++) {\n          var weight = _skinWeight.getComponent(i);\n          if (weight !== 0) {\n            var boneIndex = _skinIndex.getComponent(i);\n            _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n            vector.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);\n          }\n        }\n        return vector.applyMatrix4(this.bindMatrixInverse);\n      }\n    }]);\n  }(Mesh);\n  var Bone = exports.Bone = /*#__PURE__*/function (_Object3D7) {\n    function Bone() {\n      var _this26;\n      (0, _classCallCheck2.default)(this, Bone);\n      _this26 = _callSuper(this, Bone);\n      _this26.isBone = true;\n      _this26.type = 'Bone';\n      return _this26;\n    }\n    (0, _inherits2.default)(Bone, _Object3D7);\n    return (0, _createClass2.default)(Bone);\n  }(Object3D);\n  var DataTexture = exports.DataTexture = /*#__PURE__*/function (_Texture4) {\n    function DataTexture() {\n      var _this27;\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var format = arguments.length > 3 ? arguments[3] : undefined;\n      var type = arguments.length > 4 ? arguments[4] : undefined;\n      var mapping = arguments.length > 5 ? arguments[5] : undefined;\n      var wrapS = arguments.length > 6 ? arguments[6] : undefined;\n      var wrapT = arguments.length > 7 ? arguments[7] : undefined;\n      var magFilter = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : NearestFilter;\n      var minFilter = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NearestFilter;\n      var anisotropy = arguments.length > 10 ? arguments[10] : undefined;\n      var colorSpace = arguments.length > 11 ? arguments[11] : undefined;\n      (0, _classCallCheck2.default)(this, DataTexture);\n      _this27 = _callSuper(this, DataTexture, [null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace]);\n      _this27.isDataTexture = true;\n      _this27.image = {\n        data: data,\n        width: width,\n        height: height\n      };\n      _this27.generateMipmaps = false;\n      _this27.flipY = false;\n      _this27.unpackAlignment = 1;\n      return _this27;\n    }\n    (0, _inherits2.default)(DataTexture, _Texture4);\n    return (0, _createClass2.default)(DataTexture);\n  }(Texture);\n  var _offsetMatrix = /*@__PURE__*/new Matrix4();\n  var _identityMatrix = /*@__PURE__*/new Matrix4();\n  var Skeleton = exports.Skeleton = /*#__PURE__*/function () {\n    function Skeleton() {\n      var bones = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var boneInverses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      (0, _classCallCheck2.default)(this, Skeleton);\n      this.uuid = generateUUID();\n      this.bones = bones.slice(0);\n      this.boneInverses = boneInverses;\n      this.boneMatrices = null;\n      this.boneTexture = null;\n      this.init();\n    }\n    return (0, _createClass2.default)(Skeleton, [{\n      key: \"init\",\n      value: function init() {\n        var bones = this.bones;\n        var boneInverses = this.boneInverses;\n        this.boneMatrices = new Float32Array(bones.length * 16);\n\n        // calculate inverse bone matrices if necessary\n\n        if (boneInverses.length === 0) {\n          this.calculateInverses();\n        } else {\n          // handle special case\n\n          if (bones.length !== boneInverses.length) {\n            console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n            this.boneInverses = [];\n            for (var i = 0, il = this.bones.length; i < il; i++) {\n              this.boneInverses.push(new Matrix4());\n            }\n          }\n        }\n      }\n    }, {\n      key: \"calculateInverses\",\n      value: function calculateInverses() {\n        this.boneInverses.length = 0;\n        for (var i = 0, il = this.bones.length; i < il; i++) {\n          var inverse = new Matrix4();\n          if (this.bones[i]) {\n            inverse.copy(this.bones[i].matrixWorld).invert();\n          }\n          this.boneInverses.push(inverse);\n        }\n      }\n    }, {\n      key: \"pose\",\n      value: function pose() {\n        // recover the bind-time world matrices\n\n        for (var i = 0, il = this.bones.length; i < il; i++) {\n          var bone = this.bones[i];\n          if (bone) {\n            bone.matrixWorld.copy(this.boneInverses[i]).invert();\n          }\n        }\n\n        // compute the local matrices, positions, rotations and scales\n\n        for (var _i24 = 0, _il9 = this.bones.length; _i24 < _il9; _i24++) {\n          var _bone = this.bones[_i24];\n          if (_bone) {\n            if (_bone.parent && _bone.parent.isBone) {\n              _bone.matrix.copy(_bone.parent.matrixWorld).invert();\n              _bone.matrix.multiply(_bone.matrixWorld);\n            } else {\n              _bone.matrix.copy(_bone.matrixWorld);\n            }\n            _bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n          }\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var bones = this.bones;\n        var boneInverses = this.boneInverses;\n        var boneMatrices = this.boneMatrices;\n        var boneTexture = this.boneTexture;\n\n        // flatten bone matrices to array\n\n        for (var i = 0, il = bones.length; i < il; i++) {\n          // compute the offset between the current and the original transform\n\n          var matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n          _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n          _offsetMatrix.toArray(boneMatrices, i * 16);\n        }\n        if (boneTexture !== null) {\n          boneTexture.needsUpdate = true;\n        }\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new Skeleton(this.bones, this.boneInverses);\n      }\n    }, {\n      key: \"computeBoneTexture\",\n      value: function computeBoneTexture() {\n        // layout (1 matrix = 4 pixels)\n        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n        var size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n        size = Math.ceil(size / 4) * 4;\n        size = Math.max(size, 4);\n        var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n        boneMatrices.set(this.boneMatrices); // copy current values\n\n        var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n        boneTexture.needsUpdate = true;\n        this.boneMatrices = boneMatrices;\n        this.boneTexture = boneTexture;\n        return this;\n      }\n    }, {\n      key: \"getBoneByName\",\n      value: function getBoneByName(name) {\n        for (var i = 0, il = this.bones.length; i < il; i++) {\n          var bone = this.bones[i];\n          if (bone.name === name) {\n            return bone;\n          }\n        }\n        return undefined;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this.boneTexture !== null) {\n          this.boneTexture.dispose();\n          this.boneTexture = null;\n        }\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json, bones) {\n        this.uuid = json.uuid;\n        for (var i = 0, l = json.bones.length; i < l; i++) {\n          var uuid = json.bones[i];\n          var bone = bones[uuid];\n          if (bone === undefined) {\n            console.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n            bone = new Bone();\n          }\n          this.bones.push(bone);\n          this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n        }\n        this.init();\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = {\n          metadata: {\n            version: 4.6,\n            type: 'Skeleton',\n            generator: 'Skeleton.toJSON'\n          },\n          bones: [],\n          boneInverses: []\n        };\n        data.uuid = this.uuid;\n        var bones = this.bones;\n        var boneInverses = this.boneInverses;\n        for (var i = 0, l = bones.length; i < l; i++) {\n          var bone = bones[i];\n          data.bones.push(bone.uuid);\n          var boneInverse = boneInverses[i];\n          data.boneInverses.push(boneInverse.toArray());\n        }\n        return data;\n      }\n    }]);\n  }();\n  var InstancedBufferAttribute = exports.InstancedBufferAttribute = /*#__PURE__*/function (_BufferAttribute10) {\n    function InstancedBufferAttribute(array, itemSize, normalized) {\n      var _this28;\n      var meshPerAttribute = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, InstancedBufferAttribute);\n      _this28 = _callSuper(this, InstancedBufferAttribute, [array, itemSize, normalized]);\n      _this28.isInstancedBufferAttribute = true;\n      _this28.meshPerAttribute = meshPerAttribute;\n      return _this28;\n    }\n    (0, _inherits2.default)(InstancedBufferAttribute, _BufferAttribute10);\n    return (0, _createClass2.default)(InstancedBufferAttribute, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(InstancedBufferAttribute, \"copy\", this, 3)([source]);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(InstancedBufferAttribute, \"toJSON\", this, 3)([]);\n        data.meshPerAttribute = this.meshPerAttribute;\n        data.isInstancedBufferAttribute = true;\n        return data;\n      }\n    }]);\n  }(BufferAttribute);\n  var _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n  var _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n  var _instanceIntersects = [];\n  var _box3 = /*@__PURE__*/new Box3();\n  var _identity = /*@__PURE__*/new Matrix4();\n  var _mesh$1 = /*@__PURE__*/new Mesh();\n  var _sphere$4 = /*@__PURE__*/new Sphere();\n  var InstancedMesh = exports.InstancedMesh = /*#__PURE__*/function (_Mesh2) {\n    function InstancedMesh(geometry, material, count) {\n      var _this29;\n      (0, _classCallCheck2.default)(this, InstancedMesh);\n      _this29 = _callSuper(this, InstancedMesh, [geometry, material]);\n      _this29.isInstancedMesh = true;\n      _this29.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);\n      _this29.instanceColor = null;\n      _this29.morphTexture = null;\n      _this29.count = count;\n      _this29.boundingBox = null;\n      _this29.boundingSphere = null;\n      for (var i = 0; i < count; i++) {\n        _this29.setMatrixAt(i, _identity);\n      }\n      return _this29;\n    }\n    (0, _inherits2.default)(InstancedMesh, _Mesh2);\n    return (0, _createClass2.default)(InstancedMesh, [{\n      key: \"computeBoundingBox\",\n      value: function computeBoundingBox() {\n        var geometry = this.geometry;\n        var count = this.count;\n        if (this.boundingBox === null) {\n          this.boundingBox = new Box3();\n        }\n        if (geometry.boundingBox === null) {\n          geometry.computeBoundingBox();\n        }\n        this.boundingBox.makeEmpty();\n        for (var i = 0; i < count; i++) {\n          this.getMatrixAt(i, _instanceLocalMatrix);\n          _box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);\n          this.boundingBox.union(_box3);\n        }\n      }\n    }, {\n      key: \"computeBoundingSphere\",\n      value: function computeBoundingSphere() {\n        var geometry = this.geometry;\n        var count = this.count;\n        if (this.boundingSphere === null) {\n          this.boundingSphere = new Sphere();\n        }\n        if (geometry.boundingSphere === null) {\n          geometry.computeBoundingSphere();\n        }\n        this.boundingSphere.makeEmpty();\n        for (var i = 0; i < count; i++) {\n          this.getMatrixAt(i, _instanceLocalMatrix);\n          _sphere$4.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);\n          this.boundingSphere.union(_sphere$4);\n        }\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(InstancedMesh, \"copy\", this, 3)([source, recursive]);\n        this.instanceMatrix.copy(source.instanceMatrix);\n        if (source.morphTexture !== null) this.morphTexture = source.morphTexture.clone();\n        if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n        this.count = source.count;\n        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();\n        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();\n        return this;\n      }\n    }, {\n      key: \"getColorAt\",\n      value: function getColorAt(index, color) {\n        color.fromArray(this.instanceColor.array, index * 3);\n      }\n    }, {\n      key: \"getMatrixAt\",\n      value: function getMatrixAt(index, matrix) {\n        matrix.fromArray(this.instanceMatrix.array, index * 16);\n      }\n    }, {\n      key: \"getMorphAt\",\n      value: function getMorphAt(index, object) {\n        var objectInfluences = object.morphTargetInfluences;\n        var array = this.morphTexture.source.data.data;\n        var len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\n\n        var dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\n\n        for (var i = 0; i < objectInfluences.length; i++) {\n          objectInfluences[i] = array[dataIndex + i];\n        }\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var matrixWorld = this.matrixWorld;\n        var raycastTimes = this.count;\n        _mesh$1.geometry = this.geometry;\n        _mesh$1.material = this.material;\n        if (_mesh$1.material === undefined) return;\n\n        // test with bounding sphere first\n\n        if (this.boundingSphere === null) this.computeBoundingSphere();\n        _sphere$4.copy(this.boundingSphere);\n        _sphere$4.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(_sphere$4) === false) return;\n\n        // now test each instance\n\n        for (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n          // calculate the world matrix for each instance\n\n          this.getMatrixAt(instanceId, _instanceLocalMatrix);\n          _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);\n\n          // the mesh represents this single instance\n\n          _mesh$1.matrixWorld = _instanceWorldMatrix;\n          _mesh$1.raycast(raycaster, _instanceIntersects);\n\n          // process the result of raycast\n\n          for (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n            var _intersect = _instanceIntersects[i];\n            _intersect.instanceId = instanceId;\n            _intersect.object = this;\n            intersects.push(_intersect);\n          }\n          _instanceIntersects.length = 0;\n        }\n      }\n    }, {\n      key: \"setColorAt\",\n      value: function setColorAt(index, color) {\n        if (this.instanceColor === null) {\n          this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3);\n        }\n        color.toArray(this.instanceColor.array, index * 3);\n      }\n    }, {\n      key: \"setMatrixAt\",\n      value: function setMatrixAt(index, matrix) {\n        matrix.toArray(this.instanceMatrix.array, index * 16);\n      }\n    }, {\n      key: \"setMorphAt\",\n      value: function setMorphAt(index, object) {\n        var objectInfluences = object.morphTargetInfluences;\n        var len = objectInfluences.length + 1; // morphBaseInfluence + all influences\n\n        if (this.morphTexture === null) {\n          this.morphTexture = new DataTexture(new Float32Array(len * this.count), len, this.count, RedFormat, FloatType);\n        }\n        var array = this.morphTexture.source.data.data;\n        var morphInfluencesSum = 0;\n        for (var i = 0; i < objectInfluences.length; i++) {\n          morphInfluencesSum += objectInfluences[i];\n        }\n        var morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n        var dataIndex = len * index;\n        array[dataIndex] = morphBaseInfluence;\n        array.set(objectInfluences, dataIndex + 1);\n      }\n    }, {\n      key: \"updateMorphTargets\",\n      value: function updateMorphTargets() {}\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n        if (this.morphTexture !== null) {\n          this.morphTexture.dispose();\n          this.morphTexture = null;\n        }\n        return this;\n      }\n    }]);\n  }(Mesh);\n  var _vector1 = /*@__PURE__*/new Vector3();\n  var _vector2 = /*@__PURE__*/new Vector3();\n  var _normalMatrix = /*@__PURE__*/new Matrix3();\n  var Plane = exports.Plane = /*#__PURE__*/function () {\n    function Plane() {\n      var normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(1, 0, 0);\n      var constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, Plane);\n      this.isPlane = true;\n\n      // normal is assumed to be normalized\n\n      this.normal = normal;\n      this.constant = constant;\n    }\n    return (0, _createClass2.default)(Plane, [{\n      key: \"set\",\n      value: function set(normal, constant) {\n        this.normal.copy(normal);\n        this.constant = constant;\n        return this;\n      }\n    }, {\n      key: \"setComponents\",\n      value: function setComponents(x, y, z, w) {\n        this.normal.set(x, y, z);\n        this.constant = w;\n        return this;\n      }\n    }, {\n      key: \"setFromNormalAndCoplanarPoint\",\n      value: function setFromNormalAndCoplanarPoint(normal, point) {\n        this.normal.copy(normal);\n        this.constant = -point.dot(this.normal);\n        return this;\n      }\n    }, {\n      key: \"setFromCoplanarPoints\",\n      value: function setFromCoplanarPoints(a, b, c) {\n        var normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();\n\n        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n        this.setFromNormalAndCoplanarPoint(normal, a);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(plane) {\n        this.normal.copy(plane.normal);\n        this.constant = plane.constant;\n        return this;\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize() {\n        // Note: will lead to a divide by zero if the plane is invalid.\n\n        var inverseNormalLength = 1.0 / this.normal.length();\n        this.normal.multiplyScalar(inverseNormalLength);\n        this.constant *= inverseNormalLength;\n        return this;\n      }\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        this.constant *= -1;\n        this.normal.negate();\n        return this;\n      }\n    }, {\n      key: \"distanceToPoint\",\n      value: function distanceToPoint(point) {\n        return this.normal.dot(point) + this.constant;\n      }\n    }, {\n      key: \"distanceToSphere\",\n      value: function distanceToSphere(sphere) {\n        return this.distanceToPoint(sphere.center) - sphere.radius;\n      }\n    }, {\n      key: \"projectPoint\",\n      value: function projectPoint(point, target) {\n        return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));\n      }\n    }, {\n      key: \"intersectLine\",\n      value: function intersectLine(line, target) {\n        var direction = line.delta(_vector1);\n        var denominator = this.normal.dot(direction);\n        if (denominator === 0) {\n          // line is coplanar, return origin\n          if (this.distanceToPoint(line.start) === 0) {\n            return target.copy(line.start);\n          }\n\n          // Unsure if this is the correct method to handle this case.\n          return null;\n        }\n        var t = -(line.start.dot(this.normal) + this.constant) / denominator;\n        if (t < 0 || t > 1) {\n          return null;\n        }\n        return target.copy(line.start).addScaledVector(direction, t);\n      }\n    }, {\n      key: \"intersectsLine\",\n      value: function intersectsLine(line) {\n        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n        var startSign = this.distanceToPoint(line.start);\n        var endSign = this.distanceToPoint(line.end);\n        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        return box.intersectsPlane(this);\n      }\n    }, {\n      key: \"intersectsSphere\",\n      value: function intersectsSphere(sphere) {\n        return sphere.intersectsPlane(this);\n      }\n    }, {\n      key: \"coplanarPoint\",\n      value: function coplanarPoint(target) {\n        return target.copy(this.normal).multiplyScalar(-this.constant);\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix, optionalNormalMatrix) {\n        var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n        var referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n        var normal = this.normal.applyMatrix3(normalMatrix).normalize();\n        this.constant = -referencePoint.dot(normal);\n        return this;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate(offset) {\n        this.constant -= offset.dot(this.normal);\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(plane) {\n        return plane.normal.equals(this.normal) && plane.constant === this.constant;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  var _sphere$3 = /*@__PURE__*/new Sphere();\n  var _vector$6 = /*@__PURE__*/new Vector3();\n  var Frustum = exports.Frustum = /*#__PURE__*/function () {\n    function Frustum() {\n      var p0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Plane();\n      var p1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Plane();\n      var p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Plane();\n      var p3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Plane();\n      var p4 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Plane();\n      var p5 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Plane();\n      (0, _classCallCheck2.default)(this, Frustum);\n      this.planes = [p0, p1, p2, p3, p4, p5];\n    }\n    return (0, _createClass2.default)(Frustum, [{\n      key: \"set\",\n      value: function set(p0, p1, p2, p3, p4, p5) {\n        var planes = this.planes;\n        planes[0].copy(p0);\n        planes[1].copy(p1);\n        planes[2].copy(p2);\n        planes[3].copy(p3);\n        planes[4].copy(p4);\n        planes[5].copy(p5);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(frustum) {\n        var planes = this.planes;\n        for (var i = 0; i < 6; i++) {\n          planes[i].copy(frustum.planes[i]);\n        }\n        return this;\n      }\n    }, {\n      key: \"setFromProjectionMatrix\",\n      value: function setFromProjectionMatrix(m) {\n        var coordinateSystem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGLCoordinateSystem;\n        var planes = this.planes;\n        var me = m.elements;\n        var me0 = me[0],\n          me1 = me[1],\n          me2 = me[2],\n          me3 = me[3];\n        var me4 = me[4],\n          me5 = me[5],\n          me6 = me[6],\n          me7 = me[7];\n        var me8 = me[8],\n          me9 = me[9],\n          me10 = me[10],\n          me11 = me[11];\n        var me12 = me[12],\n          me13 = me[13],\n          me14 = me[14],\n          me15 = me[15];\n        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n        if (coordinateSystem === WebGLCoordinateSystem) {\n          planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n        } else if (coordinateSystem === WebGPUCoordinateSystem) {\n          planes[5].setComponents(me2, me6, me10, me14).normalize();\n        } else {\n          throw new Error('THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem);\n        }\n        return this;\n      }\n    }, {\n      key: \"intersectsObject\",\n      value: function intersectsObject(object) {\n        if (object.boundingSphere !== undefined) {\n          if (object.boundingSphere === null) object.computeBoundingSphere();\n          _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);\n        } else {\n          var geometry = object.geometry;\n          if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n          _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n        }\n        return this.intersectsSphere(_sphere$3);\n      }\n    }, {\n      key: \"intersectsSprite\",\n      value: function intersectsSprite(sprite) {\n        _sphere$3.center.set(0, 0, 0);\n        _sphere$3.radius = 0.7071067811865476;\n        _sphere$3.applyMatrix4(sprite.matrixWorld);\n        return this.intersectsSphere(_sphere$3);\n      }\n    }, {\n      key: \"intersectsSphere\",\n      value: function intersectsSphere(sphere) {\n        var planes = this.planes;\n        var center = sphere.center;\n        var negRadius = -sphere.radius;\n        for (var i = 0; i < 6; i++) {\n          var distance = planes[i].distanceToPoint(center);\n          if (distance < negRadius) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        var planes = this.planes;\n        for (var i = 0; i < 6; i++) {\n          var plane = planes[i];\n\n          // corner at max distance\n\n          _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n          _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n          _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n          if (plane.distanceToPoint(_vector$6) < 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }, {\n      key: \"containsPoint\",\n      value: function containsPoint(point) {\n        var planes = this.planes;\n        for (var i = 0; i < 6; i++) {\n          if (planes[i].distanceToPoint(point) < 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  function ascIdSort(a, b) {\n    return a - b;\n  }\n  function sortOpaque(a, b) {\n    return a.z - b.z;\n  }\n  function sortTransparent(a, b) {\n    return b.z - a.z;\n  }\n  var MultiDrawRenderList = /*#__PURE__*/function () {\n    function MultiDrawRenderList() {\n      (0, _classCallCheck2.default)(this, MultiDrawRenderList);\n      this.index = 0;\n      this.pool = [];\n      this.list = [];\n    }\n    return (0, _createClass2.default)(MultiDrawRenderList, [{\n      key: \"push\",\n      value: function push(start, count, z, index) {\n        var pool = this.pool;\n        var list = this.list;\n        if (this.index >= pool.length) {\n          pool.push({\n            start: -1,\n            count: -1,\n            z: -1,\n            index: -1\n          });\n        }\n        var item = pool[this.index];\n        list.push(item);\n        this.index++;\n        item.start = start;\n        item.count = count;\n        item.z = z;\n        item.index = index;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.list.length = 0;\n        this.index = 0;\n      }\n    }]);\n  }();\n  var _matrix$1 = /*@__PURE__*/new Matrix4();\n  var _whiteColor = /*@__PURE__*/new Color(1, 1, 1);\n  var _frustum = /*@__PURE__*/new Frustum();\n  var _box$1 = /*@__PURE__*/new Box3();\n  var _sphere$2 = /*@__PURE__*/new Sphere();\n  var _vector$5 = /*@__PURE__*/new Vector3();\n  var _forward = /*@__PURE__*/new Vector3();\n  var _temp = /*@__PURE__*/new Vector3();\n  var _renderList = /*@__PURE__*/new MultiDrawRenderList();\n  var _mesh = /*@__PURE__*/new Mesh();\n  var _batchIntersects = [];\n\n  // copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\n  function copyAttributeData(src, target) {\n    var targetOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var itemSize = target.itemSize;\n    if (src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor) {\n      // use the component getters and setters if the array data cannot\n      // be copied directly\n      var vertexCount = src.count;\n      for (var i = 0; i < vertexCount; i++) {\n        for (var c = 0; c < itemSize; c++) {\n          target.setComponent(i + targetOffset, c, src.getComponent(i, c));\n        }\n      }\n    } else {\n      // faster copy approach using typed array set function\n      target.array.set(src.array, targetOffset * itemSize);\n    }\n    target.needsUpdate = true;\n  }\n\n  // safely copies array contents to a potentially smaller array\n  function copyArrayContents(src, target) {\n    if (src.constructor !== target.constructor) {\n      // if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\n      var len = Math.min(src.length, target.length);\n      for (var i = 0; i < len; i++) {\n        target[i] = src[i];\n      }\n    } else {\n      // if the arrays use the same data layout we can use a fast block copy\n      var _len = Math.min(src.length, target.length);\n      target.set(new src.constructor(src.buffer, 0, _len));\n    }\n  }\n  var BatchedMesh = exports.BatchedMesh = /*#__PURE__*/function (_Mesh3) {\n    function BatchedMesh(maxInstanceCount, maxVertexCount) {\n      var _this30;\n      var maxIndexCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxVertexCount * 2;\n      var material = arguments.length > 3 ? arguments[3] : undefined;\n      (0, _classCallCheck2.default)(this, BatchedMesh);\n      _this30 = _callSuper(this, BatchedMesh, [new BufferGeometry(), material]);\n      _this30.isBatchedMesh = true;\n      _this30.perObjectFrustumCulled = true;\n      _this30.sortObjects = true;\n      _this30.boundingBox = null;\n      _this30.boundingSphere = null;\n      _this30.customSort = null;\n\n      // stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\n      _this30._instanceInfo = [];\n      _this30._geometryInfo = [];\n\n      // instance, geometry ids that have been set as inactive, and are available to be overwritten\n      _this30._availableInstanceIds = [];\n      _this30._availableGeometryIds = [];\n\n      // used to track where the next point is that geometry should be inserted\n      _this30._nextIndexStart = 0;\n      _this30._nextVertexStart = 0;\n      _this30._geometryCount = 0;\n\n      // flags\n      _this30._visibilityChanged = true;\n      _this30._geometryInitialized = false;\n\n      // cached user options\n      _this30._maxInstanceCount = maxInstanceCount;\n      _this30._maxVertexCount = maxVertexCount;\n      _this30._maxIndexCount = maxIndexCount;\n\n      // buffers for multi draw\n      _this30._multiDrawCounts = new Int32Array(maxInstanceCount);\n      _this30._multiDrawStarts = new Int32Array(maxInstanceCount);\n      _this30._multiDrawCount = 0;\n      _this30._multiDrawInstances = null;\n\n      // Local matrix per geometry by using data texture\n      _this30._matricesTexture = null;\n      _this30._indirectTexture = null;\n      _this30._colorsTexture = null;\n      _this30._initMatricesTexture();\n      _this30._initIndirectTexture();\n      return _this30;\n    }\n    (0, _inherits2.default)(BatchedMesh, _Mesh3);\n    return (0, _createClass2.default)(BatchedMesh, [{\n      key: \"maxInstanceCount\",\n      get: function get() {\n        return this._maxInstanceCount;\n      }\n    }, {\n      key: \"instanceCount\",\n      get: function get() {\n        return this._instanceInfo.length - this._availableInstanceIds.length;\n      }\n    }, {\n      key: \"unusedVertexCount\",\n      get: function get() {\n        return this._maxVertexCount - this._nextVertexStart;\n      }\n    }, {\n      key: \"unusedIndexCount\",\n      get: function get() {\n        return this._maxIndexCount - this._nextIndexStart;\n      }\n    }, {\n      key: \"_initMatricesTexture\",\n      value: function _initMatricesTexture() {\n        // layout (1 matrix = 4 pixels)\n        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n        //  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n        //       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n        //       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n        //       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\n\n        var size = Math.sqrt(this._maxInstanceCount * 4); // 4 pixels needed for 1 matrix\n        size = Math.ceil(size / 4) * 4;\n        size = Math.max(size, 4);\n        var matricesArray = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n        var matricesTexture = new DataTexture(matricesArray, size, size, RGBAFormat, FloatType);\n        this._matricesTexture = matricesTexture;\n      }\n    }, {\n      key: \"_initIndirectTexture\",\n      value: function _initIndirectTexture() {\n        var size = Math.sqrt(this._maxInstanceCount);\n        size = Math.ceil(size);\n        var indirectArray = new Uint32Array(size * size);\n        var indirectTexture = new DataTexture(indirectArray, size, size, RedIntegerFormat, UnsignedIntType);\n        this._indirectTexture = indirectTexture;\n      }\n    }, {\n      key: \"_initColorsTexture\",\n      value: function _initColorsTexture() {\n        var size = Math.sqrt(this._maxInstanceCount);\n        size = Math.ceil(size);\n\n        // 4 floats per RGBA pixel initialized to white\n        var colorsArray = new Float32Array(size * size * 4).fill(1);\n        var colorsTexture = new DataTexture(colorsArray, size, size, RGBAFormat, FloatType);\n        colorsTexture.colorSpace = ColorManagement.workingColorSpace;\n        this._colorsTexture = colorsTexture;\n      }\n    }, {\n      key: \"_initializeGeometry\",\n      value: function _initializeGeometry(reference) {\n        var geometry = this.geometry;\n        var maxVertexCount = this._maxVertexCount;\n        var maxIndexCount = this._maxIndexCount;\n        if (this._geometryInitialized === false) {\n          for (var attributeName in reference.attributes) {\n            var srcAttribute = reference.getAttribute(attributeName);\n            var array = srcAttribute.array,\n              itemSize = srcAttribute.itemSize,\n              normalized = srcAttribute.normalized;\n            var dstArray = new array.constructor(maxVertexCount * itemSize);\n            var dstAttribute = new BufferAttribute(dstArray, itemSize, normalized);\n            geometry.setAttribute(attributeName, dstAttribute);\n          }\n          if (reference.getIndex() !== null) {\n            // Reserve last u16 index for primitive restart.\n            var indexArray = maxVertexCount > 65535 ? new Uint32Array(maxIndexCount) : new Uint16Array(maxIndexCount);\n            geometry.setIndex(new BufferAttribute(indexArray, 1));\n          }\n          this._geometryInitialized = true;\n        }\n      }\n\n      // Make sure the geometry is compatible with the existing combined geometry attributes\n    }, {\n      key: \"_validateGeometry\",\n      value: function _validateGeometry(geometry) {\n        // check to ensure the geometries are using consistent attributes and indices\n        var batchGeometry = this.geometry;\n        if (Boolean(geometry.getIndex()) !== Boolean(batchGeometry.getIndex())) {\n          throw new Error('THREE.BatchedMesh: All geometries must consistently have \"index\".');\n        }\n        for (var attributeName in batchGeometry.attributes) {\n          if (!geometry.hasAttribute(attributeName)) {\n            throw new Error(`THREE.BatchedMesh: Added geometry missing \"${attributeName}\". All geometries must have consistent attributes.`);\n          }\n          var srcAttribute = geometry.getAttribute(attributeName);\n          var dstAttribute = batchGeometry.getAttribute(attributeName);\n          if (srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized) {\n            throw new Error('THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.');\n          }\n        }\n      }\n    }, {\n      key: \"validateInstanceId\",\n      value: function validateInstanceId(instanceId) {\n        var instanceInfo = this._instanceInfo;\n        if (instanceId < 0 || instanceId >= instanceInfo.length || instanceInfo[instanceId].active === false) {\n          throw new Error(`THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.`);\n        }\n      }\n    }, {\n      key: \"validateGeometryId\",\n      value: function validateGeometryId(geometryId) {\n        var geometryInfoList = this._geometryInfo;\n        if (geometryId < 0 || geometryId >= geometryInfoList.length || geometryInfoList[geometryId].active === false) {\n          throw new Error(`THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.`);\n        }\n      }\n    }, {\n      key: \"setCustomSort\",\n      value: function setCustomSort(func) {\n        this.customSort = func;\n        return this;\n      }\n    }, {\n      key: \"computeBoundingBox\",\n      value: function computeBoundingBox() {\n        if (this.boundingBox === null) {\n          this.boundingBox = new Box3();\n        }\n        var boundingBox = this.boundingBox;\n        var instanceInfo = this._instanceInfo;\n        boundingBox.makeEmpty();\n        for (var i = 0, l = instanceInfo.length; i < l; i++) {\n          if (instanceInfo[i].active === false) continue;\n          var geometryId = instanceInfo[i].geometryIndex;\n          this.getMatrixAt(i, _matrix$1);\n          this.getBoundingBoxAt(geometryId, _box$1).applyMatrix4(_matrix$1);\n          boundingBox.union(_box$1);\n        }\n      }\n    }, {\n      key: \"computeBoundingSphere\",\n      value: function computeBoundingSphere() {\n        if (this.boundingSphere === null) {\n          this.boundingSphere = new Sphere();\n        }\n        var boundingSphere = this.boundingSphere;\n        var instanceInfo = this._instanceInfo;\n        boundingSphere.makeEmpty();\n        for (var i = 0, l = instanceInfo.length; i < l; i++) {\n          if (instanceInfo[i].active === false) continue;\n          var geometryId = instanceInfo[i].geometryIndex;\n          this.getMatrixAt(i, _matrix$1);\n          this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n          boundingSphere.union(_sphere$2);\n        }\n      }\n    }, {\n      key: \"addInstance\",\n      value: function addInstance(geometryId) {\n        var atCapacity = this._instanceInfo.length >= this.maxInstanceCount;\n\n        // ensure we're not over geometry\n        if (atCapacity && this._availableInstanceIds.length === 0) {\n          throw new Error('THREE.BatchedMesh: Maximum item count reached.');\n        }\n        var instanceInfo = {\n          visible: true,\n          active: true,\n          geometryIndex: geometryId\n        };\n        var drawId = null;\n\n        // Prioritize using previously freed instance ids\n        if (this._availableInstanceIds.length > 0) {\n          this._availableInstanceIds.sort(ascIdSort);\n          drawId = this._availableInstanceIds.shift();\n          this._instanceInfo[drawId] = instanceInfo;\n        } else {\n          drawId = this._instanceInfo.length;\n          this._instanceInfo.push(instanceInfo);\n        }\n        var matricesTexture = this._matricesTexture;\n        _matrix$1.identity().toArray(matricesTexture.image.data, drawId * 16);\n        matricesTexture.needsUpdate = true;\n        var colorsTexture = this._colorsTexture;\n        if (colorsTexture) {\n          _whiteColor.toArray(colorsTexture.image.data, drawId * 4);\n          colorsTexture.needsUpdate = true;\n        }\n        this._visibilityChanged = true;\n        return drawId;\n      }\n    }, {\n      key: \"addGeometry\",\n      value: function addGeometry(geometry) {\n        var reservedVertexCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n        var reservedIndexCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n        this._initializeGeometry(geometry);\n        this._validateGeometry(geometry);\n        var geometryInfo = {\n          // geometry information\n          vertexStart: -1,\n          vertexCount: -1,\n          reservedVertexCount: -1,\n          indexStart: -1,\n          indexCount: -1,\n          reservedIndexCount: -1,\n          // draw range information\n          start: -1,\n          count: -1,\n          // state\n          boundingBox: null,\n          boundingSphere: null,\n          active: true\n        };\n        var geometryInfoList = this._geometryInfo;\n        geometryInfo.vertexStart = this._nextVertexStart;\n        geometryInfo.reservedVertexCount = reservedVertexCount === -1 ? geometry.getAttribute('position').count : reservedVertexCount;\n        var index = geometry.getIndex();\n        var hasIndex = index !== null;\n        if (hasIndex) {\n          geometryInfo.indexStart = this._nextIndexStart;\n          geometryInfo.reservedIndexCount = reservedIndexCount === -1 ? index.count : reservedIndexCount;\n        }\n        if (geometryInfo.indexStart !== -1 && geometryInfo.indexStart + geometryInfo.reservedIndexCount > this._maxIndexCount || geometryInfo.vertexStart + geometryInfo.reservedVertexCount > this._maxVertexCount) {\n          throw new Error('THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.');\n        }\n\n        // update id\n        var geometryId;\n        if (this._availableGeometryIds.length > 0) {\n          this._availableGeometryIds.sort(ascIdSort);\n          geometryId = this._availableGeometryIds.shift();\n          geometryInfoList[geometryId] = geometryInfo;\n        } else {\n          geometryId = this._geometryCount;\n          this._geometryCount++;\n          geometryInfoList.push(geometryInfo);\n        }\n\n        // update the geometry\n        this.setGeometryAt(geometryId, geometry);\n\n        // increment the next geometry position\n        this._nextIndexStart = geometryInfo.indexStart + geometryInfo.reservedIndexCount;\n        this._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n        return geometryId;\n      }\n    }, {\n      key: \"setGeometryAt\",\n      value: function setGeometryAt(geometryId, geometry) {\n        if (geometryId >= this._geometryCount) {\n          throw new Error('THREE.BatchedMesh: Maximum geometry count reached.');\n        }\n        this._validateGeometry(geometry);\n        var batchGeometry = this.geometry;\n        var hasIndex = batchGeometry.getIndex() !== null;\n        var dstIndex = batchGeometry.getIndex();\n        var srcIndex = geometry.getIndex();\n        var geometryInfo = this._geometryInfo[geometryId];\n        if (hasIndex && srcIndex.count > geometryInfo.reservedIndexCount || geometry.attributes.position.count > geometryInfo.reservedVertexCount) {\n          throw new Error('THREE.BatchedMesh: Reserved space not large enough for provided geometry.');\n        }\n\n        // copy geometry buffer data over\n        var vertexStart = geometryInfo.vertexStart;\n        var reservedVertexCount = geometryInfo.reservedVertexCount;\n        geometryInfo.vertexCount = geometry.getAttribute('position').count;\n        for (var attributeName in batchGeometry.attributes) {\n          // copy attribute data\n          var srcAttribute = geometry.getAttribute(attributeName);\n          var dstAttribute = batchGeometry.getAttribute(attributeName);\n          copyAttributeData(srcAttribute, dstAttribute, vertexStart);\n\n          // fill the rest in with zeroes\n          var itemSize = srcAttribute.itemSize;\n          for (var i = srcAttribute.count, l = reservedVertexCount; i < l; i++) {\n            var index = vertexStart + i;\n            for (var c = 0; c < itemSize; c++) {\n              dstAttribute.setComponent(index, c, 0);\n            }\n          }\n          dstAttribute.needsUpdate = true;\n          dstAttribute.addUpdateRange(vertexStart * itemSize, reservedVertexCount * itemSize);\n        }\n\n        // copy index\n        if (hasIndex) {\n          var indexStart = geometryInfo.indexStart;\n          var reservedIndexCount = geometryInfo.reservedIndexCount;\n          geometryInfo.indexCount = geometry.getIndex().count;\n\n          // copy index data over\n          for (var _i25 = 0; _i25 < srcIndex.count; _i25++) {\n            dstIndex.setX(indexStart + _i25, vertexStart + srcIndex.getX(_i25));\n          }\n\n          // fill the rest in with zeroes\n          for (var _i26 = srcIndex.count, _l6 = reservedIndexCount; _i26 < _l6; _i26++) {\n            dstIndex.setX(indexStart + _i26, vertexStart);\n          }\n          dstIndex.needsUpdate = true;\n          dstIndex.addUpdateRange(indexStart, geometryInfo.reservedIndexCount);\n        }\n\n        // update the draw range\n        geometryInfo.start = hasIndex ? geometryInfo.indexStart : geometryInfo.vertexStart;\n        geometryInfo.count = hasIndex ? geometryInfo.indexCount : geometryInfo.vertexCount;\n\n        // store the bounding boxes\n        geometryInfo.boundingBox = null;\n        if (geometry.boundingBox !== null) {\n          geometryInfo.boundingBox = geometry.boundingBox.clone();\n        }\n        geometryInfo.boundingSphere = null;\n        if (geometry.boundingSphere !== null) {\n          geometryInfo.boundingSphere = geometry.boundingSphere.clone();\n        }\n        this._visibilityChanged = true;\n        return geometryId;\n      }\n    }, {\n      key: \"deleteGeometry\",\n      value: function deleteGeometry(geometryId) {\n        var geometryInfoList = this._geometryInfo;\n        if (geometryId >= geometryInfoList.length || geometryInfoList[geometryId].active === false) {\n          return this;\n        }\n\n        // delete any instances associated with this geometry\n        var instanceInfo = this._instanceInfo;\n        for (var i = 0, l = instanceInfo.length; i < l; i++) {\n          if (instanceInfo[i].geometryIndex === geometryId) {\n            this.deleteInstance(i);\n          }\n        }\n        geometryInfoList[geometryId].active = false;\n        this._availableGeometryIds.push(geometryId);\n        this._visibilityChanged = true;\n        return this;\n      }\n    }, {\n      key: \"deleteInstance\",\n      value: function deleteInstance(instanceId) {\n        this.validateInstanceId(instanceId);\n        this._instanceInfo[instanceId].active = false;\n        this._availableInstanceIds.push(instanceId);\n        this._visibilityChanged = true;\n        return this;\n      }\n    }, {\n      key: \"optimize\",\n      value: function optimize() {\n        // track the next indices to copy data to\n        var nextVertexStart = 0;\n        var nextIndexStart = 0;\n\n        // Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n        // in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\n        var geometryInfoList = this._geometryInfo;\n        var indices = geometryInfoList.map(function (e, i) {\n          return i;\n        }).sort(function (a, b) {\n          return geometryInfoList[a].vertexStart - geometryInfoList[b].vertexStart;\n        });\n        var geometry = this.geometry;\n        for (var i = 0, l = geometryInfoList.length; i < l; i++) {\n          // if a geometry range is inactive then don't copy anything\n          var index = indices[i];\n          var geometryInfo = geometryInfoList[index];\n          if (geometryInfo.active === false) {\n            continue;\n          }\n\n          // if a geometry contains an index buffer then shift it, as well\n          if (geometry.index !== null) {\n            if (geometryInfo.indexStart !== nextIndexStart) {\n              var indexStart = geometryInfo.indexStart,\n                vertexStart = geometryInfo.vertexStart,\n                reservedIndexCount = geometryInfo.reservedIndexCount;\n              var _index = geometry.index;\n              var array = _index.array;\n\n              // shift the index pointers based on how the vertex data will shift\n              // adjusting the index must happen first so the original vertex start value is available\n              var elementDelta = nextVertexStart - vertexStart;\n              for (var j = indexStart; j < indexStart + reservedIndexCount; j++) {\n                array[j] = array[j] + elementDelta;\n              }\n              _index.array.copyWithin(nextIndexStart, indexStart, indexStart + reservedIndexCount);\n              _index.addUpdateRange(nextIndexStart, reservedIndexCount);\n              geometryInfo.indexStart = nextIndexStart;\n            }\n            nextIndexStart += geometryInfo.reservedIndexCount;\n          }\n\n          // if a geometry needs to be moved then copy attribute data to overwrite unused space\n          if (geometryInfo.vertexStart !== nextVertexStart) {\n            var _vertexStart = geometryInfo.vertexStart,\n              reservedVertexCount = geometryInfo.reservedVertexCount;\n            var attributes = geometry.attributes;\n            for (var key in attributes) {\n              var attribute = attributes[key];\n              var _array = attribute.array,\n                itemSize = attribute.itemSize;\n              _array.copyWithin(nextVertexStart * itemSize, _vertexStart * itemSize, (_vertexStart + reservedVertexCount) * itemSize);\n              attribute.addUpdateRange(nextVertexStart * itemSize, reservedVertexCount * itemSize);\n            }\n            geometryInfo.vertexStart = nextVertexStart;\n          }\n          nextVertexStart += geometryInfo.reservedVertexCount;\n          geometryInfo.start = geometry.index ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\n          // step the next geometry points to the shifted position\n          this._nextIndexStart = geometry.index ? geometryInfo.indexStart + geometryInfo.reservedIndexCount : 0;\n          this._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n        }\n        return this;\n      }\n\n      // get bounding box and compute it if it doesn't exist\n    }, {\n      key: \"getBoundingBoxAt\",\n      value: function getBoundingBoxAt(geometryId, target) {\n        if (geometryId >= this._geometryCount) {\n          return null;\n        }\n\n        // compute bounding box\n        var geometry = this.geometry;\n        var geometryInfo = this._geometryInfo[geometryId];\n        if (geometryInfo.boundingBox === null) {\n          var box = new Box3();\n          var index = geometry.index;\n          var position = geometry.attributes.position;\n          for (var i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i++) {\n            var iv = i;\n            if (index) {\n              iv = index.getX(iv);\n            }\n            box.expandByPoint(_vector$5.fromBufferAttribute(position, iv));\n          }\n          geometryInfo.boundingBox = box;\n        }\n        target.copy(geometryInfo.boundingBox);\n        return target;\n      }\n\n      // get bounding sphere and compute it if it doesn't exist\n    }, {\n      key: \"getBoundingSphereAt\",\n      value: function getBoundingSphereAt(geometryId, target) {\n        if (geometryId >= this._geometryCount) {\n          return null;\n        }\n\n        // compute bounding sphere\n        var geometry = this.geometry;\n        var geometryInfo = this._geometryInfo[geometryId];\n        if (geometryInfo.boundingSphere === null) {\n          var sphere = new Sphere();\n          this.getBoundingBoxAt(geometryId, _box$1);\n          _box$1.getCenter(sphere.center);\n          var index = geometry.index;\n          var position = geometry.attributes.position;\n          var maxRadiusSq = 0;\n          for (var i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i++) {\n            var iv = i;\n            if (index) {\n              iv = index.getX(iv);\n            }\n            _vector$5.fromBufferAttribute(position, iv);\n            maxRadiusSq = Math.max(maxRadiusSq, sphere.center.distanceToSquared(_vector$5));\n          }\n          sphere.radius = Math.sqrt(maxRadiusSq);\n          geometryInfo.boundingSphere = sphere;\n        }\n        target.copy(geometryInfo.boundingSphere);\n        return target;\n      }\n    }, {\n      key: \"setMatrixAt\",\n      value: function setMatrixAt(instanceId, matrix) {\n        this.validateInstanceId(instanceId);\n        var matricesTexture = this._matricesTexture;\n        var matricesArray = this._matricesTexture.image.data;\n        matrix.toArray(matricesArray, instanceId * 16);\n        matricesTexture.needsUpdate = true;\n        return this;\n      }\n    }, {\n      key: \"getMatrixAt\",\n      value: function getMatrixAt(instanceId, matrix) {\n        this.validateInstanceId(instanceId);\n        return matrix.fromArray(this._matricesTexture.image.data, instanceId * 16);\n      }\n    }, {\n      key: \"setColorAt\",\n      value: function setColorAt(instanceId, color) {\n        this.validateInstanceId(instanceId);\n        if (this._colorsTexture === null) {\n          this._initColorsTexture();\n        }\n        color.toArray(this._colorsTexture.image.data, instanceId * 4);\n        this._colorsTexture.needsUpdate = true;\n        return this;\n      }\n    }, {\n      key: \"getColorAt\",\n      value: function getColorAt(instanceId, color) {\n        this.validateInstanceId(instanceId);\n        return color.fromArray(this._colorsTexture.image.data, instanceId * 4);\n      }\n    }, {\n      key: \"setVisibleAt\",\n      value: function setVisibleAt(instanceId, value) {\n        this.validateInstanceId(instanceId);\n        if (this._instanceInfo[instanceId].visible === value) {\n          return this;\n        }\n        this._instanceInfo[instanceId].visible = value;\n        this._visibilityChanged = true;\n        return this;\n      }\n    }, {\n      key: \"getVisibleAt\",\n      value: function getVisibleAt(instanceId) {\n        this.validateInstanceId(instanceId);\n        return this._instanceInfo[instanceId].visible;\n      }\n    }, {\n      key: \"setGeometryIdAt\",\n      value: function setGeometryIdAt(instanceId, geometryId) {\n        this.validateInstanceId(instanceId);\n        this.validateGeometryId(geometryId);\n        this._instanceInfo[instanceId].geometryIndex = geometryId;\n        return this;\n      }\n    }, {\n      key: \"getGeometryIdAt\",\n      value: function getGeometryIdAt(instanceId) {\n        this.validateInstanceId(instanceId);\n        return this._instanceInfo[instanceId].geometryIndex;\n      }\n    }, {\n      key: \"getGeometryRangeAt\",\n      value: function getGeometryRangeAt(geometryId) {\n        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.validateGeometryId(geometryId);\n        var geometryInfo = this._geometryInfo[geometryId];\n        target.vertexStart = geometryInfo.vertexStart;\n        target.vertexCount = geometryInfo.vertexCount;\n        target.reservedVertexCount = geometryInfo.reservedVertexCount;\n        target.indexStart = geometryInfo.indexStart;\n        target.indexCount = geometryInfo.indexCount;\n        target.reservedIndexCount = geometryInfo.reservedIndexCount;\n        target.start = geometryInfo.start;\n        target.count = geometryInfo.count;\n        return target;\n      }\n    }, {\n      key: \"setInstanceCount\",\n      value: function setInstanceCount(maxInstanceCount) {\n        // shrink the available instances as much as possible\n        var availableInstanceIds = this._availableInstanceIds;\n        var instanceInfo = this._instanceInfo;\n        availableInstanceIds.sort(ascIdSort);\n        while (availableInstanceIds[availableInstanceIds.length - 1] === instanceInfo.length) {\n          instanceInfo.pop();\n          availableInstanceIds.pop();\n        }\n\n        // throw an error if it can't be shrunk to the desired size\n        if (maxInstanceCount < instanceInfo.length) {\n          throw new Error(`BatchedMesh: Instance ids outside the range ${maxInstanceCount} are being used. Cannot shrink instance count.`);\n        }\n\n        // copy the multi draw counts\n        var multiDrawCounts = new Int32Array(maxInstanceCount);\n        var multiDrawStarts = new Int32Array(maxInstanceCount);\n        copyArrayContents(this._multiDrawCounts, multiDrawCounts);\n        copyArrayContents(this._multiDrawStarts, multiDrawStarts);\n        this._multiDrawCounts = multiDrawCounts;\n        this._multiDrawStarts = multiDrawStarts;\n        this._maxInstanceCount = maxInstanceCount;\n\n        // update texture data for instance sampling\n        var indirectTexture = this._indirectTexture;\n        var matricesTexture = this._matricesTexture;\n        var colorsTexture = this._colorsTexture;\n        indirectTexture.dispose();\n        this._initIndirectTexture();\n        copyArrayContents(indirectTexture.image.data, this._indirectTexture.image.data);\n        matricesTexture.dispose();\n        this._initMatricesTexture();\n        copyArrayContents(matricesTexture.image.data, this._matricesTexture.image.data);\n        if (colorsTexture) {\n          colorsTexture.dispose();\n          this._initColorsTexture();\n          copyArrayContents(colorsTexture.image.data, this._colorsTexture.image.data);\n        }\n      }\n    }, {\n      key: \"setGeometrySize\",\n      value: function setGeometrySize(maxVertexCount, maxIndexCount) {\n        // Check if we can shrink to the requested vertex attribute size\n        var validRanges = (0, _toConsumableArray2.default)(this._geometryInfo).filter(function (info) {\n          return info.active;\n        });\n        var requiredVertexLength = Math.max.apply(Math, (0, _toConsumableArray2.default)(validRanges.map(function (range) {\n          return range.vertexStart + range.reservedVertexCount;\n        })));\n        if (requiredVertexLength > maxVertexCount) {\n          throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);\n        }\n\n        // Check if we can shrink to the requested index attribute size\n        if (this.geometry.index) {\n          var requiredIndexLength = Math.max.apply(Math, (0, _toConsumableArray2.default)(validRanges.map(function (range) {\n            return range.indexStart + range.reservedIndexCount;\n          })));\n          if (requiredIndexLength > maxIndexCount) {\n            throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);\n          }\n        }\n\n        //\n\n        // dispose of the previous geometry\n        var oldGeometry = this.geometry;\n        oldGeometry.dispose();\n\n        // recreate the geometry needed based on the previous variant\n        this._maxVertexCount = maxVertexCount;\n        this._maxIndexCount = maxIndexCount;\n        if (this._geometryInitialized) {\n          this._geometryInitialized = false;\n          this.geometry = new BufferGeometry();\n          this._initializeGeometry(oldGeometry);\n        }\n\n        // copy data from the previous geometry\n        var geometry = this.geometry;\n        if (oldGeometry.index) {\n          copyArrayContents(oldGeometry.index.array, geometry.index.array);\n        }\n        for (var key in oldGeometry.attributes) {\n          copyArrayContents(oldGeometry.attributes[key].array, geometry.attributes[key].array);\n        }\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var instanceInfo = this._instanceInfo;\n        var geometryInfoList = this._geometryInfo;\n        var matrixWorld = this.matrixWorld;\n        var batchGeometry = this.geometry;\n\n        // iterate over each geometry\n        _mesh.material = this.material;\n        _mesh.geometry.index = batchGeometry.index;\n        _mesh.geometry.attributes = batchGeometry.attributes;\n        if (_mesh.geometry.boundingBox === null) {\n          _mesh.geometry.boundingBox = new Box3();\n        }\n        if (_mesh.geometry.boundingSphere === null) {\n          _mesh.geometry.boundingSphere = new Sphere();\n        }\n        for (var i = 0, l = instanceInfo.length; i < l; i++) {\n          if (!instanceInfo[i].visible || !instanceInfo[i].active) {\n            continue;\n          }\n          var geometryId = instanceInfo[i].geometryIndex;\n          var geometryInfo = geometryInfoList[geometryId];\n          _mesh.geometry.setDrawRange(geometryInfo.start, geometryInfo.count);\n\n          // get the intersects\n          this.getMatrixAt(i, _mesh.matrixWorld).premultiply(matrixWorld);\n          this.getBoundingBoxAt(geometryId, _mesh.geometry.boundingBox);\n          this.getBoundingSphereAt(geometryId, _mesh.geometry.boundingSphere);\n          _mesh.raycast(raycaster, _batchIntersects);\n\n          // add batch id to the intersects\n          for (var j = 0, _l7 = _batchIntersects.length; j < _l7; j++) {\n            var _intersect2 = _batchIntersects[j];\n            _intersect2.object = this;\n            _intersect2.batchId = i;\n            intersects.push(_intersect2);\n          }\n          _batchIntersects.length = 0;\n        }\n        _mesh.material = null;\n        _mesh.geometry.index = null;\n        _mesh.geometry.attributes = {};\n        _mesh.geometry.setDrawRange(0, Infinity);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(BatchedMesh, \"copy\", this, 3)([source]);\n        this.geometry = source.geometry.clone();\n        this.perObjectFrustumCulled = source.perObjectFrustumCulled;\n        this.sortObjects = source.sortObjects;\n        this.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\n        this.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\n        this._geometryInfo = source._geometryInfo.map(function (info) {\n          return Object.assign({}, info, {\n            boundingBox: info.boundingBox !== null ? info.boundingBox.clone() : null,\n            boundingSphere: info.boundingSphere !== null ? info.boundingSphere.clone() : null\n          });\n        });\n        this._instanceInfo = source._instanceInfo.map(function (info) {\n          return Object.assign({}, info);\n        });\n        this._maxInstanceCount = source._maxInstanceCount;\n        this._maxVertexCount = source._maxVertexCount;\n        this._maxIndexCount = source._maxIndexCount;\n        this._geometryInitialized = source._geometryInitialized;\n        this._geometryCount = source._geometryCount;\n        this._multiDrawCounts = source._multiDrawCounts.slice();\n        this._multiDrawStarts = source._multiDrawStarts.slice();\n        this._matricesTexture = source._matricesTexture.clone();\n        this._matricesTexture.image.data = this._matricesTexture.image.data.slice();\n        if (this._colorsTexture !== null) {\n          this._colorsTexture = source._colorsTexture.clone();\n          this._colorsTexture.image.data = this._colorsTexture.image.data.slice();\n        }\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        // Assuming the geometry is not shared with other meshes\n        this.geometry.dispose();\n        this._matricesTexture.dispose();\n        this._matricesTexture = null;\n        this._indirectTexture.dispose();\n        this._indirectTexture = null;\n        if (this._colorsTexture !== null) {\n          this._colorsTexture.dispose();\n          this._colorsTexture = null;\n        }\n        return this;\n      }\n    }, {\n      key: \"onBeforeRender\",\n      value: function onBeforeRender(renderer, scene, camera, geometry, material /*, _group*/) {\n        // if visibility has not changed and frustum culling and object sorting is not required\n        // then skip iterating over all items\n        if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) {\n          return;\n        }\n\n        // the indexed version of the multi draw function requires specifying the start\n        // offset in bytes.\n        var index = geometry.getIndex();\n        var bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\n        var instanceInfo = this._instanceInfo;\n        var multiDrawStarts = this._multiDrawStarts;\n        var multiDrawCounts = this._multiDrawCounts;\n        var geometryInfoList = this._geometryInfo;\n        var perObjectFrustumCulled = this.perObjectFrustumCulled;\n        var indirectTexture = this._indirectTexture;\n        var indirectArray = indirectTexture.image.data;\n\n        // prepare the frustum in the local frame\n        if (perObjectFrustumCulled) {\n          _matrix$1.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse).multiply(this.matrixWorld);\n          _frustum.setFromProjectionMatrix(_matrix$1, renderer.coordinateSystem);\n        }\n        var multiDrawCount = 0;\n        if (this.sortObjects) {\n          // get the camera position in the local frame\n          _matrix$1.copy(this.matrixWorld).invert();\n          _vector$5.setFromMatrixPosition(camera.matrixWorld).applyMatrix4(_matrix$1);\n          _forward.set(0, 0, -1).transformDirection(camera.matrixWorld).transformDirection(_matrix$1);\n          for (var i = 0, l = instanceInfo.length; i < l; i++) {\n            if (instanceInfo[i].visible && instanceInfo[i].active) {\n              var geometryId = instanceInfo[i].geometryIndex;\n\n              // get the bounds in world space\n              this.getMatrixAt(i, _matrix$1);\n              this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n\n              // determine whether the batched geometry is within the frustum\n              var culled = false;\n              if (perObjectFrustumCulled) {\n                culled = !_frustum.intersectsSphere(_sphere$2);\n              }\n              if (!culled) {\n                // get the distance from camera used for sorting\n                var geometryInfo = geometryInfoList[geometryId];\n                var z = _temp.subVectors(_sphere$2.center, _vector$5).dot(_forward);\n                _renderList.push(geometryInfo.start, geometryInfo.count, z, i);\n              }\n            }\n          }\n\n          // Sort the draw ranges and prep for rendering\n          var list = _renderList.list;\n          var customSort = this.customSort;\n          if (customSort === null) {\n            list.sort(material.transparent ? sortTransparent : sortOpaque);\n          } else {\n            customSort.call(this, list, camera);\n          }\n          for (var _i27 = 0, _l8 = list.length; _i27 < _l8; _i27++) {\n            var item = list[_i27];\n            multiDrawStarts[multiDrawCount] = item.start * bytesPerElement;\n            multiDrawCounts[multiDrawCount] = item.count;\n            indirectArray[multiDrawCount] = item.index;\n            multiDrawCount++;\n          }\n          _renderList.reset();\n        } else {\n          for (var _i28 = 0, _l9 = instanceInfo.length; _i28 < _l9; _i28++) {\n            if (instanceInfo[_i28].visible && instanceInfo[_i28].active) {\n              var _geometryId = instanceInfo[_i28].geometryIndex;\n\n              // determine whether the batched geometry is within the frustum\n              var _culled = false;\n              if (perObjectFrustumCulled) {\n                // get the bounds in world space\n                this.getMatrixAt(_i28, _matrix$1);\n                this.getBoundingSphereAt(_geometryId, _sphere$2).applyMatrix4(_matrix$1);\n                _culled = !_frustum.intersectsSphere(_sphere$2);\n              }\n              if (!_culled) {\n                var _geometryInfo = geometryInfoList[_geometryId];\n                multiDrawStarts[multiDrawCount] = _geometryInfo.start * bytesPerElement;\n                multiDrawCounts[multiDrawCount] = _geometryInfo.count;\n                indirectArray[multiDrawCount] = _i28;\n                multiDrawCount++;\n              }\n            }\n          }\n        }\n        indirectTexture.needsUpdate = true;\n        this._multiDrawCount = multiDrawCount;\n        this._visibilityChanged = false;\n      }\n    }, {\n      key: \"onBeforeShadow\",\n      value: function onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial /* , group */) {\n        this.onBeforeRender(renderer, null, shadowCamera, geometry, depthMaterial);\n      }\n    }]);\n  }(Mesh);\n  var LineBasicMaterial = exports.LineBasicMaterial = /*#__PURE__*/function (_Material4) {\n    function LineBasicMaterial(parameters) {\n      var _this31;\n      (0, _classCallCheck2.default)(this, LineBasicMaterial);\n      _this31 = _callSuper(this, LineBasicMaterial);\n      _this31.isLineBasicMaterial = true;\n      _this31.type = 'LineBasicMaterial';\n      _this31.color = new Color(0xffffff);\n      _this31.map = null;\n      _this31.linewidth = 1;\n      _this31.linecap = 'round';\n      _this31.linejoin = 'round';\n      _this31.fog = true;\n      _this31.setValues(parameters);\n      return _this31;\n    }\n    (0, _inherits2.default)(LineBasicMaterial, _Material4);\n    return (0, _createClass2.default)(LineBasicMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LineBasicMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.linewidth = source.linewidth;\n        this.linecap = source.linecap;\n        this.linejoin = source.linejoin;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var _vStart = /*@__PURE__*/new Vector3();\n  var _vEnd = /*@__PURE__*/new Vector3();\n  var _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n  var _ray$1 = /*@__PURE__*/new Ray();\n  var _sphere$1 = /*@__PURE__*/new Sphere();\n  var _intersectPointOnRay = /*@__PURE__*/new Vector3();\n  var _intersectPointOnSegment = /*@__PURE__*/new Vector3();\n  var Line = exports.Line = /*#__PURE__*/function (_Object3D8) {\n    function Line() {\n      var _this32;\n      var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n      var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineBasicMaterial();\n      (0, _classCallCheck2.default)(this, Line);\n      _this32 = _callSuper(this, Line);\n      _this32.isLine = true;\n      _this32.type = 'Line';\n      _this32.geometry = geometry;\n      _this32.material = material;\n      _this32.updateMorphTargets();\n      return _this32;\n    }\n    (0, _inherits2.default)(Line, _Object3D8);\n    return (0, _createClass2.default)(Line, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Line, \"copy\", this, 3)([source, recursive]);\n        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n        this.geometry = source.geometry;\n        return this;\n      }\n    }, {\n      key: \"computeLineDistances\",\n      value: function computeLineDistances() {\n        var geometry = this.geometry;\n\n        // we assume non-indexed geometry\n\n        if (geometry.index === null) {\n          var positionAttribute = geometry.attributes.position;\n          var lineDistances = [0];\n          for (var i = 1, l = positionAttribute.count; i < l; i++) {\n            _vStart.fromBufferAttribute(positionAttribute, i - 1);\n            _vEnd.fromBufferAttribute(positionAttribute, i);\n            lineDistances[i] = lineDistances[i - 1];\n            lineDistances[i] += _vStart.distanceTo(_vEnd);\n          }\n          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n        } else {\n          console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n        }\n        return this;\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var geometry = this.geometry;\n        var matrixWorld = this.matrixWorld;\n        var threshold = raycaster.params.Line.threshold;\n        var drawRange = geometry.drawRange;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        _sphere$1.copy(geometry.boundingSphere);\n        _sphere$1.applyMatrix4(matrixWorld);\n        _sphere$1.radius += threshold;\n        if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;\n\n        //\n\n        _inverseMatrix$1.copy(matrixWorld).invert();\n        _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n        var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n        var localThresholdSq = localThreshold * localThreshold;\n        var step = this.isLineSegments ? 2 : 1;\n        var index = geometry.index;\n        var attributes = geometry.attributes;\n        var positionAttribute = attributes.position;\n        if (index !== null) {\n          var start = Math.max(0, drawRange.start);\n          var end = Math.min(index.count, drawRange.start + drawRange.count);\n          for (var i = start, l = end - 1; i < l; i += step) {\n            var a = index.getX(i);\n            var b = index.getX(i + 1);\n            var _intersect3 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b);\n            if (_intersect3) {\n              intersects.push(_intersect3);\n            }\n          }\n          if (this.isLineLoop) {\n            var _a4 = index.getX(end - 1);\n            var _b4 = index.getX(start);\n            var _intersect4 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, _a4, _b4);\n            if (_intersect4) {\n              intersects.push(_intersect4);\n            }\n          }\n        } else {\n          var _start6 = Math.max(0, drawRange.start);\n          var _end5 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n          for (var _i29 = _start6, _l10 = _end5 - 1; _i29 < _l10; _i29 += step) {\n            var _intersect5 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, _i29, _i29 + 1);\n            if (_intersect5) {\n              intersects.push(_intersect5);\n            }\n          }\n          if (this.isLineLoop) {\n            var _intersect6 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, _end5 - 1, _start6);\n            if (_intersect6) {\n              intersects.push(_intersect6);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"updateMorphTargets\",\n      value: function updateMorphTargets() {\n        var geometry = this.geometry;\n        var morphAttributes = geometry.morphAttributes;\n        var keys = Object.keys(morphAttributes);\n        if (keys.length > 0) {\n          var morphAttribute = morphAttributes[keys[0]];\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n            for (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n              var name = morphAttribute[m].name || String(m);\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      }\n    }]);\n  }(Object3D);\n  function checkIntersection(object, raycaster, ray, thresholdSq, a, b) {\n    var positionAttribute = object.geometry.attributes.position;\n    _vStart.fromBufferAttribute(positionAttribute, a);\n    _vEnd.fromBufferAttribute(positionAttribute, b);\n    var distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);\n    if (distSq > thresholdSq) return;\n    _intersectPointOnRay.applyMatrix4(object.matrixWorld); // Move back to world space for distance calculation\n\n    var distance = raycaster.ray.origin.distanceTo(_intersectPointOnRay);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    return {\n      distance: distance,\n      // What do we want? intersection point on the ray or on the segment??\n      // point: raycaster.ray.at( distance ),\n      point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),\n      index: a,\n      face: null,\n      faceIndex: null,\n      barycoord: null,\n      object: object\n    };\n  }\n  var _start = /*@__PURE__*/new Vector3();\n  var _end = /*@__PURE__*/new Vector3();\n  var LineSegments = exports.LineSegments = /*#__PURE__*/function (_Line) {\n    function LineSegments(geometry, material) {\n      var _this33;\n      (0, _classCallCheck2.default)(this, LineSegments);\n      _this33 = _callSuper(this, LineSegments, [geometry, material]);\n      _this33.isLineSegments = true;\n      _this33.type = 'LineSegments';\n      return _this33;\n    }\n    (0, _inherits2.default)(LineSegments, _Line);\n    return (0, _createClass2.default)(LineSegments, [{\n      key: \"computeLineDistances\",\n      value: function computeLineDistances() {\n        var geometry = this.geometry;\n\n        // we assume non-indexed geometry\n\n        if (geometry.index === null) {\n          var positionAttribute = geometry.attributes.position;\n          var lineDistances = [];\n          for (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n            _start.fromBufferAttribute(positionAttribute, i);\n            _end.fromBufferAttribute(positionAttribute, i + 1);\n            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n            lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n          }\n          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n        } else {\n          console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n        }\n        return this;\n      }\n    }]);\n  }(Line);\n  var LineLoop = exports.LineLoop = /*#__PURE__*/function (_Line2) {\n    function LineLoop(geometry, material) {\n      var _this34;\n      (0, _classCallCheck2.default)(this, LineLoop);\n      _this34 = _callSuper(this, LineLoop, [geometry, material]);\n      _this34.isLineLoop = true;\n      _this34.type = 'LineLoop';\n      return _this34;\n    }\n    (0, _inherits2.default)(LineLoop, _Line2);\n    return (0, _createClass2.default)(LineLoop);\n  }(Line);\n  var PointsMaterial = exports.PointsMaterial = /*#__PURE__*/function (_Material5) {\n    function PointsMaterial(parameters) {\n      var _this35;\n      (0, _classCallCheck2.default)(this, PointsMaterial);\n      _this35 = _callSuper(this, PointsMaterial);\n      _this35.isPointsMaterial = true;\n      _this35.type = 'PointsMaterial';\n      _this35.color = new Color(0xffffff);\n      _this35.map = null;\n      _this35.alphaMap = null;\n      _this35.size = 1;\n      _this35.sizeAttenuation = true;\n      _this35.fog = true;\n      _this35.setValues(parameters);\n      return _this35;\n    }\n    (0, _inherits2.default)(PointsMaterial, _Material5);\n    return (0, _createClass2.default)(PointsMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(PointsMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.size = source.size;\n        this.sizeAttenuation = source.sizeAttenuation;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var _inverseMatrix = /*@__PURE__*/new Matrix4();\n  var _ray = /*@__PURE__*/new Ray();\n  var _sphere = /*@__PURE__*/new Sphere();\n  var _position$2 = /*@__PURE__*/new Vector3();\n  var Points = exports.Points = /*#__PURE__*/function (_Object3D9) {\n    function Points() {\n      var _this36;\n      var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n      var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new PointsMaterial();\n      (0, _classCallCheck2.default)(this, Points);\n      _this36 = _callSuper(this, Points);\n      _this36.isPoints = true;\n      _this36.type = 'Points';\n      _this36.geometry = geometry;\n      _this36.material = material;\n      _this36.updateMorphTargets();\n      return _this36;\n    }\n    (0, _inherits2.default)(Points, _Object3D9);\n    return (0, _createClass2.default)(Points, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Points, \"copy\", this, 3)([source, recursive]);\n        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n        this.geometry = source.geometry;\n        return this;\n      }\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var geometry = this.geometry;\n        var matrixWorld = this.matrixWorld;\n        var threshold = raycaster.params.Points.threshold;\n        var drawRange = geometry.drawRange;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        _sphere.copy(geometry.boundingSphere);\n        _sphere.applyMatrix4(matrixWorld);\n        _sphere.radius += threshold;\n        if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n\n        //\n\n        _inverseMatrix.copy(matrixWorld).invert();\n        _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n        var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n        var localThresholdSq = localThreshold * localThreshold;\n        var index = geometry.index;\n        var attributes = geometry.attributes;\n        var positionAttribute = attributes.position;\n        if (index !== null) {\n          var start = Math.max(0, drawRange.start);\n          var end = Math.min(index.count, drawRange.start + drawRange.count);\n          for (var i = start, il = end; i < il; i++) {\n            var a = index.getX(i);\n            _position$2.fromBufferAttribute(positionAttribute, a);\n            testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n          }\n        } else {\n          var _start7 = Math.max(0, drawRange.start);\n          var _end6 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n          for (var _i30 = _start7, l = _end6; _i30 < l; _i30++) {\n            _position$2.fromBufferAttribute(positionAttribute, _i30);\n            testPoint(_position$2, _i30, localThresholdSq, matrixWorld, raycaster, intersects, this);\n          }\n        }\n      }\n    }, {\n      key: \"updateMorphTargets\",\n      value: function updateMorphTargets() {\n        var geometry = this.geometry;\n        var morphAttributes = geometry.morphAttributes;\n        var keys = Object.keys(morphAttributes);\n        if (keys.length > 0) {\n          var morphAttribute = morphAttributes[keys[0]];\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n            for (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n              var name = morphAttribute[m].name || String(m);\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      }\n    }]);\n  }(Object3D);\n  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n    var rayPointDistanceSq = _ray.distanceSqToPoint(point);\n    if (rayPointDistanceSq < localThresholdSq) {\n      var intersectPoint = new Vector3();\n      _ray.closestPointToPoint(point, intersectPoint);\n      intersectPoint.applyMatrix4(matrixWorld);\n      var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n      if (distance < raycaster.near || distance > raycaster.far) return;\n      intersects.push({\n        distance: distance,\n        distanceToRay: Math.sqrt(rayPointDistanceSq),\n        point: intersectPoint,\n        index: index,\n        face: null,\n        faceIndex: null,\n        barycoord: null,\n        object: object\n      });\n    }\n  }\n  var Group = exports.Group = /*#__PURE__*/function (_Object3D10) {\n    function Group() {\n      var _this37;\n      (0, _classCallCheck2.default)(this, Group);\n      _this37 = _callSuper(this, Group);\n      _this37.isGroup = true;\n      _this37.type = 'Group';\n      return _this37;\n    }\n    (0, _inherits2.default)(Group, _Object3D10);\n    return (0, _createClass2.default)(Group);\n  }(Object3D);\n  var VideoTexture = exports.VideoTexture = /*#__PURE__*/function (_Texture5) {\n    function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n      var _this38;\n      (0, _classCallCheck2.default)(this, VideoTexture);\n      _this38 = _callSuper(this, VideoTexture, [video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy]);\n      _this38.isVideoTexture = true;\n      _this38.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n      _this38.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n      _this38.generateMipmaps = false;\n      var scope = _this38;\n      function updateVideo() {\n        scope.needsUpdate = true;\n        video.requestVideoFrameCallback(updateVideo);\n      }\n      if ('requestVideoFrameCallback' in video) {\n        video.requestVideoFrameCallback(updateVideo);\n      }\n      return _this38;\n    }\n    (0, _inherits2.default)(VideoTexture, _Texture5);\n    return (0, _createClass2.default)(VideoTexture, [{\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor(this.image).copy(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var video = this.image;\n        var hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n        if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n          this.needsUpdate = true;\n        }\n      }\n    }]);\n  }(Texture);\n  var FramebufferTexture = exports.FramebufferTexture = /*#__PURE__*/function (_Texture6) {\n    function FramebufferTexture(width, height) {\n      var _this39;\n      (0, _classCallCheck2.default)(this, FramebufferTexture);\n      _this39 = _callSuper(this, FramebufferTexture, [{\n        width: width,\n        height: height\n      }]);\n      _this39.isFramebufferTexture = true;\n      _this39.magFilter = NearestFilter;\n      _this39.minFilter = NearestFilter;\n      _this39.generateMipmaps = false;\n      _this39.needsUpdate = true;\n      return _this39;\n    }\n    (0, _inherits2.default)(FramebufferTexture, _Texture6);\n    return (0, _createClass2.default)(FramebufferTexture);\n  }(Texture);\n  var CompressedTexture = exports.CompressedTexture = /*#__PURE__*/function (_Texture7) {\n    function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace) {\n      var _this40;\n      (0, _classCallCheck2.default)(this, CompressedTexture);\n      _this40 = _callSuper(this, CompressedTexture, [null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace]);\n      _this40.isCompressedTexture = true;\n      _this40.image = {\n        width: width,\n        height: height\n      };\n      _this40.mipmaps = mipmaps;\n\n      // no flipping for cube textures\n      // (also flipping doesn't work for compressed textures )\n\n      _this40.flipY = false;\n\n      // can't generate mipmaps for compressed textures\n      // mips must be embedded in DDS files\n\n      _this40.generateMipmaps = false;\n      return _this40;\n    }\n    (0, _inherits2.default)(CompressedTexture, _Texture7);\n    return (0, _createClass2.default)(CompressedTexture);\n  }(Texture);\n  var CompressedArrayTexture = exports.CompressedArrayTexture = /*#__PURE__*/function (_CompressedTexture) {\n    function CompressedArrayTexture(mipmaps, width, height, depth, format, type) {\n      var _this41;\n      (0, _classCallCheck2.default)(this, CompressedArrayTexture);\n      _this41 = _callSuper(this, CompressedArrayTexture, [mipmaps, width, height, format, type]);\n      _this41.isCompressedArrayTexture = true;\n      _this41.image.depth = depth;\n      _this41.wrapR = ClampToEdgeWrapping;\n      _this41.layerUpdates = new Set();\n      return _this41;\n    }\n    (0, _inherits2.default)(CompressedArrayTexture, _CompressedTexture);\n    return (0, _createClass2.default)(CompressedArrayTexture, [{\n      key: \"addLayerUpdate\",\n      value: function addLayerUpdate(layerIndex) {\n        this.layerUpdates.add(layerIndex);\n      }\n    }, {\n      key: \"clearLayerUpdates\",\n      value: function clearLayerUpdates() {\n        this.layerUpdates.clear();\n      }\n    }]);\n  }(CompressedTexture);\n  var CompressedCubeTexture = exports.CompressedCubeTexture = /*#__PURE__*/function (_CompressedTexture2) {\n    function CompressedCubeTexture(images, format, type) {\n      var _this42;\n      (0, _classCallCheck2.default)(this, CompressedCubeTexture);\n      _this42 = _callSuper(this, CompressedCubeTexture, [undefined, images[0].width, images[0].height, format, type, CubeReflectionMapping]);\n      _this42.isCompressedCubeTexture = true;\n      _this42.isCubeTexture = true;\n      _this42.image = images;\n      return _this42;\n    }\n    (0, _inherits2.default)(CompressedCubeTexture, _CompressedTexture2);\n    return (0, _createClass2.default)(CompressedCubeTexture);\n  }(CompressedTexture);\n  var CanvasTexture = exports.CanvasTexture = /*#__PURE__*/function (_Texture8) {\n    function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n      var _this43;\n      (0, _classCallCheck2.default)(this, CanvasTexture);\n      _this43 = _callSuper(this, CanvasTexture, [canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy]);\n      _this43.isCanvasTexture = true;\n      _this43.needsUpdate = true;\n      return _this43;\n    }\n    (0, _inherits2.default)(CanvasTexture, _Texture8);\n    return (0, _createClass2.default)(CanvasTexture);\n  }(Texture);\n  var DepthTexture = exports.DepthTexture = /*#__PURE__*/function (_Texture9) {\n    function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {\n      var _this44;\n      var format = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : DepthFormat;\n      (0, _classCallCheck2.default)(this, DepthTexture);\n      if (format !== DepthFormat && format !== DepthStencilFormat) {\n        throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n      }\n      if (type === undefined && format === DepthFormat) type = UnsignedIntType;\n      if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n      _this44 = _callSuper(this, DepthTexture, [null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy]);\n      _this44.isDepthTexture = true;\n      _this44.image = {\n        width: width,\n        height: height\n      };\n      _this44.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n      _this44.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n      _this44.flipY = false;\n      _this44.generateMipmaps = false;\n      _this44.compareFunction = null;\n      return _this44;\n    }\n    (0, _inherits2.default)(DepthTexture, _Texture9);\n    return (0, _createClass2.default)(DepthTexture, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(DepthTexture, \"copy\", this, 3)([source]);\n        this.compareFunction = source.compareFunction;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(DepthTexture, \"toJSON\", this, 3)([meta]);\n        if (this.compareFunction !== null) data.compareFunction = this.compareFunction;\n        return data;\n      }\n    }]);\n  }(Texture);\n  /**\n   * Extensible curve object.\n   *\n   * Some common of curve methods:\n   * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n   * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n   * .getPoints(), .getSpacedPoints()\n   * .getLength()\n   * .updateArcLengths()\n   *\n   * This following curves inherit from THREE.Curve:\n   *\n   * -- 2D curves --\n   * THREE.ArcCurve\n   * THREE.CubicBezierCurve\n   * THREE.EllipseCurve\n   * THREE.LineCurve\n   * THREE.QuadraticBezierCurve\n   * THREE.SplineCurve\n   *\n   * -- 3D curves --\n   * THREE.CatmullRomCurve3\n   * THREE.CubicBezierCurve3\n   * THREE.LineCurve3\n   * THREE.QuadraticBezierCurve3\n   *\n   * A series of curves can be represented as a THREE.CurvePath.\n   *\n   **/\n  var Curve = exports.Curve = /*#__PURE__*/function () {\n    function Curve() {\n      (0, _classCallCheck2.default)(this, Curve);\n      this.type = 'Curve';\n      this.arcLengthDivisions = 200;\n    }\n\n    // Virtual base class method to overwrite and implement in subclasses\n    //\t- t [0 .. 1]\n    return (0, _createClass2.default)(Curve, [{\n      key: \"getPoint\",\n      value: function getPoint(/* t, optionalTarget */\n      ) {\n        console.warn('THREE.Curve: .getPoint() not implemented.');\n        return null;\n      }\n\n      // Get point at relative position in curve according to arc length\n      // - u [0 .. 1]\n    }, {\n      key: \"getPointAt\",\n      value: function getPointAt(u, optionalTarget) {\n        var t = this.getUtoTmapping(u);\n        return this.getPoint(t, optionalTarget);\n      }\n\n      // Get sequence of points using getPoint( t )\n    }, {\n      key: \"getPoints\",\n      value: function getPoints() {\n        var divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n        var points = [];\n        for (var d = 0; d <= divisions; d++) {\n          points.push(this.getPoint(d / divisions));\n        }\n        return points;\n      }\n\n      // Get sequence of points using getPointAt( u )\n    }, {\n      key: \"getSpacedPoints\",\n      value: function getSpacedPoints() {\n        var divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n        var points = [];\n        for (var d = 0; d <= divisions; d++) {\n          points.push(this.getPointAt(d / divisions));\n        }\n        return points;\n      }\n\n      // Get total curve arc length\n    }, {\n      key: \"getLength\",\n      value: function getLength() {\n        var lengths = this.getLengths();\n        return lengths[lengths.length - 1];\n      }\n\n      // Get list of cumulative segment lengths\n    }, {\n      key: \"getLengths\",\n      value: function getLengths() {\n        var divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.arcLengthDivisions;\n        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n          return this.cacheArcLengths;\n        }\n        this.needsUpdate = false;\n        var cache = [];\n        var current,\n          last = this.getPoint(0);\n        var sum = 0;\n        cache.push(0);\n        for (var p = 1; p <= divisions; p++) {\n          current = this.getPoint(p / divisions);\n          sum += current.distanceTo(last);\n          cache.push(sum);\n          last = current;\n        }\n        this.cacheArcLengths = cache;\n        return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n      }\n    }, {\n      key: \"updateArcLengths\",\n      value: function updateArcLengths() {\n        this.needsUpdate = true;\n        this.getLengths();\n      }\n\n      // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n    }, {\n      key: \"getUtoTmapping\",\n      value: function getUtoTmapping(u, distance) {\n        var arcLengths = this.getLengths();\n        var i = 0;\n        var il = arcLengths.length;\n        var targetArcLength; // The targeted u distance value to get\n\n        if (distance) {\n          targetArcLength = distance;\n        } else {\n          targetArcLength = u * arcLengths[il - 1];\n        }\n\n        // binary search for the index with largest value smaller than target u distance\n\n        var low = 0,\n          high = il - 1,\n          comparison;\n        while (low <= high) {\n          i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n          comparison = arcLengths[i] - targetArcLength;\n          if (comparison < 0) {\n            low = i + 1;\n          } else if (comparison > 0) {\n            high = i - 1;\n          } else {\n            high = i;\n            break;\n\n            // DONE\n          }\n        }\n        i = high;\n        if (arcLengths[i] === targetArcLength) {\n          return i / (il - 1);\n        }\n\n        // we could get finer grain at lengths, or use simple interpolation between two points\n\n        var lengthBefore = arcLengths[i];\n        var lengthAfter = arcLengths[i + 1];\n        var segmentLength = lengthAfter - lengthBefore;\n\n        // determine where we are between the 'before' and 'after' points\n\n        var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\n\n        // add that fractional amount to t\n\n        var t = (i + segmentFraction) / (il - 1);\n        return t;\n      }\n\n      // Returns a unit vector tangent at t\n      // In case any sub curve does not implement its tangent derivation,\n      // 2 points a small delta apart will be used to find its gradient\n      // which seems to give a reasonable approximation\n    }, {\n      key: \"getTangent\",\n      value: function getTangent(t, optionalTarget) {\n        var delta = 0.0001;\n        var t1 = t - delta;\n        var t2 = t + delta;\n\n        // Capping in case of danger\n\n        if (t1 < 0) t1 = 0;\n        if (t2 > 1) t2 = 1;\n        var pt1 = this.getPoint(t1);\n        var pt2 = this.getPoint(t2);\n        var tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n        tangent.copy(pt2).sub(pt1).normalize();\n        return tangent;\n      }\n    }, {\n      key: \"getTangentAt\",\n      value: function getTangentAt(u, optionalTarget) {\n        var t = this.getUtoTmapping(u);\n        return this.getTangent(t, optionalTarget);\n      }\n    }, {\n      key: \"computeFrenetFrames\",\n      value: function computeFrenetFrames(segments, closed) {\n        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n        var normal = new Vector3();\n        var tangents = [];\n        var normals = [];\n        var binormals = [];\n        var vec = new Vector3();\n        var mat = new Matrix4();\n\n        // compute the tangent vectors for each segment on the curve\n\n        for (var i = 0; i <= segments; i++) {\n          var u = i / segments;\n          tangents[i] = this.getTangentAt(u, new Vector3());\n        }\n\n        // select an initial normal vector perpendicular to the first tangent vector,\n        // and in the direction of the minimum tangent xyz component\n\n        normals[0] = new Vector3();\n        binormals[0] = new Vector3();\n        var min = Number.MAX_VALUE;\n        var tx = Math.abs(tangents[0].x);\n        var ty = Math.abs(tangents[0].y);\n        var tz = Math.abs(tangents[0].z);\n        if (tx <= min) {\n          min = tx;\n          normal.set(1, 0, 0);\n        }\n        if (ty <= min) {\n          min = ty;\n          normal.set(0, 1, 0);\n        }\n        if (tz <= min) {\n          normal.set(0, 0, 1);\n        }\n        vec.crossVectors(tangents[0], normal).normalize();\n        normals[0].crossVectors(tangents[0], vec);\n        binormals[0].crossVectors(tangents[0], normals[0]);\n\n        // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n        for (var _i31 = 1; _i31 <= segments; _i31++) {\n          normals[_i31] = normals[_i31 - 1].clone();\n          binormals[_i31] = binormals[_i31 - 1].clone();\n          vec.crossVectors(tangents[_i31 - 1], tangents[_i31]);\n          if (vec.length() > Number.EPSILON) {\n            vec.normalize();\n            var theta = Math.acos(_clamp(tangents[_i31 - 1].dot(tangents[_i31]), -1, 1)); // clamp for floating pt errors\n\n            normals[_i31].applyMatrix4(mat.makeRotationAxis(vec, theta));\n          }\n          binormals[_i31].crossVectors(tangents[_i31], normals[_i31]);\n        }\n\n        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n        if (closed === true) {\n          var _theta = Math.acos(_clamp(normals[0].dot(normals[segments]), -1, 1));\n          _theta /= segments;\n          if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n            _theta = -_theta;\n          }\n          for (var _i32 = 1; _i32 <= segments; _i32++) {\n            // twist a little...\n            normals[_i32].applyMatrix4(mat.makeRotationAxis(tangents[_i32], _theta * _i32));\n            binormals[_i32].crossVectors(tangents[_i32], normals[_i32]);\n          }\n        }\n        return {\n          tangents: tangents,\n          normals: normals,\n          binormals: binormals\n        };\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.arcLengthDivisions = source.arcLengthDivisions;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = {\n          metadata: {\n            version: 4.6,\n            type: 'Curve',\n            generator: 'Curve.toJSON'\n          }\n        };\n        data.arcLengthDivisions = this.arcLengthDivisions;\n        data.type = this.type;\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        this.arcLengthDivisions = json.arcLengthDivisions;\n        return this;\n      }\n    }]);\n  }();\n  var EllipseCurve = exports.EllipseCurve = /*#__PURE__*/function (_Curve) {\n    function EllipseCurve() {\n      var _this45;\n      var aX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var aY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var xRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var yRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var aStartAngle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var aEndAngle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n      var aClockwise = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var aRotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      (0, _classCallCheck2.default)(this, EllipseCurve);\n      _this45 = _callSuper(this, EllipseCurve);\n      _this45.isEllipseCurve = true;\n      _this45.type = 'EllipseCurve';\n      _this45.aX = aX;\n      _this45.aY = aY;\n      _this45.xRadius = xRadius;\n      _this45.yRadius = yRadius;\n      _this45.aStartAngle = aStartAngle;\n      _this45.aEndAngle = aEndAngle;\n      _this45.aClockwise = aClockwise;\n      _this45.aRotation = aRotation;\n      return _this45;\n    }\n    (0, _inherits2.default)(EllipseCurve, _Curve);\n    return (0, _createClass2.default)(EllipseCurve, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n        var point = optionalTarget;\n        var twoPi = Math.PI * 2;\n        var deltaAngle = this.aEndAngle - this.aStartAngle;\n        var samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n\n        // ensures that deltaAngle is 0 .. 2 PI\n        while (deltaAngle < 0) deltaAngle += twoPi;\n        while (deltaAngle > twoPi) deltaAngle -= twoPi;\n        if (deltaAngle < Number.EPSILON) {\n          if (samePoints) {\n            deltaAngle = 0;\n          } else {\n            deltaAngle = twoPi;\n          }\n        }\n        if (this.aClockwise === true && !samePoints) {\n          if (deltaAngle === twoPi) {\n            deltaAngle = -twoPi;\n          } else {\n            deltaAngle = deltaAngle - twoPi;\n          }\n        }\n        var angle = this.aStartAngle + t * deltaAngle;\n        var x = this.aX + this.xRadius * Math.cos(angle);\n        var y = this.aY + this.yRadius * Math.sin(angle);\n        if (this.aRotation !== 0) {\n          var cos = Math.cos(this.aRotation);\n          var sin = Math.sin(this.aRotation);\n          var tx = x - this.aX;\n          var ty = y - this.aY;\n\n          // Rotate the point about the center of the ellipse.\n          x = tx * cos - ty * sin + this.aX;\n          y = tx * sin + ty * cos + this.aY;\n        }\n        return point.set(x, y);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(EllipseCurve, \"copy\", this, 3)([source]);\n        this.aX = source.aX;\n        this.aY = source.aY;\n        this.xRadius = source.xRadius;\n        this.yRadius = source.yRadius;\n        this.aStartAngle = source.aStartAngle;\n        this.aEndAngle = source.aEndAngle;\n        this.aClockwise = source.aClockwise;\n        this.aRotation = source.aRotation;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(EllipseCurve, \"toJSON\", this, 3)([]);\n        data.aX = this.aX;\n        data.aY = this.aY;\n        data.xRadius = this.xRadius;\n        data.yRadius = this.yRadius;\n        data.aStartAngle = this.aStartAngle;\n        data.aEndAngle = this.aEndAngle;\n        data.aClockwise = this.aClockwise;\n        data.aRotation = this.aRotation;\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(EllipseCurve, \"fromJSON\", this, 3)([json]);\n        this.aX = json.aX;\n        this.aY = json.aY;\n        this.xRadius = json.xRadius;\n        this.yRadius = json.yRadius;\n        this.aStartAngle = json.aStartAngle;\n        this.aEndAngle = json.aEndAngle;\n        this.aClockwise = json.aClockwise;\n        this.aRotation = json.aRotation;\n        return this;\n      }\n    }]);\n  }(Curve);\n  var ArcCurve = exports.ArcCurve = /*#__PURE__*/function (_EllipseCurve) {\n    function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      var _this46;\n      (0, _classCallCheck2.default)(this, ArcCurve);\n      _this46 = _callSuper(this, ArcCurve, [aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise]);\n      _this46.isArcCurve = true;\n      _this46.type = 'ArcCurve';\n      return _this46;\n    }\n    (0, _inherits2.default)(ArcCurve, _EllipseCurve);\n    return (0, _createClass2.default)(ArcCurve);\n  }(EllipseCurve);\n  /**\n   * Centripetal CatmullRom Curve - which is useful for avoiding\n   * cusps and self-intersections in non-uniform catmull rom curves.\n   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n   *\n   * curve.type accepts centripetal(default), chordal and catmullrom\n   * curve.tension is used for catmullrom which defaults to 0.5\n   */\n  /*\n  Based on an optimized c++ solution in\n   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n   - http://ideone.com/NoEbVM\n  \n  This CubicPoly class could be used for reusing some variables and calculations,\n  but for three.js curve use, it could be possible inlined and flatten into a single function call\n  which can be placed in CurveUtils.\n  */\n  function CubicPoly() {\n    var c0 = 0,\n      c1 = 0,\n      c2 = 0,\n      c3 = 0;\n\n    /*\n     * Compute coefficients for a cubic polynomial\n     *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n     * such that\n     *   p(0) = x0, p(1) = x1\n     *  and\n     *   p'(0) = t0, p'(1) = t1.\n     */\n    function init(x0, x1, t0, t1) {\n      c0 = x0;\n      c1 = t0;\n      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n      c3 = 2 * x0 - 2 * x1 + t0 + t1;\n    }\n    return {\n      initCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n        init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n      },\n      initNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n        // compute tangents when parameterized in [t1,t2]\n        var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n        var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\n\n        // rescale tangents for parametrization in [0,1]\n        t1 *= dt1;\n        t2 *= dt1;\n        init(x1, x2, t1, t2);\n      },\n      calc: function calc(t) {\n        var t2 = t * t;\n        var t3 = t2 * t;\n        return c0 + c1 * t + c2 * t2 + c3 * t3;\n      }\n    };\n  }\n\n  //\n\n  var tmp = /*@__PURE__*/new Vector3();\n  var px = /*@__PURE__*/new CubicPoly();\n  var py = /*@__PURE__*/new CubicPoly();\n  var pz = /*@__PURE__*/new CubicPoly();\n  var CatmullRomCurve3 = exports.CatmullRomCurve3 = /*#__PURE__*/function (_Curve2) {\n    function CatmullRomCurve3() {\n      var _this47;\n      var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var curveType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'centripetal';\n      var tension = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n      (0, _classCallCheck2.default)(this, CatmullRomCurve3);\n      _this47 = _callSuper(this, CatmullRomCurve3);\n      _this47.isCatmullRomCurve3 = true;\n      _this47.type = 'CatmullRomCurve3';\n      _this47.points = points;\n      _this47.closed = closed;\n      _this47.curveType = curveType;\n      _this47.tension = tension;\n      return _this47;\n    }\n    (0, _inherits2.default)(CatmullRomCurve3, _Curve2);\n    return (0, _createClass2.default)(CatmullRomCurve3, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        var point = optionalTarget;\n        var points = this.points;\n        var l = points.length;\n        var p = (l - (this.closed ? 0 : 1)) * t;\n        var intPoint = Math.floor(p);\n        var weight = p - intPoint;\n        if (this.closed) {\n          intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n        } else if (weight === 0 && intPoint === l - 1) {\n          intPoint = l - 2;\n          weight = 1;\n        }\n        var p0, p3; // 4 points (p1 & p2 defined below)\n\n        if (this.closed || intPoint > 0) {\n          p0 = points[(intPoint - 1) % l];\n        } else {\n          // extrapolate first point\n          tmp.subVectors(points[0], points[1]).add(points[0]);\n          p0 = tmp;\n        }\n        var p1 = points[intPoint % l];\n        var p2 = points[(intPoint + 1) % l];\n        if (this.closed || intPoint + 2 < l) {\n          p3 = points[(intPoint + 2) % l];\n        } else {\n          // extrapolate last point\n          tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n          p3 = tmp;\n        }\n        if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n          // init Centripetal / Chordal Catmull-Rom\n          var pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n          var dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n          var dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n          var dt2 = Math.pow(p2.distanceToSquared(p3), pow);\n\n          // safety check for repeated points\n          if (dt1 < 1e-4) dt1 = 1.0;\n          if (dt0 < 1e-4) dt0 = dt1;\n          if (dt2 < 1e-4) dt2 = dt1;\n          px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n          py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n          pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n        } else if (this.curveType === 'catmullrom') {\n          px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n          py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n          pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n        }\n        point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n        return point;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(CatmullRomCurve3, \"copy\", this, 3)([source]);\n        this.points = [];\n        for (var i = 0, l = source.points.length; i < l; i++) {\n          var point = source.points[i];\n          this.points.push(point.clone());\n        }\n        this.closed = source.closed;\n        this.curveType = source.curveType;\n        this.tension = source.tension;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(CatmullRomCurve3, \"toJSON\", this, 3)([]);\n        data.points = [];\n        for (var i = 0, l = this.points.length; i < l; i++) {\n          var point = this.points[i];\n          data.points.push(point.toArray());\n        }\n        data.closed = this.closed;\n        data.curveType = this.curveType;\n        data.tension = this.tension;\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(CatmullRomCurve3, \"fromJSON\", this, 3)([json]);\n        this.points = [];\n        for (var i = 0, l = json.points.length; i < l; i++) {\n          var point = json.points[i];\n          this.points.push(new Vector3().fromArray(point));\n        }\n        this.closed = json.closed;\n        this.curveType = json.curveType;\n        this.tension = json.tension;\n        return this;\n      }\n    }]);\n  }(Curve);\n  /**\n   * Bezier Curves formulas obtained from\n   * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n   */\n  function CatmullRom(t, p0, p1, p2, p3) {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    var t2 = t * t;\n    var t3 = t * t2;\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n  }\n\n  //\n\n  function QuadraticBezierP0(t, p) {\n    var k = 1 - t;\n    return k * k * p;\n  }\n  function QuadraticBezierP1(t, p) {\n    return 2 * (1 - t) * t * p;\n  }\n  function QuadraticBezierP2(t, p) {\n    return t * t * p;\n  }\n  function QuadraticBezier(t, p0, p1, p2) {\n    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n  }\n\n  //\n\n  function CubicBezierP0(t, p) {\n    var k = 1 - t;\n    return k * k * k * p;\n  }\n  function CubicBezierP1(t, p) {\n    var k = 1 - t;\n    return 3 * k * k * t * p;\n  }\n  function CubicBezierP2(t, p) {\n    return 3 * (1 - t) * t * t * p;\n  }\n  function CubicBezierP3(t, p) {\n    return t * t * t * p;\n  }\n  function CubicBezier(t, p0, p1, p2, p3) {\n    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n  }\n  var CubicBezierCurve = exports.CubicBezierCurve = /*#__PURE__*/function (_Curve3) {\n    function CubicBezierCurve() {\n      var _this48;\n      var v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n      var v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n      var v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector2();\n      (0, _classCallCheck2.default)(this, CubicBezierCurve);\n      _this48 = _callSuper(this, CubicBezierCurve);\n      _this48.isCubicBezierCurve = true;\n      _this48.type = 'CubicBezierCurve';\n      _this48.v0 = v0;\n      _this48.v1 = v1;\n      _this48.v2 = v2;\n      _this48.v3 = v3;\n      return _this48;\n    }\n    (0, _inherits2.default)(CubicBezierCurve, _Curve3);\n    return (0, _createClass2.default)(CubicBezierCurve, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n        var point = optionalTarget;\n        var v0 = this.v0,\n          v1 = this.v1,\n          v2 = this.v2,\n          v3 = this.v3;\n        point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n        return point;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(CubicBezierCurve, \"copy\", this, 3)([source]);\n        this.v0.copy(source.v0);\n        this.v1.copy(source.v1);\n        this.v2.copy(source.v2);\n        this.v3.copy(source.v3);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(CubicBezierCurve, \"toJSON\", this, 3)([]);\n        data.v0 = this.v0.toArray();\n        data.v1 = this.v1.toArray();\n        data.v2 = this.v2.toArray();\n        data.v3 = this.v3.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(CubicBezierCurve, \"fromJSON\", this, 3)([json]);\n        this.v0.fromArray(json.v0);\n        this.v1.fromArray(json.v1);\n        this.v2.fromArray(json.v2);\n        this.v3.fromArray(json.v3);\n        return this;\n      }\n    }]);\n  }(Curve);\n  var CubicBezierCurve3 = exports.CubicBezierCurve3 = /*#__PURE__*/function (_Curve4) {\n    function CubicBezierCurve3() {\n      var _this49;\n      var v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n      var v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector3();\n      (0, _classCallCheck2.default)(this, CubicBezierCurve3);\n      _this49 = _callSuper(this, CubicBezierCurve3);\n      _this49.isCubicBezierCurve3 = true;\n      _this49.type = 'CubicBezierCurve3';\n      _this49.v0 = v0;\n      _this49.v1 = v1;\n      _this49.v2 = v2;\n      _this49.v3 = v3;\n      return _this49;\n    }\n    (0, _inherits2.default)(CubicBezierCurve3, _Curve4);\n    return (0, _createClass2.default)(CubicBezierCurve3, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        var point = optionalTarget;\n        var v0 = this.v0,\n          v1 = this.v1,\n          v2 = this.v2,\n          v3 = this.v3;\n        point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n        return point;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(CubicBezierCurve3, \"copy\", this, 3)([source]);\n        this.v0.copy(source.v0);\n        this.v1.copy(source.v1);\n        this.v2.copy(source.v2);\n        this.v3.copy(source.v3);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(CubicBezierCurve3, \"toJSON\", this, 3)([]);\n        data.v0 = this.v0.toArray();\n        data.v1 = this.v1.toArray();\n        data.v2 = this.v2.toArray();\n        data.v3 = this.v3.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(CubicBezierCurve3, \"fromJSON\", this, 3)([json]);\n        this.v0.fromArray(json.v0);\n        this.v1.fromArray(json.v1);\n        this.v2.fromArray(json.v2);\n        this.v3.fromArray(json.v3);\n        return this;\n      }\n    }]);\n  }(Curve);\n  var LineCurve = exports.LineCurve = /*#__PURE__*/function (_Curve5) {\n    function LineCurve() {\n      var _this50;\n      var v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n      var v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      (0, _classCallCheck2.default)(this, LineCurve);\n      _this50 = _callSuper(this, LineCurve);\n      _this50.isLineCurve = true;\n      _this50.type = 'LineCurve';\n      _this50.v1 = v1;\n      _this50.v2 = v2;\n      return _this50;\n    }\n    (0, _inherits2.default)(LineCurve, _Curve5);\n    return (0, _createClass2.default)(LineCurve, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n        var point = optionalTarget;\n        if (t === 1) {\n          point.copy(this.v2);\n        } else {\n          point.copy(this.v2).sub(this.v1);\n          point.multiplyScalar(t).add(this.v1);\n        }\n        return point;\n      }\n\n      // Line curve is linear, so we can overwrite default getPointAt\n    }, {\n      key: \"getPointAt\",\n      value: function getPointAt(u, optionalTarget) {\n        return this.getPoint(u, optionalTarget);\n      }\n    }, {\n      key: \"getTangent\",\n      value: function getTangent(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n        return optionalTarget.subVectors(this.v2, this.v1).normalize();\n      }\n    }, {\n      key: \"getTangentAt\",\n      value: function getTangentAt(u, optionalTarget) {\n        return this.getTangent(u, optionalTarget);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LineCurve, \"copy\", this, 3)([source]);\n        this.v1.copy(source.v1);\n        this.v2.copy(source.v2);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(LineCurve, \"toJSON\", this, 3)([]);\n        data.v1 = this.v1.toArray();\n        data.v2 = this.v2.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(LineCurve, \"fromJSON\", this, 3)([json]);\n        this.v1.fromArray(json.v1);\n        this.v2.fromArray(json.v2);\n        return this;\n      }\n    }]);\n  }(Curve);\n  var LineCurve3 = exports.LineCurve3 = /*#__PURE__*/function (_Curve6) {\n    function LineCurve3() {\n      var _this51;\n      var v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      (0, _classCallCheck2.default)(this, LineCurve3);\n      _this51 = _callSuper(this, LineCurve3);\n      _this51.isLineCurve3 = true;\n      _this51.type = 'LineCurve3';\n      _this51.v1 = v1;\n      _this51.v2 = v2;\n      return _this51;\n    }\n    (0, _inherits2.default)(LineCurve3, _Curve6);\n    return (0, _createClass2.default)(LineCurve3, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        var point = optionalTarget;\n        if (t === 1) {\n          point.copy(this.v2);\n        } else {\n          point.copy(this.v2).sub(this.v1);\n          point.multiplyScalar(t).add(this.v1);\n        }\n        return point;\n      }\n\n      // Line curve is linear, so we can overwrite default getPointAt\n    }, {\n      key: \"getPointAt\",\n      value: function getPointAt(u, optionalTarget) {\n        return this.getPoint(u, optionalTarget);\n      }\n    }, {\n      key: \"getTangent\",\n      value: function getTangent(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        return optionalTarget.subVectors(this.v2, this.v1).normalize();\n      }\n    }, {\n      key: \"getTangentAt\",\n      value: function getTangentAt(u, optionalTarget) {\n        return this.getTangent(u, optionalTarget);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LineCurve3, \"copy\", this, 3)([source]);\n        this.v1.copy(source.v1);\n        this.v2.copy(source.v2);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(LineCurve3, \"toJSON\", this, 3)([]);\n        data.v1 = this.v1.toArray();\n        data.v2 = this.v2.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(LineCurve3, \"fromJSON\", this, 3)([json]);\n        this.v1.fromArray(json.v1);\n        this.v2.fromArray(json.v2);\n        return this;\n      }\n    }]);\n  }(Curve);\n  var QuadraticBezierCurve = exports.QuadraticBezierCurve = /*#__PURE__*/function (_Curve7) {\n    function QuadraticBezierCurve() {\n      var _this52;\n      var v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n      var v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n      (0, _classCallCheck2.default)(this, QuadraticBezierCurve);\n      _this52 = _callSuper(this, QuadraticBezierCurve);\n      _this52.isQuadraticBezierCurve = true;\n      _this52.type = 'QuadraticBezierCurve';\n      _this52.v0 = v0;\n      _this52.v1 = v1;\n      _this52.v2 = v2;\n      return _this52;\n    }\n    (0, _inherits2.default)(QuadraticBezierCurve, _Curve7);\n    return (0, _createClass2.default)(QuadraticBezierCurve, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n        var point = optionalTarget;\n        var v0 = this.v0,\n          v1 = this.v1,\n          v2 = this.v2;\n        point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n        return point;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(QuadraticBezierCurve, \"copy\", this, 3)([source]);\n        this.v0.copy(source.v0);\n        this.v1.copy(source.v1);\n        this.v2.copy(source.v2);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(QuadraticBezierCurve, \"toJSON\", this, 3)([]);\n        data.v0 = this.v0.toArray();\n        data.v1 = this.v1.toArray();\n        data.v2 = this.v2.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(QuadraticBezierCurve, \"fromJSON\", this, 3)([json]);\n        this.v0.fromArray(json.v0);\n        this.v1.fromArray(json.v1);\n        this.v2.fromArray(json.v2);\n        return this;\n      }\n    }]);\n  }(Curve);\n  var QuadraticBezierCurve3 = exports.QuadraticBezierCurve3 = /*#__PURE__*/function (_Curve8) {\n    function QuadraticBezierCurve3() {\n      var _this53;\n      var v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n      (0, _classCallCheck2.default)(this, QuadraticBezierCurve3);\n      _this53 = _callSuper(this, QuadraticBezierCurve3);\n      _this53.isQuadraticBezierCurve3 = true;\n      _this53.type = 'QuadraticBezierCurve3';\n      _this53.v0 = v0;\n      _this53.v1 = v1;\n      _this53.v2 = v2;\n      return _this53;\n    }\n    (0, _inherits2.default)(QuadraticBezierCurve3, _Curve8);\n    return (0, _createClass2.default)(QuadraticBezierCurve3, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n        var point = optionalTarget;\n        var v0 = this.v0,\n          v1 = this.v1,\n          v2 = this.v2;\n        point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n        return point;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(QuadraticBezierCurve3, \"copy\", this, 3)([source]);\n        this.v0.copy(source.v0);\n        this.v1.copy(source.v1);\n        this.v2.copy(source.v2);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(QuadraticBezierCurve3, \"toJSON\", this, 3)([]);\n        data.v0 = this.v0.toArray();\n        data.v1 = this.v1.toArray();\n        data.v2 = this.v2.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(QuadraticBezierCurve3, \"fromJSON\", this, 3)([json]);\n        this.v0.fromArray(json.v0);\n        this.v1.fromArray(json.v1);\n        this.v2.fromArray(json.v2);\n        return this;\n      }\n    }]);\n  }(Curve);\n  var SplineCurve = exports.SplineCurve = /*#__PURE__*/function (_Curve9) {\n    function SplineCurve() {\n      var _this54;\n      var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      (0, _classCallCheck2.default)(this, SplineCurve);\n      _this54 = _callSuper(this, SplineCurve);\n      _this54.isSplineCurve = true;\n      _this54.type = 'SplineCurve';\n      _this54.points = points;\n      return _this54;\n    }\n    (0, _inherits2.default)(SplineCurve, _Curve9);\n    return (0, _createClass2.default)(SplineCurve, [{\n      key: \"getPoint\",\n      value: function getPoint(t) {\n        var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n        var point = optionalTarget;\n        var points = this.points;\n        var p = (points.length - 1) * t;\n        var intPoint = Math.floor(p);\n        var weight = p - intPoint;\n        var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n        var p1 = points[intPoint];\n        var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n        var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n        point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n        return point;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(SplineCurve, \"copy\", this, 3)([source]);\n        this.points = [];\n        for (var i = 0, l = source.points.length; i < l; i++) {\n          var point = source.points[i];\n          this.points.push(point.clone());\n        }\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(SplineCurve, \"toJSON\", this, 3)([]);\n        data.points = [];\n        for (var i = 0, l = this.points.length; i < l; i++) {\n          var point = this.points[i];\n          data.points.push(point.toArray());\n        }\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(SplineCurve, \"fromJSON\", this, 3)([json]);\n        this.points = [];\n        for (var i = 0, l = json.points.length; i < l; i++) {\n          var point = json.points[i];\n          this.points.push(new Vector2().fromArray(point));\n        }\n        return this;\n      }\n    }]);\n  }(Curve);\n  var Curves = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ArcCurve: ArcCurve,\n    CatmullRomCurve3: CatmullRomCurve3,\n    CubicBezierCurve: CubicBezierCurve,\n    CubicBezierCurve3: CubicBezierCurve3,\n    EllipseCurve: EllipseCurve,\n    LineCurve: LineCurve,\n    LineCurve3: LineCurve3,\n    QuadraticBezierCurve: QuadraticBezierCurve,\n    QuadraticBezierCurve3: QuadraticBezierCurve3,\n    SplineCurve: SplineCurve\n  });\n\n  /**************************************************************\n   *\tCurved Path - a curve path is simply a array of connected\n   *  curves, but retains the api of a curve\n   **************************************************************/\n  var CurvePath = exports.CurvePath = /*#__PURE__*/function (_Curve10) {\n    function CurvePath() {\n      var _this55;\n      (0, _classCallCheck2.default)(this, CurvePath);\n      _this55 = _callSuper(this, CurvePath);\n      _this55.type = 'CurvePath';\n      _this55.curves = [];\n      _this55.autoClose = false; // Automatically closes the path\n      return _this55;\n    }\n    (0, _inherits2.default)(CurvePath, _Curve10);\n    return (0, _createClass2.default)(CurvePath, [{\n      key: \"add\",\n      value: function add(curve) {\n        this.curves.push(curve);\n      }\n    }, {\n      key: \"closePath\",\n      value: function closePath() {\n        // Add a line curve if start and end of lines are not connected\n        var startPoint = this.curves[0].getPoint(0);\n        var endPoint = this.curves[this.curves.length - 1].getPoint(1);\n        if (!startPoint.equals(endPoint)) {\n          var lineType = startPoint.isVector2 === true ? 'LineCurve' : 'LineCurve3';\n          this.curves.push(new Curves[lineType](endPoint, startPoint));\n        }\n        return this;\n      }\n\n      // To get accurate point with reference to\n      // entire path distance at time t,\n      // following has to be done:\n\n      // 1. Length of each sub path have to be known\n      // 2. Locate and identify type of curve\n      // 3. Get t for the curve\n      // 4. Return curve.getPointAt(t')\n    }, {\n      key: \"getPoint\",\n      value: function getPoint(t, optionalTarget) {\n        var d = t * this.getLength();\n        var curveLengths = this.getCurveLengths();\n        var i = 0;\n\n        // To think about boundaries points.\n\n        while (i < curveLengths.length) {\n          if (curveLengths[i] >= d) {\n            var diff = curveLengths[i] - d;\n            var curve = this.curves[i];\n            var segmentLength = curve.getLength();\n            var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n            return curve.getPointAt(u, optionalTarget);\n          }\n          i++;\n        }\n        return null;\n\n        // loop where sum != 0, sum > d , sum+1 <d\n      }\n\n      // We cannot use the default THREE.Curve getPoint() with getLength() because in\n      // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n      // getPoint() depends on getLength\n    }, {\n      key: \"getLength\",\n      value: function getLength() {\n        var lens = this.getCurveLengths();\n        return lens[lens.length - 1];\n      }\n\n      // cacheLengths must be recalculated.\n    }, {\n      key: \"updateArcLengths\",\n      value: function updateArcLengths() {\n        this.needsUpdate = true;\n        this.cacheLengths = null;\n        this.getCurveLengths();\n      }\n\n      // Compute lengths and cache them\n      // We cannot overwrite getLengths() because UtoT mapping uses it.\n    }, {\n      key: \"getCurveLengths\",\n      value: function getCurveLengths() {\n        // We use cache values if curves and cache array are same length\n\n        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n          return this.cacheLengths;\n        }\n\n        // Get length of sub-curve\n        // Push sums into cached array\n\n        var lengths = [];\n        var sums = 0;\n        for (var i = 0, l = this.curves.length; i < l; i++) {\n          sums += this.curves[i].getLength();\n          lengths.push(sums);\n        }\n        this.cacheLengths = lengths;\n        return lengths;\n      }\n    }, {\n      key: \"getSpacedPoints\",\n      value: function getSpacedPoints() {\n        var divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 40;\n        var points = [];\n        for (var i = 0; i <= divisions; i++) {\n          points.push(this.getPoint(i / divisions));\n        }\n        if (this.autoClose) {\n          points.push(points[0]);\n        }\n        return points;\n      }\n    }, {\n      key: \"getPoints\",\n      value: function getPoints() {\n        var divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n        var points = [];\n        var last;\n        for (var i = 0, curves = this.curves; i < curves.length; i++) {\n          var curve = curves[i];\n          var resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;\n          var pts = curve.getPoints(resolution);\n          for (var j = 0; j < pts.length; j++) {\n            var point = pts[j];\n            if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n            points.push(point);\n            last = point;\n          }\n        }\n        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n          points.push(points[0]);\n        }\n        return points;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(CurvePath, \"copy\", this, 3)([source]);\n        this.curves = [];\n        for (var i = 0, l = source.curves.length; i < l; i++) {\n          var curve = source.curves[i];\n          this.curves.push(curve.clone());\n        }\n        this.autoClose = source.autoClose;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(CurvePath, \"toJSON\", this, 3)([]);\n        data.autoClose = this.autoClose;\n        data.curves = [];\n        for (var i = 0, l = this.curves.length; i < l; i++) {\n          var curve = this.curves[i];\n          data.curves.push(curve.toJSON());\n        }\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(CurvePath, \"fromJSON\", this, 3)([json]);\n        this.autoClose = json.autoClose;\n        this.curves = [];\n        for (var i = 0, l = json.curves.length; i < l; i++) {\n          var curve = json.curves[i];\n          this.curves.push(new Curves[curve.type]().fromJSON(curve));\n        }\n        return this;\n      }\n    }]);\n  }(Curve);\n  var Path = exports.Path = /*#__PURE__*/function (_CurvePath) {\n    function Path(points) {\n      var _this56;\n      (0, _classCallCheck2.default)(this, Path);\n      _this56 = _callSuper(this, Path);\n      _this56.type = 'Path';\n      _this56.currentPoint = new Vector2();\n      if (points) {\n        _this56.setFromPoints(points);\n      }\n      return _this56;\n    }\n    (0, _inherits2.default)(Path, _CurvePath);\n    return (0, _createClass2.default)(Path, [{\n      key: \"setFromPoints\",\n      value: function setFromPoints(points) {\n        this.moveTo(points[0].x, points[0].y);\n        for (var i = 1, l = points.length; i < l; i++) {\n          this.lineTo(points[i].x, points[i].y);\n        }\n        return this;\n      }\n    }, {\n      key: \"moveTo\",\n      value: function moveTo(x, y) {\n        this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n        return this;\n      }\n    }, {\n      key: \"lineTo\",\n      value: function lineTo(x, y) {\n        var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n        this.curves.push(curve);\n        this.currentPoint.set(x, y);\n        return this;\n      }\n    }, {\n      key: \"quadraticCurveTo\",\n      value: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n        var curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n        this.curves.push(curve);\n        this.currentPoint.set(aX, aY);\n        return this;\n      }\n    }, {\n      key: \"bezierCurveTo\",\n      value: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n        var curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n        this.curves.push(curve);\n        this.currentPoint.set(aX, aY);\n        return this;\n      }\n    }, {\n      key: \"splineThru\",\n      value: function splineThru(pts /*Array of Vector*/) {\n        var npts = [this.currentPoint.clone()].concat(pts);\n        var curve = new SplineCurve(npts);\n        this.curves.push(curve);\n        this.currentPoint.copy(pts[pts.length - 1]);\n        return this;\n      }\n    }, {\n      key: \"arc\",\n      value: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n        var x0 = this.currentPoint.x;\n        var y0 = this.currentPoint.y;\n        this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n        return this;\n      }\n    }, {\n      key: \"absarc\",\n      value: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n        return this;\n      }\n    }, {\n      key: \"ellipse\",\n      value: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n        var x0 = this.currentPoint.x;\n        var y0 = this.currentPoint.y;\n        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n        return this;\n      }\n    }, {\n      key: \"absellipse\",\n      value: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n        var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n        if (this.curves.length > 0) {\n          // if a previous curve is present, attempt to join\n          var firstPoint = curve.getPoint(0);\n          if (!firstPoint.equals(this.currentPoint)) {\n            this.lineTo(firstPoint.x, firstPoint.y);\n          }\n        }\n        this.curves.push(curve);\n        var lastPoint = curve.getPoint(1);\n        this.currentPoint.copy(lastPoint);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(Path, \"copy\", this, 3)([source]);\n        this.currentPoint.copy(source.currentPoint);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(Path, \"toJSON\", this, 3)([]);\n        data.currentPoint = this.currentPoint.toArray();\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(Path, \"fromJSON\", this, 3)([json]);\n        this.currentPoint.fromArray(json.currentPoint);\n        return this;\n      }\n    }]);\n  }(CurvePath);\n  var LatheGeometry = exports.LatheGeometry = /*#__PURE__*/function (_BufferGeometry2) {\n    function LatheGeometry() {\n      var _this57;\n      var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)];\n      var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      var phiStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var phiLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n      (0, _classCallCheck2.default)(this, LatheGeometry);\n      _this57 = _callSuper(this, LatheGeometry);\n      _this57.type = 'LatheGeometry';\n      _this57.parameters = {\n        points: points,\n        segments: segments,\n        phiStart: phiStart,\n        phiLength: phiLength\n      };\n      segments = Math.floor(segments);\n\n      // clamp phiLength so it's in range of [ 0, 2PI ]\n\n      phiLength = _clamp(phiLength, 0, Math.PI * 2);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var uvs = [];\n      var initNormals = [];\n      var normals = [];\n\n      // helper variables\n\n      var inverseSegments = 1.0 / segments;\n      var vertex = new Vector3();\n      var uv = new Vector2();\n      var normal = new Vector3();\n      var curNormal = new Vector3();\n      var prevNormal = new Vector3();\n      var dx = 0;\n      var dy = 0;\n\n      // pre-compute normals for initial \"meridian\"\n\n      for (var j = 0; j <= points.length - 1; j++) {\n        switch (j) {\n          case 0:\n            // special handling for 1st vertex on path\n\n            dx = points[j + 1].x - points[j].x;\n            dy = points[j + 1].y - points[j].y;\n            normal.x = dy * 1.0;\n            normal.y = -dx;\n            normal.z = dy * 0.0;\n            prevNormal.copy(normal);\n            normal.normalize();\n            initNormals.push(normal.x, normal.y, normal.z);\n            break;\n          case points.length - 1:\n            // special handling for last Vertex on path\n\n            initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);\n            break;\n          default:\n            // default handling for all vertices in between\n\n            dx = points[j + 1].x - points[j].x;\n            dy = points[j + 1].y - points[j].y;\n            normal.x = dy * 1.0;\n            normal.y = -dx;\n            normal.z = dy * 0.0;\n            curNormal.copy(normal);\n            normal.x += prevNormal.x;\n            normal.y += prevNormal.y;\n            normal.z += prevNormal.z;\n            normal.normalize();\n            initNormals.push(normal.x, normal.y, normal.z);\n            prevNormal.copy(curNormal);\n        }\n      }\n\n      // generate vertices, uvs and normals\n\n      for (var i = 0; i <= segments; i++) {\n        var phi = phiStart + i * inverseSegments * phiLength;\n        var sin = Math.sin(phi);\n        var cos = Math.cos(phi);\n        for (var _j3 = 0; _j3 <= points.length - 1; _j3++) {\n          // vertex\n\n          vertex.x = points[_j3].x * sin;\n          vertex.y = points[_j3].y;\n          vertex.z = points[_j3].x * cos;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // uv\n\n          uv.x = i / segments;\n          uv.y = _j3 / (points.length - 1);\n          uvs.push(uv.x, uv.y);\n\n          // normal\n\n          var x = initNormals[3 * _j3 + 0] * sin;\n          var y = initNormals[3 * _j3 + 1];\n          var z = initNormals[3 * _j3 + 0] * cos;\n          normals.push(x, y, z);\n        }\n      }\n\n      // indices\n\n      for (var _i33 = 0; _i33 < segments; _i33++) {\n        for (var _j4 = 0; _j4 < points.length - 1; _j4++) {\n          var base = _j4 + _i33 * points.length;\n          var a = base;\n          var b = base + points.length;\n          var c = base + points.length + 1;\n          var d = base + 1;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(c, d, b);\n        }\n      }\n\n      // build geometry\n\n      _this57.setIndex(indices);\n      _this57.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this57.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      _this57.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return _this57;\n    }\n    (0, _inherits2.default)(LatheGeometry, _BufferGeometry2);\n    return (0, _createClass2.default)(LatheGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LatheGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);\n      }\n    }]);\n  }(BufferGeometry);\n  var CapsuleGeometry = exports.CapsuleGeometry = /*#__PURE__*/function (_LatheGeometry) {\n    function CapsuleGeometry() {\n      var _this58;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var capSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n      var radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      (0, _classCallCheck2.default)(this, CapsuleGeometry);\n      var path = new Path();\n      path.absarc(0, -length / 2, radius, Math.PI * 1.5, 0);\n      path.absarc(0, length / 2, radius, 0, Math.PI * 0.5);\n      _this58 = _callSuper(this, CapsuleGeometry, [path.getPoints(capSegments), radialSegments]);\n      _this58.type = 'CapsuleGeometry';\n      _this58.parameters = {\n        radius: radius,\n        length: length,\n        capSegments: capSegments,\n        radialSegments: radialSegments\n      };\n      return _this58;\n    }\n    (0, _inherits2.default)(CapsuleGeometry, _LatheGeometry);\n    return (0, _createClass2.default)(CapsuleGeometry, null, [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);\n      }\n    }]);\n  }(LatheGeometry);\n  var CircleGeometry = exports.CircleGeometry = /*#__PURE__*/function (_BufferGeometry3) {\n    function CircleGeometry() {\n      var _this59;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      var thetaStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var thetaLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n      (0, _classCallCheck2.default)(this, CircleGeometry);\n      _this59 = _callSuper(this, CircleGeometry);\n      _this59.type = 'CircleGeometry';\n      _this59.parameters = {\n        radius: radius,\n        segments: segments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      segments = Math.max(3, segments);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // helper variables\n\n      var vertex = new Vector3();\n      var uv = new Vector2();\n\n      // center point\n\n      vertices.push(0, 0, 0);\n      normals.push(0, 0, 1);\n      uvs.push(0.5, 0.5);\n      for (var s = 0, i = 3; s <= segments; s++, i += 3) {\n        var segment = thetaStart + s / segments * thetaLength;\n\n        // vertex\n\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, 0, 1);\n\n        // uvs\n\n        uv.x = (vertices[i] / radius + 1) / 2;\n        uv.y = (vertices[i + 1] / radius + 1) / 2;\n        uvs.push(uv.x, uv.y);\n      }\n\n      // indices\n\n      for (var _i34 = 1; _i34 <= segments; _i34++) {\n        indices.push(_i34, _i34 + 1, 0);\n      }\n\n      // build geometry\n\n      _this59.setIndex(indices);\n      _this59.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this59.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this59.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      return _this59;\n    }\n    (0, _inherits2.default)(CircleGeometry, _BufferGeometry3);\n    return (0, _createClass2.default)(CircleGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(CircleGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);\n      }\n    }]);\n  }(BufferGeometry);\n  var CylinderGeometry = exports.CylinderGeometry = /*#__PURE__*/function (_BufferGeometry4) {\n    function CylinderGeometry() {\n      var _this60;\n      var radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n      var heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n      var openEnded = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var thetaStart = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var thetaLength = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Math.PI * 2;\n      (0, _classCallCheck2.default)(this, CylinderGeometry);\n      _this60 = _callSuper(this, CylinderGeometry);\n      _this60.type = 'CylinderGeometry';\n      _this60.parameters = {\n        radiusTop: radiusTop,\n        radiusBottom: radiusBottom,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      var scope = _this60;\n      radialSegments = Math.floor(radialSegments);\n      heightSegments = Math.floor(heightSegments);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // helper variables\n\n      var index = 0;\n      var indexArray = [];\n      var halfHeight = height / 2;\n      var groupStart = 0;\n\n      // generate geometry\n\n      generateTorso();\n      if (openEnded === false) {\n        if (radiusTop > 0) generateCap(true);\n        if (radiusBottom > 0) generateCap(false);\n      }\n\n      // build geometry\n\n      _this60.setIndex(indices);\n      _this60.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this60.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this60.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      function generateTorso() {\n        var normal = new Vector3();\n        var vertex = new Vector3();\n        var groupCount = 0;\n\n        // this will be used to calculate the normal\n        var slope = (radiusBottom - radiusTop) / height;\n\n        // generate vertices, normals and uvs\n\n        for (var y = 0; y <= heightSegments; y++) {\n          var indexRow = [];\n          var v = y / heightSegments;\n\n          // calculate the radius of the current row\n\n          var radius = v * (radiusBottom - radiusTop) + radiusTop;\n          for (var x = 0; x <= radialSegments; x++) {\n            var u = x / radialSegments;\n            var theta = u * thetaLength + thetaStart;\n            var sinTheta = Math.sin(theta);\n            var cosTheta = Math.cos(theta);\n\n            // vertex\n\n            vertex.x = radius * sinTheta;\n            vertex.y = -v * height + halfHeight;\n            vertex.z = radius * cosTheta;\n            vertices.push(vertex.x, vertex.y, vertex.z);\n\n            // normal\n\n            normal.set(sinTheta, slope, cosTheta).normalize();\n            normals.push(normal.x, normal.y, normal.z);\n\n            // uv\n\n            uvs.push(u, 1 - v);\n\n            // save index of vertex in respective row\n\n            indexRow.push(index++);\n          }\n\n          // now save vertices of the row in our index array\n\n          indexArray.push(indexRow);\n        }\n\n        // generate indices\n\n        for (var _x2 = 0; _x2 < radialSegments; _x2++) {\n          for (var _y2 = 0; _y2 < heightSegments; _y2++) {\n            // we use the index array to access the correct indices\n\n            var a = indexArray[_y2][_x2];\n            var b = indexArray[_y2 + 1][_x2];\n            var c = indexArray[_y2 + 1][_x2 + 1];\n            var d = indexArray[_y2][_x2 + 1];\n\n            // faces\n\n            if (radiusTop > 0 || _y2 !== 0) {\n              indices.push(a, b, d);\n              groupCount += 3;\n            }\n            if (radiusBottom > 0 || _y2 !== heightSegments - 1) {\n              indices.push(b, c, d);\n              groupCount += 3;\n            }\n          }\n        }\n\n        // add a group to the geometry. this will ensure multi material support\n\n        scope.addGroup(groupStart, groupCount, 0);\n\n        // calculate new start value for groups\n\n        groupStart += groupCount;\n      }\n      function generateCap(top) {\n        // save the index of the first center vertex\n        var centerIndexStart = index;\n        var uv = new Vector2();\n        var vertex = new Vector3();\n        var groupCount = 0;\n        var radius = top === true ? radiusTop : radiusBottom;\n        var sign = top === true ? 1 : -1;\n\n        // first we generate the center vertex data of the cap.\n        // because the geometry needs one set of uvs per face,\n        // we must generate a center vertex per face/segment\n\n        for (var x = 1; x <= radialSegments; x++) {\n          // vertex\n\n          vertices.push(0, halfHeight * sign, 0);\n\n          // normal\n\n          normals.push(0, sign, 0);\n\n          // uv\n\n          uvs.push(0.5, 0.5);\n\n          // increase index\n\n          index++;\n        }\n\n        // save the index of the last center vertex\n        var centerIndexEnd = index;\n\n        // now we generate the surrounding vertices, normals and uvs\n\n        for (var _x3 = 0; _x3 <= radialSegments; _x3++) {\n          var u = _x3 / radialSegments;\n          var theta = u * thetaLength + thetaStart;\n          var cosTheta = Math.cos(theta);\n          var sinTheta = Math.sin(theta);\n\n          // vertex\n\n          vertex.x = radius * sinTheta;\n          vertex.y = halfHeight * sign;\n          vertex.z = radius * cosTheta;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          normals.push(0, sign, 0);\n\n          // uv\n\n          uv.x = cosTheta * 0.5 + 0.5;\n          uv.y = sinTheta * 0.5 * sign + 0.5;\n          uvs.push(uv.x, uv.y);\n\n          // increase index\n\n          index++;\n        }\n\n        // generate indices\n\n        for (var _x4 = 0; _x4 < radialSegments; _x4++) {\n          var c = centerIndexStart + _x4;\n          var i = centerIndexEnd + _x4;\n          if (top === true) {\n            // face top\n\n            indices.push(i, i + 1, c);\n          } else {\n            // face bottom\n\n            indices.push(i + 1, i, c);\n          }\n          groupCount += 3;\n        }\n\n        // add a group to the geometry. this will ensure multi material support\n\n        scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n\n        // calculate new start value for groups\n\n        groupStart += groupCount;\n      }\n      return _this60;\n    }\n    (0, _inherits2.default)(CylinderGeometry, _BufferGeometry4);\n    return (0, _createClass2.default)(CylinderGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(CylinderGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n      }\n    }]);\n  }(BufferGeometry);\n  var ConeGeometry = exports.ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n    function ConeGeometry() {\n      var _this61;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n      var heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var openEnded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI * 2;\n      (0, _classCallCheck2.default)(this, ConeGeometry);\n      _this61 = _callSuper(this, ConeGeometry, [0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength]);\n      _this61.type = 'ConeGeometry';\n      _this61.parameters = {\n        radius: radius,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      return _this61;\n    }\n    (0, _inherits2.default)(ConeGeometry, _CylinderGeometry);\n    return (0, _createClass2.default)(ConeGeometry, null, [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n      }\n    }]);\n  }(CylinderGeometry);\n  var PolyhedronGeometry = exports.PolyhedronGeometry = /*#__PURE__*/function (_BufferGeometry5) {\n    function PolyhedronGeometry() {\n      var _this62;\n      var vertices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var detail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      (0, _classCallCheck2.default)(this, PolyhedronGeometry);\n      _this62 = _callSuper(this, PolyhedronGeometry);\n      _this62.type = 'PolyhedronGeometry';\n      _this62.parameters = {\n        vertices: vertices,\n        indices: indices,\n        radius: radius,\n        detail: detail\n      };\n\n      // default buffer data\n\n      var vertexBuffer = [];\n      var uvBuffer = [];\n\n      // the subdivision creates the vertex buffer data\n\n      subdivide(detail);\n\n      // all vertices should lie on a conceptual sphere with a given radius\n\n      applyRadius(radius);\n\n      // finally, create the uv data\n\n      generateUVs();\n\n      // build non-indexed geometry\n\n      _this62.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n      _this62.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n      _this62.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n      if (detail === 0) {\n        _this62.computeVertexNormals(); // flat normals\n      } else {\n        _this62.normalizeNormals(); // smooth normals\n      }\n\n      // helper functions\n\n      function subdivide(detail) {\n        var a = new Vector3();\n        var b = new Vector3();\n        var c = new Vector3();\n\n        // iterate over all faces and apply a subdivision with the given detail value\n\n        for (var i = 0; i < indices.length; i += 3) {\n          // get the vertices of the face\n\n          getVertexByIndex(indices[i + 0], a);\n          getVertexByIndex(indices[i + 1], b);\n          getVertexByIndex(indices[i + 2], c);\n\n          // perform subdivision\n\n          subdivideFace(a, b, c, detail);\n        }\n      }\n      function subdivideFace(a, b, c, detail) {\n        var cols = detail + 1;\n\n        // we use this multidimensional array as a data structure for creating the subdivision\n\n        var v = [];\n\n        // construct all of the vertices for this subdivision\n\n        for (var i = 0; i <= cols; i++) {\n          v[i] = [];\n          var aj = a.clone().lerp(c, i / cols);\n          var bj = b.clone().lerp(c, i / cols);\n          var rows = cols - i;\n          for (var j = 0; j <= rows; j++) {\n            if (j === 0 && i === cols) {\n              v[i][j] = aj;\n            } else {\n              v[i][j] = aj.clone().lerp(bj, j / rows);\n            }\n          }\n        }\n\n        // construct all of the faces\n\n        for (var _i35 = 0; _i35 < cols; _i35++) {\n          for (var _j5 = 0; _j5 < 2 * (cols - _i35) - 1; _j5++) {\n            var k = Math.floor(_j5 / 2);\n            if (_j5 % 2 === 0) {\n              pushVertex(v[_i35][k + 1]);\n              pushVertex(v[_i35 + 1][k]);\n              pushVertex(v[_i35][k]);\n            } else {\n              pushVertex(v[_i35][k + 1]);\n              pushVertex(v[_i35 + 1][k + 1]);\n              pushVertex(v[_i35 + 1][k]);\n            }\n          }\n        }\n      }\n      function applyRadius(radius) {\n        var vertex = new Vector3();\n\n        // iterate over the entire buffer and apply the radius to each vertex\n\n        for (var i = 0; i < vertexBuffer.length; i += 3) {\n          vertex.x = vertexBuffer[i + 0];\n          vertex.y = vertexBuffer[i + 1];\n          vertex.z = vertexBuffer[i + 2];\n          vertex.normalize().multiplyScalar(radius);\n          vertexBuffer[i + 0] = vertex.x;\n          vertexBuffer[i + 1] = vertex.y;\n          vertexBuffer[i + 2] = vertex.z;\n        }\n      }\n      function generateUVs() {\n        var vertex = new Vector3();\n        for (var i = 0; i < vertexBuffer.length; i += 3) {\n          vertex.x = vertexBuffer[i + 0];\n          vertex.y = vertexBuffer[i + 1];\n          vertex.z = vertexBuffer[i + 2];\n          var u = azimuth(vertex) / 2 / Math.PI + 0.5;\n          var v = inclination(vertex) / Math.PI + 0.5;\n          uvBuffer.push(u, 1 - v);\n        }\n        correctUVs();\n        correctSeam();\n      }\n      function correctSeam() {\n        // handle case when face straddles the seam, see #3269\n\n        for (var i = 0; i < uvBuffer.length; i += 6) {\n          // uv data of a single face\n\n          var x0 = uvBuffer[i + 0];\n          var x1 = uvBuffer[i + 2];\n          var x2 = uvBuffer[i + 4];\n          var max = Math.max(x0, x1, x2);\n          var min = Math.min(x0, x1, x2);\n\n          // 0.9 is somewhat arbitrary\n\n          if (max > 0.9 && min < 0.1) {\n            if (x0 < 0.2) uvBuffer[i + 0] += 1;\n            if (x1 < 0.2) uvBuffer[i + 2] += 1;\n            if (x2 < 0.2) uvBuffer[i + 4] += 1;\n          }\n        }\n      }\n      function pushVertex(vertex) {\n        vertexBuffer.push(vertex.x, vertex.y, vertex.z);\n      }\n      function getVertexByIndex(index, vertex) {\n        var stride = index * 3;\n        vertex.x = vertices[stride + 0];\n        vertex.y = vertices[stride + 1];\n        vertex.z = vertices[stride + 2];\n      }\n      function correctUVs() {\n        var a = new Vector3();\n        var b = new Vector3();\n        var c = new Vector3();\n        var centroid = new Vector3();\n        var uvA = new Vector2();\n        var uvB = new Vector2();\n        var uvC = new Vector2();\n        for (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n          a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n          b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n          c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n          uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n          uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n          uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n          centroid.copy(a).add(b).add(c).divideScalar(3);\n          var azi = azimuth(centroid);\n          correctUV(uvA, j + 0, a, azi);\n          correctUV(uvB, j + 2, b, azi);\n          correctUV(uvC, j + 4, c, azi);\n        }\n      }\n      function correctUV(uv, stride, vector, azimuth) {\n        if (azimuth < 0 && uv.x === 1) {\n          uvBuffer[stride] = uv.x - 1;\n        }\n        if (vector.x === 0 && vector.z === 0) {\n          uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n        }\n      }\n\n      // Angle around the Y axis, counter-clockwise when looking from above.\n\n      function azimuth(vector) {\n        return Math.atan2(vector.z, -vector.x);\n      }\n\n      // Angle above the XZ plane.\n\n      function inclination(vector) {\n        return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n      }\n      return _this62;\n    }\n    (0, _inherits2.default)(PolyhedronGeometry, _BufferGeometry5);\n    return (0, _createClass2.default)(PolyhedronGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(PolyhedronGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);\n      }\n    }]);\n  }(BufferGeometry);\n  var DodecahedronGeometry = exports.DodecahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n    function DodecahedronGeometry() {\n      var _this63;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, DodecahedronGeometry);\n      var t = (1 + Math.sqrt(5)) / 2;\n      var r = 1 / t;\n      var vertices = [\n      // (±1, ±1, ±1)\n      -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1,\n      // (0, ±1/φ, ±φ)\n      0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t,\n      // (±1/φ, ±φ, 0)\n      -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0,\n      // (±φ, 0, ±1/φ)\n      -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n      var indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n      _this63 = _callSuper(this, DodecahedronGeometry, [vertices, indices, radius, detail]);\n      _this63.type = 'DodecahedronGeometry';\n      _this63.parameters = {\n        radius: radius,\n        detail: detail\n      };\n      return _this63;\n    }\n    (0, _inherits2.default)(DodecahedronGeometry, _PolyhedronGeometry);\n    return (0, _createClass2.default)(DodecahedronGeometry, null, [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new DodecahedronGeometry(data.radius, data.detail);\n      }\n    }]);\n  }(PolyhedronGeometry);\n  var _v0 = /*@__PURE__*/new Vector3();\n  var _v1$1 = /*@__PURE__*/new Vector3();\n  var _normal = /*@__PURE__*/new Vector3();\n  var _triangle = /*@__PURE__*/new Triangle();\n  var EdgesGeometry = exports.EdgesGeometry = /*#__PURE__*/function (_BufferGeometry6) {\n    function EdgesGeometry() {\n      var _this64;\n      var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thresholdAngle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      (0, _classCallCheck2.default)(this, EdgesGeometry);\n      _this64 = _callSuper(this, EdgesGeometry);\n      _this64.type = 'EdgesGeometry';\n      _this64.parameters = {\n        geometry: geometry,\n        thresholdAngle: thresholdAngle\n      };\n      if (geometry !== null) {\n        var precisionPoints = 4;\n        var precision = Math.pow(10, precisionPoints);\n        var thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n        var indexAttr = geometry.getIndex();\n        var positionAttr = geometry.getAttribute('position');\n        var indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n        var indexArr = [0, 0, 0];\n        var vertKeys = ['a', 'b', 'c'];\n        var hashes = new Array(3);\n        var edgeData = {};\n        var vertices = [];\n        for (var i = 0; i < indexCount; i += 3) {\n          if (indexAttr) {\n            indexArr[0] = indexAttr.getX(i);\n            indexArr[1] = indexAttr.getX(i + 1);\n            indexArr[2] = indexAttr.getX(i + 2);\n          } else {\n            indexArr[0] = i;\n            indexArr[1] = i + 1;\n            indexArr[2] = i + 2;\n          }\n          var a = _triangle.a,\n            b = _triangle.b,\n            c = _triangle.c;\n          a.fromBufferAttribute(positionAttr, indexArr[0]);\n          b.fromBufferAttribute(positionAttr, indexArr[1]);\n          c.fromBufferAttribute(positionAttr, indexArr[2]);\n          _triangle.getNormal(_normal);\n\n          // create hashes for the edge from the vertices\n          hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n          hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n          hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;\n\n          // skip degenerate triangles\n          if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n            continue;\n          }\n\n          // iterate over every edge\n          for (var j = 0; j < 3; j++) {\n            // get the first and next vertex making up the edge\n            var jNext = (j + 1) % 3;\n            var vecHash0 = hashes[j];\n            var vecHash1 = hashes[jNext];\n            var v0 = _triangle[vertKeys[j]];\n            var v1 = _triangle[vertKeys[jNext]];\n            var hash = `${vecHash0}_${vecHash1}`;\n            var reverseHash = `${vecHash1}_${vecHash0}`;\n            if (reverseHash in edgeData && edgeData[reverseHash]) {\n              // if we found a sibling edge add it into the vertex array if\n              // it meets the angle threshold and delete the edge from the map.\n              if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n                vertices.push(v0.x, v0.y, v0.z);\n                vertices.push(v1.x, v1.y, v1.z);\n              }\n              edgeData[reverseHash] = null;\n            } else if (!(hash in edgeData)) {\n              // if we've already got an edge here then skip adding a new one\n              edgeData[hash] = {\n                index0: indexArr[j],\n                index1: indexArr[jNext],\n                normal: _normal.clone()\n              };\n            }\n          }\n        }\n\n        // iterate over all remaining, unmatched edges and add them to the vertex array\n        for (var key in edgeData) {\n          if (edgeData[key]) {\n            var _edgeData$key = edgeData[key],\n              index0 = _edgeData$key.index0,\n              index1 = _edgeData$key.index1;\n            _v0.fromBufferAttribute(positionAttr, index0);\n            _v1$1.fromBufferAttribute(positionAttr, index1);\n            vertices.push(_v0.x, _v0.y, _v0.z);\n            vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n          }\n        }\n        _this64.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      }\n      return _this64;\n    }\n    (0, _inherits2.default)(EdgesGeometry, _BufferGeometry6);\n    return (0, _createClass2.default)(EdgesGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(EdgesGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }]);\n  }(BufferGeometry);\n  var Shape = exports.Shape = /*#__PURE__*/function (_Path) {\n    function Shape(points) {\n      var _this65;\n      (0, _classCallCheck2.default)(this, Shape);\n      _this65 = _callSuper(this, Shape, [points]);\n      _this65.uuid = generateUUID();\n      _this65.type = 'Shape';\n      _this65.holes = [];\n      return _this65;\n    }\n    (0, _inherits2.default)(Shape, _Path);\n    return (0, _createClass2.default)(Shape, [{\n      key: \"getPointsHoles\",\n      value: function getPointsHoles(divisions) {\n        var holesPts = [];\n        for (var i = 0, l = this.holes.length; i < l; i++) {\n          holesPts[i] = this.holes[i].getPoints(divisions);\n        }\n        return holesPts;\n      }\n\n      // get points of shape and holes (keypoints based on segments parameter)\n    }, {\n      key: \"extractPoints\",\n      value: function extractPoints(divisions) {\n        return {\n          shape: this.getPoints(divisions),\n          holes: this.getPointsHoles(divisions)\n        };\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(Shape, \"copy\", this, 3)([source]);\n        this.holes = [];\n        for (var i = 0, l = source.holes.length; i < l; i++) {\n          var hole = source.holes[i];\n          this.holes.push(hole.clone());\n        }\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(Shape, \"toJSON\", this, 3)([]);\n        data.uuid = this.uuid;\n        data.holes = [];\n        for (var i = 0, l = this.holes.length; i < l; i++) {\n          var hole = this.holes[i];\n          data.holes.push(hole.toJSON());\n        }\n        return data;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        _superPropGet(Shape, \"fromJSON\", this, 3)([json]);\n        this.uuid = json.uuid;\n        this.holes = [];\n        for (var i = 0, l = json.holes.length; i < l; i++) {\n          var hole = json.holes[i];\n          this.holes.push(new Path().fromJSON(hole));\n        }\n        return this;\n      }\n    }]);\n  }(Path);\n  /**\n   * Port from https://github.com/mapbox/earcut (v2.2.4)\n   */\n  var Earcut = {\n    triangulate: function triangulate(data, holeIndices) {\n      var dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n      var hasHoles = holeIndices && holeIndices.length;\n      var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n      var outerNode = linkedList(data, 0, outerLen, dim, true);\n      var triangles = [];\n      if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n      var minX, minY, maxX, maxY, x, y, invSize;\n      if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n      // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n      if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n        for (var i = dim; i < outerLen; i += dim) {\n          x = data[i];\n          y = data[i + 1];\n          if (x < minX) minX = x;\n          if (y < minY) minY = y;\n          if (x > maxX) maxX = x;\n          if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n      }\n      earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n      return triangles;\n    }\n  };\n\n  // create a circular doubly linked list from polygon points in the specified winding order\n  function linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n    if (clockwise === signedArea(data, start, end, dim) > 0) {\n      for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n      for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n    if (last && equals(last, last.next)) {\n      removeNode(last);\n      last = last.next;\n    }\n    return last;\n  }\n\n  // eliminate colinear or duplicate points\n  function filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n    var p = start,\n      again;\n    do {\n      again = false;\n      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n        removeNode(p);\n        p = end = p.prev;\n        if (p === p.next) break;\n        again = true;\n      } else {\n        p = p.next;\n      }\n    } while (again || p !== end);\n    return end;\n  }\n\n  // main ear slicing loop which triangulates a polygon (given as a linked list)\n  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n    var stop = ear,\n      prev,\n      next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n      prev = ear.prev;\n      next = ear.next;\n      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n        // cut off the triangle\n        triangles.push(prev.i / dim | 0);\n        triangles.push(ear.i / dim | 0);\n        triangles.push(next.i / dim | 0);\n        removeNode(ear);\n\n        // skipping the next vertex leads to less sliver triangles\n        ear = next.next;\n        stop = next.next;\n        continue;\n      }\n      ear = next;\n\n      // if we looped through the whole remaining polygon and can't find any more ears\n      if (ear === stop) {\n        // try filtering points and slicing again\n        if (!pass) {\n          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n          // if this didn't work, try curing all small self-intersections locally\n        } else if (pass === 1) {\n          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n          // as a last resort, try splitting the remaining polygon into two\n        } else if (pass === 2) {\n          splitEarcut(ear, triangles, dim, minX, minY, invSize);\n        }\n        break;\n      }\n    }\n  }\n\n  // check whether a polygon node forms a valid ear with adjacent nodes\n  function isEar(ear) {\n    var a = ear.prev,\n      b = ear,\n      c = ear.next;\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x,\n      bx = b.x,\n      cx = c.x,\n      ay = a.y,\n      by = b.y,\n      cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,\n      y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,\n      x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,\n      y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;\n    var p = c.next;\n    while (p !== a) {\n      if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.next;\n    }\n    return true;\n  }\n  function isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n      b = ear,\n      c = ear.next;\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x,\n      bx = b.x,\n      cx = c.x,\n      ay = a.y,\n      by = b.y,\n      cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,\n      y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,\n      x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,\n      y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n      maxZ = zOrder(x1, y1, minX, minY, invSize);\n    var p = ear.prevZ,\n      n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n      if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.prevZ;\n      if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n      n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n      if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n      if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n      n = n.nextZ;\n    }\n    return true;\n  }\n\n  // go through all polygon nodes and cure small local self-intersections\n  function cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n      var a = p.prev,\n        b = p.next.next;\n      if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n        triangles.push(a.i / dim | 0);\n        triangles.push(p.i / dim | 0);\n        triangles.push(b.i / dim | 0);\n\n        // remove two nodes involved\n        removeNode(p);\n        removeNode(p.next);\n        p = start = b;\n      }\n      p = p.next;\n    } while (p !== start);\n    return filterPoints(p);\n  }\n\n  // try splitting polygon into two and triangulate them independently\n  function splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n      var b = a.next.next;\n      while (b !== a.prev) {\n        if (a.i !== b.i && isValidDiagonal(a, b)) {\n          // split the polygon in two by the diagonal\n          var c = splitPolygon(a, b);\n\n          // filter colinear points around the cuts\n          a = filterPoints(a, a.next);\n          c = filterPoints(c, c.next);\n\n          // run earcut on each half\n          earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n          earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n          return;\n        }\n        b = b.next;\n      }\n      a = a.next;\n    } while (a !== start);\n  }\n\n  // link every hole into the outer loop, producing a single-ring polygon without holes\n  function eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [];\n    var i, len, start, end, list;\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n      start = holeIndices[i] * dim;\n      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      list = linkedList(data, start, end, dim, false);\n      if (list === list.next) list.steiner = true;\n      queue.push(getLeftmost(list));\n    }\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n      outerNode = eliminateHole(queue[i], outerNode);\n    }\n    return outerNode;\n  }\n  function compareX(a, b) {\n    return a.x - b.x;\n  }\n\n  // find a bridge between vertices that connects hole with an outer ring and link it\n  function eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n      return outerNode;\n    }\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n  }\n\n  // David Eberly's algorithm for finding a bridge between hole and outer polygon\n  function findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n      qx = -Infinity,\n      m;\n    var hx = hole.x,\n      hy = hole.y;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n        var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n        if (x <= hx && x > qx) {\n          qx = x;\n          m = p.x < p.next.x ? p : p.next;\n          if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n        }\n      }\n      p = p.next;\n    } while (p !== outerNode);\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n      mx = m.x,\n      my = m.y;\n    var tanMin = Infinity,\n      tan;\n    p = m;\n    do {\n      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n          m = p;\n          tanMin = tan;\n        }\n      }\n      p = p.next;\n    } while (p !== stop);\n    return m;\n  }\n\n  // whether sector in vertex m contains sector in vertex p in the same coordinates\n  function sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n  }\n\n  // interlink polygon nodes in z-order\n  function indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n      if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n      p.prevZ = p.prev;\n      p.nextZ = p.next;\n      p = p.next;\n    } while (p !== start);\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n    sortLinked(p);\n  }\n\n  // Simon Tatham's linked list merge sort algorithm\n  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n  function sortLinked(list) {\n    var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      numMerges = 0;\n      while (p) {\n        numMerges++;\n        q = p;\n        pSize = 0;\n        for (i = 0; i < inSize; i++) {\n          pSize++;\n          q = q.nextZ;\n          if (!q) break;\n        }\n        qSize = inSize;\n        while (pSize > 0 || qSize > 0 && q) {\n          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n            e = p;\n            p = p.nextZ;\n            pSize--;\n          } else {\n            e = q;\n            q = q.nextZ;\n            qSize--;\n          }\n          if (tail) tail.nextZ = e;else list = e;\n          e.prevZ = tail;\n          tail = e;\n        }\n        p = q;\n      }\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n    return list;\n  }\n\n  // z-order of a point given coords and inverse of the longer side of data bbox\n  function zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n    x = (x | x << 8) & 0x00FF00FF;\n    x = (x | x << 4) & 0x0F0F0F0F;\n    x = (x | x << 2) & 0x33333333;\n    x = (x | x << 1) & 0x55555555;\n    y = (y | y << 8) & 0x00FF00FF;\n    y = (y | y << 4) & 0x0F0F0F0F;\n    y = (y | y << 2) & 0x33333333;\n    y = (y | y << 1) & 0x55555555;\n    return x | y << 1;\n  }\n\n  // find the leftmost node of a polygon ring\n  function getLeftmost(start) {\n    var p = start,\n      leftmost = start;\n    do {\n      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n      p = p.next;\n    } while (p !== start);\n    return leftmost;\n  }\n\n  // check if a point lies within a convex triangle\n  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);\n  }\n\n  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n  function isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (\n    // doesn't intersect other edges\n    locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (\n    // locally visible\n    area(a.prev, a, b.prev) || area(a, b.prev, b)) ||\n    // does not create opposite-facing sectors\n    equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n  }\n\n  // signed area of a triangle\n  function area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n  }\n\n  // check if two points are equal\n  function equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n  }\n\n  // check if two segments intersect\n  function intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n  }\n\n  // for collinear points p, q, r, check if point q lies on segment pr\n  function onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n  }\n  function sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n  }\n\n  // check if a polygon diagonal intersects any polygon segments\n  function intersectsPolygon(a, b) {\n    var p = a;\n    do {\n      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n      p = p.next;\n    } while (p !== a);\n    return false;\n  }\n\n  // check if a polygon diagonal is locally inside the polygon\n  function locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n  }\n\n  // check if the middle point of a polygon diagonal is inside the polygon\n  function middleInside(a, b) {\n    var p = a,\n      inside = false;\n    var px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n    do {\n      if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n      p = p.next;\n    } while (p !== a);\n    return inside;\n  }\n\n  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n  // if one belongs to the outer ring and another to a hole, it merges it into a single ring\n  function splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n    a.next = b;\n    b.prev = a;\n    a2.next = an;\n    an.prev = a2;\n    b2.next = a2;\n    a2.prev = b2;\n    bp.next = b2;\n    b2.prev = bp;\n    return b2;\n  }\n\n  // create a node and optionally link it with previous one (in a circular doubly linked list)\n  function insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n    if (!last) {\n      p.prev = p;\n      p.next = p;\n    } else {\n      p.next = last.next;\n      p.prev = last;\n      last.next.prev = p;\n      last.next = p;\n    }\n    return p;\n  }\n  function removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n  }\n  function Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n  }\n  function signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n      j = i;\n    }\n    return sum;\n  }\n  var ShapeUtils = exports.ShapeUtils = /*#__PURE__*/function () {\n    function ShapeUtils() {\n      (0, _classCallCheck2.default)(this, ShapeUtils);\n    }\n    return (0, _createClass2.default)(ShapeUtils, null, [{\n      key: \"area\",\n      value:\n      // calculate area of the contour polygon\n\n      function area(contour) {\n        var n = contour.length;\n        var a = 0.0;\n        for (var p = n - 1, q = 0; q < n; p = q++) {\n          a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n        }\n        return a * 0.5;\n      }\n    }, {\n      key: \"isClockWise\",\n      value: function isClockWise(pts) {\n        return ShapeUtils.area(pts) < 0;\n      }\n    }, {\n      key: \"triangulateShape\",\n      value: function triangulateShape(contour, holes) {\n        var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n        var holeIndices = []; // array of hole indices\n        var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n        removeDupEndPts(contour);\n        addContour(vertices, contour);\n\n        //\n\n        var holeIndex = contour.length;\n        holes.forEach(removeDupEndPts);\n        for (var i = 0; i < holes.length; i++) {\n          holeIndices.push(holeIndex);\n          holeIndex += holes[i].length;\n          addContour(vertices, holes[i]);\n        }\n\n        //\n\n        var triangles = Earcut.triangulate(vertices, holeIndices);\n\n        //\n\n        for (var _i36 = 0; _i36 < triangles.length; _i36 += 3) {\n          faces.push(triangles.slice(_i36, _i36 + 3));\n        }\n        return faces;\n      }\n    }]);\n  }();\n  function removeDupEndPts(points) {\n    var l = points.length;\n    if (l > 2 && points[l - 1].equals(points[0])) {\n      points.pop();\n    }\n  }\n  function addContour(vertices, contour) {\n    for (var i = 0; i < contour.length; i++) {\n      vertices.push(contour[i].x);\n      vertices.push(contour[i].y);\n    }\n  }\n\n  /**\n   * Creates extruded geometry from a path shape.\n   *\n   * parameters = {\n   *\n   *  curveSegments: <int>, // number of points on the curves\n   *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n   *  depth: <float>, // Depth to extrude the shape\n   *\n   *  bevelEnabled: <bool>, // turn on bevel\n   *  bevelThickness: <float>, // how deep into the original shape bevel goes\n   *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n   *  bevelOffset: <float>, // how far from shape outline does bevel start\n   *  bevelSegments: <int>, // number of bevel layers\n   *\n   *  extrudePath: <THREE.Curve> // curve to extrude shape along\n   *\n   *  UVGenerator: <Object> // object that provides UV generator functions\n   *\n   * }\n   */\n  var ExtrudeGeometry = exports.ExtrudeGeometry = /*#__PURE__*/function (_BufferGeometry7) {\n    function ExtrudeGeometry() {\n      var _this66;\n      var shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, ExtrudeGeometry);\n      _this66 = _callSuper(this, ExtrudeGeometry);\n      _this66.type = 'ExtrudeGeometry';\n      _this66.parameters = {\n        shapes: shapes,\n        options: options\n      };\n      shapes = Array.isArray(shapes) ? shapes : [shapes];\n      var scope = _this66;\n      var verticesArray = [];\n      var uvArray = [];\n      for (var i = 0, l = shapes.length; i < l; i++) {\n        var shape = shapes[i];\n        addShape(shape);\n      }\n\n      // build geometry\n\n      _this66.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n      _this66.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n      _this66.computeVertexNormals();\n\n      // functions\n\n      function addShape(shape) {\n        var placeholder = [];\n\n        // options\n\n        var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n        var steps = options.steps !== undefined ? options.steps : 1;\n        var depth = options.depth !== undefined ? options.depth : 1;\n        var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n        var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n        var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n        var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n        var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n        var extrudePath = options.extrudePath;\n        var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n        //\n\n        var extrudePts,\n          extrudeByPath = false;\n        var splineTube, binormal, normal, position2;\n        if (extrudePath) {\n          extrudePts = extrudePath.getSpacedPoints(steps);\n          extrudeByPath = true;\n          bevelEnabled = false; // bevels not supported for path extrusion\n\n          // SETUP TNB variables\n\n          // TODO1 - have a .isClosed in spline?\n\n          splineTube = extrudePath.computeFrenetFrames(steps, false);\n\n          // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n          binormal = new Vector3();\n          normal = new Vector3();\n          position2 = new Vector3();\n        }\n\n        // Safeguards if bevels are not enabled\n\n        if (!bevelEnabled) {\n          bevelSegments = 0;\n          bevelThickness = 0;\n          bevelSize = 0;\n          bevelOffset = 0;\n        }\n\n        // Variables initialization\n\n        var shapePoints = shape.extractPoints(curveSegments);\n        var vertices = shapePoints.shape;\n        var holes = shapePoints.holes;\n        var reverse = !ShapeUtils.isClockWise(vertices);\n        if (reverse) {\n          vertices = vertices.reverse();\n\n          // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n          for (var h = 0, hl = holes.length; h < hl; h++) {\n            var ahole = holes[h];\n            if (ShapeUtils.isClockWise(ahole)) {\n              holes[h] = ahole.reverse();\n            }\n          }\n        }\n        var faces = ShapeUtils.triangulateShape(vertices, holes);\n\n        /* Vertices */\n\n        var contour = vertices; // vertices has all points but contour has only points of circumference\n\n        for (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n          var _ahole = holes[_h];\n          vertices = vertices.concat(_ahole);\n        }\n        function scalePt2(pt, vec, size) {\n          if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n          return pt.clone().addScaledVector(vec, size);\n        }\n        var vlen = vertices.length,\n          flen = faces.length;\n\n        // Find directions for point movement\n\n        function getBevelVec(inPt, inPrev, inNext) {\n          // computes for inPt the corresponding point inPt' on a new contour\n          //   shifted by 1 unit (length of normalized vector) to the left\n          // if we walk along contour clockwise, this new contour is outside the old one\n          //\n          // inPt' is the intersection of the two lines parallel to the two\n          //  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n          var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n          // good reading for geometry algorithms (here: line-line intersection)\n          // http://geomalgorithms.com/a05-_intersect-1.html\n\n          var v_prev_x = inPt.x - inPrev.x,\n            v_prev_y = inPt.y - inPrev.y;\n          var v_next_x = inNext.x - inPt.x,\n            v_next_y = inNext.y - inPt.y;\n          var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;\n\n          // check for collinear edges\n          var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n          if (Math.abs(collinear0) > Number.EPSILON) {\n            // not collinear\n\n            // length of vectors for normalizing\n\n            var v_prev_len = Math.sqrt(v_prev_lensq);\n            var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);\n\n            // shift adjacent points by unit vectors to the left\n\n            var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n            var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n            var ptNextShift_x = inNext.x - v_next_y / v_next_len;\n            var ptNextShift_y = inNext.y + v_next_x / v_next_len;\n\n            // scaling factor for v_prev to intersection point\n\n            var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);\n\n            // vector from inPt to intersection point\n\n            v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n            v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;\n\n            // Don't normalize!, otherwise sharp corners become ugly\n            //  but prevent crazy spikes\n            var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n            if (v_trans_lensq <= 2) {\n              return new Vector2(v_trans_x, v_trans_y);\n            } else {\n              shrink_by = Math.sqrt(v_trans_lensq / 2);\n            }\n          } else {\n            // handle special case of collinear edges\n\n            var direction_eq = false; // assumes: opposite\n\n            if (v_prev_x > Number.EPSILON) {\n              if (v_next_x > Number.EPSILON) {\n                direction_eq = true;\n              }\n            } else {\n              if (v_prev_x < -Number.EPSILON) {\n                if (v_next_x < -Number.EPSILON) {\n                  direction_eq = true;\n                }\n              } else {\n                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n                  direction_eq = true;\n                }\n              }\n            }\n            if (direction_eq) {\n              // console.log(\"Warning: lines are a straight sequence\");\n              v_trans_x = -v_prev_y;\n              v_trans_y = v_prev_x;\n              shrink_by = Math.sqrt(v_prev_lensq);\n            } else {\n              // console.log(\"Warning: lines are a straight spike\");\n              v_trans_x = v_prev_x;\n              v_trans_y = v_prev_y;\n              shrink_by = Math.sqrt(v_prev_lensq / 2);\n            }\n          }\n          return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n        }\n        var contourMovements = [];\n        for (var _i37 = 0, il = contour.length, j = il - 1, k = _i37 + 1; _i37 < il; _i37++, j++, k++) {\n          if (j === il) j = 0;\n          if (k === il) k = 0;\n\n          //  (j)---(i)---(k)\n          // console.log('i,j,k', i, j , k)\n\n          contourMovements[_i37] = getBevelVec(contour[_i37], contour[j], contour[k]);\n        }\n        var holesMovements = [];\n        var oneHoleMovements,\n          verticesMovements = contourMovements.concat();\n        for (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n          var _ahole2 = holes[_h2];\n          oneHoleMovements = [];\n          for (var _i38 = 0, _il10 = _ahole2.length, _j6 = _il10 - 1, _k = _i38 + 1; _i38 < _il10; _i38++, _j6++, _k++) {\n            if (_j6 === _il10) _j6 = 0;\n            if (_k === _il10) _k = 0;\n\n            //  (j)---(i)---(k)\n            oneHoleMovements[_i38] = getBevelVec(_ahole2[_i38], _ahole2[_j6], _ahole2[_k]);\n          }\n          holesMovements.push(oneHoleMovements);\n          verticesMovements = verticesMovements.concat(oneHoleMovements);\n        }\n\n        // Loop bevelSegments, 1 for the front, 1 for the back\n\n        for (var b = 0; b < bevelSegments; b++) {\n          //for ( b = bevelSegments; b > 0; b -- ) {\n\n          var t = b / bevelSegments;\n          var z = bevelThickness * Math.cos(t * Math.PI / 2);\n          var _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;\n\n          // contract shape\n\n          for (var _i39 = 0, _il11 = contour.length; _i39 < _il11; _i39++) {\n            var vert = scalePt2(contour[_i39], contourMovements[_i39], _bs);\n            v(vert.x, vert.y, -z);\n          }\n\n          // expand holes\n\n          for (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n            var _ahole3 = holes[_h3];\n            oneHoleMovements = holesMovements[_h3];\n            for (var _i40 = 0, _il12 = _ahole3.length; _i40 < _il12; _i40++) {\n              var _vert = scalePt2(_ahole3[_i40], oneHoleMovements[_i40], _bs);\n              v(_vert.x, _vert.y, -z);\n            }\n          }\n        }\n        var bs = bevelSize + bevelOffset;\n\n        // Back facing vertices\n\n        for (var _i41 = 0; _i41 < vlen; _i41++) {\n          var _vert2 = bevelEnabled ? scalePt2(vertices[_i41], verticesMovements[_i41], bs) : vertices[_i41];\n          if (!extrudeByPath) {\n            v(_vert2.x, _vert2.y, 0);\n          } else {\n            // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n            normal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n            binormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n            position2.copy(extrudePts[0]).add(normal).add(binormal);\n            v(position2.x, position2.y, position2.z);\n          }\n        }\n\n        // Add stepped vertices...\n        // Including front facing vertices\n\n        for (var s = 1; s <= steps; s++) {\n          for (var _i42 = 0; _i42 < vlen; _i42++) {\n            var _vert3 = bevelEnabled ? scalePt2(vertices[_i42], verticesMovements[_i42], bs) : vertices[_i42];\n            if (!extrudeByPath) {\n              v(_vert3.x, _vert3.y, depth / steps * s);\n            } else {\n              // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n              normal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n              binormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n              position2.copy(extrudePts[s]).add(normal).add(binormal);\n              v(position2.x, position2.y, position2.z);\n            }\n          }\n        }\n\n        // Add bevel segments planes\n\n        //for ( b = 1; b <= bevelSegments; b ++ ) {\n        for (var _b5 = bevelSegments - 1; _b5 >= 0; _b5--) {\n          var _t = _b5 / bevelSegments;\n          var _z2 = bevelThickness * Math.cos(_t * Math.PI / 2);\n          var _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset;\n\n          // contract shape\n\n          for (var _i43 = 0, _il13 = contour.length; _i43 < _il13; _i43++) {\n            var _vert4 = scalePt2(contour[_i43], contourMovements[_i43], _bs2);\n            v(_vert4.x, _vert4.y, depth + _z2);\n          }\n\n          // expand holes\n\n          for (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n            var _ahole4 = holes[_h4];\n            oneHoleMovements = holesMovements[_h4];\n            for (var _i44 = 0, _il14 = _ahole4.length; _i44 < _il14; _i44++) {\n              var _vert5 = scalePt2(_ahole4[_i44], oneHoleMovements[_i44], _bs2);\n              if (!extrudeByPath) {\n                v(_vert5.x, _vert5.y, depth + _z2);\n              } else {\n                v(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z2);\n              }\n            }\n          }\n        }\n\n        /* Faces */\n\n        // Top and bottom faces\n\n        buildLidFaces();\n\n        // Sides faces\n\n        buildSideFaces();\n\n        /////  Internal functions\n\n        function buildLidFaces() {\n          var start = verticesArray.length / 3;\n          if (bevelEnabled) {\n            var layer = 0; // steps + 1\n            var offset = vlen * layer;\n\n            // Bottom faces\n\n            for (var _i45 = 0; _i45 < flen; _i45++) {\n              var face = faces[_i45];\n              f3(face[2] + offset, face[1] + offset, face[0] + offset);\n            }\n            layer = steps + bevelSegments * 2;\n            offset = vlen * layer;\n\n            // Top faces\n\n            for (var _i46 = 0; _i46 < flen; _i46++) {\n              var _face = faces[_i46];\n              f3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n            }\n          } else {\n            // Bottom faces\n\n            for (var _i47 = 0; _i47 < flen; _i47++) {\n              var _face2 = faces[_i47];\n              f3(_face2[2], _face2[1], _face2[0]);\n            }\n\n            // Top faces\n\n            for (var _i48 = 0; _i48 < flen; _i48++) {\n              var _face3 = faces[_i48];\n              f3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n            }\n          }\n          scope.addGroup(start, verticesArray.length / 3 - start, 0);\n        }\n\n        // Create faces for the z-sides of the shape\n\n        function buildSideFaces() {\n          var start = verticesArray.length / 3;\n          var layeroffset = 0;\n          sidewalls(contour, layeroffset);\n          layeroffset += contour.length;\n          for (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n            var _ahole5 = holes[_h5];\n            sidewalls(_ahole5, layeroffset);\n\n            //, true\n            layeroffset += _ahole5.length;\n          }\n          scope.addGroup(start, verticesArray.length / 3 - start, 1);\n        }\n        function sidewalls(contour, layeroffset) {\n          var i = contour.length;\n          while (--i >= 0) {\n            var _j7 = i;\n            var _k2 = i - 1;\n            if (_k2 < 0) _k2 = contour.length - 1;\n\n            //console.log('b', i,j, i-1, k,vertices.length);\n\n            for (var _s4 = 0, sl = steps + bevelSegments * 2; _s4 < sl; _s4++) {\n              var slen1 = vlen * _s4;\n              var slen2 = vlen * (_s4 + 1);\n              var a = layeroffset + _j7 + slen1,\n                _b6 = layeroffset + _k2 + slen1,\n                c = layeroffset + _k2 + slen2,\n                d = layeroffset + _j7 + slen2;\n              f4(a, _b6, c, d);\n            }\n          }\n        }\n        function v(x, y, z) {\n          placeholder.push(x);\n          placeholder.push(y);\n          placeholder.push(z);\n        }\n        function f3(a, b, c) {\n          addVertex(a);\n          addVertex(b);\n          addVertex(c);\n          var nextIndex = verticesArray.length / 3;\n          var uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n          addUV(uvs[0]);\n          addUV(uvs[1]);\n          addUV(uvs[2]);\n        }\n        function f4(a, b, c, d) {\n          addVertex(a);\n          addVertex(b);\n          addVertex(d);\n          addVertex(b);\n          addVertex(c);\n          addVertex(d);\n          var nextIndex = verticesArray.length / 3;\n          var uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n          addUV(uvs[0]);\n          addUV(uvs[1]);\n          addUV(uvs[3]);\n          addUV(uvs[1]);\n          addUV(uvs[2]);\n          addUV(uvs[3]);\n        }\n        function addVertex(index) {\n          verticesArray.push(placeholder[index * 3 + 0]);\n          verticesArray.push(placeholder[index * 3 + 1]);\n          verticesArray.push(placeholder[index * 3 + 2]);\n        }\n        function addUV(vector2) {\n          uvArray.push(vector2.x);\n          uvArray.push(vector2.y);\n        }\n      }\n      return _this66;\n    }\n    (0, _inherits2.default)(ExtrudeGeometry, _BufferGeometry7);\n    return (0, _createClass2.default)(ExtrudeGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(ExtrudeGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(ExtrudeGeometry, \"toJSON\", this, 3)([]);\n        var shapes = this.parameters.shapes;\n        var options = this.parameters.options;\n        return toJSON$1(shapes, options, data);\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data, shapes) {\n        var geometryShapes = [];\n        for (var j = 0, jl = data.shapes.length; j < jl; j++) {\n          var shape = shapes[data.shapes[j]];\n          geometryShapes.push(shape);\n        }\n        var extrudePath = data.options.extrudePath;\n        if (extrudePath !== undefined) {\n          data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n        }\n        return new ExtrudeGeometry(geometryShapes, data.options);\n      }\n    }]);\n  }(BufferGeometry);\n  var WorldUVGenerator = {\n    generateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n      var a_x = vertices[indexA * 3];\n      var a_y = vertices[indexA * 3 + 1];\n      var b_x = vertices[indexB * 3];\n      var b_y = vertices[indexB * 3 + 1];\n      var c_x = vertices[indexC * 3];\n      var c_y = vertices[indexC * 3 + 1];\n      return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n    },\n    generateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n      var a_x = vertices[indexA * 3];\n      var a_y = vertices[indexA * 3 + 1];\n      var a_z = vertices[indexA * 3 + 2];\n      var b_x = vertices[indexB * 3];\n      var b_y = vertices[indexB * 3 + 1];\n      var b_z = vertices[indexB * 3 + 2];\n      var c_x = vertices[indexC * 3];\n      var c_y = vertices[indexC * 3 + 1];\n      var c_z = vertices[indexC * 3 + 2];\n      var d_x = vertices[indexD * 3];\n      var d_y = vertices[indexD * 3 + 1];\n      var d_z = vertices[indexD * 3 + 2];\n      if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n        return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n      } else {\n        return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n      }\n    }\n  };\n  function toJSON$1(shapes, options, data) {\n    data.shapes = [];\n    if (Array.isArray(shapes)) {\n      for (var i = 0, l = shapes.length; i < l; i++) {\n        var shape = shapes[i];\n        data.shapes.push(shape.uuid);\n      }\n    } else {\n      data.shapes.push(shapes.uuid);\n    }\n    data.options = Object.assign({}, options);\n    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n    return data;\n  }\n  var IcosahedronGeometry = exports.IcosahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry2) {\n    function IcosahedronGeometry() {\n      var _this67;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, IcosahedronGeometry);\n      var t = (1 + Math.sqrt(5)) / 2;\n      var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n      var indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n      _this67 = _callSuper(this, IcosahedronGeometry, [vertices, indices, radius, detail]);\n      _this67.type = 'IcosahedronGeometry';\n      _this67.parameters = {\n        radius: radius,\n        detail: detail\n      };\n      return _this67;\n    }\n    (0, _inherits2.default)(IcosahedronGeometry, _PolyhedronGeometry2);\n    return (0, _createClass2.default)(IcosahedronGeometry, null, [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new IcosahedronGeometry(data.radius, data.detail);\n      }\n    }]);\n  }(PolyhedronGeometry);\n  var OctahedronGeometry = exports.OctahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry3) {\n    function OctahedronGeometry() {\n      var _this68;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, OctahedronGeometry);\n      var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n      var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n      _this68 = _callSuper(this, OctahedronGeometry, [vertices, indices, radius, detail]);\n      _this68.type = 'OctahedronGeometry';\n      _this68.parameters = {\n        radius: radius,\n        detail: detail\n      };\n      return _this68;\n    }\n    (0, _inherits2.default)(OctahedronGeometry, _PolyhedronGeometry3);\n    return (0, _createClass2.default)(OctahedronGeometry, null, [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new OctahedronGeometry(data.radius, data.detail);\n      }\n    }]);\n  }(PolyhedronGeometry);\n  var PlaneGeometry = exports.PlaneGeometry = /*#__PURE__*/function (_BufferGeometry8) {\n    function PlaneGeometry() {\n      var _this69;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      (0, _classCallCheck2.default)(this, PlaneGeometry);\n      _this69 = _callSuper(this, PlaneGeometry);\n      _this69.type = 'PlaneGeometry';\n      _this69.parameters = {\n        width: width,\n        height: height,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments\n      };\n      var width_half = width / 2;\n      var height_half = height / 2;\n      var gridX = Math.floor(widthSegments);\n      var gridY = Math.floor(heightSegments);\n      var gridX1 = gridX + 1;\n      var gridY1 = gridY + 1;\n      var segment_width = width / gridX;\n      var segment_height = height / gridY;\n\n      //\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n      for (var iy = 0; iy < gridY1; iy++) {\n        var y = iy * segment_height - height_half;\n        for (var ix = 0; ix < gridX1; ix++) {\n          var x = ix * segment_width - width_half;\n          vertices.push(x, -y, 0);\n          normals.push(0, 0, 1);\n          uvs.push(ix / gridX);\n          uvs.push(1 - iy / gridY);\n        }\n      }\n      for (var _iy2 = 0; _iy2 < gridY; _iy2++) {\n        for (var _ix2 = 0; _ix2 < gridX; _ix2++) {\n          var a = _ix2 + gridX1 * _iy2;\n          var b = _ix2 + gridX1 * (_iy2 + 1);\n          var c = _ix2 + 1 + gridX1 * (_iy2 + 1);\n          var d = _ix2 + 1 + gridX1 * _iy2;\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n      _this69.setIndex(indices);\n      _this69.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this69.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this69.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      return _this69;\n    }\n    (0, _inherits2.default)(PlaneGeometry, _BufferGeometry8);\n    return (0, _createClass2.default)(PlaneGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(PlaneGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n      }\n    }]);\n  }(BufferGeometry);\n  var RingGeometry = exports.RingGeometry = /*#__PURE__*/function (_BufferGeometry9) {\n    function RingGeometry() {\n      var _this70;\n      var innerRadius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n      var outerRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var thetaSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n      var phiSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var thetaStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var thetaLength = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n      (0, _classCallCheck2.default)(this, RingGeometry);\n      _this70 = _callSuper(this, RingGeometry);\n      _this70.type = 'RingGeometry';\n      _this70.parameters = {\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        thetaSegments: thetaSegments,\n        phiSegments: phiSegments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      thetaSegments = Math.max(3, thetaSegments);\n      phiSegments = Math.max(1, phiSegments);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // some helper variables\n\n      var radius = innerRadius;\n      var radiusStep = (outerRadius - innerRadius) / phiSegments;\n      var vertex = new Vector3();\n      var uv = new Vector2();\n\n      // generate vertices, normals and uvs\n\n      for (var j = 0; j <= phiSegments; j++) {\n        for (var i = 0; i <= thetaSegments; i++) {\n          // values are generate from the inside of the ring to the outside\n\n          var segment = thetaStart + i / thetaSegments * thetaLength;\n\n          // vertex\n\n          vertex.x = radius * Math.cos(segment);\n          vertex.y = radius * Math.sin(segment);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          normals.push(0, 0, 1);\n\n          // uv\n\n          uv.x = (vertex.x / outerRadius + 1) / 2;\n          uv.y = (vertex.y / outerRadius + 1) / 2;\n          uvs.push(uv.x, uv.y);\n        }\n\n        // increase the radius for next row of vertices\n\n        radius += radiusStep;\n      }\n\n      // indices\n\n      for (var _j8 = 0; _j8 < phiSegments; _j8++) {\n        var thetaSegmentLevel = _j8 * (thetaSegments + 1);\n        for (var _i49 = 0; _i49 < thetaSegments; _i49++) {\n          var _segment = _i49 + thetaSegmentLevel;\n          var a = _segment;\n          var b = _segment + thetaSegments + 1;\n          var c = _segment + thetaSegments + 2;\n          var d = _segment + 1;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n\n      // build geometry\n\n      _this70.setIndex(indices);\n      _this70.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this70.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this70.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      return _this70;\n    }\n    (0, _inherits2.default)(RingGeometry, _BufferGeometry9);\n    return (0, _createClass2.default)(RingGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(RingGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n      }\n    }]);\n  }(BufferGeometry);\n  var ShapeGeometry = exports.ShapeGeometry = /*#__PURE__*/function (_BufferGeometry10) {\n    function ShapeGeometry() {\n      var _this71;\n      var shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n      var curveSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      (0, _classCallCheck2.default)(this, ShapeGeometry);\n      _this71 = _callSuper(this, ShapeGeometry);\n      _this71.type = 'ShapeGeometry';\n      _this71.parameters = {\n        shapes: shapes,\n        curveSegments: curveSegments\n      };\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // helper variables\n\n      var groupStart = 0;\n      var groupCount = 0;\n\n      // allow single and array values for \"shapes\" parameter\n\n      if (Array.isArray(shapes) === false) {\n        addShape(shapes);\n      } else {\n        for (var i = 0; i < shapes.length; i++) {\n          addShape(shapes[i]);\n          _this71.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n          groupStart += groupCount;\n          groupCount = 0;\n        }\n      }\n\n      // build geometry\n\n      _this71.setIndex(indices);\n      _this71.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this71.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this71.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n      // helper functions\n\n      function addShape(shape) {\n        var indexOffset = vertices.length / 3;\n        var points = shape.extractPoints(curveSegments);\n        var shapeVertices = points.shape;\n        var shapeHoles = points.holes;\n\n        // check direction of vertices\n\n        if (ShapeUtils.isClockWise(shapeVertices) === false) {\n          shapeVertices = shapeVertices.reverse();\n        }\n        for (var _i50 = 0, l = shapeHoles.length; _i50 < l; _i50++) {\n          var shapeHole = shapeHoles[_i50];\n          if (ShapeUtils.isClockWise(shapeHole) === true) {\n            shapeHoles[_i50] = shapeHole.reverse();\n          }\n        }\n        var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);\n\n        // join vertices of inner and outer paths to a single array\n\n        for (var _i51 = 0, _l11 = shapeHoles.length; _i51 < _l11; _i51++) {\n          var _shapeHole = shapeHoles[_i51];\n          shapeVertices = shapeVertices.concat(_shapeHole);\n        }\n\n        // vertices, normals, uvs\n\n        for (var _i52 = 0, _l12 = shapeVertices.length; _i52 < _l12; _i52++) {\n          var vertex = shapeVertices[_i52];\n          vertices.push(vertex.x, vertex.y, 0);\n          normals.push(0, 0, 1);\n          uvs.push(vertex.x, vertex.y); // world uvs\n        }\n\n        // indices\n\n        for (var _i53 = 0, _l13 = faces.length; _i53 < _l13; _i53++) {\n          var face = faces[_i53];\n          var a = face[0] + indexOffset;\n          var b = face[1] + indexOffset;\n          var c = face[2] + indexOffset;\n          indices.push(a, b, c);\n          groupCount += 3;\n        }\n      }\n      return _this71;\n    }\n    (0, _inherits2.default)(ShapeGeometry, _BufferGeometry10);\n    return (0, _createClass2.default)(ShapeGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(ShapeGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(ShapeGeometry, \"toJSON\", this, 3)([]);\n        var shapes = this.parameters.shapes;\n        return _toJSON(shapes, data);\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data, shapes) {\n        var geometryShapes = [];\n        for (var j = 0, jl = data.shapes.length; j < jl; j++) {\n          var shape = shapes[data.shapes[j]];\n          geometryShapes.push(shape);\n        }\n        return new ShapeGeometry(geometryShapes, data.curveSegments);\n      }\n    }]);\n  }(BufferGeometry);\n  function _toJSON(shapes, data) {\n    data.shapes = [];\n    if (Array.isArray(shapes)) {\n      for (var i = 0, l = shapes.length; i < l; i++) {\n        var shape = shapes[i];\n        data.shapes.push(shape.uuid);\n      }\n    } else {\n      data.shapes.push(shapes.uuid);\n    }\n    return data;\n  }\n  var SphereGeometry = exports.SphereGeometry = /*#__PURE__*/function (_BufferGeometry11) {\n    function SphereGeometry() {\n      var _this72;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      var heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16;\n      var phiStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var phiLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n      var thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;\n      (0, _classCallCheck2.default)(this, SphereGeometry);\n      _this72 = _callSuper(this, SphereGeometry);\n      _this72.type = 'SphereGeometry';\n      _this72.parameters = {\n        radius: radius,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        phiStart: phiStart,\n        phiLength: phiLength,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      widthSegments = Math.max(3, Math.floor(widthSegments));\n      heightSegments = Math.max(2, Math.floor(heightSegments));\n      var thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n      var index = 0;\n      var grid = [];\n      var vertex = new Vector3();\n      var normal = new Vector3();\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // generate vertices, normals and uvs\n\n      for (var iy = 0; iy <= heightSegments; iy++) {\n        var verticesRow = [];\n        var v = iy / heightSegments;\n\n        // special case for the poles\n\n        var uOffset = 0;\n        if (iy === 0 && thetaStart === 0) {\n          uOffset = 0.5 / widthSegments;\n        } else if (iy === heightSegments && thetaEnd === Math.PI) {\n          uOffset = -0.5 / widthSegments;\n        }\n        for (var ix = 0; ix <= widthSegments; ix++) {\n          var u = ix / widthSegments;\n\n          // vertex\n\n          vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n          vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n          vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          normal.copy(vertex).normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // uv\n\n          uvs.push(u + uOffset, 1 - v);\n          verticesRow.push(index++);\n        }\n        grid.push(verticesRow);\n      }\n\n      // indices\n\n      for (var _iy3 = 0; _iy3 < heightSegments; _iy3++) {\n        for (var _ix3 = 0; _ix3 < widthSegments; _ix3++) {\n          var a = grid[_iy3][_ix3 + 1];\n          var b = grid[_iy3][_ix3];\n          var c = grid[_iy3 + 1][_ix3];\n          var d = grid[_iy3 + 1][_ix3 + 1];\n          if (_iy3 !== 0 || thetaStart > 0) indices.push(a, b, d);\n          if (_iy3 !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n        }\n      }\n\n      // build geometry\n\n      _this72.setIndex(indices);\n      _this72.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this72.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this72.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      return _this72;\n    }\n    (0, _inherits2.default)(SphereGeometry, _BufferGeometry11);\n    return (0, _createClass2.default)(SphereGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(SphereGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n      }\n    }]);\n  }(BufferGeometry);\n  var TetrahedronGeometry = exports.TetrahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry4) {\n    function TetrahedronGeometry() {\n      var _this73;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      (0, _classCallCheck2.default)(this, TetrahedronGeometry);\n      var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n      var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n      _this73 = _callSuper(this, TetrahedronGeometry, [vertices, indices, radius, detail]);\n      _this73.type = 'TetrahedronGeometry';\n      _this73.parameters = {\n        radius: radius,\n        detail: detail\n      };\n      return _this73;\n    }\n    (0, _inherits2.default)(TetrahedronGeometry, _PolyhedronGeometry4);\n    return (0, _createClass2.default)(TetrahedronGeometry, null, [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new TetrahedronGeometry(data.radius, data.detail);\n      }\n    }]);\n  }(PolyhedronGeometry);\n  var TorusGeometry = exports.TorusGeometry = /*#__PURE__*/function (_BufferGeometry12) {\n    function TorusGeometry() {\n      var _this74;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n      var radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;\n      var tubularSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 48;\n      var arc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n      (0, _classCallCheck2.default)(this, TorusGeometry);\n      _this74 = _callSuper(this, TorusGeometry);\n      _this74.type = 'TorusGeometry';\n      _this74.parameters = {\n        radius: radius,\n        tube: tube,\n        radialSegments: radialSegments,\n        tubularSegments: tubularSegments,\n        arc: arc\n      };\n      radialSegments = Math.floor(radialSegments);\n      tubularSegments = Math.floor(tubularSegments);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // helper variables\n\n      var center = new Vector3();\n      var vertex = new Vector3();\n      var normal = new Vector3();\n\n      // generate vertices, normals and uvs\n\n      for (var j = 0; j <= radialSegments; j++) {\n        for (var i = 0; i <= tubularSegments; i++) {\n          var u = i / tubularSegments * arc;\n          var v = j / radialSegments * Math.PI * 2;\n\n          // vertex\n\n          vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n          vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n          vertex.z = tube * Math.sin(v);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          center.x = radius * Math.cos(u);\n          center.y = radius * Math.sin(u);\n          normal.subVectors(vertex, center).normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // uv\n\n          uvs.push(i / tubularSegments);\n          uvs.push(j / radialSegments);\n        }\n      }\n\n      // generate indices\n\n      for (var _j9 = 1; _j9 <= radialSegments; _j9++) {\n        for (var _i54 = 1; _i54 <= tubularSegments; _i54++) {\n          // indices\n\n          var a = (tubularSegments + 1) * _j9 + _i54 - 1;\n          var b = (tubularSegments + 1) * (_j9 - 1) + _i54 - 1;\n          var c = (tubularSegments + 1) * (_j9 - 1) + _i54;\n          var d = (tubularSegments + 1) * _j9 + _i54;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n\n      // build geometry\n\n      _this74.setIndex(indices);\n      _this74.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this74.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this74.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      return _this74;\n    }\n    (0, _inherits2.default)(TorusGeometry, _BufferGeometry12);\n    return (0, _createClass2.default)(TorusGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(TorusGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n      }\n    }]);\n  }(BufferGeometry);\n  var TorusKnotGeometry = exports.TorusKnotGeometry = /*#__PURE__*/function (_BufferGeometry13) {\n    function TorusKnotGeometry() {\n      var _this75;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n      var tubularSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n      var radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      var p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n      var q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n      (0, _classCallCheck2.default)(this, TorusKnotGeometry);\n      _this75 = _callSuper(this, TorusKnotGeometry);\n      _this75.type = 'TorusKnotGeometry';\n      _this75.parameters = {\n        radius: radius,\n        tube: tube,\n        tubularSegments: tubularSegments,\n        radialSegments: radialSegments,\n        p: p,\n        q: q\n      };\n      tubularSegments = Math.floor(tubularSegments);\n      radialSegments = Math.floor(radialSegments);\n\n      // buffers\n\n      var indices = [];\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      // helper variables\n\n      var vertex = new Vector3();\n      var normal = new Vector3();\n      var P1 = new Vector3();\n      var P2 = new Vector3();\n      var B = new Vector3();\n      var T = new Vector3();\n      var N = new Vector3();\n\n      // generate vertices, normals and uvs\n\n      for (var i = 0; i <= tubularSegments; ++i) {\n        // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n        var u = i / tubularSegments * p * Math.PI * 2;\n\n        // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n        // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n        calculatePositionOnCurve(u, p, q, radius, P1);\n        calculatePositionOnCurve(u + 0.01, p, q, radius, P2);\n\n        // calculate orthonormal basis\n\n        T.subVectors(P2, P1);\n        N.addVectors(P2, P1);\n        B.crossVectors(T, N);\n        N.crossVectors(B, T);\n\n        // normalize B, N. T can be ignored, we don't use it\n\n        B.normalize();\n        N.normalize();\n        for (var j = 0; j <= radialSegments; ++j) {\n          // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n          // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n          var v = j / radialSegments * Math.PI * 2;\n          var cx = -tube * Math.cos(v);\n          var cy = tube * Math.sin(v);\n\n          // now calculate the final vertex position.\n          // first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n          vertex.x = P1.x + (cx * N.x + cy * B.x);\n          vertex.y = P1.y + (cx * N.y + cy * B.y);\n          vertex.z = P1.z + (cx * N.z + cy * B.z);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n          normal.subVectors(vertex, P1).normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // uv\n\n          uvs.push(i / tubularSegments);\n          uvs.push(j / radialSegments);\n        }\n      }\n\n      // generate indices\n\n      for (var _j10 = 1; _j10 <= tubularSegments; _j10++) {\n        for (var _i55 = 1; _i55 <= radialSegments; _i55++) {\n          // indices\n\n          var a = (radialSegments + 1) * (_j10 - 1) + (_i55 - 1);\n          var b = (radialSegments + 1) * _j10 + (_i55 - 1);\n          var c = (radialSegments + 1) * _j10 + _i55;\n          var d = (radialSegments + 1) * (_j10 - 1) + _i55;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n\n      // build geometry\n\n      _this75.setIndex(indices);\n      _this75.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this75.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this75.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n      // this function calculates the current position on the torus curve\n\n      function calculatePositionOnCurve(u, p, q, radius, position) {\n        var cu = Math.cos(u);\n        var su = Math.sin(u);\n        var quOverP = q / p * u;\n        var cs = Math.cos(quOverP);\n        position.x = radius * (2 + cs) * 0.5 * cu;\n        position.y = radius * (2 + cs) * su * 0.5;\n        position.z = radius * Math.sin(quOverP) * 0.5;\n      }\n      return _this75;\n    }\n    (0, _inherits2.default)(TorusKnotGeometry, _BufferGeometry13);\n    return (0, _createClass2.default)(TorusKnotGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(TorusKnotGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n      }\n    }]);\n  }(BufferGeometry);\n  var TubeGeometry = exports.TubeGeometry = /*#__PURE__*/function (_BufferGeometry14) {\n    function TubeGeometry() {\n      var _this76;\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0));\n      var tubularSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      var closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      (0, _classCallCheck2.default)(this, TubeGeometry);\n      _this76 = _callSuper(this, TubeGeometry);\n      _this76.type = 'TubeGeometry';\n      _this76.parameters = {\n        path: path,\n        tubularSegments: tubularSegments,\n        radius: radius,\n        radialSegments: radialSegments,\n        closed: closed\n      };\n      var frames = path.computeFrenetFrames(tubularSegments, closed);\n\n      // expose internals\n\n      _this76.tangents = frames.tangents;\n      _this76.normals = frames.normals;\n      _this76.binormals = frames.binormals;\n\n      // helper variables\n\n      var vertex = new Vector3();\n      var normal = new Vector3();\n      var uv = new Vector2();\n      var P = new Vector3();\n\n      // buffer\n\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n      var indices = [];\n\n      // create buffer data\n\n      generateBufferData();\n\n      // build geometry\n\n      _this76.setIndex(indices);\n      _this76.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      _this76.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      _this76.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n      // functions\n\n      function generateBufferData() {\n        for (var i = 0; i < tubularSegments; i++) {\n          generateSegment(i);\n        }\n\n        // if the geometry is not closed, generate the last row of vertices and normals\n        // at the regular position on the given path\n        //\n        // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n        generateSegment(closed === false ? tubularSegments : 0);\n\n        // uvs are generated in a separate function.\n        // this makes it easy compute correct values for closed geometries\n\n        generateUVs();\n\n        // finally create faces\n\n        generateIndices();\n      }\n      function generateSegment(i) {\n        // we use getPointAt to sample evenly distributed points from the given path\n\n        P = path.getPointAt(i / tubularSegments, P);\n\n        // retrieve corresponding normal and binormal\n\n        var N = frames.normals[i];\n        var B = frames.binormals[i];\n\n        // generate normals and vertices for the current segment\n\n        for (var j = 0; j <= radialSegments; j++) {\n          var v = j / radialSegments * Math.PI * 2;\n          var sin = Math.sin(v);\n          var cos = -Math.cos(v);\n\n          // normal\n\n          normal.x = cos * N.x + sin * B.x;\n          normal.y = cos * N.y + sin * B.y;\n          normal.z = cos * N.z + sin * B.z;\n          normal.normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // vertex\n\n          vertex.x = P.x + radius * normal.x;\n          vertex.y = P.y + radius * normal.y;\n          vertex.z = P.z + radius * normal.z;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      }\n      function generateIndices() {\n        for (var j = 1; j <= tubularSegments; j++) {\n          for (var i = 1; i <= radialSegments; i++) {\n            var a = (radialSegments + 1) * (j - 1) + (i - 1);\n            var b = (radialSegments + 1) * j + (i - 1);\n            var c = (radialSegments + 1) * j + i;\n            var d = (radialSegments + 1) * (j - 1) + i;\n\n            // faces\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n          }\n        }\n      }\n      function generateUVs() {\n        for (var i = 0; i <= tubularSegments; i++) {\n          for (var j = 0; j <= radialSegments; j++) {\n            uv.x = i / tubularSegments;\n            uv.y = j / radialSegments;\n            uvs.push(uv.x, uv.y);\n          }\n        }\n      }\n      return _this76;\n    }\n    (0, _inherits2.default)(TubeGeometry, _BufferGeometry14);\n    return (0, _createClass2.default)(TubeGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(TubeGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(TubeGeometry, \"toJSON\", this, 3)([]);\n        data.path = this.parameters.path.toJSON();\n        return data;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(data) {\n        // This only works for built-in curves (e.g. CatmullRomCurve3).\n        // User defined curves or instances of CurvePath will not be deserialized.\n        return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n      }\n    }]);\n  }(BufferGeometry);\n  var WireframeGeometry = exports.WireframeGeometry = /*#__PURE__*/function (_BufferGeometry15) {\n    function WireframeGeometry() {\n      var _this77;\n      var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      (0, _classCallCheck2.default)(this, WireframeGeometry);\n      _this77 = _callSuper(this, WireframeGeometry);\n      _this77.type = 'WireframeGeometry';\n      _this77.parameters = {\n        geometry: geometry\n      };\n      if (geometry !== null) {\n        // buffer\n\n        var vertices = [];\n        var edges = new Set();\n\n        // helper variables\n\n        var start = new Vector3();\n        var end = new Vector3();\n        if (geometry.index !== null) {\n          // indexed BufferGeometry\n\n          var position = geometry.attributes.position;\n          var indices = geometry.index;\n          var groups = geometry.groups;\n          if (groups.length === 0) {\n            groups = [{\n              start: 0,\n              count: indices.count,\n              materialIndex: 0\n            }];\n          }\n\n          // create a data structure that contains all edges without duplicates\n\n          for (var o = 0, ol = groups.length; o < ol; ++o) {\n            var group = groups[o];\n            var groupStart = group.start;\n            var groupCount = group.count;\n            for (var i = groupStart, l = groupStart + groupCount; i < l; i += 3) {\n              for (var j = 0; j < 3; j++) {\n                var index1 = indices.getX(i + j);\n                var index2 = indices.getX(i + (j + 1) % 3);\n                start.fromBufferAttribute(position, index1);\n                end.fromBufferAttribute(position, index2);\n                if (isUniqueEdge(start, end, edges) === true) {\n                  vertices.push(start.x, start.y, start.z);\n                  vertices.push(end.x, end.y, end.z);\n                }\n              }\n            }\n          }\n        } else {\n          // non-indexed BufferGeometry\n\n          var _position2 = geometry.attributes.position;\n          for (var _i56 = 0, _l14 = _position2.count / 3; _i56 < _l14; _i56++) {\n            for (var _j11 = 0; _j11 < 3; _j11++) {\n              // three edges per triangle, an edge is represented as (index1, index2)\n              // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n              var _index2 = 3 * _i56 + _j11;\n              var _index3 = 3 * _i56 + (_j11 + 1) % 3;\n              start.fromBufferAttribute(_position2, _index2);\n              end.fromBufferAttribute(_position2, _index3);\n              if (isUniqueEdge(start, end, edges) === true) {\n                vertices.push(start.x, start.y, start.z);\n                vertices.push(end.x, end.y, end.z);\n              }\n            }\n          }\n        }\n\n        // build geometry\n\n        _this77.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      }\n      return _this77;\n    }\n    (0, _inherits2.default)(WireframeGeometry, _BufferGeometry15);\n    return (0, _createClass2.default)(WireframeGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(WireframeGeometry, \"copy\", this, 3)([source]);\n        this.parameters = Object.assign({}, source.parameters);\n        return this;\n      }\n    }]);\n  }(BufferGeometry);\n  function isUniqueEdge(start, end, edges) {\n    var hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n    var hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n    if (edges.has(hash1) === true || edges.has(hash2) === true) {\n      return false;\n    } else {\n      edges.add(hash1);\n      edges.add(hash2);\n      return true;\n    }\n  }\n  var Geometries = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BoxGeometry: BoxGeometry,\n    CapsuleGeometry: CapsuleGeometry,\n    CircleGeometry: CircleGeometry,\n    ConeGeometry: ConeGeometry,\n    CylinderGeometry: CylinderGeometry,\n    DodecahedronGeometry: DodecahedronGeometry,\n    EdgesGeometry: EdgesGeometry,\n    ExtrudeGeometry: ExtrudeGeometry,\n    IcosahedronGeometry: IcosahedronGeometry,\n    LatheGeometry: LatheGeometry,\n    OctahedronGeometry: OctahedronGeometry,\n    PlaneGeometry: PlaneGeometry,\n    PolyhedronGeometry: PolyhedronGeometry,\n    RingGeometry: RingGeometry,\n    ShapeGeometry: ShapeGeometry,\n    SphereGeometry: SphereGeometry,\n    TetrahedronGeometry: TetrahedronGeometry,\n    TorusGeometry: TorusGeometry,\n    TorusKnotGeometry: TorusKnotGeometry,\n    TubeGeometry: TubeGeometry,\n    WireframeGeometry: WireframeGeometry\n  });\n  var ShadowMaterial = exports.ShadowMaterial = /*#__PURE__*/function (_Material6) {\n    function ShadowMaterial(parameters) {\n      var _this78;\n      (0, _classCallCheck2.default)(this, ShadowMaterial);\n      _this78 = _callSuper(this, ShadowMaterial);\n      _this78.isShadowMaterial = true;\n      _this78.type = 'ShadowMaterial';\n      _this78.color = new Color(0x000000);\n      _this78.transparent = true;\n      _this78.fog = true;\n      _this78.setValues(parameters);\n      return _this78;\n    }\n    (0, _inherits2.default)(ShadowMaterial, _Material6);\n    return (0, _createClass2.default)(ShadowMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(ShadowMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var RawShaderMaterial = exports.RawShaderMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n    function RawShaderMaterial(parameters) {\n      var _this79;\n      (0, _classCallCheck2.default)(this, RawShaderMaterial);\n      _this79 = _callSuper(this, RawShaderMaterial, [parameters]);\n      _this79.isRawShaderMaterial = true;\n      _this79.type = 'RawShaderMaterial';\n      return _this79;\n    }\n    (0, _inherits2.default)(RawShaderMaterial, _ShaderMaterial);\n    return (0, _createClass2.default)(RawShaderMaterial);\n  }(ShaderMaterial);\n  var MeshStandardMaterial = exports.MeshStandardMaterial = /*#__PURE__*/function (_Material7) {\n    function MeshStandardMaterial(parameters) {\n      var _this80;\n      (0, _classCallCheck2.default)(this, MeshStandardMaterial);\n      _this80 = _callSuper(this, MeshStandardMaterial);\n      _this80.isMeshStandardMaterial = true;\n      _this80.type = 'MeshStandardMaterial';\n      _this80.defines = {\n        'STANDARD': ''\n      };\n      _this80.color = new Color(0xffffff); // diffuse\n      _this80.roughness = 1.0;\n      _this80.metalness = 0.0;\n      _this80.map = null;\n      _this80.lightMap = null;\n      _this80.lightMapIntensity = 1.0;\n      _this80.aoMap = null;\n      _this80.aoMapIntensity = 1.0;\n      _this80.emissive = new Color(0x000000);\n      _this80.emissiveIntensity = 1.0;\n      _this80.emissiveMap = null;\n      _this80.bumpMap = null;\n      _this80.bumpScale = 1;\n      _this80.normalMap = null;\n      _this80.normalMapType = TangentSpaceNormalMap;\n      _this80.normalScale = new Vector2(1, 1);\n      _this80.displacementMap = null;\n      _this80.displacementScale = 1;\n      _this80.displacementBias = 0;\n      _this80.roughnessMap = null;\n      _this80.metalnessMap = null;\n      _this80.alphaMap = null;\n      _this80.envMap = null;\n      _this80.envMapRotation = new Euler();\n      _this80.envMapIntensity = 1.0;\n      _this80.wireframe = false;\n      _this80.wireframeLinewidth = 1;\n      _this80.wireframeLinecap = 'round';\n      _this80.wireframeLinejoin = 'round';\n      _this80.flatShading = false;\n      _this80.fog = true;\n      _this80.setValues(parameters);\n      return _this80;\n    }\n    (0, _inherits2.default)(MeshStandardMaterial, _Material7);\n    return (0, _createClass2.default)(MeshStandardMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshStandardMaterial, \"copy\", this, 3)([source]);\n        this.defines = {\n          'STANDARD': ''\n        };\n        this.color.copy(source.color);\n        this.roughness = source.roughness;\n        this.metalness = source.metalness;\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalMapType = source.normalMapType;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.roughnessMap = source.roughnessMap;\n        this.metalnessMap = source.metalnessMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.envMapRotation.copy(source.envMapRotation);\n        this.envMapIntensity = source.envMapIntensity;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.flatShading = source.flatShading;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshPhysicalMaterial = exports.MeshPhysicalMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {\n    function MeshPhysicalMaterial(parameters) {\n      var _this81;\n      (0, _classCallCheck2.default)(this, MeshPhysicalMaterial);\n      _this81 = _callSuper(this, MeshPhysicalMaterial);\n      _this81.isMeshPhysicalMaterial = true;\n      _this81.defines = {\n        'STANDARD': '',\n        'PHYSICAL': ''\n      };\n      _this81.type = 'MeshPhysicalMaterial';\n      _this81.anisotropyRotation = 0;\n      _this81.anisotropyMap = null;\n      _this81.clearcoatMap = null;\n      _this81.clearcoatRoughness = 0.0;\n      _this81.clearcoatRoughnessMap = null;\n      _this81.clearcoatNormalScale = new Vector2(1, 1);\n      _this81.clearcoatNormalMap = null;\n      _this81.ior = 1.5;\n      Object.defineProperty(_this81, 'reflectivity', {\n        get: function get() {\n          return _clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n        },\n        set: function set(reflectivity) {\n          this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n        }\n      });\n      _this81.iridescenceMap = null;\n      _this81.iridescenceIOR = 1.3;\n      _this81.iridescenceThicknessRange = [100, 400];\n      _this81.iridescenceThicknessMap = null;\n      _this81.sheenColor = new Color(0x000000);\n      _this81.sheenColorMap = null;\n      _this81.sheenRoughness = 1.0;\n      _this81.sheenRoughnessMap = null;\n      _this81.transmissionMap = null;\n      _this81.thickness = 0;\n      _this81.thicknessMap = null;\n      _this81.attenuationDistance = Infinity;\n      _this81.attenuationColor = new Color(1, 1, 1);\n      _this81.specularIntensity = 1.0;\n      _this81.specularIntensityMap = null;\n      _this81.specularColor = new Color(1, 1, 1);\n      _this81.specularColorMap = null;\n      _this81._anisotropy = 0;\n      _this81._clearcoat = 0;\n      _this81._dispersion = 0;\n      _this81._iridescence = 0;\n      _this81._sheen = 0.0;\n      _this81._transmission = 0;\n      _this81.setValues(parameters);\n      return _this81;\n    }\n    (0, _inherits2.default)(MeshPhysicalMaterial, _MeshStandardMaterial);\n    return (0, _createClass2.default)(MeshPhysicalMaterial, [{\n      key: \"anisotropy\",\n      get: function get() {\n        return this._anisotropy;\n      },\n      set: function set(value) {\n        if (this._anisotropy > 0 !== value > 0) {\n          this.version++;\n        }\n        this._anisotropy = value;\n      }\n    }, {\n      key: \"clearcoat\",\n      get: function get() {\n        return this._clearcoat;\n      },\n      set: function set(value) {\n        if (this._clearcoat > 0 !== value > 0) {\n          this.version++;\n        }\n        this._clearcoat = value;\n      }\n    }, {\n      key: \"iridescence\",\n      get: function get() {\n        return this._iridescence;\n      },\n      set: function set(value) {\n        if (this._iridescence > 0 !== value > 0) {\n          this.version++;\n        }\n        this._iridescence = value;\n      }\n    }, {\n      key: \"dispersion\",\n      get: function get() {\n        return this._dispersion;\n      },\n      set: function set(value) {\n        if (this._dispersion > 0 !== value > 0) {\n          this.version++;\n        }\n        this._dispersion = value;\n      }\n    }, {\n      key: \"sheen\",\n      get: function get() {\n        return this._sheen;\n      },\n      set: function set(value) {\n        if (this._sheen > 0 !== value > 0) {\n          this.version++;\n        }\n        this._sheen = value;\n      }\n    }, {\n      key: \"transmission\",\n      get: function get() {\n        return this._transmission;\n      },\n      set: function set(value) {\n        if (this._transmission > 0 !== value > 0) {\n          this.version++;\n        }\n        this._transmission = value;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshPhysicalMaterial, \"copy\", this, 3)([source]);\n        this.defines = {\n          'STANDARD': '',\n          'PHYSICAL': ''\n        };\n        this.anisotropy = source.anisotropy;\n        this.anisotropyRotation = source.anisotropyRotation;\n        this.anisotropyMap = source.anisotropyMap;\n        this.clearcoat = source.clearcoat;\n        this.clearcoatMap = source.clearcoatMap;\n        this.clearcoatRoughness = source.clearcoatRoughness;\n        this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n        this.clearcoatNormalMap = source.clearcoatNormalMap;\n        this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n        this.dispersion = source.dispersion;\n        this.ior = source.ior;\n        this.iridescence = source.iridescence;\n        this.iridescenceMap = source.iridescenceMap;\n        this.iridescenceIOR = source.iridescenceIOR;\n        this.iridescenceThicknessRange = (0, _toConsumableArray2.default)(source.iridescenceThicknessRange);\n        this.iridescenceThicknessMap = source.iridescenceThicknessMap;\n        this.sheen = source.sheen;\n        this.sheenColor.copy(source.sheenColor);\n        this.sheenColorMap = source.sheenColorMap;\n        this.sheenRoughness = source.sheenRoughness;\n        this.sheenRoughnessMap = source.sheenRoughnessMap;\n        this.transmission = source.transmission;\n        this.transmissionMap = source.transmissionMap;\n        this.thickness = source.thickness;\n        this.thicknessMap = source.thicknessMap;\n        this.attenuationDistance = source.attenuationDistance;\n        this.attenuationColor.copy(source.attenuationColor);\n        this.specularIntensity = source.specularIntensity;\n        this.specularIntensityMap = source.specularIntensityMap;\n        this.specularColor.copy(source.specularColor);\n        this.specularColorMap = source.specularColorMap;\n        return this;\n      }\n    }]);\n  }(MeshStandardMaterial);\n  var MeshPhongMaterial = exports.MeshPhongMaterial = /*#__PURE__*/function (_Material8) {\n    function MeshPhongMaterial(parameters) {\n      var _this82;\n      (0, _classCallCheck2.default)(this, MeshPhongMaterial);\n      _this82 = _callSuper(this, MeshPhongMaterial);\n      _this82.isMeshPhongMaterial = true;\n      _this82.type = 'MeshPhongMaterial';\n      _this82.color = new Color(0xffffff); // diffuse\n      _this82.specular = new Color(0x111111);\n      _this82.shininess = 30;\n      _this82.map = null;\n      _this82.lightMap = null;\n      _this82.lightMapIntensity = 1.0;\n      _this82.aoMap = null;\n      _this82.aoMapIntensity = 1.0;\n      _this82.emissive = new Color(0x000000);\n      _this82.emissiveIntensity = 1.0;\n      _this82.emissiveMap = null;\n      _this82.bumpMap = null;\n      _this82.bumpScale = 1;\n      _this82.normalMap = null;\n      _this82.normalMapType = TangentSpaceNormalMap;\n      _this82.normalScale = new Vector2(1, 1);\n      _this82.displacementMap = null;\n      _this82.displacementScale = 1;\n      _this82.displacementBias = 0;\n      _this82.specularMap = null;\n      _this82.alphaMap = null;\n      _this82.envMap = null;\n      _this82.envMapRotation = new Euler();\n      _this82.combine = MultiplyOperation;\n      _this82.reflectivity = 1;\n      _this82.refractionRatio = 0.98;\n      _this82.wireframe = false;\n      _this82.wireframeLinewidth = 1;\n      _this82.wireframeLinecap = 'round';\n      _this82.wireframeLinejoin = 'round';\n      _this82.flatShading = false;\n      _this82.fog = true;\n      _this82.setValues(parameters);\n      return _this82;\n    }\n    (0, _inherits2.default)(MeshPhongMaterial, _Material8);\n    return (0, _createClass2.default)(MeshPhongMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshPhongMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.specular.copy(source.specular);\n        this.shininess = source.shininess;\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalMapType = source.normalMapType;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.specularMap = source.specularMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.envMapRotation.copy(source.envMapRotation);\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.flatShading = source.flatShading;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshToonMaterial = exports.MeshToonMaterial = /*#__PURE__*/function (_Material9) {\n    function MeshToonMaterial(parameters) {\n      var _this83;\n      (0, _classCallCheck2.default)(this, MeshToonMaterial);\n      _this83 = _callSuper(this, MeshToonMaterial);\n      _this83.isMeshToonMaterial = true;\n      _this83.defines = {\n        'TOON': ''\n      };\n      _this83.type = 'MeshToonMaterial';\n      _this83.color = new Color(0xffffff);\n      _this83.map = null;\n      _this83.gradientMap = null;\n      _this83.lightMap = null;\n      _this83.lightMapIntensity = 1.0;\n      _this83.aoMap = null;\n      _this83.aoMapIntensity = 1.0;\n      _this83.emissive = new Color(0x000000);\n      _this83.emissiveIntensity = 1.0;\n      _this83.emissiveMap = null;\n      _this83.bumpMap = null;\n      _this83.bumpScale = 1;\n      _this83.normalMap = null;\n      _this83.normalMapType = TangentSpaceNormalMap;\n      _this83.normalScale = new Vector2(1, 1);\n      _this83.displacementMap = null;\n      _this83.displacementScale = 1;\n      _this83.displacementBias = 0;\n      _this83.alphaMap = null;\n      _this83.wireframe = false;\n      _this83.wireframeLinewidth = 1;\n      _this83.wireframeLinecap = 'round';\n      _this83.wireframeLinejoin = 'round';\n      _this83.fog = true;\n      _this83.setValues(parameters);\n      return _this83;\n    }\n    (0, _inherits2.default)(MeshToonMaterial, _Material9);\n    return (0, _createClass2.default)(MeshToonMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshToonMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.gradientMap = source.gradientMap;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalMapType = source.normalMapType;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.alphaMap = source.alphaMap;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshNormalMaterial = exports.MeshNormalMaterial = /*#__PURE__*/function (_Material10) {\n    function MeshNormalMaterial(parameters) {\n      var _this84;\n      (0, _classCallCheck2.default)(this, MeshNormalMaterial);\n      _this84 = _callSuper(this, MeshNormalMaterial);\n      _this84.isMeshNormalMaterial = true;\n      _this84.type = 'MeshNormalMaterial';\n      _this84.bumpMap = null;\n      _this84.bumpScale = 1;\n      _this84.normalMap = null;\n      _this84.normalMapType = TangentSpaceNormalMap;\n      _this84.normalScale = new Vector2(1, 1);\n      _this84.displacementMap = null;\n      _this84.displacementScale = 1;\n      _this84.displacementBias = 0;\n      _this84.wireframe = false;\n      _this84.wireframeLinewidth = 1;\n      _this84.flatShading = false;\n      _this84.setValues(parameters);\n      return _this84;\n    }\n    (0, _inherits2.default)(MeshNormalMaterial, _Material10);\n    return (0, _createClass2.default)(MeshNormalMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshNormalMaterial, \"copy\", this, 3)([source]);\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalMapType = source.normalMapType;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.flatShading = source.flatShading;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshLambertMaterial = exports.MeshLambertMaterial = /*#__PURE__*/function (_Material11) {\n    function MeshLambertMaterial(parameters) {\n      var _this85;\n      (0, _classCallCheck2.default)(this, MeshLambertMaterial);\n      _this85 = _callSuper(this, MeshLambertMaterial);\n      _this85.isMeshLambertMaterial = true;\n      _this85.type = 'MeshLambertMaterial';\n      _this85.color = new Color(0xffffff); // diffuse\n\n      _this85.map = null;\n      _this85.lightMap = null;\n      _this85.lightMapIntensity = 1.0;\n      _this85.aoMap = null;\n      _this85.aoMapIntensity = 1.0;\n      _this85.emissive = new Color(0x000000);\n      _this85.emissiveIntensity = 1.0;\n      _this85.emissiveMap = null;\n      _this85.bumpMap = null;\n      _this85.bumpScale = 1;\n      _this85.normalMap = null;\n      _this85.normalMapType = TangentSpaceNormalMap;\n      _this85.normalScale = new Vector2(1, 1);\n      _this85.displacementMap = null;\n      _this85.displacementScale = 1;\n      _this85.displacementBias = 0;\n      _this85.specularMap = null;\n      _this85.alphaMap = null;\n      _this85.envMap = null;\n      _this85.envMapRotation = new Euler();\n      _this85.combine = MultiplyOperation;\n      _this85.reflectivity = 1;\n      _this85.refractionRatio = 0.98;\n      _this85.wireframe = false;\n      _this85.wireframeLinewidth = 1;\n      _this85.wireframeLinecap = 'round';\n      _this85.wireframeLinejoin = 'round';\n      _this85.flatShading = false;\n      _this85.fog = true;\n      _this85.setValues(parameters);\n      return _this85;\n    }\n    (0, _inherits2.default)(MeshLambertMaterial, _Material11);\n    return (0, _createClass2.default)(MeshLambertMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshLambertMaterial, \"copy\", this, 3)([source]);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalMapType = source.normalMapType;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.specularMap = source.specularMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.envMapRotation.copy(source.envMapRotation);\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.flatShading = source.flatShading;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshDepthMaterial = exports.MeshDepthMaterial = /*#__PURE__*/function (_Material12) {\n    function MeshDepthMaterial(parameters) {\n      var _this86;\n      (0, _classCallCheck2.default)(this, MeshDepthMaterial);\n      _this86 = _callSuper(this, MeshDepthMaterial);\n      _this86.isMeshDepthMaterial = true;\n      _this86.type = 'MeshDepthMaterial';\n      _this86.depthPacking = BasicDepthPacking;\n      _this86.map = null;\n      _this86.alphaMap = null;\n      _this86.displacementMap = null;\n      _this86.displacementScale = 1;\n      _this86.displacementBias = 0;\n      _this86.wireframe = false;\n      _this86.wireframeLinewidth = 1;\n      _this86.setValues(parameters);\n      return _this86;\n    }\n    (0, _inherits2.default)(MeshDepthMaterial, _Material12);\n    return (0, _createClass2.default)(MeshDepthMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshDepthMaterial, \"copy\", this, 3)([source]);\n        this.depthPacking = source.depthPacking;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshDistanceMaterial = exports.MeshDistanceMaterial = /*#__PURE__*/function (_Material13) {\n    function MeshDistanceMaterial(parameters) {\n      var _this87;\n      (0, _classCallCheck2.default)(this, MeshDistanceMaterial);\n      _this87 = _callSuper(this, MeshDistanceMaterial);\n      _this87.isMeshDistanceMaterial = true;\n      _this87.type = 'MeshDistanceMaterial';\n      _this87.map = null;\n      _this87.alphaMap = null;\n      _this87.displacementMap = null;\n      _this87.displacementScale = 1;\n      _this87.displacementBias = 0;\n      _this87.setValues(parameters);\n      return _this87;\n    }\n    (0, _inherits2.default)(MeshDistanceMaterial, _Material13);\n    return (0, _createClass2.default)(MeshDistanceMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshDistanceMaterial, \"copy\", this, 3)([source]);\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        return this;\n      }\n    }]);\n  }(Material);\n  var MeshMatcapMaterial = exports.MeshMatcapMaterial = /*#__PURE__*/function (_Material14) {\n    function MeshMatcapMaterial(parameters) {\n      var _this88;\n      (0, _classCallCheck2.default)(this, MeshMatcapMaterial);\n      _this88 = _callSuper(this, MeshMatcapMaterial);\n      _this88.isMeshMatcapMaterial = true;\n      _this88.defines = {\n        'MATCAP': ''\n      };\n      _this88.type = 'MeshMatcapMaterial';\n      _this88.color = new Color(0xffffff); // diffuse\n\n      _this88.matcap = null;\n      _this88.map = null;\n      _this88.bumpMap = null;\n      _this88.bumpScale = 1;\n      _this88.normalMap = null;\n      _this88.normalMapType = TangentSpaceNormalMap;\n      _this88.normalScale = new Vector2(1, 1);\n      _this88.displacementMap = null;\n      _this88.displacementScale = 1;\n      _this88.displacementBias = 0;\n      _this88.alphaMap = null;\n      _this88.flatShading = false;\n      _this88.fog = true;\n      _this88.setValues(parameters);\n      return _this88;\n    }\n    (0, _inherits2.default)(MeshMatcapMaterial, _Material14);\n    return (0, _createClass2.default)(MeshMatcapMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(MeshMatcapMaterial, \"copy\", this, 3)([source]);\n        this.defines = {\n          'MATCAP': ''\n        };\n        this.color.copy(source.color);\n        this.matcap = source.matcap;\n        this.map = source.map;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalMapType = source.normalMapType;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.alphaMap = source.alphaMap;\n        this.flatShading = source.flatShading;\n        this.fog = source.fog;\n        return this;\n      }\n    }]);\n  }(Material);\n  var LineDashedMaterial = exports.LineDashedMaterial = /*#__PURE__*/function (_LineBasicMaterial) {\n    function LineDashedMaterial(parameters) {\n      var _this89;\n      (0, _classCallCheck2.default)(this, LineDashedMaterial);\n      _this89 = _callSuper(this, LineDashedMaterial);\n      _this89.isLineDashedMaterial = true;\n      _this89.type = 'LineDashedMaterial';\n      _this89.scale = 1;\n      _this89.dashSize = 3;\n      _this89.gapSize = 1;\n      _this89.setValues(parameters);\n      return _this89;\n    }\n    (0, _inherits2.default)(LineDashedMaterial, _LineBasicMaterial);\n    return (0, _createClass2.default)(LineDashedMaterial, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LineDashedMaterial, \"copy\", this, 3)([source]);\n        this.scale = source.scale;\n        this.dashSize = source.dashSize;\n        this.gapSize = source.gapSize;\n        return this;\n      }\n    }]);\n  }(LineBasicMaterial); // converts an array to a specific type\n  function convertArray(array, type, forceClone) {\n    if (!array ||\n    // let 'undefined' and 'null' pass\n    !forceClone && array.constructor === type) return array;\n    if (typeof type.BYTES_PER_ELEMENT === 'number') {\n      return new type(array); // create typed array\n    }\n    return Array.prototype.slice.call(array); // create Array\n  }\n  function isTypedArray(object) {\n    return ArrayBuffer.isView(object) && !(object instanceof DataView);\n  }\n\n  // returns an array by which times and values can be sorted\n  function getKeyframeOrder(times) {\n    function compareTime(i, j) {\n      return times[i] - times[j];\n    }\n    var n = times.length;\n    var result = new Array(n);\n    for (var i = 0; i !== n; ++i) result[i] = i;\n    result.sort(compareTime);\n    return result;\n  }\n\n  // uses the array previously returned by 'getKeyframeOrder' to sort data\n  function sortedArray(values, stride, order) {\n    var nValues = values.length;\n    var result = new values.constructor(nValues);\n    for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n      var srcOffset = order[i] * stride;\n      for (var j = 0; j !== stride; ++j) {\n        result[dstOffset++] = values[srcOffset + j];\n      }\n    }\n    return result;\n  }\n\n  // function for parsing AOS keyframe formats\n  function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n    var i = 1,\n      key = jsonKeys[0];\n    while (key !== undefined && key[valuePropertyName] === undefined) {\n      key = jsonKeys[i++];\n    }\n    if (key === undefined) return; // no data\n\n    var value = key[valuePropertyName];\n    if (value === undefined) return; // no data\n\n    if (Array.isArray(value)) {\n      do {\n        value = key[valuePropertyName];\n        if (value !== undefined) {\n          times.push(key.time);\n          values.push.apply(values, value); // push all elements\n        }\n        key = jsonKeys[i++];\n      } while (key !== undefined);\n    } else if (value.toArray !== undefined) {\n      // ...assume THREE.Math-ish\n\n      do {\n        value = key[valuePropertyName];\n        if (value !== undefined) {\n          times.push(key.time);\n          value.toArray(values, values.length);\n        }\n        key = jsonKeys[i++];\n      } while (key !== undefined);\n    } else {\n      // otherwise push as-is\n\n      do {\n        value = key[valuePropertyName];\n        if (value !== undefined) {\n          times.push(key.time);\n          values.push(value);\n        }\n        key = jsonKeys[i++];\n      } while (key !== undefined);\n    }\n  }\n  function subclip(sourceClip, name, startFrame, endFrame) {\n    var fps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n    var clip = sourceClip.clone();\n    clip.name = name;\n    var tracks = [];\n    for (var i = 0; i < clip.tracks.length; ++i) {\n      var track = clip.tracks[i];\n      var valueSize = track.getValueSize();\n      var times = [];\n      var values = [];\n      for (var j = 0; j < track.times.length; ++j) {\n        var frame = track.times[j] * fps;\n        if (frame < startFrame || frame >= endFrame) continue;\n        times.push(track.times[j]);\n        for (var k = 0; k < valueSize; ++k) {\n          values.push(track.values[j * valueSize + k]);\n        }\n      }\n      if (times.length === 0) continue;\n      track.times = convertArray(times, track.times.constructor);\n      track.values = convertArray(values, track.values.constructor);\n      tracks.push(track);\n    }\n    clip.tracks = tracks;\n\n    // find minimum .times value across all tracks in the trimmed clip\n\n    var minStartTime = Infinity;\n    for (var _i57 = 0; _i57 < clip.tracks.length; ++_i57) {\n      if (minStartTime > clip.tracks[_i57].times[0]) {\n        minStartTime = clip.tracks[_i57].times[0];\n      }\n    }\n\n    // shift all tracks such that clip begins at t=0\n\n    for (var _i58 = 0; _i58 < clip.tracks.length; ++_i58) {\n      clip.tracks[_i58].shift(-1 * minStartTime);\n    }\n    clip.resetDuration();\n    return clip;\n  }\n  function makeClipAdditive(targetClip) {\n    var referenceFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var referenceClip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : targetClip;\n    var fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;\n    if (fps <= 0) fps = 30;\n    var numTracks = referenceClip.tracks.length;\n    var referenceTime = referenceFrame / fps;\n\n    // Make each track's values relative to the values at the reference frame\n    var _loop = function _loop() {\n        var referenceTrack = referenceClip.tracks[i];\n        var referenceTrackType = referenceTrack.ValueTypeName;\n\n        // Skip this track if it's non-numeric\n        if (referenceTrackType === 'bool' || referenceTrackType === 'string') return 0; // continue\n\n        // Find the track in the target clip whose name and type matches the reference track\n        var targetTrack = targetClip.tracks.find(function (track) {\n          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n        });\n        if (targetTrack === undefined) return 0; // continue\n        var referenceOffset = 0;\n        var referenceValueSize = referenceTrack.getValueSize();\n        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          referenceOffset = referenceValueSize / 3;\n        }\n        var targetOffset = 0;\n        var targetValueSize = targetTrack.getValueSize();\n        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          targetOffset = targetValueSize / 3;\n        }\n        var lastIndex = referenceTrack.times.length - 1;\n        var referenceValue;\n\n        // Find the value to subtract out of the track\n        if (referenceTime <= referenceTrack.times[0]) {\n          // Reference frame is earlier than the first keyframe, so just use the first keyframe\n          var startIndex = referenceOffset;\n          var endIndex = referenceValueSize - referenceOffset;\n          referenceValue = referenceTrack.values.slice(startIndex, endIndex);\n        } else if (referenceTime >= referenceTrack.times[lastIndex]) {\n          // Reference frame is after the last keyframe, so just use the last keyframe\n          var _startIndex = lastIndex * referenceValueSize + referenceOffset;\n          var _endIndex = _startIndex + referenceValueSize - referenceOffset;\n          referenceValue = referenceTrack.values.slice(_startIndex, _endIndex);\n        } else {\n          // Interpolate to the reference value\n          var interpolant = referenceTrack.createInterpolant();\n          var _startIndex2 = referenceOffset;\n          var _endIndex2 = referenceValueSize - referenceOffset;\n          interpolant.evaluate(referenceTime);\n          referenceValue = interpolant.resultBuffer.slice(_startIndex2, _endIndex2);\n        }\n\n        // Conjugate the quaternion\n        if (referenceTrackType === 'quaternion') {\n          var referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n          referenceQuat.toArray(referenceValue);\n        }\n\n        // Subtract the reference value from all of the track values\n\n        var numTimes = targetTrack.times.length;\n        for (var j = 0; j < numTimes; ++j) {\n          var valueStart = j * targetValueSize + targetOffset;\n          if (referenceTrackType === 'quaternion') {\n            // Multiply the conjugate for quaternion track types\n            Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n          } else {\n            var valueEnd = targetValueSize - targetOffset * 2;\n\n            // Subtract each value for all other numeric track types\n            for (var k = 0; k < valueEnd; ++k) {\n              targetTrack.values[valueStart + k] -= referenceValue[k];\n            }\n          }\n        }\n      },\n      _ret;\n    for (var i = 0; i < numTracks; ++i) {\n      _ret = _loop();\n      if (_ret === 0) continue;\n    }\n    targetClip.blendMode = AdditiveAnimationBlendMode;\n    return targetClip;\n  }\n  var AnimationUtils = exports.AnimationUtils = {\n    convertArray: convertArray,\n    isTypedArray: isTypedArray,\n    getKeyframeOrder: getKeyframeOrder,\n    sortedArray: sortedArray,\n    flattenJSON: flattenJSON,\n    subclip: subclip,\n    makeClipAdditive: makeClipAdditive\n  };\n\n  /**\n   * Abstract base class of interpolants over parametric samples.\n   *\n   * The parameter domain is one dimensional, typically the time or a path\n   * along a curve defined by the data.\n   *\n   * The sample values can have any dimensionality and derived classes may\n   * apply special interpretations to the data.\n   *\n   * This class provides the interval seek in a Template Method, deferring\n   * the actual interpolation to derived classes.\n   *\n   * Time complexity is O(1) for linear access crossing at most two points\n   * and O(log N) for random access, where N is the number of positions.\n   *\n   * References:\n   *\n   * \t\thttp://www.oodesign.com/template-method-pattern.html\n   *\n   */\n  var Interpolant = exports.Interpolant = /*#__PURE__*/function () {\n    function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      (0, _classCallCheck2.default)(this, Interpolant);\n      this.parameterPositions = parameterPositions;\n      this._cachedIndex = 0;\n      this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n      this.sampleValues = sampleValues;\n      this.valueSize = sampleSize;\n      this.settings = null;\n      this.DefaultSettings_ = {};\n    }\n    return (0, _createClass2.default)(Interpolant, [{\n      key: \"evaluate\",\n      value: function evaluate(t) {\n        var pp = this.parameterPositions;\n        var i1 = this._cachedIndex,\n          t1 = pp[i1],\n          t0 = pp[i1 - 1];\n        validate_interval: {\n          seek: {\n            var right;\n            linear_scan: {\n              //- See http://jsperf.com/comparison-to-undefined/3\n              //- slower code:\n              //-\n              //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n              forward_scan: if (!(t < t1)) {\n                for (var giveUpAt = i1 + 2;;) {\n                  if (t1 === undefined) {\n                    if (t < t0) break forward_scan;\n\n                    // after end\n\n                    i1 = pp.length;\n                    this._cachedIndex = i1;\n                    return this.copySampleValue_(i1 - 1);\n                  }\n                  if (i1 === giveUpAt) break; // this loop\n\n                  t0 = t1;\n                  t1 = pp[++i1];\n                  if (t < t1) {\n                    // we have arrived at the sought interval\n                    break seek;\n                  }\n                }\n\n                // prepare binary search on the right side of the index\n                right = pp.length;\n                break linear_scan;\n              }\n\n              //- slower code:\n              //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n              if (!(t >= t0)) {\n                // looping?\n\n                var t1global = pp[1];\n                if (t < t1global) {\n                  i1 = 2; // + 1, using the scan for the details\n                  t0 = t1global;\n                }\n\n                // linear reverse scan\n\n                for (var _giveUpAt = i1 - 2;;) {\n                  if (t0 === undefined) {\n                    // before start\n\n                    this._cachedIndex = 0;\n                    return this.copySampleValue_(0);\n                  }\n                  if (i1 === _giveUpAt) break; // this loop\n\n                  t1 = t0;\n                  t0 = pp[--i1 - 1];\n                  if (t >= t0) {\n                    // we have arrived at the sought interval\n                    break seek;\n                  }\n                }\n\n                // prepare binary search on the left side of the index\n                right = i1;\n                i1 = 0;\n                break linear_scan;\n              }\n\n              // the interval is valid\n\n              break validate_interval;\n            } // linear scan\n\n            // binary search\n\n            while (i1 < right) {\n              var mid = i1 + right >>> 1;\n              if (t < pp[mid]) {\n                right = mid;\n              } else {\n                i1 = mid + 1;\n              }\n            }\n            t1 = pp[i1];\n            t0 = pp[i1 - 1];\n\n            // check boundary cases, again\n\n            if (t0 === undefined) {\n              this._cachedIndex = 0;\n              return this.copySampleValue_(0);\n            }\n            if (t1 === undefined) {\n              i1 = pp.length;\n              this._cachedIndex = i1;\n              return this.copySampleValue_(i1 - 1);\n            }\n          } // seek\n\n          this._cachedIndex = i1;\n          this.intervalChanged_(i1, t0, t1);\n        } // validate_interval\n\n        return this.interpolate_(i1, t0, t, t1);\n      }\n    }, {\n      key: \"getSettings_\",\n      value: function getSettings_() {\n        return this.settings || this.DefaultSettings_;\n      }\n    }, {\n      key: \"copySampleValue_\",\n      value: function copySampleValue_(index) {\n        // copies a sample value to the result buffer\n\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset = index * stride;\n        for (var i = 0; i !== stride; ++i) {\n          result[i] = values[offset + i];\n        }\n        return result;\n      }\n\n      // Template methods for derived classes:\n    }, {\n      key: \"interpolate_\",\n      value: function interpolate_(/* i1, t0, t, t1 */\n      ) {\n        throw new Error('call to abstract method');\n        // implementations shall return this.resultBuffer\n      }\n    }, {\n      key: \"intervalChanged_\",\n      value: function intervalChanged_(/* i1, t0, t1 */\n      ) {\n\n        // empty\n      }\n    }]);\n  }();\n  /**\n   * Fast and simple cubic spline interpolant.\n   *\n   * It was derived from a Hermitian construction setting the first derivative\n   * at each sample position to the linear slope between neighboring positions\n   * over their parameter interval.\n   */\n  var CubicInterpolant = exports.CubicInterpolant = /*#__PURE__*/function (_Interpolant) {\n    function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      var _this90;\n      (0, _classCallCheck2.default)(this, CubicInterpolant);\n      _this90 = _callSuper(this, CubicInterpolant, [parameterPositions, sampleValues, sampleSize, resultBuffer]);\n      _this90._weightPrev = -0;\n      _this90._offsetPrev = -0;\n      _this90._weightNext = -0;\n      _this90._offsetNext = -0;\n      _this90.DefaultSettings_ = {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding\n      };\n      return _this90;\n    }\n    (0, _inherits2.default)(CubicInterpolant, _Interpolant);\n    return (0, _createClass2.default)(CubicInterpolant, [{\n      key: \"intervalChanged_\",\n      value: function intervalChanged_(i1, t0, t1) {\n        var pp = this.parameterPositions;\n        var iPrev = i1 - 2,\n          iNext = i1 + 1,\n          tPrev = pp[iPrev],\n          tNext = pp[iNext];\n        if (tPrev === undefined) {\n          switch (this.getSettings_().endingStart) {\n            case ZeroSlopeEnding:\n              // f'(t0) = 0\n              iPrev = i1;\n              tPrev = 2 * t0 - t1;\n              break;\n            case WrapAroundEnding:\n              // use the other end of the curve\n              iPrev = pp.length - 2;\n              tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n              break;\n            default:\n              // ZeroCurvatureEnding\n\n              // f''(t0) = 0 a.k.a. Natural Spline\n              iPrev = i1;\n              tPrev = t1;\n          }\n        }\n        if (tNext === undefined) {\n          switch (this.getSettings_().endingEnd) {\n            case ZeroSlopeEnding:\n              // f'(tN) = 0\n              iNext = i1;\n              tNext = 2 * t1 - t0;\n              break;\n            case WrapAroundEnding:\n              // use the other end of the curve\n              iNext = 1;\n              tNext = t1 + pp[1] - pp[0];\n              break;\n            default:\n              // ZeroCurvatureEnding\n\n              // f''(tN) = 0, a.k.a. Natural Spline\n              iNext = i1 - 1;\n              tNext = t0;\n          }\n        }\n        var halfDt = (t1 - t0) * 0.5,\n          stride = this.valueSize;\n        this._weightPrev = halfDt / (t0 - tPrev);\n        this._weightNext = halfDt / (tNext - t1);\n        this._offsetPrev = iPrev * stride;\n        this._offsetNext = iNext * stride;\n      }\n    }, {\n      key: \"interpolate_\",\n      value: function interpolate_(i1, t0, t, t1) {\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          o1 = i1 * stride,\n          o0 = o1 - stride,\n          oP = this._offsetPrev,\n          oN = this._offsetNext,\n          wP = this._weightPrev,\n          wN = this._weightNext,\n          p = (t - t0) / (t1 - t0),\n          pp = p * p,\n          ppp = pp * p;\n\n        // evaluate polynomials\n\n        var sP = -wP * ppp + 2 * wP * pp - wP * p;\n        var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n        var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n        var sN = wN * ppp - wN * pp;\n\n        // combine data linearly\n\n        for (var i = 0; i !== stride; ++i) {\n          result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n        }\n        return result;\n      }\n    }]);\n  }(Interpolant);\n  var LinearInterpolant = exports.LinearInterpolant = /*#__PURE__*/function (_Interpolant2) {\n    function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      (0, _classCallCheck2.default)(this, LinearInterpolant);\n      return _callSuper(this, LinearInterpolant, [parameterPositions, sampleValues, sampleSize, resultBuffer]);\n    }\n    (0, _inherits2.default)(LinearInterpolant, _Interpolant2);\n    return (0, _createClass2.default)(LinearInterpolant, [{\n      key: \"interpolate_\",\n      value: function interpolate_(i1, t0, t, t1) {\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset1 = i1 * stride,\n          offset0 = offset1 - stride,\n          weight1 = (t - t0) / (t1 - t0),\n          weight0 = 1 - weight1;\n        for (var i = 0; i !== stride; ++i) {\n          result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n        return result;\n      }\n    }]);\n  }(Interpolant);\n  /**\n   *\n   * Interpolant that evaluates to the sample value at the position preceding\n   * the parameter.\n   */\n  var DiscreteInterpolant = exports.DiscreteInterpolant = /*#__PURE__*/function (_Interpolant3) {\n    function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      (0, _classCallCheck2.default)(this, DiscreteInterpolant);\n      return _callSuper(this, DiscreteInterpolant, [parameterPositions, sampleValues, sampleSize, resultBuffer]);\n    }\n    (0, _inherits2.default)(DiscreteInterpolant, _Interpolant3);\n    return (0, _createClass2.default)(DiscreteInterpolant, [{\n      key: \"interpolate_\",\n      value: function interpolate_(i1 /*, t0, t, t1 */) {\n        return this.copySampleValue_(i1 - 1);\n      }\n    }]);\n  }(Interpolant);\n  var KeyframeTrack = exports.KeyframeTrack = /*#__PURE__*/function () {\n    function KeyframeTrack(name, times, values, interpolation) {\n      (0, _classCallCheck2.default)(this, KeyframeTrack);\n      if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n      if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n      this.name = name;\n      this.times = convertArray(times, this.TimeBufferType);\n      this.values = convertArray(values, this.ValueBufferType);\n      this.setInterpolation(interpolation || this.DefaultInterpolation);\n    }\n\n    // Serialization (in static context, because of constructor invocation\n    // and automatic invocation of .toJSON):\n    return (0, _createClass2.default)(KeyframeTrack, [{\n      key: \"InterpolantFactoryMethodDiscrete\",\n      value: function InterpolantFactoryMethodDiscrete(result) {\n        return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n      }\n    }, {\n      key: \"InterpolantFactoryMethodLinear\",\n      value: function InterpolantFactoryMethodLinear(result) {\n        return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n      }\n    }, {\n      key: \"InterpolantFactoryMethodSmooth\",\n      value: function InterpolantFactoryMethodSmooth(result) {\n        return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n      }\n    }, {\n      key: \"setInterpolation\",\n      value: function setInterpolation(interpolation) {\n        var factoryMethod;\n        switch (interpolation) {\n          case InterpolateDiscrete:\n            factoryMethod = this.InterpolantFactoryMethodDiscrete;\n            break;\n          case InterpolateLinear:\n            factoryMethod = this.InterpolantFactoryMethodLinear;\n            break;\n          case InterpolateSmooth:\n            factoryMethod = this.InterpolantFactoryMethodSmooth;\n            break;\n        }\n        if (factoryMethod === undefined) {\n          var message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n          if (this.createInterpolant === undefined) {\n            // fall back to default, unless the default itself is messed up\n            if (interpolation !== this.DefaultInterpolation) {\n              this.setInterpolation(this.DefaultInterpolation);\n            } else {\n              throw new Error(message); // fatal, in this case\n            }\n          }\n          console.warn('THREE.KeyframeTrack:', message);\n          return this;\n        }\n        this.createInterpolant = factoryMethod;\n        return this;\n      }\n    }, {\n      key: \"getInterpolation\",\n      value: function getInterpolation() {\n        switch (this.createInterpolant) {\n          case this.InterpolantFactoryMethodDiscrete:\n            return InterpolateDiscrete;\n          case this.InterpolantFactoryMethodLinear:\n            return InterpolateLinear;\n          case this.InterpolantFactoryMethodSmooth:\n            return InterpolateSmooth;\n        }\n      }\n    }, {\n      key: \"getValueSize\",\n      value: function getValueSize() {\n        return this.values.length / this.times.length;\n      }\n\n      // move all keyframes either forwards or backwards in time\n    }, {\n      key: \"shift\",\n      value: function shift(timeOffset) {\n        if (timeOffset !== 0.0) {\n          var times = this.times;\n          for (var i = 0, n = times.length; i !== n; ++i) {\n            times[i] += timeOffset;\n          }\n        }\n        return this;\n      }\n\n      // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    }, {\n      key: \"scale\",\n      value: function scale(timeScale) {\n        if (timeScale !== 1.0) {\n          var times = this.times;\n          for (var i = 0, n = times.length; i !== n; ++i) {\n            times[i] *= timeScale;\n          }\n        }\n        return this;\n      }\n\n      // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n      // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    }, {\n      key: \"trim\",\n      value: function trim(startTime, endTime) {\n        var times = this.times,\n          nKeys = times.length;\n        var from = 0,\n          to = nKeys - 1;\n        while (from !== nKeys && times[from] < startTime) {\n          ++from;\n        }\n        while (to !== -1 && times[to] > endTime) {\n          --to;\n        }\n        ++to; // inclusive -> exclusive bound\n\n        if (from !== 0 || to !== nKeys) {\n          // empty tracks are forbidden, so keep at least one keyframe\n          if (from >= to) {\n            to = Math.max(to, 1);\n            from = to - 1;\n          }\n          var stride = this.getValueSize();\n          this.times = times.slice(from, to);\n          this.values = this.values.slice(from * stride, to * stride);\n        }\n        return this;\n      }\n\n      // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    }, {\n      key: \"validate\",\n      value: function validate() {\n        var valid = true;\n        var valueSize = this.getValueSize();\n        if (valueSize - Math.floor(valueSize) !== 0) {\n          console.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n          valid = false;\n        }\n        var times = this.times,\n          values = this.values,\n          nKeys = times.length;\n        if (nKeys === 0) {\n          console.error('THREE.KeyframeTrack: Track is empty.', this);\n          valid = false;\n        }\n        var prevTime = null;\n        for (var i = 0; i !== nKeys; i++) {\n          var currTime = times[i];\n          if (typeof currTime === 'number' && isNaN(currTime)) {\n            console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n            valid = false;\n            break;\n          }\n          if (prevTime !== null && prevTime > currTime) {\n            console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n            valid = false;\n            break;\n          }\n          prevTime = currTime;\n        }\n        if (values !== undefined) {\n          if (isTypedArray(values)) {\n            for (var _i59 = 0, n = values.length; _i59 !== n; ++_i59) {\n              var value = values[_i59];\n              if (isNaN(value)) {\n                console.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i59, value);\n                valid = false;\n                break;\n              }\n            }\n          }\n        }\n        return valid;\n      }\n\n      // removes equivalent sequential keys as common in morph target sequences\n      // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    }, {\n      key: \"optimize\",\n      value: function optimize() {\n        // times or values may be shared with other tracks, so overwriting is unsafe\n        var times = this.times.slice(),\n          values = this.values.slice(),\n          stride = this.getValueSize(),\n          smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n          lastIndex = times.length - 1;\n        var writeIndex = 1;\n        for (var i = 1; i < lastIndex; ++i) {\n          var keep = false;\n          var time = times[i];\n          var timeNext = times[i + 1];\n\n          // remove adjacent keyframes scheduled at the same time\n\n          if (time !== timeNext && (i !== 1 || time !== times[0])) {\n            if (!smoothInterpolation) {\n              // remove unnecessary keyframes same as their neighbors\n\n              var offset = i * stride,\n                offsetP = offset - stride,\n                offsetN = offset + stride;\n              for (var j = 0; j !== stride; ++j) {\n                var value = values[offset + j];\n                if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n                  keep = true;\n                  break;\n                }\n              }\n            } else {\n              keep = true;\n            }\n          }\n\n          // in-place compaction\n\n          if (keep) {\n            if (i !== writeIndex) {\n              times[writeIndex] = times[i];\n              var readOffset = i * stride,\n                writeOffset = writeIndex * stride;\n              for (var _j12 = 0; _j12 !== stride; ++_j12) {\n                values[writeOffset + _j12] = values[readOffset + _j12];\n              }\n            }\n            ++writeIndex;\n          }\n        }\n\n        // flush last keyframe (compaction looks ahead)\n\n        if (lastIndex > 0) {\n          times[writeIndex] = times[lastIndex];\n          for (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j13 = 0; _j13 !== stride; ++_j13) {\n            values[_writeOffset + _j13] = values[_readOffset + _j13];\n          }\n          ++writeIndex;\n        }\n        if (writeIndex !== times.length) {\n          this.times = times.slice(0, writeIndex);\n          this.values = values.slice(0, writeIndex * stride);\n        } else {\n          this.times = times;\n          this.values = values;\n        }\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var times = this.times.slice();\n        var values = this.values.slice();\n        var TypedKeyframeTrack = this.constructor;\n        var track = new TypedKeyframeTrack(this.name, times, values);\n\n        // Interpolant argument to constructor is not saved, so copy the factory method directly.\n        track.createInterpolant = this.createInterpolant;\n        return track;\n      }\n    }], [{\n      key: \"toJSON\",\n      value: function toJSON(track) {\n        var trackType = track.constructor;\n        var json;\n\n        // derived classes can define a static toJSON method\n        if (trackType.toJSON !== this.toJSON) {\n          json = trackType.toJSON(track);\n        } else {\n          // by default, we assume the data can be serialized as-is\n          json = {\n            'name': track.name,\n            'times': convertArray(track.times, Array),\n            'values': convertArray(track.values, Array)\n          };\n          var interpolation = track.getInterpolation();\n          if (interpolation !== track.DefaultInterpolation) {\n            json.interpolation = interpolation;\n          }\n        }\n        json.type = track.ValueTypeName; // mandatory\n\n        return json;\n      }\n    }]);\n  }();\n  KeyframeTrack.prototype.TimeBufferType = Float32Array;\n  KeyframeTrack.prototype.ValueBufferType = Float32Array;\n  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n  /**\n   * A Track of Boolean keyframe values.\n   */\n  var BooleanKeyframeTrack = exports.BooleanKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n    // No interpolation parameter because only InterpolateDiscrete is valid.\n    function BooleanKeyframeTrack(name, times, values) {\n      (0, _classCallCheck2.default)(this, BooleanKeyframeTrack);\n      return _callSuper(this, BooleanKeyframeTrack, [name, times, values]);\n    }\n    (0, _inherits2.default)(BooleanKeyframeTrack, _KeyframeTrack);\n    return (0, _createClass2.default)(BooleanKeyframeTrack);\n  }(KeyframeTrack);\n  BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n  BooleanKeyframeTrack.prototype.ValueBufferType = Array;\n  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n  /**\n   * A Track of keyframe values that represent color.\n   */\n  var ColorKeyframeTrack = exports.ColorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack2) {\n    function ColorKeyframeTrack() {\n      (0, _classCallCheck2.default)(this, ColorKeyframeTrack);\n      return _callSuper(this, ColorKeyframeTrack, arguments);\n    }\n    (0, _inherits2.default)(ColorKeyframeTrack, _KeyframeTrack2);\n    return (0, _createClass2.default)(ColorKeyframeTrack);\n  }(KeyframeTrack);\n  ColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n  /**\n   * A Track of numeric keyframe values.\n   */\n  var NumberKeyframeTrack = exports.NumberKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack3) {\n    function NumberKeyframeTrack() {\n      (0, _classCallCheck2.default)(this, NumberKeyframeTrack);\n      return _callSuper(this, NumberKeyframeTrack, arguments);\n    }\n    (0, _inherits2.default)(NumberKeyframeTrack, _KeyframeTrack3);\n    return (0, _createClass2.default)(NumberKeyframeTrack);\n  }(KeyframeTrack);\n  NumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n  /**\n   * Spherical linear unit quaternion interpolant.\n   */\n  var QuaternionLinearInterpolant = exports.QuaternionLinearInterpolant = /*#__PURE__*/function (_Interpolant4) {\n    function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      (0, _classCallCheck2.default)(this, QuaternionLinearInterpolant);\n      return _callSuper(this, QuaternionLinearInterpolant, [parameterPositions, sampleValues, sampleSize, resultBuffer]);\n    }\n    (0, _inherits2.default)(QuaternionLinearInterpolant, _Interpolant4);\n    return (0, _createClass2.default)(QuaternionLinearInterpolant, [{\n      key: \"interpolate_\",\n      value: function interpolate_(i1, t0, t, t1) {\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          alpha = (t - t0) / (t1 - t0);\n        var offset = i1 * stride;\n        for (var end = offset + stride; offset !== end; offset += 4) {\n          Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n        }\n        return result;\n      }\n    }]);\n  }(Interpolant);\n  /**\n   * A Track of quaternion keyframe values.\n   */\n  var QuaternionKeyframeTrack = exports.QuaternionKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack4) {\n    function QuaternionKeyframeTrack() {\n      (0, _classCallCheck2.default)(this, QuaternionKeyframeTrack);\n      return _callSuper(this, QuaternionKeyframeTrack, arguments);\n    }\n    (0, _inherits2.default)(QuaternionKeyframeTrack, _KeyframeTrack4);\n    return (0, _createClass2.default)(QuaternionKeyframeTrack, [{\n      key: \"InterpolantFactoryMethodLinear\",\n      value: function InterpolantFactoryMethodLinear(result) {\n        return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n      }\n    }]);\n  }(KeyframeTrack);\n  QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n  // ValueBufferType is inherited\n  // DefaultInterpolation is inherited;\n  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n  /**\n   * A Track that interpolates Strings\n   */\n  var StringKeyframeTrack = exports.StringKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack5) {\n    // No interpolation parameter because only InterpolateDiscrete is valid.\n    function StringKeyframeTrack(name, times, values) {\n      (0, _classCallCheck2.default)(this, StringKeyframeTrack);\n      return _callSuper(this, StringKeyframeTrack, [name, times, values]);\n    }\n    (0, _inherits2.default)(StringKeyframeTrack, _KeyframeTrack5);\n    return (0, _createClass2.default)(StringKeyframeTrack);\n  }(KeyframeTrack);\n  StringKeyframeTrack.prototype.ValueTypeName = 'string';\n  StringKeyframeTrack.prototype.ValueBufferType = Array;\n  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n  /**\n   * A Track of vectored keyframe values.\n   */\n  var VectorKeyframeTrack = exports.VectorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack6) {\n    function VectorKeyframeTrack() {\n      (0, _classCallCheck2.default)(this, VectorKeyframeTrack);\n      return _callSuper(this, VectorKeyframeTrack, arguments);\n    }\n    (0, _inherits2.default)(VectorKeyframeTrack, _KeyframeTrack6);\n    return (0, _createClass2.default)(VectorKeyframeTrack);\n  }(KeyframeTrack);\n  VectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n  var AnimationClip = exports.AnimationClip = /*#__PURE__*/function () {\n    function AnimationClip() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      var tracks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NormalAnimationBlendMode;\n      (0, _classCallCheck2.default)(this, AnimationClip);\n      this.name = name;\n      this.tracks = tracks;\n      this.duration = duration;\n      this.blendMode = blendMode;\n      this.uuid = generateUUID();\n\n      // this means it should figure out its duration by scanning the tracks\n      if (this.duration < 0) {\n        this.resetDuration();\n      }\n    }\n    return (0, _createClass2.default)(AnimationClip, [{\n      key: \"resetDuration\",\n      value: function resetDuration() {\n        var tracks = this.tracks;\n        var duration = 0;\n        for (var i = 0, n = tracks.length; i !== n; ++i) {\n          var track = this.tracks[i];\n          duration = Math.max(duration, track.times[track.times.length - 1]);\n        }\n        this.duration = duration;\n        return this;\n      }\n    }, {\n      key: \"trim\",\n      value: function trim() {\n        for (var i = 0; i < this.tracks.length; i++) {\n          this.tracks[i].trim(0, this.duration);\n        }\n        return this;\n      }\n    }, {\n      key: \"validate\",\n      value: function validate() {\n        var valid = true;\n        for (var i = 0; i < this.tracks.length; i++) {\n          valid = valid && this.tracks[i].validate();\n        }\n        return valid;\n      }\n    }, {\n      key: \"optimize\",\n      value: function optimize() {\n        for (var i = 0; i < this.tracks.length; i++) {\n          this.tracks[i].optimize();\n        }\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var tracks = [];\n        for (var i = 0; i < this.tracks.length; i++) {\n          tracks.push(this.tracks[i].clone());\n        }\n        return new this.constructor(this.name, this.duration, tracks, this.blendMode);\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return this.constructor.toJSON(this);\n      }\n    }], [{\n      key: \"parse\",\n      value: function parse(json) {\n        var tracks = [],\n          jsonTracks = json.tracks,\n          frameTime = 1.0 / (json.fps || 1.0);\n        for (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n          tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n        }\n        var clip = new this(json.name, json.duration, tracks, json.blendMode);\n        clip.uuid = json.uuid;\n        return clip;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(clip) {\n        var tracks = [],\n          clipTracks = clip.tracks;\n        var json = {\n          'name': clip.name,\n          'duration': clip.duration,\n          'tracks': tracks,\n          'uuid': clip.uuid,\n          'blendMode': clip.blendMode\n        };\n        for (var i = 0, n = clipTracks.length; i !== n; ++i) {\n          tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n        }\n        return json;\n      }\n    }, {\n      key: \"CreateFromMorphTargetSequence\",\n      value: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n        var numMorphTargets = morphTargetSequence.length;\n        var tracks = [];\n        for (var i = 0; i < numMorphTargets; i++) {\n          var times = [];\n          var values = [];\n          times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n          values.push(0, 1, 0);\n          var order = getKeyframeOrder(times);\n          times = sortedArray(times, 1, order);\n          values = sortedArray(values, 1, order);\n\n          // if there is a key at the first frame, duplicate it as the\n          // last frame as well for perfect loop.\n          if (!noLoop && times[0] === 0) {\n            times.push(numMorphTargets);\n            values.push(values[0]);\n          }\n          tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n        }\n        return new this(name, -1, tracks);\n      }\n    }, {\n      key: \"findByName\",\n      value: function findByName(objectOrClipArray, name) {\n        var clipArray = objectOrClipArray;\n        if (!Array.isArray(objectOrClipArray)) {\n          var o = objectOrClipArray;\n          clipArray = o.geometry && o.geometry.animations || o.animations;\n        }\n        for (var i = 0; i < clipArray.length; i++) {\n          if (clipArray[i].name === name) {\n            return clipArray[i];\n          }\n        }\n        return null;\n      }\n    }, {\n      key: \"CreateClipsFromMorphTargetSequences\",\n      value: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n        var animationToMorphTargets = {};\n\n        // tested with https://regex101.com/ on trick sequences\n        // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n        var pattern = /^([\\w-]*?)([\\d]+)$/;\n\n        // sort morph target names into animation groups based\n        // patterns like Walk_001, Walk_002, Run_001, Run_002\n        for (var i = 0, il = morphTargets.length; i < il; i++) {\n          var morphTarget = morphTargets[i];\n          var parts = morphTarget.name.match(pattern);\n          if (parts && parts.length > 1) {\n            var name = parts[1];\n            var animationMorphTargets = animationToMorphTargets[name];\n            if (!animationMorphTargets) {\n              animationToMorphTargets[name] = animationMorphTargets = [];\n            }\n            animationMorphTargets.push(morphTarget);\n          }\n        }\n        var clips = [];\n        for (var _name3 in animationToMorphTargets) {\n          clips.push(this.CreateFromMorphTargetSequence(_name3, animationToMorphTargets[_name3], fps, noLoop));\n        }\n        return clips;\n      }\n\n      // parse the animation.hierarchy format\n    }, {\n      key: \"parseAnimation\",\n      value: function parseAnimation(animation, bones) {\n        if (!animation) {\n          console.error('THREE.AnimationClip: No animation in JSONLoader data.');\n          return null;\n        }\n        var addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n          // only return track if there are actually keys.\n          if (animationKeys.length !== 0) {\n            var times = [];\n            var values = [];\n            flattenJSON(animationKeys, times, values, propertyName);\n\n            // empty keys are filtered out, so check again\n            if (times.length !== 0) {\n              destTracks.push(new trackType(trackName, times, values));\n            }\n          }\n        };\n        var tracks = [];\n        var clipName = animation.name || 'default';\n        var fps = animation.fps || 30;\n        var blendMode = animation.blendMode;\n\n        // automatic length determination in AnimationClip.\n        var duration = animation.length || -1;\n        var hierarchyTracks = animation.hierarchy || [];\n        for (var h = 0; h < hierarchyTracks.length; h++) {\n          var animationKeys = hierarchyTracks[h].keys;\n\n          // skip empty tracks\n          if (!animationKeys || animationKeys.length === 0) continue;\n\n          // process morph targets\n          if (animationKeys[0].morphTargets) {\n            // figure out all morph targets used in this track\n            var morphTargetNames = {};\n            var k = void 0;\n            for (k = 0; k < animationKeys.length; k++) {\n              if (animationKeys[k].morphTargets) {\n                for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n                  morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n                }\n              }\n            }\n\n            // create a track for each morph target with all zero\n            // morphTargetInfluences except for the keys in which\n            // the morphTarget is named.\n            for (var morphTargetName in morphTargetNames) {\n              var times = [];\n              var values = [];\n              for (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n                var animationKey = animationKeys[k];\n                times.push(animationKey.time);\n                values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n              }\n              tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n            }\n            duration = morphTargetNames.length * fps;\n          } else {\n            // ...assume skeletal animation\n\n            var boneName = '.bones[' + bones[h].name + ']';\n            addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n            addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n            addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n          }\n        }\n        if (tracks.length === 0) {\n          return null;\n        }\n        var clip = new this(clipName, duration, tracks, blendMode);\n        return clip;\n      }\n    }]);\n  }();\n  function getTrackTypeForValueTypeName(typeName) {\n    switch (typeName.toLowerCase()) {\n      case 'scalar':\n      case 'double':\n      case 'float':\n      case 'number':\n      case 'integer':\n        return NumberKeyframeTrack;\n      case 'vector':\n      case 'vector2':\n      case 'vector3':\n      case 'vector4':\n        return VectorKeyframeTrack;\n      case 'color':\n        return ColorKeyframeTrack;\n      case 'quaternion':\n        return QuaternionKeyframeTrack;\n      case 'bool':\n      case 'boolean':\n        return BooleanKeyframeTrack;\n      case 'string':\n        return StringKeyframeTrack;\n    }\n    throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n  }\n  function parseKeyframeTrack(json) {\n    if (json.type === undefined) {\n      throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n    }\n    var trackType = getTrackTypeForValueTypeName(json.type);\n    if (json.times === undefined) {\n      var times = [],\n        values = [];\n      flattenJSON(json.keys, times, values, 'value');\n      json.times = times;\n      json.values = values;\n    }\n\n    // derived classes can define a static parse method\n    if (trackType.parse !== undefined) {\n      return trackType.parse(json);\n    } else {\n      // by default, we assume a constructor compatible with the base\n      return new trackType(json.name, json.times, json.values, json.interpolation);\n    }\n  }\n  var Cache = exports.Cache = {\n    enabled: false,\n    files: {},\n    add: function add(key, file) {\n      if (this.enabled === false) return;\n\n      // console.log( 'THREE.Cache', 'Adding key:', key );\n\n      this.files[key] = file;\n    },\n    get: function get(key) {\n      if (this.enabled === false) return;\n\n      // console.log( 'THREE.Cache', 'Checking key:', key );\n\n      return this.files[key];\n    },\n    remove: function remove(key) {\n      delete this.files[key];\n    },\n    clear: function clear() {\n      this.files = {};\n    }\n  };\n  var LoadingManager = exports.LoadingManager = /*#__PURE__*/(0, _createClass2.default)(function LoadingManager(onLoad, onProgress, onError) {\n    (0, _classCallCheck2.default)(this, LoadingManager);\n    var scope = this;\n    var isLoading = false;\n    var itemsLoaded = 0;\n    var itemsTotal = 0;\n    var urlModifier = undefined;\n    var handlers = [];\n\n    // Refer to #5689 for the reason why we don't set .onStart\n    // in the constructor\n\n    this.onStart = undefined;\n    this.onLoad = onLoad;\n    this.onProgress = onProgress;\n    this.onError = onError;\n    this.itemStart = function (url) {\n      itemsTotal++;\n      if (isLoading === false) {\n        if (scope.onStart !== undefined) {\n          scope.onStart(url, itemsLoaded, itemsTotal);\n        }\n      }\n      isLoading = true;\n    };\n    this.itemEnd = function (url) {\n      itemsLoaded++;\n      if (scope.onProgress !== undefined) {\n        scope.onProgress(url, itemsLoaded, itemsTotal);\n      }\n      if (itemsLoaded === itemsTotal) {\n        isLoading = false;\n        if (scope.onLoad !== undefined) {\n          scope.onLoad();\n        }\n      }\n    };\n    this.itemError = function (url) {\n      if (scope.onError !== undefined) {\n        scope.onError(url);\n      }\n    };\n    this.resolveURL = function (url) {\n      if (urlModifier) {\n        return urlModifier(url);\n      }\n      return url;\n    };\n    this.setURLModifier = function (transform) {\n      urlModifier = transform;\n      return this;\n    };\n    this.addHandler = function (regex, loader) {\n      handlers.push(regex, loader);\n      return this;\n    };\n    this.removeHandler = function (regex) {\n      var index = handlers.indexOf(regex);\n      if (index !== -1) {\n        handlers.splice(index, 2);\n      }\n      return this;\n    };\n    this.getHandler = function (file) {\n      for (var i = 0, l = handlers.length; i < l; i += 2) {\n        var regex = handlers[i];\n        var loader = handlers[i + 1];\n        if (regex.global) regex.lastIndex = 0; // see #17920\n\n        if (regex.test(file)) {\n          return loader;\n        }\n      }\n      return null;\n    };\n  });\n  var DefaultLoadingManager = exports.DefaultLoadingManager = /*@__PURE__*/new LoadingManager();\n  var Loader = exports.Loader = /*#__PURE__*/function () {\n    function Loader(manager) {\n      (0, _classCallCheck2.default)(this, Loader);\n      this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n      this.crossOrigin = 'anonymous';\n      this.withCredentials = false;\n      this.path = '';\n      this.resourcePath = '';\n      this.requestHeader = {};\n    }\n    return (0, _createClass2.default)(Loader, [{\n      key: \"load\",\n      value: function load(/* url, onLoad, onProgress, onError */) {}\n    }, {\n      key: \"loadAsync\",\n      value: function loadAsync(url, onProgress) {\n        var scope = this;\n        return new Promise(function (resolve, reject) {\n          scope.load(url, resolve, onProgress, reject);\n        });\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(/* data */) {}\n    }, {\n      key: \"setCrossOrigin\",\n      value: function setCrossOrigin(crossOrigin) {\n        this.crossOrigin = crossOrigin;\n        return this;\n      }\n    }, {\n      key: \"setWithCredentials\",\n      value: function setWithCredentials(value) {\n        this.withCredentials = value;\n        return this;\n      }\n    }, {\n      key: \"setPath\",\n      value: function setPath(path) {\n        this.path = path;\n        return this;\n      }\n    }, {\n      key: \"setResourcePath\",\n      value: function setResourcePath(resourcePath) {\n        this.resourcePath = resourcePath;\n        return this;\n      }\n    }, {\n      key: \"setRequestHeader\",\n      value: function setRequestHeader(requestHeader) {\n        this.requestHeader = requestHeader;\n        return this;\n      }\n    }]);\n  }();\n  Loader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\n  var loading = {};\n  var HttpError = /*#__PURE__*/function (_Error) {\n    function HttpError(message, response) {\n      var _this91;\n      (0, _classCallCheck2.default)(this, HttpError);\n      _this91 = _callSuper(this, HttpError, [message]);\n      _this91.response = response;\n      return _this91;\n    }\n    (0, _inherits2.default)(HttpError, _Error);\n    return (0, _createClass2.default)(HttpError);\n  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));\n  var FileLoader = exports.FileLoader = /*#__PURE__*/function (_Loader) {\n    function FileLoader(manager) {\n      (0, _classCallCheck2.default)(this, FileLoader);\n      return _callSuper(this, FileLoader, [manager]);\n    }\n    (0, _inherits2.default)(FileLoader, _Loader);\n    return (0, _createClass2.default)(FileLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var _this92 = this;\n        if (url === undefined) url = '';\n        if (this.path !== undefined) url = this.path + url;\n        url = this.manager.resolveURL(url);\n        var cached = Cache.get(url);\n        if (cached !== undefined) {\n          this.manager.itemStart(url);\n          setTimeout(function () {\n            if (onLoad) onLoad(cached);\n            _this92.manager.itemEnd(url);\n          }, 0);\n          return cached;\n        }\n\n        // Check if request is duplicate\n\n        if (loading[url] !== undefined) {\n          loading[url].push({\n            onLoad: onLoad,\n            onProgress: onProgress,\n            onError: onError\n          });\n          return;\n        }\n\n        // Initialise array for duplicate requests\n        loading[url] = [];\n        loading[url].push({\n          onLoad: onLoad,\n          onProgress: onProgress,\n          onError: onError\n        });\n\n        // create request\n        var req = new Request(url, {\n          headers: new Headers(this.requestHeader),\n          credentials: this.withCredentials ? 'include' : 'same-origin'\n          // An abort controller could be added within a future PR\n        });\n\n        // record states ( avoid data race )\n        var mimeType = this.mimeType;\n        var responseType = this.responseType;\n\n        // start the fetch\n        fetch(req).then(function (response) {\n          if (response.status === 200 || response.status === 0) {\n            // Some browsers return HTTP Status 0 when using non-http protocol\n            // e.g. 'file://' or 'data://'. Handle as success.\n\n            if (response.status === 0) {\n              console.warn('THREE.FileLoader: HTTP Status 0 received.');\n            }\n\n            // Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n            if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {\n              return response;\n            }\n            var callbacks = loading[url];\n            var reader = response.body.getReader();\n\n            // Nginx needs X-File-Size check\n            // https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n            var contentLength = response.headers.get('X-File-Size') || response.headers.get('Content-Length');\n            var total = contentLength ? parseInt(contentLength) : 0;\n            var lengthComputable = total !== 0;\n            var loaded = 0;\n\n            // periodically read data into the new stream tracking while download progress\n            var stream = new ReadableStream({\n              start: function start(controller) {\n                readData();\n                function readData() {\n                  reader.read().then(function (_ref) {\n                    var done = _ref.done,\n                      value = _ref.value;\n                    if (done) {\n                      controller.close();\n                    } else {\n                      loaded += value.byteLength;\n                      var event = new ProgressEvent('progress', {\n                        lengthComputable: lengthComputable,\n                        loaded: loaded,\n                        total: total\n                      });\n                      for (var i = 0, il = callbacks.length; i < il; i++) {\n                        var callback = callbacks[i];\n                        if (callback.onProgress) callback.onProgress(event);\n                      }\n                      controller.enqueue(value);\n                      readData();\n                    }\n                  }, function (e) {\n                    controller.error(e);\n                  });\n                }\n              }\n            });\n            return new Response(stream);\n          } else {\n            throw new HttpError(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response);\n          }\n        }).then(function (response) {\n          switch (responseType) {\n            case 'arraybuffer':\n              return response.arrayBuffer();\n            case 'blob':\n              return response.blob();\n            case 'document':\n              return response.text().then(function (text) {\n                var parser = new DOMParser();\n                return parser.parseFromString(text, mimeType);\n              });\n            case 'json':\n              return response.json();\n            default:\n              if (mimeType === undefined) {\n                return response.text();\n              } else {\n                // sniff encoding\n                var re = /charset=\"?([^;\"\\s]*)\"?/i;\n                var exec = re.exec(mimeType);\n                var label = exec && exec[1] ? exec[1].toLowerCase() : undefined;\n                var decoder = new TextDecoder(label);\n                return response.arrayBuffer().then(function (ab) {\n                  return decoder.decode(ab);\n                });\n              }\n          }\n        }).then(function (data) {\n          // Add to cache only on HTTP success, so that we do not cache\n          // error response bodies as proper responses to requests.\n          Cache.add(url, data);\n          var callbacks = loading[url];\n          delete loading[url];\n          for (var i = 0, il = callbacks.length; i < il; i++) {\n            var callback = callbacks[i];\n            if (callback.onLoad) callback.onLoad(data);\n          }\n        }).catch(function (err) {\n          // Abort errors and other errors are handled the same\n\n          var callbacks = loading[url];\n          if (callbacks === undefined) {\n            // When onLoad was called and url was deleted in `loading`\n            _this92.manager.itemError(url);\n            throw err;\n          }\n          delete loading[url];\n          for (var i = 0, il = callbacks.length; i < il; i++) {\n            var callback = callbacks[i];\n            if (callback.onError) callback.onError(err);\n          }\n          _this92.manager.itemError(url);\n        }).finally(function () {\n          _this92.manager.itemEnd(url);\n        });\n        this.manager.itemStart(url);\n      }\n    }, {\n      key: \"setResponseType\",\n      value: function setResponseType(value) {\n        this.responseType = value;\n        return this;\n      }\n    }, {\n      key: \"setMimeType\",\n      value: function setMimeType(value) {\n        this.mimeType = value;\n        return this;\n      }\n    }]);\n  }(Loader);\n  var AnimationLoader = exports.AnimationLoader = /*#__PURE__*/function (_Loader2) {\n    function AnimationLoader(manager) {\n      (0, _classCallCheck2.default)(this, AnimationLoader);\n      return _callSuper(this, AnimationLoader, [manager]);\n    }\n    (0, _inherits2.default)(AnimationLoader, _Loader2);\n    return (0, _createClass2.default)(AnimationLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(url, function (text) {\n          try {\n            onLoad(scope.parse(JSON.parse(text)));\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            scope.manager.itemError(url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(json) {\n        var animations = [];\n        for (var i = 0; i < json.length; i++) {\n          var clip = AnimationClip.parse(json[i]);\n          animations.push(clip);\n        }\n        return animations;\n      }\n    }]);\n  }(Loader);\n  /**\n   * Abstract Base class to block based textures loader (dds, pvr, ...)\n   *\n   * Sub classes have to implement the parse() method which will be used in load().\n   */\n  var CompressedTextureLoader = exports.CompressedTextureLoader = /*#__PURE__*/function (_Loader3) {\n    function CompressedTextureLoader(manager) {\n      (0, _classCallCheck2.default)(this, CompressedTextureLoader);\n      return _callSuper(this, CompressedTextureLoader, [manager]);\n    }\n    (0, _inherits2.default)(CompressedTextureLoader, _Loader3);\n    return (0, _createClass2.default)(CompressedTextureLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var images = [];\n        var texture = new CompressedTexture();\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(scope.withCredentials);\n        var loaded = 0;\n        function loadTexture(i) {\n          loader.load(url[i], function (buffer) {\n            var texDatas = scope.parse(buffer, true);\n            images[i] = {\n              width: texDatas.width,\n              height: texDatas.height,\n              format: texDatas.format,\n              mipmaps: texDatas.mipmaps\n            };\n            loaded += 1;\n            if (loaded === 6) {\n              if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n              texture.image = images;\n              texture.format = texDatas.format;\n              texture.needsUpdate = true;\n              if (onLoad) onLoad(texture);\n            }\n          }, onProgress, onError);\n        }\n        if (Array.isArray(url)) {\n          for (var i = 0, il = url.length; i < il; ++i) {\n            loadTexture(i);\n          }\n        } else {\n          // compressed cubemap texture stored in a single DDS file\n\n          loader.load(url, function (buffer) {\n            var texDatas = scope.parse(buffer, true);\n            if (texDatas.isCubemap) {\n              var faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n              for (var f = 0; f < faces; f++) {\n                images[f] = {\n                  mipmaps: []\n                };\n                for (var _i60 = 0; _i60 < texDatas.mipmapCount; _i60++) {\n                  images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i60]);\n                  images[f].format = texDatas.format;\n                  images[f].width = texDatas.width;\n                  images[f].height = texDatas.height;\n                }\n              }\n              texture.image = images;\n            } else {\n              texture.image.width = texDatas.width;\n              texture.image.height = texDatas.height;\n              texture.mipmaps = texDatas.mipmaps;\n            }\n            if (texDatas.mipmapCount === 1) {\n              texture.minFilter = LinearFilter;\n            }\n            texture.format = texDatas.format;\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }, onProgress, onError);\n        }\n        return texture;\n      }\n    }]);\n  }(Loader);\n  var ImageLoader = exports.ImageLoader = /*#__PURE__*/function (_Loader4) {\n    function ImageLoader(manager) {\n      (0, _classCallCheck2.default)(this, ImageLoader);\n      return _callSuper(this, ImageLoader, [manager]);\n    }\n    (0, _inherits2.default)(ImageLoader, _Loader4);\n    return (0, _createClass2.default)(ImageLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        if (this.path !== undefined) url = this.path + url;\n        url = this.manager.resolveURL(url);\n        var scope = this;\n        var cached = Cache.get(url);\n        if (cached !== undefined) {\n          scope.manager.itemStart(url);\n          setTimeout(function () {\n            if (onLoad) onLoad(cached);\n            scope.manager.itemEnd(url);\n          }, 0);\n          return cached;\n        }\n        var image = createElementNS('img');\n        function onImageLoad() {\n          removeEventListeners();\n          Cache.add(url, this);\n          if (onLoad) onLoad(this);\n          scope.manager.itemEnd(url);\n        }\n        function onImageError(event) {\n          removeEventListeners();\n          if (onError) onError(event);\n          scope.manager.itemError(url);\n          scope.manager.itemEnd(url);\n        }\n        function removeEventListeners() {\n          image.removeEventListener('load', onImageLoad, false);\n          image.removeEventListener('error', onImageError, false);\n        }\n        image.addEventListener('load', onImageLoad, false);\n        image.addEventListener('error', onImageError, false);\n        if (url.slice(0, 5) !== 'data:') {\n          if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n        }\n        scope.manager.itemStart(url);\n        image.src = url;\n        return image;\n      }\n    }]);\n  }(Loader);\n  var CubeTextureLoader = exports.CubeTextureLoader = /*#__PURE__*/function (_Loader5) {\n    function CubeTextureLoader(manager) {\n      (0, _classCallCheck2.default)(this, CubeTextureLoader);\n      return _callSuper(this, CubeTextureLoader, [manager]);\n    }\n    (0, _inherits2.default)(CubeTextureLoader, _Loader5);\n    return (0, _createClass2.default)(CubeTextureLoader, [{\n      key: \"load\",\n      value: function load(urls, onLoad, onProgress, onError) {\n        var texture = new CubeTexture();\n        texture.colorSpace = SRGBColorSpace;\n        var loader = new ImageLoader(this.manager);\n        loader.setCrossOrigin(this.crossOrigin);\n        loader.setPath(this.path);\n        var loaded = 0;\n        function loadTexture(i) {\n          loader.load(urls[i], function (image) {\n            texture.images[i] = image;\n            loaded++;\n            if (loaded === 6) {\n              texture.needsUpdate = true;\n              if (onLoad) onLoad(texture);\n            }\n          }, undefined, onError);\n        }\n        for (var i = 0; i < urls.length; ++i) {\n          loadTexture(i);\n        }\n        return texture;\n      }\n    }]);\n  }(Loader);\n  /**\n   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n   *\n   * Sub classes have to implement the parse() method which will be used in load().\n   */\n  var DataTextureLoader = exports.DataTextureLoader = /*#__PURE__*/function (_Loader6) {\n    function DataTextureLoader(manager) {\n      (0, _classCallCheck2.default)(this, DataTextureLoader);\n      return _callSuper(this, DataTextureLoader, [manager]);\n    }\n    (0, _inherits2.default)(DataTextureLoader, _Loader6);\n    return (0, _createClass2.default)(DataTextureLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var texture = new DataTexture();\n        var loader = new FileLoader(this.manager);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setPath(this.path);\n        loader.setWithCredentials(scope.withCredentials);\n        loader.load(url, function (buffer) {\n          var texData;\n          try {\n            texData = scope.parse(buffer);\n          } catch (error) {\n            if (onError !== undefined) {\n              onError(error);\n            } else {\n              console.error(error);\n              return;\n            }\n          }\n          if (texData.image !== undefined) {\n            texture.image = texData.image;\n          } else if (texData.data !== undefined) {\n            texture.image.width = texData.width;\n            texture.image.height = texData.height;\n            texture.image.data = texData.data;\n          }\n          texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n          texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n          texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n          texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n          texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n          if (texData.colorSpace !== undefined) {\n            texture.colorSpace = texData.colorSpace;\n          }\n          if (texData.flipY !== undefined) {\n            texture.flipY = texData.flipY;\n          }\n          if (texData.format !== undefined) {\n            texture.format = texData.format;\n          }\n          if (texData.type !== undefined) {\n            texture.type = texData.type;\n          }\n          if (texData.mipmaps !== undefined) {\n            texture.mipmaps = texData.mipmaps;\n            texture.minFilter = LinearMipmapLinearFilter; // presumably...\n          }\n          if (texData.mipmapCount === 1) {\n            texture.minFilter = LinearFilter;\n          }\n          if (texData.generateMipmaps !== undefined) {\n            texture.generateMipmaps = texData.generateMipmaps;\n          }\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture, texData);\n        }, onProgress, onError);\n        return texture;\n      }\n    }]);\n  }(Loader);\n  var TextureLoader = exports.TextureLoader = /*#__PURE__*/function (_Loader7) {\n    function TextureLoader(manager) {\n      (0, _classCallCheck2.default)(this, TextureLoader);\n      return _callSuper(this, TextureLoader, [manager]);\n    }\n    (0, _inherits2.default)(TextureLoader, _Loader7);\n    return (0, _createClass2.default)(TextureLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var texture = new Texture();\n        var loader = new ImageLoader(this.manager);\n        loader.setCrossOrigin(this.crossOrigin);\n        loader.setPath(this.path);\n        loader.load(url, function (image) {\n          texture.image = image;\n          texture.needsUpdate = true;\n          if (onLoad !== undefined) {\n            onLoad(texture);\n          }\n        }, onProgress, onError);\n        return texture;\n      }\n    }]);\n  }(Loader);\n  var Light = exports.Light = /*#__PURE__*/function (_Object3D11) {\n    function Light(color) {\n      var _this93;\n      var intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      (0, _classCallCheck2.default)(this, Light);\n      _this93 = _callSuper(this, Light);\n      _this93.isLight = true;\n      _this93.type = 'Light';\n      _this93.color = new Color(color);\n      _this93.intensity = intensity;\n      return _this93;\n    }\n    (0, _inherits2.default)(Light, _Object3D11);\n    return (0, _createClass2.default)(Light, [{\n      key: \"dispose\",\n      value: function dispose() {\n\n        // Empty here in base class; some subclasses override.\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Light, \"copy\", this, 3)([source, recursive]);\n        this.color.copy(source.color);\n        this.intensity = source.intensity;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(Light, \"toJSON\", this, 3)([meta]);\n        data.object.color = this.color.getHex();\n        data.object.intensity = this.intensity;\n        if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n        if (this.distance !== undefined) data.object.distance = this.distance;\n        if (this.angle !== undefined) data.object.angle = this.angle;\n        if (this.decay !== undefined) data.object.decay = this.decay;\n        if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n        if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n        if (this.target !== undefined) data.object.target = this.target.uuid;\n        return data;\n      }\n    }]);\n  }(Object3D);\n  var HemisphereLight = exports.HemisphereLight = /*#__PURE__*/function (_Light) {\n    function HemisphereLight(skyColor, groundColor, intensity) {\n      var _this94;\n      (0, _classCallCheck2.default)(this, HemisphereLight);\n      _this94 = _callSuper(this, HemisphereLight, [skyColor, intensity]);\n      _this94.isHemisphereLight = true;\n      _this94.type = 'HemisphereLight';\n      _this94.position.copy(Object3D.DEFAULT_UP);\n      _this94.updateMatrix();\n      _this94.groundColor = new Color(groundColor);\n      return _this94;\n    }\n    (0, _inherits2.default)(HemisphereLight, _Light);\n    return (0, _createClass2.default)(HemisphereLight, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(HemisphereLight, \"copy\", this, 3)([source, recursive]);\n        this.groundColor.copy(source.groundColor);\n        return this;\n      }\n    }]);\n  }(Light);\n  var _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n  var _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n  var _lookTarget$1 = /*@__PURE__*/new Vector3();\n  var LightShadow = /*#__PURE__*/function () {\n    function LightShadow(camera) {\n      (0, _classCallCheck2.default)(this, LightShadow);\n      this.camera = camera;\n      this.intensity = 1;\n      this.bias = 0;\n      this.normalBias = 0;\n      this.radius = 1;\n      this.blurSamples = 8;\n      this.mapSize = new Vector2(512, 512);\n      this.map = null;\n      this.mapPass = null;\n      this.matrix = new Matrix4();\n      this.autoUpdate = true;\n      this.needsUpdate = false;\n      this._frustum = new Frustum();\n      this._frameExtents = new Vector2(1, 1);\n      this._viewportCount = 1;\n      this._viewports = [new Vector4(0, 0, 1, 1)];\n    }\n    return (0, _createClass2.default)(LightShadow, [{\n      key: \"getViewportCount\",\n      value: function getViewportCount() {\n        return this._viewportCount;\n      }\n    }, {\n      key: \"getFrustum\",\n      value: function getFrustum() {\n        return this._frustum;\n      }\n    }, {\n      key: \"updateMatrices\",\n      value: function updateMatrices(light) {\n        var shadowCamera = this.camera;\n        var shadowMatrix = this.matrix;\n        _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n        shadowCamera.position.copy(_lightPositionWorld$1);\n        _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n        shadowCamera.lookAt(_lookTarget$1);\n        shadowCamera.updateMatrixWorld();\n        _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n        this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n        shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n        shadowMatrix.multiply(_projScreenMatrix$1);\n      }\n    }, {\n      key: \"getViewport\",\n      value: function getViewport(viewportIndex) {\n        return this._viewports[viewportIndex];\n      }\n    }, {\n      key: \"getFrameExtents\",\n      value: function getFrameExtents() {\n        return this._frameExtents;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this.map) {\n          this.map.dispose();\n        }\n        if (this.mapPass) {\n          this.mapPass.dispose();\n        }\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.camera = source.camera.clone();\n        this.intensity = source.intensity;\n        this.bias = source.bias;\n        this.radius = source.radius;\n        this.mapSize.copy(source.mapSize);\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var object = {};\n        if (this.intensity !== 1) object.intensity = this.intensity;\n        if (this.bias !== 0) object.bias = this.bias;\n        if (this.normalBias !== 0) object.normalBias = this.normalBias;\n        if (this.radius !== 1) object.radius = this.radius;\n        if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n        object.camera = this.camera.toJSON(false).object;\n        delete object.camera.matrix;\n        return object;\n      }\n    }]);\n  }();\n  var SpotLightShadow = /*#__PURE__*/function (_LightShadow) {\n    function SpotLightShadow() {\n      var _this95;\n      (0, _classCallCheck2.default)(this, SpotLightShadow);\n      _this95 = _callSuper(this, SpotLightShadow, [new PerspectiveCamera(50, 1, 0.5, 500)]);\n      _this95.isSpotLightShadow = true;\n      _this95.focus = 1;\n      return _this95;\n    }\n    (0, _inherits2.default)(SpotLightShadow, _LightShadow);\n    return (0, _createClass2.default)(SpotLightShadow, [{\n      key: \"updateMatrices\",\n      value: function updateMatrices(light) {\n        var camera = this.camera;\n        var fov = RAD2DEG * 2 * light.angle * this.focus;\n        var aspect = this.mapSize.width / this.mapSize.height;\n        var far = light.distance || camera.far;\n        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n          camera.fov = fov;\n          camera.aspect = aspect;\n          camera.far = far;\n          camera.updateProjectionMatrix();\n        }\n        _superPropGet(SpotLightShadow, \"updateMatrices\", this, 3)([light]);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(SpotLightShadow, \"copy\", this, 3)([source]);\n        this.focus = source.focus;\n        return this;\n      }\n    }]);\n  }(LightShadow);\n  var SpotLight = exports.SpotLight = /*#__PURE__*/function (_Light2) {\n    function SpotLight(color, intensity) {\n      var _this96;\n      var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI / 3;\n      var penumbra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var decay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n      (0, _classCallCheck2.default)(this, SpotLight);\n      _this96 = _callSuper(this, SpotLight, [color, intensity]);\n      _this96.isSpotLight = true;\n      _this96.type = 'SpotLight';\n      _this96.position.copy(Object3D.DEFAULT_UP);\n      _this96.updateMatrix();\n      _this96.target = new Object3D();\n      _this96.distance = distance;\n      _this96.angle = angle;\n      _this96.penumbra = penumbra;\n      _this96.decay = decay;\n      _this96.map = null;\n      _this96.shadow = new SpotLightShadow();\n      return _this96;\n    }\n    (0, _inherits2.default)(SpotLight, _Light2);\n    return (0, _createClass2.default)(SpotLight, [{\n      key: \"power\",\n      get: function get() {\n        // compute the light's luminous power (in lumens) from its intensity (in candela)\n        // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n        return this.intensity * Math.PI;\n      },\n      set: function set(power) {\n        // set the light's intensity (in candela) from the desired luminous power (in lumens)\n        this.intensity = power / Math.PI;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.shadow.dispose();\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(SpotLight, \"copy\", this, 3)([source, recursive]);\n        this.distance = source.distance;\n        this.angle = source.angle;\n        this.penumbra = source.penumbra;\n        this.decay = source.decay;\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n      }\n    }]);\n  }(Light);\n  var _projScreenMatrix = /*@__PURE__*/new Matrix4();\n  var _lightPositionWorld = /*@__PURE__*/new Vector3();\n  var _lookTarget = /*@__PURE__*/new Vector3();\n  var PointLightShadow = /*#__PURE__*/function (_LightShadow2) {\n    function PointLightShadow() {\n      var _this97;\n      (0, _classCallCheck2.default)(this, PointLightShadow);\n      _this97 = _callSuper(this, PointLightShadow, [new PerspectiveCamera(90, 1, 0.5, 500)]);\n      _this97.isPointLightShadow = true;\n      _this97._frameExtents = new Vector2(4, 2);\n      _this97._viewportCount = 6;\n      _this97._viewports = [\n      // These viewports map a cube-map onto a 2D texture with the\n      // following orientation:\n      //\n      //  xzXZ\n      //   y Y\n      //\n      // X - Positive x direction\n      // x - Negative x direction\n      // Y - Positive y direction\n      // y - Negative y direction\n      // Z - Positive z direction\n      // z - Negative z direction\n\n      // positive X\n      new Vector4(2, 1, 1, 1),\n      // negative X\n      new Vector4(0, 1, 1, 1),\n      // positive Z\n      new Vector4(3, 1, 1, 1),\n      // negative Z\n      new Vector4(1, 1, 1, 1),\n      // positive Y\n      new Vector4(3, 0, 1, 1),\n      // negative Y\n      new Vector4(1, 0, 1, 1)];\n      _this97._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n      _this97._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n      return _this97;\n    }\n    (0, _inherits2.default)(PointLightShadow, _LightShadow2);\n    return (0, _createClass2.default)(PointLightShadow, [{\n      key: \"updateMatrices\",\n      value: function updateMatrices(light) {\n        var viewportIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var camera = this.camera;\n        var shadowMatrix = this.matrix;\n        var far = light.distance || camera.far;\n        if (far !== camera.far) {\n          camera.far = far;\n          camera.updateProjectionMatrix();\n        }\n        _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n        camera.position.copy(_lightPositionWorld);\n        _lookTarget.copy(camera.position);\n        _lookTarget.add(this._cubeDirections[viewportIndex]);\n        camera.up.copy(this._cubeUps[viewportIndex]);\n        camera.lookAt(_lookTarget);\n        camera.updateMatrixWorld();\n        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        this._frustum.setFromProjectionMatrix(_projScreenMatrix);\n      }\n    }]);\n  }(LightShadow);\n  var PointLight = exports.PointLight = /*#__PURE__*/function (_Light3) {\n    function PointLight(color, intensity) {\n      var _this98;\n      var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var decay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n      (0, _classCallCheck2.default)(this, PointLight);\n      _this98 = _callSuper(this, PointLight, [color, intensity]);\n      _this98.isPointLight = true;\n      _this98.type = 'PointLight';\n      _this98.distance = distance;\n      _this98.decay = decay;\n      _this98.shadow = new PointLightShadow();\n      return _this98;\n    }\n    (0, _inherits2.default)(PointLight, _Light3);\n    return (0, _createClass2.default)(PointLight, [{\n      key: \"power\",\n      get: function get() {\n        // compute the light's luminous power (in lumens) from its intensity (in candela)\n        // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n        return this.intensity * 4 * Math.PI;\n      },\n      set: function set(power) {\n        // set the light's intensity (in candela) from the desired luminous power (in lumens)\n        this.intensity = power / (4 * Math.PI);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.shadow.dispose();\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(PointLight, \"copy\", this, 3)([source, recursive]);\n        this.distance = source.distance;\n        this.decay = source.decay;\n        this.shadow = source.shadow.clone();\n        return this;\n      }\n    }]);\n  }(Light);\n  var OrthographicCamera = exports.OrthographicCamera = /*#__PURE__*/function (_Camera2) {\n    function OrthographicCamera() {\n      var _this99;\n      var left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var right = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var bottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n      var near = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.1;\n      var far = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2000;\n      (0, _classCallCheck2.default)(this, OrthographicCamera);\n      _this99 = _callSuper(this, OrthographicCamera);\n      _this99.isOrthographicCamera = true;\n      _this99.type = 'OrthographicCamera';\n      _this99.zoom = 1;\n      _this99.view = null;\n      _this99.left = left;\n      _this99.right = right;\n      _this99.top = top;\n      _this99.bottom = bottom;\n      _this99.near = near;\n      _this99.far = far;\n      _this99.updateProjectionMatrix();\n      return _this99;\n    }\n    (0, _inherits2.default)(OrthographicCamera, _Camera2);\n    return (0, _createClass2.default)(OrthographicCamera, [{\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(OrthographicCamera, \"copy\", this, 3)([source, recursive]);\n        this.left = source.left;\n        this.right = source.right;\n        this.top = source.top;\n        this.bottom = source.bottom;\n        this.near = source.near;\n        this.far = source.far;\n        this.zoom = source.zoom;\n        this.view = source.view === null ? null : Object.assign({}, source.view);\n        return this;\n      }\n    }, {\n      key: \"setViewOffset\",\n      value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n        if (this.view === null) {\n          this.view = {\n            enabled: true,\n            fullWidth: 1,\n            fullHeight: 1,\n            offsetX: 0,\n            offsetY: 0,\n            width: 1,\n            height: 1\n          };\n        }\n        this.view.enabled = true;\n        this.view.fullWidth = fullWidth;\n        this.view.fullHeight = fullHeight;\n        this.view.offsetX = x;\n        this.view.offsetY = y;\n        this.view.width = width;\n        this.view.height = height;\n        this.updateProjectionMatrix();\n      }\n    }, {\n      key: \"clearViewOffset\",\n      value: function clearViewOffset() {\n        if (this.view !== null) {\n          this.view.enabled = false;\n        }\n        this.updateProjectionMatrix();\n      }\n    }, {\n      key: \"updateProjectionMatrix\",\n      value: function updateProjectionMatrix() {\n        var dx = (this.right - this.left) / (2 * this.zoom);\n        var dy = (this.top - this.bottom) / (2 * this.zoom);\n        var cx = (this.right + this.left) / 2;\n        var cy = (this.top + this.bottom) / 2;\n        var left = cx - dx;\n        var right = cx + dx;\n        var top = cy + dy;\n        var bottom = cy - dy;\n        if (this.view !== null && this.view.enabled) {\n          var scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n          var scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n          left += scaleW * this.view.offsetX;\n          right = left + scaleW * this.view.width;\n          top -= scaleH * this.view.offsetY;\n          bottom = top - scaleH * this.view.height;\n        }\n        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);\n        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(OrthographicCamera, \"toJSON\", this, 3)([meta]);\n        data.object.zoom = this.zoom;\n        data.object.left = this.left;\n        data.object.right = this.right;\n        data.object.top = this.top;\n        data.object.bottom = this.bottom;\n        data.object.near = this.near;\n        data.object.far = this.far;\n        if (this.view !== null) data.object.view = Object.assign({}, this.view);\n        return data;\n      }\n    }]);\n  }(Camera);\n  var DirectionalLightShadow = /*#__PURE__*/function (_LightShadow3) {\n    function DirectionalLightShadow() {\n      var _this100;\n      (0, _classCallCheck2.default)(this, DirectionalLightShadow);\n      _this100 = _callSuper(this, DirectionalLightShadow, [new OrthographicCamera(-5, 5, 5, -5, 0.5, 500)]);\n      _this100.isDirectionalLightShadow = true;\n      return _this100;\n    }\n    (0, _inherits2.default)(DirectionalLightShadow, _LightShadow3);\n    return (0, _createClass2.default)(DirectionalLightShadow);\n  }(LightShadow);\n  var DirectionalLight = exports.DirectionalLight = /*#__PURE__*/function (_Light4) {\n    function DirectionalLight(color, intensity) {\n      var _this101;\n      (0, _classCallCheck2.default)(this, DirectionalLight);\n      _this101 = _callSuper(this, DirectionalLight, [color, intensity]);\n      _this101.isDirectionalLight = true;\n      _this101.type = 'DirectionalLight';\n      _this101.position.copy(Object3D.DEFAULT_UP);\n      _this101.updateMatrix();\n      _this101.target = new Object3D();\n      _this101.shadow = new DirectionalLightShadow();\n      return _this101;\n    }\n    (0, _inherits2.default)(DirectionalLight, _Light4);\n    return (0, _createClass2.default)(DirectionalLight, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.shadow.dispose();\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(DirectionalLight, \"copy\", this, 3)([source]);\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n      }\n    }]);\n  }(Light);\n  var AmbientLight = exports.AmbientLight = /*#__PURE__*/function (_Light5) {\n    function AmbientLight(color, intensity) {\n      var _this102;\n      (0, _classCallCheck2.default)(this, AmbientLight);\n      _this102 = _callSuper(this, AmbientLight, [color, intensity]);\n      _this102.isAmbientLight = true;\n      _this102.type = 'AmbientLight';\n      return _this102;\n    }\n    (0, _inherits2.default)(AmbientLight, _Light5);\n    return (0, _createClass2.default)(AmbientLight);\n  }(Light);\n  var RectAreaLight = exports.RectAreaLight = /*#__PURE__*/function (_Light6) {\n    function RectAreaLight(color, intensity) {\n      var _this103;\n      var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n      var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      (0, _classCallCheck2.default)(this, RectAreaLight);\n      _this103 = _callSuper(this, RectAreaLight, [color, intensity]);\n      _this103.isRectAreaLight = true;\n      _this103.type = 'RectAreaLight';\n      _this103.width = width;\n      _this103.height = height;\n      return _this103;\n    }\n    (0, _inherits2.default)(RectAreaLight, _Light6);\n    return (0, _createClass2.default)(RectAreaLight, [{\n      key: \"power\",\n      get: function get() {\n        // compute the light's luminous power (in lumens) from its intensity (in nits)\n        return this.intensity * this.width * this.height * Math.PI;\n      },\n      set: function set(power) {\n        // set the light's intensity (in nits) from the desired luminous power (in lumens)\n        this.intensity = power / (this.width * this.height * Math.PI);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(RectAreaLight, \"copy\", this, 3)([source]);\n        this.width = source.width;\n        this.height = source.height;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(RectAreaLight, \"toJSON\", this, 3)([meta]);\n        data.object.width = this.width;\n        data.object.height = this.height;\n        return data;\n      }\n    }]);\n  }(Light);\n  /**\n   * Primary reference:\n   *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n   *\n   * Secondary reference:\n   *   https://www.ppsloan.org/publications/StupidSH36.pdf\n   */\n  // 3-band SH defined by 9 coefficients\n  var SphericalHarmonics3 = exports.SphericalHarmonics3 = /*#__PURE__*/function () {\n    function SphericalHarmonics3() {\n      (0, _classCallCheck2.default)(this, SphericalHarmonics3);\n      this.isSphericalHarmonics3 = true;\n      this.coefficients = [];\n      for (var i = 0; i < 9; i++) {\n        this.coefficients.push(new Vector3());\n      }\n    }\n    return (0, _createClass2.default)(SphericalHarmonics3, [{\n      key: \"set\",\n      value: function set(coefficients) {\n        for (var i = 0; i < 9; i++) {\n          this.coefficients[i].copy(coefficients[i]);\n        }\n        return this;\n      }\n    }, {\n      key: \"zero\",\n      value: function zero() {\n        for (var i = 0; i < 9; i++) {\n          this.coefficients[i].set(0, 0, 0);\n        }\n        return this;\n      }\n\n      // get the radiance in the direction of the normal\n      // target is a Vector3\n    }, {\n      key: \"getAt\",\n      value: function getAt(normal, target) {\n        // normal is assumed to be unit length\n\n        var x = normal.x,\n          y = normal.y,\n          z = normal.z;\n        var coeff = this.coefficients;\n\n        // band 0\n        target.copy(coeff[0]).multiplyScalar(0.282095);\n\n        // band 1\n        target.addScaledVector(coeff[1], 0.488603 * y);\n        target.addScaledVector(coeff[2], 0.488603 * z);\n        target.addScaledVector(coeff[3], 0.488603 * x);\n\n        // band 2\n        target.addScaledVector(coeff[4], 1.092548 * (x * y));\n        target.addScaledVector(coeff[5], 1.092548 * (y * z));\n        target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n        target.addScaledVector(coeff[7], 1.092548 * (x * z));\n        target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n        return target;\n      }\n\n      // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n      // target is a Vector3\n      // https://graphics.stanford.edu/papers/envmap/envmap.pdf\n    }, {\n      key: \"getIrradianceAt\",\n      value: function getIrradianceAt(normal, target) {\n        // normal is assumed to be unit length\n\n        var x = normal.x,\n          y = normal.y,\n          z = normal.z;\n        var coeff = this.coefficients;\n\n        // band 0\n        target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\n        // band 1\n        target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n        target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n        target.addScaledVector(coeff[3], 2.0 * 0.511664 * x);\n\n        // band 2\n        target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n        target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n        target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n        target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n        target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n        return target;\n      }\n    }, {\n      key: \"add\",\n      value: function add(sh) {\n        for (var i = 0; i < 9; i++) {\n          this.coefficients[i].add(sh.coefficients[i]);\n        }\n        return this;\n      }\n    }, {\n      key: \"addScaledSH\",\n      value: function addScaledSH(sh, s) {\n        for (var i = 0; i < 9; i++) {\n          this.coefficients[i].addScaledVector(sh.coefficients[i], s);\n        }\n        return this;\n      }\n    }, {\n      key: \"scale\",\n      value: function scale(s) {\n        for (var i = 0; i < 9; i++) {\n          this.coefficients[i].multiplyScalar(s);\n        }\n        return this;\n      }\n    }, {\n      key: \"lerp\",\n      value: function lerp(sh, alpha) {\n        for (var i = 0; i < 9; i++) {\n          this.coefficients[i].lerp(sh.coefficients[i], alpha);\n        }\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(sh) {\n        for (var i = 0; i < 9; i++) {\n          if (!this.coefficients[i].equals(sh.coefficients[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(sh) {\n        return this.set(sh.coefficients);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var coefficients = this.coefficients;\n        for (var i = 0; i < 9; i++) {\n          coefficients[i].fromArray(array, offset + i * 3);\n        }\n        return this;\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var coefficients = this.coefficients;\n        for (var i = 0; i < 9; i++) {\n          coefficients[i].toArray(array, offset + i * 3);\n        }\n        return array;\n      }\n\n      // evaluate the basis functions\n      // shBasis is an Array[ 9 ]\n    }], [{\n      key: \"getBasisAt\",\n      value: function getBasisAt(normal, shBasis) {\n        // normal is assumed to be unit length\n\n        var x = normal.x,\n          y = normal.y,\n          z = normal.z;\n\n        // band 0\n        shBasis[0] = 0.282095;\n\n        // band 1\n        shBasis[1] = 0.488603 * y;\n        shBasis[2] = 0.488603 * z;\n        shBasis[3] = 0.488603 * x;\n\n        // band 2\n        shBasis[4] = 1.092548 * x * y;\n        shBasis[5] = 1.092548 * y * z;\n        shBasis[6] = 0.315392 * (3 * z * z - 1);\n        shBasis[7] = 1.092548 * x * z;\n        shBasis[8] = 0.546274 * (x * x - y * y);\n      }\n    }]);\n  }();\n  var LightProbe = exports.LightProbe = /*#__PURE__*/function (_Light7) {\n    function LightProbe() {\n      var _this104;\n      var sh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SphericalHarmonics3();\n      var intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      (0, _classCallCheck2.default)(this, LightProbe);\n      _this104 = _callSuper(this, LightProbe, [undefined, intensity]);\n      _this104.isLightProbe = true;\n      _this104.sh = sh;\n      return _this104;\n    }\n    (0, _inherits2.default)(LightProbe, _Light7);\n    return (0, _createClass2.default)(LightProbe, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(LightProbe, \"copy\", this, 3)([source]);\n        this.sh.copy(source.sh);\n        return this;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n        this.sh.fromArray(json.sh);\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(meta) {\n        var data = _superPropGet(LightProbe, \"toJSON\", this, 3)([meta]);\n        data.object.sh = this.sh.toArray();\n        return data;\n      }\n    }]);\n  }(Light);\n  var MaterialLoader = exports.MaterialLoader = /*#__PURE__*/function (_Loader8) {\n    function MaterialLoader(manager) {\n      var _this105;\n      (0, _classCallCheck2.default)(this, MaterialLoader);\n      _this105 = _callSuper(this, MaterialLoader, [manager]);\n      _this105.textures = {};\n      return _this105;\n    }\n    (0, _inherits2.default)(MaterialLoader, _Loader8);\n    return (0, _createClass2.default)(MaterialLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(scope.manager);\n        loader.setPath(scope.path);\n        loader.setRequestHeader(scope.requestHeader);\n        loader.setWithCredentials(scope.withCredentials);\n        loader.load(url, function (text) {\n          try {\n            onLoad(scope.parse(JSON.parse(text)));\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            scope.manager.itemError(url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(json) {\n        var textures = this.textures;\n        function getTexture(name) {\n          if (textures[name] === undefined) {\n            console.warn('THREE.MaterialLoader: Undefined texture', name);\n          }\n          return textures[name];\n        }\n        var material = this.createMaterialFromType(json.type);\n        if (json.uuid !== undefined) material.uuid = json.uuid;\n        if (json.name !== undefined) material.name = json.name;\n        if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n        if (json.roughness !== undefined) material.roughness = json.roughness;\n        if (json.metalness !== undefined) material.metalness = json.metalness;\n        if (json.sheen !== undefined) material.sheen = json.sheen;\n        if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);\n        if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;\n        if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n        if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n        if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n        if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);\n        if (json.shininess !== undefined) material.shininess = json.shininess;\n        if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n        if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n        if (json.dispersion !== undefined) material.dispersion = json.dispersion;\n        if (json.iridescence !== undefined) material.iridescence = json.iridescence;\n        if (json.iridescenceIOR !== undefined) material.iridescenceIOR = json.iridescenceIOR;\n        if (json.iridescenceThicknessRange !== undefined) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n        if (json.transmission !== undefined) material.transmission = json.transmission;\n        if (json.thickness !== undefined) material.thickness = json.thickness;\n        if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n        if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n        if (json.anisotropy !== undefined) material.anisotropy = json.anisotropy;\n        if (json.anisotropyRotation !== undefined) material.anisotropyRotation = json.anisotropyRotation;\n        if (json.fog !== undefined) material.fog = json.fog;\n        if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n        if (json.blending !== undefined) material.blending = json.blending;\n        if (json.combine !== undefined) material.combine = json.combine;\n        if (json.side !== undefined) material.side = json.side;\n        if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n        if (json.opacity !== undefined) material.opacity = json.opacity;\n        if (json.transparent !== undefined) material.transparent = json.transparent;\n        if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n        if (json.alphaHash !== undefined) material.alphaHash = json.alphaHash;\n        if (json.depthFunc !== undefined) material.depthFunc = json.depthFunc;\n        if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n        if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n        if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n        if (json.blendSrc !== undefined) material.blendSrc = json.blendSrc;\n        if (json.blendDst !== undefined) material.blendDst = json.blendDst;\n        if (json.blendEquation !== undefined) material.blendEquation = json.blendEquation;\n        if (json.blendSrcAlpha !== undefined) material.blendSrcAlpha = json.blendSrcAlpha;\n        if (json.blendDstAlpha !== undefined) material.blendDstAlpha = json.blendDstAlpha;\n        if (json.blendEquationAlpha !== undefined) material.blendEquationAlpha = json.blendEquationAlpha;\n        if (json.blendColor !== undefined && material.blendColor !== undefined) material.blendColor.setHex(json.blendColor);\n        if (json.blendAlpha !== undefined) material.blendAlpha = json.blendAlpha;\n        if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n        if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n        if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n        if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n        if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n        if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n        if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n        if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n        if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n        if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n        if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n        if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n        if (json.rotation !== undefined) material.rotation = json.rotation;\n        if (json.linewidth !== undefined) material.linewidth = json.linewidth;\n        if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n        if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n        if (json.scale !== undefined) material.scale = json.scale;\n        if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n        if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n        if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n        if (json.dithering !== undefined) material.dithering = json.dithering;\n        if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n        if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n        if (json.forceSinglePass !== undefined) material.forceSinglePass = json.forceSinglePass;\n        if (json.visible !== undefined) material.visible = json.visible;\n        if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n        if (json.userData !== undefined) material.userData = json.userData;\n        if (json.vertexColors !== undefined) {\n          if (typeof json.vertexColors === 'number') {\n            material.vertexColors = json.vertexColors > 0 ? true : false;\n          } else {\n            material.vertexColors = json.vertexColors;\n          }\n        }\n\n        // Shader Material\n\n        if (json.uniforms !== undefined) {\n          for (var name in json.uniforms) {\n            var uniform = json.uniforms[name];\n            material.uniforms[name] = {};\n            switch (uniform.type) {\n              case 't':\n                material.uniforms[name].value = getTexture(uniform.value);\n                break;\n              case 'c':\n                material.uniforms[name].value = new Color().setHex(uniform.value);\n                break;\n              case 'v2':\n                material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n                break;\n              case 'v3':\n                material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n                break;\n              case 'v4':\n                material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n                break;\n              case 'm3':\n                material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n                break;\n              case 'm4':\n                material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n                break;\n              default:\n                material.uniforms[name].value = uniform.value;\n            }\n          }\n        }\n        if (json.defines !== undefined) material.defines = json.defines;\n        if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n        if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n        if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;\n        if (json.extensions !== undefined) {\n          for (var key in json.extensions) {\n            material.extensions[key] = json.extensions[key];\n          }\n        }\n        if (json.lights !== undefined) material.lights = json.lights;\n        if (json.clipping !== undefined) material.clipping = json.clipping;\n\n        // for PointsMaterial\n\n        if (json.size !== undefined) material.size = json.size;\n        if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;\n\n        // maps\n\n        if (json.map !== undefined) material.map = getTexture(json.map);\n        if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n        if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n        if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n        if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n        if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n        if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n        if (json.normalScale !== undefined) {\n          var normalScale = json.normalScale;\n          if (Array.isArray(normalScale) === false) {\n            // Blender exporter used to export a scalar. See #7459\n\n            normalScale = [normalScale, normalScale];\n          }\n          material.normalScale = new Vector2().fromArray(normalScale);\n        }\n        if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n        if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n        if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n        if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n        if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n        if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n        if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n        if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n        if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n        if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);\n        if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n        if (json.envMapRotation !== undefined) material.envMapRotation.fromArray(json.envMapRotation);\n        if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n        if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n        if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n        if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n        if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n        if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n        if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n        if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n        if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n        if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n        if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n        if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n        if (json.iridescenceMap !== undefined) material.iridescenceMap = getTexture(json.iridescenceMap);\n        if (json.iridescenceThicknessMap !== undefined) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);\n        if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n        if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n        if (json.anisotropyMap !== undefined) material.anisotropyMap = getTexture(json.anisotropyMap);\n        if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);\n        if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);\n        return material;\n      }\n    }, {\n      key: \"setTextures\",\n      value: function setTextures(value) {\n        this.textures = value;\n        return this;\n      }\n    }, {\n      key: \"createMaterialFromType\",\n      value: function createMaterialFromType(type) {\n        return MaterialLoader.createMaterialFromType(type);\n      }\n    }], [{\n      key: \"createMaterialFromType\",\n      value: function createMaterialFromType(type) {\n        var materialLib = {\n          ShadowMaterial: ShadowMaterial,\n          SpriteMaterial: SpriteMaterial,\n          RawShaderMaterial: RawShaderMaterial,\n          ShaderMaterial: ShaderMaterial,\n          PointsMaterial: PointsMaterial,\n          MeshPhysicalMaterial: MeshPhysicalMaterial,\n          MeshStandardMaterial: MeshStandardMaterial,\n          MeshPhongMaterial: MeshPhongMaterial,\n          MeshToonMaterial: MeshToonMaterial,\n          MeshNormalMaterial: MeshNormalMaterial,\n          MeshLambertMaterial: MeshLambertMaterial,\n          MeshDepthMaterial: MeshDepthMaterial,\n          MeshDistanceMaterial: MeshDistanceMaterial,\n          MeshBasicMaterial: MeshBasicMaterial,\n          MeshMatcapMaterial: MeshMatcapMaterial,\n          LineDashedMaterial: LineDashedMaterial,\n          LineBasicMaterial: LineBasicMaterial,\n          Material: Material\n        };\n        return new materialLib[type]();\n      }\n    }]);\n  }(Loader);\n  var LoaderUtils = exports.LoaderUtils = /*#__PURE__*/function () {\n    function LoaderUtils() {\n      (0, _classCallCheck2.default)(this, LoaderUtils);\n    }\n    return (0, _createClass2.default)(LoaderUtils, null, [{\n      key: \"decodeText\",\n      value: function decodeText(array) {\n        // @deprecated, r165\n\n        console.warn('THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead.');\n        if (typeof TextDecoder !== 'undefined') {\n          return new TextDecoder().decode(array);\n        }\n\n        // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n        // throws a \"maximum call stack size exceeded\" error for large arrays.\n\n        var s = '';\n        for (var i = 0, il = array.length; i < il; i++) {\n          // Implicitly assumes little-endian.\n          s += String.fromCharCode(array[i]);\n        }\n        try {\n          // merges multi-byte utf-8 characters.\n\n          return decodeURIComponent(escape(s));\n        } catch (e) {\n          // see #16358\n\n          return s;\n        }\n      }\n    }, {\n      key: \"extractUrlBase\",\n      value: function extractUrlBase(url) {\n        var index = url.lastIndexOf('/');\n        if (index === -1) return './';\n        return url.slice(0, index + 1);\n      }\n    }, {\n      key: \"resolveURL\",\n      value: function resolveURL(url, path) {\n        // Invalid URL\n        if (typeof url !== 'string' || url === '') return '';\n\n        // Host Relative URL\n        if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n          path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URL http://,https://,//\n        if (/^(https?:)?\\/\\//i.test(url)) return url;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(url)) return url;\n\n        // Blob URL\n        if (/^blob:.*$/i.test(url)) return url;\n\n        // Relative URL\n        return path + url;\n      }\n    }]);\n  }();\n  var InstancedBufferGeometry = exports.InstancedBufferGeometry = /*#__PURE__*/function (_BufferGeometry16) {\n    function InstancedBufferGeometry() {\n      var _this106;\n      (0, _classCallCheck2.default)(this, InstancedBufferGeometry);\n      _this106 = _callSuper(this, InstancedBufferGeometry);\n      _this106.isInstancedBufferGeometry = true;\n      _this106.type = 'InstancedBufferGeometry';\n      _this106.instanceCount = Infinity;\n      return _this106;\n    }\n    (0, _inherits2.default)(InstancedBufferGeometry, _BufferGeometry16);\n    return (0, _createClass2.default)(InstancedBufferGeometry, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(InstancedBufferGeometry, \"copy\", this, 3)([source]);\n        this.instanceCount = source.instanceCount;\n        return this;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var data = _superPropGet(InstancedBufferGeometry, \"toJSON\", this, 3)([]);\n        data.instanceCount = this.instanceCount;\n        data.isInstancedBufferGeometry = true;\n        return data;\n      }\n    }]);\n  }(BufferGeometry);\n  var BufferGeometryLoader = exports.BufferGeometryLoader = /*#__PURE__*/function (_Loader9) {\n    function BufferGeometryLoader(manager) {\n      (0, _classCallCheck2.default)(this, BufferGeometryLoader);\n      return _callSuper(this, BufferGeometryLoader, [manager]);\n    }\n    (0, _inherits2.default)(BufferGeometryLoader, _Loader9);\n    return (0, _createClass2.default)(BufferGeometryLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(scope.manager);\n        loader.setPath(scope.path);\n        loader.setRequestHeader(scope.requestHeader);\n        loader.setWithCredentials(scope.withCredentials);\n        loader.load(url, function (text) {\n          try {\n            onLoad(scope.parse(JSON.parse(text)));\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            scope.manager.itemError(url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(json) {\n        var interleavedBufferMap = {};\n        var arrayBufferMap = {};\n        function getInterleavedBuffer(json, uuid) {\n          if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n          var interleavedBuffers = json.interleavedBuffers;\n          var interleavedBuffer = interleavedBuffers[uuid];\n          var buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n          var array = getTypedArray(interleavedBuffer.type, buffer);\n          var ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n          ib.uuid = interleavedBuffer.uuid;\n          interleavedBufferMap[uuid] = ib;\n          return ib;\n        }\n        function getArrayBuffer(json, uuid) {\n          if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n          var arrayBuffers = json.arrayBuffers;\n          var arrayBuffer = arrayBuffers[uuid];\n          var ab = new Uint32Array(arrayBuffer).buffer;\n          arrayBufferMap[uuid] = ab;\n          return ab;\n        }\n        var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n        var index = json.data.index;\n        if (index !== undefined) {\n          var typedArray = getTypedArray(index.type, index.array);\n          geometry.setIndex(new BufferAttribute(typedArray, 1));\n        }\n        var attributes = json.data.attributes;\n        for (var key in attributes) {\n          var attribute = attributes[key];\n          var bufferAttribute = void 0;\n          if (attribute.isInterleavedBufferAttribute) {\n            var interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n          } else {\n            var _typedArray = getTypedArray(attribute.type, attribute.array);\n            var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n            bufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n          }\n          if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n          if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n          geometry.setAttribute(key, bufferAttribute);\n        }\n        var morphAttributes = json.data.morphAttributes;\n        if (morphAttributes) {\n          for (var _key3 in morphAttributes) {\n            var attributeArray = morphAttributes[_key3];\n            var array = [];\n            for (var i = 0, il = attributeArray.length; i < il; i++) {\n              var _attribute3 = attributeArray[i];\n              var _bufferAttribute = void 0;\n              if (_attribute3.isInterleavedBufferAttribute) {\n                var _interleavedBuffer = getInterleavedBuffer(json.data, _attribute3.data);\n                _bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute3.itemSize, _attribute3.offset, _attribute3.normalized);\n              } else {\n                var _typedArray2 = getTypedArray(_attribute3.type, _attribute3.array);\n                _bufferAttribute = new BufferAttribute(_typedArray2, _attribute3.itemSize, _attribute3.normalized);\n              }\n              if (_attribute3.name !== undefined) _bufferAttribute.name = _attribute3.name;\n              array.push(_bufferAttribute);\n            }\n            geometry.morphAttributes[_key3] = array;\n          }\n        }\n        var morphTargetsRelative = json.data.morphTargetsRelative;\n        if (morphTargetsRelative) {\n          geometry.morphTargetsRelative = true;\n        }\n        var groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n        if (groups !== undefined) {\n          for (var _i61 = 0, n = groups.length; _i61 !== n; ++_i61) {\n            var group = groups[_i61];\n            geometry.addGroup(group.start, group.count, group.materialIndex);\n          }\n        }\n        var boundingSphere = json.data.boundingSphere;\n        if (boundingSphere !== undefined) {\n          var center = new Vector3();\n          if (boundingSphere.center !== undefined) {\n            center.fromArray(boundingSphere.center);\n          }\n          geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n        }\n        if (json.name) geometry.name = json.name;\n        if (json.userData) geometry.userData = json.userData;\n        return geometry;\n      }\n    }]);\n  }(Loader);\n  var ObjectLoader = exports.ObjectLoader = /*#__PURE__*/function (_Loader10) {\n    function ObjectLoader(manager) {\n      (0, _classCallCheck2.default)(this, ObjectLoader);\n      return _callSuper(this, ObjectLoader, [manager]);\n    }\n    (0, _inherits2.default)(ObjectLoader, _Loader10);\n    return (0, _createClass2.default)(ObjectLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n        this.resourcePath = this.resourcePath || path;\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(url, function (text) {\n          var json = null;\n          try {\n            json = JSON.parse(text);\n          } catch (error) {\n            if (onError !== undefined) onError(error);\n            console.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n            return;\n          }\n          var metadata = json.metadata;\n          if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n            if (onError !== undefined) onError(new Error('THREE.ObjectLoader: Can\\'t load ' + url));\n            console.error('THREE.ObjectLoader: Can\\'t load ' + url);\n            return;\n          }\n          scope.parse(json, onLoad);\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"loadAsync\",\n      value: function () {\n        var _loadAsync = (0, _asyncToGenerator2.default)(function* (url, onProgress) {\n          var scope = this;\n          var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n          this.resourcePath = this.resourcePath || path;\n          var loader = new FileLoader(this.manager);\n          loader.setPath(this.path);\n          loader.setRequestHeader(this.requestHeader);\n          loader.setWithCredentials(this.withCredentials);\n          var text = yield loader.loadAsync(url, onProgress);\n          var json = JSON.parse(text);\n          var metadata = json.metadata;\n          if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n            throw new Error('THREE.ObjectLoader: Can\\'t load ' + url);\n          }\n          return yield scope.parseAsync(json);\n        });\n        function loadAsync(_x5, _x6) {\n          return _loadAsync.apply(this, arguments);\n        }\n        return loadAsync;\n      }()\n    }, {\n      key: \"parse\",\n      value: function parse(json, onLoad) {\n        var animations = this.parseAnimations(json.animations);\n        var shapes = this.parseShapes(json.shapes);\n        var geometries = this.parseGeometries(json.geometries, shapes);\n        var images = this.parseImages(json.images, function () {\n          if (onLoad !== undefined) onLoad(object);\n        });\n        var textures = this.parseTextures(json.textures, images);\n        var materials = this.parseMaterials(json.materials, textures);\n        var object = this.parseObject(json.object, geometries, materials, textures, animations);\n        var skeletons = this.parseSkeletons(json.skeletons, object);\n        this.bindSkeletons(object, skeletons);\n        this.bindLightTargets(object);\n\n        //\n\n        if (onLoad !== undefined) {\n          var hasImages = false;\n          for (var uuid in images) {\n            if (images[uuid].data instanceof HTMLImageElement) {\n              hasImages = true;\n              break;\n            }\n          }\n          if (hasImages === false) onLoad(object);\n        }\n        return object;\n      }\n    }, {\n      key: \"parseAsync\",\n      value: function () {\n        var _parseAsync = (0, _asyncToGenerator2.default)(function* (json) {\n          var animations = this.parseAnimations(json.animations);\n          var shapes = this.parseShapes(json.shapes);\n          var geometries = this.parseGeometries(json.geometries, shapes);\n          var images = yield this.parseImagesAsync(json.images);\n          var textures = this.parseTextures(json.textures, images);\n          var materials = this.parseMaterials(json.materials, textures);\n          var object = this.parseObject(json.object, geometries, materials, textures, animations);\n          var skeletons = this.parseSkeletons(json.skeletons, object);\n          this.bindSkeletons(object, skeletons);\n          this.bindLightTargets(object);\n          return object;\n        });\n        function parseAsync(_x7) {\n          return _parseAsync.apply(this, arguments);\n        }\n        return parseAsync;\n      }()\n    }, {\n      key: \"parseShapes\",\n      value: function parseShapes(json) {\n        var shapes = {};\n        if (json !== undefined) {\n          for (var i = 0, l = json.length; i < l; i++) {\n            var shape = new Shape().fromJSON(json[i]);\n            shapes[shape.uuid] = shape;\n          }\n        }\n        return shapes;\n      }\n    }, {\n      key: \"parseSkeletons\",\n      value: function parseSkeletons(json, object) {\n        var skeletons = {};\n        var bones = {};\n\n        // generate bone lookup table\n\n        object.traverse(function (child) {\n          if (child.isBone) bones[child.uuid] = child;\n        });\n\n        // create skeletons\n\n        if (json !== undefined) {\n          for (var i = 0, l = json.length; i < l; i++) {\n            var skeleton = new Skeleton().fromJSON(json[i], bones);\n            skeletons[skeleton.uuid] = skeleton;\n          }\n        }\n        return skeletons;\n      }\n    }, {\n      key: \"parseGeometries\",\n      value: function parseGeometries(json, shapes) {\n        var geometries = {};\n        if (json !== undefined) {\n          var bufferGeometryLoader = new BufferGeometryLoader();\n          for (var i = 0, l = json.length; i < l; i++) {\n            var geometry = void 0;\n            var data = json[i];\n            switch (data.type) {\n              case 'BufferGeometry':\n              case 'InstancedBufferGeometry':\n                geometry = bufferGeometryLoader.parse(data);\n                break;\n              default:\n                if (data.type in Geometries) {\n                  geometry = Geometries[data.type].fromJSON(data, shapes);\n                } else {\n                  console.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);\n                }\n            }\n            geometry.uuid = data.uuid;\n            if (data.name !== undefined) geometry.name = data.name;\n            if (data.userData !== undefined) geometry.userData = data.userData;\n            geometries[data.uuid] = geometry;\n          }\n        }\n        return geometries;\n      }\n    }, {\n      key: \"parseMaterials\",\n      value: function parseMaterials(json, textures) {\n        var cache = {}; // MultiMaterial\n        var materials = {};\n        if (json !== undefined) {\n          var loader = new MaterialLoader();\n          loader.setTextures(textures);\n          for (var i = 0, l = json.length; i < l; i++) {\n            var data = json[i];\n            if (cache[data.uuid] === undefined) {\n              cache[data.uuid] = loader.parse(data);\n            }\n            materials[data.uuid] = cache[data.uuid];\n          }\n        }\n        return materials;\n      }\n    }, {\n      key: \"parseAnimations\",\n      value: function parseAnimations(json) {\n        var animations = {};\n        if (json !== undefined) {\n          for (var i = 0; i < json.length; i++) {\n            var data = json[i];\n            var clip = AnimationClip.parse(data);\n            animations[clip.uuid] = clip;\n          }\n        }\n        return animations;\n      }\n    }, {\n      key: \"parseImages\",\n      value: function parseImages(json, onLoad) {\n        var scope = this;\n        var images = {};\n        var loader;\n        function loadImage(url) {\n          scope.manager.itemStart(url);\n          return loader.load(url, function () {\n            scope.manager.itemEnd(url);\n          }, undefined, function () {\n            scope.manager.itemError(url);\n            scope.manager.itemEnd(url);\n          });\n        }\n        function deserializeImage(image) {\n          if (typeof image === 'string') {\n            var url = image;\n            var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n            return loadImage(path);\n          } else {\n            if (image.data) {\n              return {\n                data: getTypedArray(image.type, image.data),\n                width: image.width,\n                height: image.height\n              };\n            } else {\n              return null;\n            }\n          }\n        }\n        if (json !== undefined && json.length > 0) {\n          var manager = new LoadingManager(onLoad);\n          loader = new ImageLoader(manager);\n          loader.setCrossOrigin(this.crossOrigin);\n          for (var i = 0, il = json.length; i < il; i++) {\n            var image = json[i];\n            var url = image.url;\n            if (Array.isArray(url)) {\n              // load array of images e.g CubeTexture\n\n              var imageArray = [];\n              for (var j = 0, jl = url.length; j < jl; j++) {\n                var currentUrl = url[j];\n                var deserializedImage = deserializeImage(currentUrl);\n                if (deserializedImage !== null) {\n                  if (deserializedImage instanceof HTMLImageElement) {\n                    imageArray.push(deserializedImage);\n                  } else {\n                    // special case: handle array of data textures for cube textures\n\n                    imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n                  }\n                }\n              }\n              images[image.uuid] = new Source(imageArray);\n            } else {\n              // load single image\n\n              var _deserializedImage = deserializeImage(image.url);\n              images[image.uuid] = new Source(_deserializedImage);\n            }\n          }\n        }\n        return images;\n      }\n    }, {\n      key: \"parseImagesAsync\",\n      value: function () {\n        var _parseImagesAsync = (0, _asyncToGenerator2.default)(function* (json) {\n          var scope = this;\n          var images = {};\n          var loader;\n          function deserializeImage(_x9) {\n            return _deserializeImage.apply(this, arguments);\n          }\n          function _deserializeImage() {\n            _deserializeImage = (0, _asyncToGenerator2.default)(function* (image) {\n              if (typeof image === 'string') {\n                var _url = image;\n                var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(_url) ? _url : scope.resourcePath + _url;\n                return yield loader.loadAsync(path);\n              } else {\n                if (image.data) {\n                  return {\n                    data: getTypedArray(image.type, image.data),\n                    width: image.width,\n                    height: image.height\n                  };\n                } else {\n                  return null;\n                }\n              }\n            });\n            return _deserializeImage.apply(this, arguments);\n          }\n          if (json !== undefined && json.length > 0) {\n            loader = new ImageLoader(this.manager);\n            loader.setCrossOrigin(this.crossOrigin);\n            for (var i = 0, il = json.length; i < il; i++) {\n              var image = json[i];\n              var url = image.url;\n              if (Array.isArray(url)) {\n                // load array of images e.g CubeTexture\n\n                var imageArray = [];\n                for (var j = 0, jl = url.length; j < jl; j++) {\n                  var currentUrl = url[j];\n                  var deserializedImage = yield deserializeImage(currentUrl);\n                  if (deserializedImage !== null) {\n                    if (deserializedImage instanceof HTMLImageElement) {\n                      imageArray.push(deserializedImage);\n                    } else {\n                      // special case: handle array of data textures for cube textures\n\n                      imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n                    }\n                  }\n                }\n                images[image.uuid] = new Source(imageArray);\n              } else {\n                // load single image\n\n                var _deserializedImage2 = yield deserializeImage(image.url);\n                images[image.uuid] = new Source(_deserializedImage2);\n              }\n            }\n          }\n          return images;\n        });\n        function parseImagesAsync(_x8) {\n          return _parseImagesAsync.apply(this, arguments);\n        }\n        return parseImagesAsync;\n      }()\n    }, {\n      key: \"parseTextures\",\n      value: function parseTextures(json, images) {\n        function parseConstant(value, type) {\n          if (typeof value === 'number') return value;\n          console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n          return type[value];\n        }\n        var textures = {};\n        if (json !== undefined) {\n          for (var i = 0, l = json.length; i < l; i++) {\n            var data = json[i];\n            if (data.image === undefined) {\n              console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n            }\n            if (images[data.image] === undefined) {\n              console.warn('THREE.ObjectLoader: Undefined image', data.image);\n            }\n            var source = images[data.image];\n            var image = source.data;\n            var texture = void 0;\n            if (Array.isArray(image)) {\n              texture = new CubeTexture();\n              if (image.length === 6) texture.needsUpdate = true;\n            } else {\n              if (image && image.data) {\n                texture = new DataTexture();\n              } else {\n                texture = new Texture();\n              }\n              if (image) texture.needsUpdate = true; // textures can have undefined image data\n            }\n            texture.source = source;\n            texture.uuid = data.uuid;\n            if (data.name !== undefined) texture.name = data.name;\n            if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n            if (data.channel !== undefined) texture.channel = data.channel;\n            if (data.offset !== undefined) texture.offset.fromArray(data.offset);\n            if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n            if (data.center !== undefined) texture.center.fromArray(data.center);\n            if (data.rotation !== undefined) texture.rotation = data.rotation;\n            if (data.wrap !== undefined) {\n              texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n              texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n            }\n            if (data.format !== undefined) texture.format = data.format;\n            if (data.internalFormat !== undefined) texture.internalFormat = data.internalFormat;\n            if (data.type !== undefined) texture.type = data.type;\n            if (data.colorSpace !== undefined) texture.colorSpace = data.colorSpace;\n            if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n            if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n            if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n            if (data.flipY !== undefined) texture.flipY = data.flipY;\n            if (data.generateMipmaps !== undefined) texture.generateMipmaps = data.generateMipmaps;\n            if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n            if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n            if (data.compareFunction !== undefined) texture.compareFunction = data.compareFunction;\n            if (data.userData !== undefined) texture.userData = data.userData;\n            textures[data.uuid] = texture;\n          }\n        }\n        return textures;\n      }\n    }, {\n      key: \"parseObject\",\n      value: function parseObject(data, geometries, materials, textures, animations) {\n        var object;\n        function getGeometry(name) {\n          if (geometries[name] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined geometry', name);\n          }\n          return geometries[name];\n        }\n        function getMaterial(name) {\n          if (name === undefined) return undefined;\n          if (Array.isArray(name)) {\n            var array = [];\n            for (var i = 0, l = name.length; i < l; i++) {\n              var uuid = name[i];\n              if (materials[uuid] === undefined) {\n                console.warn('THREE.ObjectLoader: Undefined material', uuid);\n              }\n              array.push(materials[uuid]);\n            }\n            return array;\n          }\n          if (materials[name] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined material', name);\n          }\n          return materials[name];\n        }\n        function getTexture(uuid) {\n          if (textures[uuid] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined texture', uuid);\n          }\n          return textures[uuid];\n        }\n        var geometry, material;\n        switch (data.type) {\n          case 'Scene':\n            object = new Scene();\n            if (data.background !== undefined) {\n              if (Number.isInteger(data.background)) {\n                object.background = new Color(data.background);\n              } else {\n                object.background = getTexture(data.background);\n              }\n            }\n            if (data.environment !== undefined) {\n              object.environment = getTexture(data.environment);\n            }\n            if (data.fog !== undefined) {\n              if (data.fog.type === 'Fog') {\n                object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n              } else if (data.fog.type === 'FogExp2') {\n                object.fog = new FogExp2(data.fog.color, data.fog.density);\n              }\n              if (data.fog.name !== '') {\n                object.fog.name = data.fog.name;\n              }\n            }\n            if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;\n            if (data.backgroundIntensity !== undefined) object.backgroundIntensity = data.backgroundIntensity;\n            if (data.backgroundRotation !== undefined) object.backgroundRotation.fromArray(data.backgroundRotation);\n            if (data.environmentIntensity !== undefined) object.environmentIntensity = data.environmentIntensity;\n            if (data.environmentRotation !== undefined) object.environmentRotation.fromArray(data.environmentRotation);\n            break;\n          case 'PerspectiveCamera':\n            object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n            if (data.focus !== undefined) object.focus = data.focus;\n            if (data.zoom !== undefined) object.zoom = data.zoom;\n            if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n            if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n            if (data.view !== undefined) object.view = Object.assign({}, data.view);\n            break;\n          case 'OrthographicCamera':\n            object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n            if (data.zoom !== undefined) object.zoom = data.zoom;\n            if (data.view !== undefined) object.view = Object.assign({}, data.view);\n            break;\n          case 'AmbientLight':\n            object = new AmbientLight(data.color, data.intensity);\n            break;\n          case 'DirectionalLight':\n            object = new DirectionalLight(data.color, data.intensity);\n            object.target = data.target || '';\n            break;\n          case 'PointLight':\n            object = new PointLight(data.color, data.intensity, data.distance, data.decay);\n            break;\n          case 'RectAreaLight':\n            object = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n            break;\n          case 'SpotLight':\n            object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n            object.target = data.target || '';\n            break;\n          case 'HemisphereLight':\n            object = new HemisphereLight(data.color, data.groundColor, data.intensity);\n            break;\n          case 'LightProbe':\n            object = new LightProbe().fromJSON(data);\n            break;\n          case 'SkinnedMesh':\n            geometry = getGeometry(data.geometry);\n            material = getMaterial(data.material);\n            object = new SkinnedMesh(geometry, material);\n            if (data.bindMode !== undefined) object.bindMode = data.bindMode;\n            if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n            if (data.skeleton !== undefined) object.skeleton = data.skeleton;\n            break;\n          case 'Mesh':\n            geometry = getGeometry(data.geometry);\n            material = getMaterial(data.material);\n            object = new Mesh(geometry, material);\n            break;\n          case 'InstancedMesh':\n            geometry = getGeometry(data.geometry);\n            material = getMaterial(data.material);\n            var count = data.count;\n            var instanceMatrix = data.instanceMatrix;\n            var instanceColor = data.instanceColor;\n            object = new InstancedMesh(geometry, material, count);\n            object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);\n            if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n            break;\n          case 'BatchedMesh':\n            geometry = getGeometry(data.geometry);\n            material = getMaterial(data.material);\n            object = new BatchedMesh(data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material);\n            object.geometry = geometry;\n            object.perObjectFrustumCulled = data.perObjectFrustumCulled;\n            object.sortObjects = data.sortObjects;\n            object._drawRanges = data.drawRanges;\n            object._reservedRanges = data.reservedRanges;\n            object._visibility = data.visibility;\n            object._active = data.active;\n            object._bounds = data.bounds.map(function (bound) {\n              var box = new Box3();\n              box.min.fromArray(bound.boxMin);\n              box.max.fromArray(bound.boxMax);\n              var sphere = new Sphere();\n              sphere.radius = bound.sphereRadius;\n              sphere.center.fromArray(bound.sphereCenter);\n              return {\n                boxInitialized: bound.boxInitialized,\n                box: box,\n                sphereInitialized: bound.sphereInitialized,\n                sphere: sphere\n              };\n            });\n            object._maxInstanceCount = data.maxInstanceCount;\n            object._maxVertexCount = data.maxVertexCount;\n            object._maxIndexCount = data.maxIndexCount;\n            object._geometryInitialized = data.geometryInitialized;\n            object._geometryCount = data.geometryCount;\n            object._matricesTexture = getTexture(data.matricesTexture.uuid);\n            if (data.colorsTexture !== undefined) object._colorsTexture = getTexture(data.colorsTexture.uuid);\n            break;\n          case 'LOD':\n            object = new LOD();\n            break;\n          case 'Line':\n            object = new Line(getGeometry(data.geometry), getMaterial(data.material));\n            break;\n          case 'LineLoop':\n            object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n            break;\n          case 'LineSegments':\n            object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n            break;\n          case 'PointCloud':\n          case 'Points':\n            object = new Points(getGeometry(data.geometry), getMaterial(data.material));\n            break;\n          case 'Sprite':\n            object = new Sprite(getMaterial(data.material));\n            break;\n          case 'Group':\n            object = new Group();\n            break;\n          case 'Bone':\n            object = new Bone();\n            break;\n          default:\n            object = new Object3D();\n        }\n        object.uuid = data.uuid;\n        if (data.name !== undefined) object.name = data.name;\n        if (data.matrix !== undefined) {\n          object.matrix.fromArray(data.matrix);\n          if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n          if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n        } else {\n          if (data.position !== undefined) object.position.fromArray(data.position);\n          if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n          if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n          if (data.scale !== undefined) object.scale.fromArray(data.scale);\n        }\n        if (data.up !== undefined) object.up.fromArray(data.up);\n        if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n        if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n        if (data.shadow) {\n          if (data.shadow.intensity !== undefined) object.shadow.intensity = data.shadow.intensity;\n          if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n          if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n          if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n          if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n          if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n        }\n        if (data.visible !== undefined) object.visible = data.visible;\n        if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n        if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n        if (data.userData !== undefined) object.userData = data.userData;\n        if (data.layers !== undefined) object.layers.mask = data.layers;\n        if (data.children !== undefined) {\n          var children = data.children;\n          for (var i = 0; i < children.length; i++) {\n            object.add(this.parseObject(children[i], geometries, materials, textures, animations));\n          }\n        }\n        if (data.animations !== undefined) {\n          var objectAnimations = data.animations;\n          for (var _i62 = 0; _i62 < objectAnimations.length; _i62++) {\n            var uuid = objectAnimations[_i62];\n            object.animations.push(animations[uuid]);\n          }\n        }\n        if (data.type === 'LOD') {\n          if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n          var levels = data.levels;\n          for (var l = 0; l < levels.length; l++) {\n            var level = levels[l];\n            var child = object.getObjectByProperty('uuid', level.object);\n            if (child !== undefined) {\n              object.addLevel(child, level.distance, level.hysteresis);\n            }\n          }\n        }\n        return object;\n      }\n    }, {\n      key: \"bindSkeletons\",\n      value: function bindSkeletons(object, skeletons) {\n        if (Object.keys(skeletons).length === 0) return;\n        object.traverse(function (child) {\n          if (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n            var skeleton = skeletons[child.skeleton];\n            if (skeleton === undefined) {\n              console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n            } else {\n              child.bind(skeleton, child.bindMatrix);\n            }\n          }\n        });\n      }\n    }, {\n      key: \"bindLightTargets\",\n      value: function bindLightTargets(object) {\n        object.traverse(function (child) {\n          if (child.isDirectionalLight || child.isSpotLight) {\n            var uuid = child.target;\n            var target = object.getObjectByProperty('uuid', uuid);\n            if (target !== undefined) {\n              child.target = target;\n            } else {\n              child.target = new Object3D();\n            }\n          }\n        });\n      }\n    }]);\n  }(Loader);\n  var TEXTURE_MAPPING = {\n    UVMapping: UVMapping,\n    CubeReflectionMapping: CubeReflectionMapping,\n    CubeRefractionMapping: CubeRefractionMapping,\n    EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n    EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n    CubeUVReflectionMapping: CubeUVReflectionMapping\n  };\n  var TEXTURE_WRAPPING = {\n    RepeatWrapping: RepeatWrapping,\n    ClampToEdgeWrapping: ClampToEdgeWrapping,\n    MirroredRepeatWrapping: MirroredRepeatWrapping\n  };\n  var TEXTURE_FILTER = {\n    NearestFilter: NearestFilter,\n    NearestMipmapNearestFilter: NearestMipmapNearestFilter,\n    NearestMipmapLinearFilter: NearestMipmapLinearFilter,\n    LinearFilter: LinearFilter,\n    LinearMipmapNearestFilter: LinearMipmapNearestFilter,\n    LinearMipmapLinearFilter: LinearMipmapLinearFilter\n  };\n  var ImageBitmapLoader = exports.ImageBitmapLoader = /*#__PURE__*/function (_Loader11) {\n    function ImageBitmapLoader(manager) {\n      var _this107;\n      (0, _classCallCheck2.default)(this, ImageBitmapLoader);\n      _this107 = _callSuper(this, ImageBitmapLoader, [manager]);\n      _this107.isImageBitmapLoader = true;\n      if (typeof createImageBitmap === 'undefined') {\n        console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n      }\n      if (typeof fetch === 'undefined') {\n        console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n      }\n      _this107.options = {\n        premultiplyAlpha: 'none'\n      };\n      return _this107;\n    }\n    (0, _inherits2.default)(ImageBitmapLoader, _Loader11);\n    return (0, _createClass2.default)(ImageBitmapLoader, [{\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = options;\n        return this;\n      }\n    }, {\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        if (url === undefined) url = '';\n        if (this.path !== undefined) url = this.path + url;\n        url = this.manager.resolveURL(url);\n        var scope = this;\n        var cached = Cache.get(url);\n        if (cached !== undefined) {\n          scope.manager.itemStart(url);\n\n          // If cached is a promise, wait for it to resolve\n          if (cached.then) {\n            cached.then(function (imageBitmap) {\n              if (onLoad) onLoad(imageBitmap);\n              scope.manager.itemEnd(url);\n            }).catch(function (e) {\n              if (onError) onError(e);\n            });\n            return;\n          }\n\n          // If cached is not a promise (i.e., it's already an imageBitmap)\n          setTimeout(function () {\n            if (onLoad) onLoad(cached);\n            scope.manager.itemEnd(url);\n          }, 0);\n          return cached;\n        }\n        var fetchOptions = {};\n        fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n        fetchOptions.headers = this.requestHeader;\n        var promise = fetch(url, fetchOptions).then(function (res) {\n          return res.blob();\n        }).then(function (blob) {\n          return createImageBitmap(blob, Object.assign(scope.options, {\n            colorSpaceConversion: 'none'\n          }));\n        }).then(function (imageBitmap) {\n          Cache.add(url, imageBitmap);\n          if (onLoad) onLoad(imageBitmap);\n          scope.manager.itemEnd(url);\n          return imageBitmap;\n        }).catch(function (e) {\n          if (onError) onError(e);\n          Cache.remove(url);\n          scope.manager.itemError(url);\n          scope.manager.itemEnd(url);\n        });\n        Cache.add(url, promise);\n        scope.manager.itemStart(url);\n      }\n    }]);\n  }(Loader);\n  var _context;\n  var AudioContext = exports.AudioContext = /*#__PURE__*/function () {\n    function AudioContext() {\n      (0, _classCallCheck2.default)(this, AudioContext);\n    }\n    return (0, _createClass2.default)(AudioContext, null, [{\n      key: \"getContext\",\n      value: function getContext() {\n        if (_context === undefined) {\n          _context = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        return _context;\n      }\n    }, {\n      key: \"setContext\",\n      value: function setContext(value) {\n        _context = value;\n      }\n    }]);\n  }();\n  var AudioLoader = exports.AudioLoader = /*#__PURE__*/function (_Loader12) {\n    function AudioLoader(manager) {\n      (0, _classCallCheck2.default)(this, AudioLoader);\n      return _callSuper(this, AudioLoader, [manager]);\n    }\n    (0, _inherits2.default)(AudioLoader, _Loader12);\n    return (0, _createClass2.default)(AudioLoader, [{\n      key: \"load\",\n      value: function load(url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(this.manager);\n        loader.setResponseType('arraybuffer');\n        loader.setPath(this.path);\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(url, function (buffer) {\n          try {\n            // Create a copy of the buffer. The `decodeAudioData` method\n            // detaches the buffer when complete, preventing reuse.\n            var bufferCopy = buffer.slice(0);\n            var context = AudioContext.getContext();\n            context.decodeAudioData(bufferCopy, function (audioBuffer) {\n              onLoad(audioBuffer);\n            }).catch(handleError);\n          } catch (e) {\n            handleError(e);\n          }\n        }, onProgress, onError);\n        function handleError(e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }\n    }]);\n  }(Loader);\n  var _eyeRight = /*@__PURE__*/new Matrix4();\n  var _eyeLeft = /*@__PURE__*/new Matrix4();\n  var _projectionMatrix = /*@__PURE__*/new Matrix4();\n  var StereoCamera = exports.StereoCamera = /*#__PURE__*/function () {\n    function StereoCamera() {\n      (0, _classCallCheck2.default)(this, StereoCamera);\n      this.type = 'StereoCamera';\n      this.aspect = 1;\n      this.eyeSep = 0.064;\n      this.cameraL = new PerspectiveCamera();\n      this.cameraL.layers.enable(1);\n      this.cameraL.matrixAutoUpdate = false;\n      this.cameraR = new PerspectiveCamera();\n      this.cameraR.layers.enable(2);\n      this.cameraR.matrixAutoUpdate = false;\n      this._cache = {\n        focus: null,\n        fov: null,\n        aspect: null,\n        near: null,\n        far: null,\n        zoom: null,\n        eyeSep: null\n      };\n    }\n    return (0, _createClass2.default)(StereoCamera, [{\n      key: \"update\",\n      value: function update(camera) {\n        var cache = this._cache;\n        var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n        if (needsUpdate) {\n          cache.focus = camera.focus;\n          cache.fov = camera.fov;\n          cache.aspect = camera.aspect * this.aspect;\n          cache.near = camera.near;\n          cache.far = camera.far;\n          cache.zoom = camera.zoom;\n          cache.eyeSep = this.eyeSep;\n\n          // Off-axis stereoscopic effect based on\n          // http://paulbourke.net/stereographics/stereorender/\n\n          _projectionMatrix.copy(camera.projectionMatrix);\n          var eyeSepHalf = cache.eyeSep / 2;\n          var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n          var ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n          var xmin, xmax;\n\n          // translate xOffset\n\n          _eyeLeft.elements[12] = -eyeSepHalf;\n          _eyeRight.elements[12] = eyeSepHalf;\n\n          // for left eye\n\n          xmin = -ymax * cache.aspect + eyeSepOnProjection;\n          xmax = ymax * cache.aspect + eyeSepOnProjection;\n          _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n          _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n          this.cameraL.projectionMatrix.copy(_projectionMatrix);\n\n          // for right eye\n\n          xmin = -ymax * cache.aspect - eyeSepOnProjection;\n          xmax = ymax * cache.aspect - eyeSepOnProjection;\n          _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n          _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n          this.cameraR.projectionMatrix.copy(_projectionMatrix);\n        }\n        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n      }\n    }]);\n  }();\n  var ArrayCamera = exports.ArrayCamera = /*#__PURE__*/function (_PerspectiveCamera) {\n    function ArrayCamera() {\n      var _this108;\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      (0, _classCallCheck2.default)(this, ArrayCamera);\n      _this108 = _callSuper(this, ArrayCamera);\n      _this108.isArrayCamera = true;\n      _this108.cameras = array;\n      return _this108;\n    }\n    (0, _inherits2.default)(ArrayCamera, _PerspectiveCamera);\n    return (0, _createClass2.default)(ArrayCamera);\n  }(PerspectiveCamera);\n  var Clock = exports.Clock = /*#__PURE__*/function () {\n    function Clock() {\n      var autoStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      (0, _classCallCheck2.default)(this, Clock);\n      this.autoStart = autoStart;\n      this.startTime = 0;\n      this.oldTime = 0;\n      this.elapsedTime = 0;\n      this.running = false;\n    }\n    return (0, _createClass2.default)(Clock, [{\n      key: \"start\",\n      value: function start() {\n        this.startTime = now();\n        this.oldTime = this.startTime;\n        this.elapsedTime = 0;\n        this.running = true;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.getElapsedTime();\n        this.running = false;\n        this.autoStart = false;\n      }\n    }, {\n      key: \"getElapsedTime\",\n      value: function getElapsedTime() {\n        this.getDelta();\n        return this.elapsedTime;\n      }\n    }, {\n      key: \"getDelta\",\n      value: function getDelta() {\n        var diff = 0;\n        if (this.autoStart && !this.running) {\n          this.start();\n          return 0;\n        }\n        if (this.running) {\n          var newTime = now();\n          diff = (newTime - this.oldTime) / 1000;\n          this.oldTime = newTime;\n          this.elapsedTime += diff;\n        }\n        return diff;\n      }\n    }]);\n  }();\n  function now() {\n    return performance.now();\n  }\n  var _position$1 = /*@__PURE__*/new Vector3();\n  var _quaternion$1 = /*@__PURE__*/new Quaternion();\n  var _scale$1 = /*@__PURE__*/new Vector3();\n  var _orientation$1 = /*@__PURE__*/new Vector3();\n  var AudioListener = exports.AudioListener = /*#__PURE__*/function (_Object3D12) {\n    function AudioListener() {\n      var _this109;\n      (0, _classCallCheck2.default)(this, AudioListener);\n      _this109 = _callSuper(this, AudioListener);\n      _this109.type = 'AudioListener';\n      _this109.context = AudioContext.getContext();\n      _this109.gain = _this109.context.createGain();\n      _this109.gain.connect(_this109.context.destination);\n      _this109.filter = null;\n      _this109.timeDelta = 0;\n\n      // private\n\n      _this109._clock = new Clock();\n      return _this109;\n    }\n    (0, _inherits2.default)(AudioListener, _Object3D12);\n    return (0, _createClass2.default)(AudioListener, [{\n      key: \"getInput\",\n      value: function getInput() {\n        return this.gain;\n      }\n    }, {\n      key: \"removeFilter\",\n      value: function removeFilter() {\n        if (this.filter !== null) {\n          this.gain.disconnect(this.filter);\n          this.filter.disconnect(this.context.destination);\n          this.gain.connect(this.context.destination);\n          this.filter = null;\n        }\n        return this;\n      }\n    }, {\n      key: \"getFilter\",\n      value: function getFilter() {\n        return this.filter;\n      }\n    }, {\n      key: \"setFilter\",\n      value: function setFilter(value) {\n        if (this.filter !== null) {\n          this.gain.disconnect(this.filter);\n          this.filter.disconnect(this.context.destination);\n        } else {\n          this.gain.disconnect(this.context.destination);\n        }\n        this.filter = value;\n        this.gain.connect(this.filter);\n        this.filter.connect(this.context.destination);\n        return this;\n      }\n    }, {\n      key: \"getMasterVolume\",\n      value: function getMasterVolume() {\n        return this.gain.gain.value;\n      }\n    }, {\n      key: \"setMasterVolume\",\n      value: function setMasterVolume(value) {\n        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n        return this;\n      }\n    }, {\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        _superPropGet(AudioListener, \"updateMatrixWorld\", this, 3)([force]);\n        var listener = this.context.listener;\n        var up = this.up;\n        this.timeDelta = this._clock.getDelta();\n        this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n        _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n        if (listener.positionX) {\n          // code path for Chrome (see #14393)\n\n          var endTime = this.context.currentTime + this.timeDelta;\n          listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n          listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n          listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n          listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n          listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n          listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n          listener.upX.linearRampToValueAtTime(up.x, endTime);\n          listener.upY.linearRampToValueAtTime(up.y, endTime);\n          listener.upZ.linearRampToValueAtTime(up.z, endTime);\n        } else {\n          listener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n          listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n        }\n      }\n    }]);\n  }(Object3D);\n  var Audio = exports.Audio = /*#__PURE__*/function (_Object3D13) {\n    function Audio(listener) {\n      var _this110;\n      (0, _classCallCheck2.default)(this, Audio);\n      _this110 = _callSuper(this, Audio);\n      _this110.type = 'Audio';\n      _this110.listener = listener;\n      _this110.context = listener.context;\n      _this110.gain = _this110.context.createGain();\n      _this110.gain.connect(listener.getInput());\n      _this110.autoplay = false;\n      _this110.buffer = null;\n      _this110.detune = 0;\n      _this110.loop = false;\n      _this110.loopStart = 0;\n      _this110.loopEnd = 0;\n      _this110.offset = 0;\n      _this110.duration = undefined;\n      _this110.playbackRate = 1;\n      _this110.isPlaying = false;\n      _this110.hasPlaybackControl = true;\n      _this110.source = null;\n      _this110.sourceType = 'empty';\n      _this110._startedAt = 0;\n      _this110._progress = 0;\n      _this110._connected = false;\n      _this110.filters = [];\n      return _this110;\n    }\n    (0, _inherits2.default)(Audio, _Object3D13);\n    return (0, _createClass2.default)(Audio, [{\n      key: \"getOutput\",\n      value: function getOutput() {\n        return this.gain;\n      }\n    }, {\n      key: \"setNodeSource\",\n      value: function setNodeSource(audioNode) {\n        this.hasPlaybackControl = false;\n        this.sourceType = 'audioNode';\n        this.source = audioNode;\n        this.connect();\n        return this;\n      }\n    }, {\n      key: \"setMediaElementSource\",\n      value: function setMediaElementSource(mediaElement) {\n        this.hasPlaybackControl = false;\n        this.sourceType = 'mediaNode';\n        this.source = this.context.createMediaElementSource(mediaElement);\n        this.connect();\n        return this;\n      }\n    }, {\n      key: \"setMediaStreamSource\",\n      value: function setMediaStreamSource(mediaStream) {\n        this.hasPlaybackControl = false;\n        this.sourceType = 'mediaStreamNode';\n        this.source = this.context.createMediaStreamSource(mediaStream);\n        this.connect();\n        return this;\n      }\n    }, {\n      key: \"setBuffer\",\n      value: function setBuffer(audioBuffer) {\n        this.buffer = audioBuffer;\n        this.sourceType = 'buffer';\n        if (this.autoplay) this.play();\n        return this;\n      }\n    }, {\n      key: \"play\",\n      value: function play() {\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        if (this.isPlaying === true) {\n          console.warn('THREE.Audio: Audio is already playing.');\n          return;\n        }\n        if (this.hasPlaybackControl === false) {\n          console.warn('THREE.Audio: this Audio has no playback control.');\n          return;\n        }\n        this._startedAt = this.context.currentTime + delay;\n        var source = this.context.createBufferSource();\n        source.buffer = this.buffer;\n        source.loop = this.loop;\n        source.loopStart = this.loopStart;\n        source.loopEnd = this.loopEnd;\n        source.onended = this.onEnded.bind(this);\n        source.start(this._startedAt, this._progress + this.offset, this.duration);\n        this.isPlaying = true;\n        this.source = source;\n        this.setDetune(this.detune);\n        this.setPlaybackRate(this.playbackRate);\n        return this.connect();\n      }\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        if (this.hasPlaybackControl === false) {\n          console.warn('THREE.Audio: this Audio has no playback control.');\n          return;\n        }\n        if (this.isPlaying === true) {\n          // update current progress\n\n          this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n          if (this.loop === true) {\n            // ensure _progress does not exceed duration with looped audios\n\n            this._progress = this._progress % (this.duration || this.buffer.duration);\n          }\n          this.source.stop();\n          this.source.onended = null;\n          this.isPlaying = false;\n        }\n        return this;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        if (this.hasPlaybackControl === false) {\n          console.warn('THREE.Audio: this Audio has no playback control.');\n          return;\n        }\n        this._progress = 0;\n        if (this.source !== null) {\n          this.source.stop(this.context.currentTime + delay);\n          this.source.onended = null;\n        }\n        this.isPlaying = false;\n        return this;\n      }\n    }, {\n      key: \"connect\",\n      value: function connect() {\n        if (this.filters.length > 0) {\n          this.source.connect(this.filters[0]);\n          for (var i = 1, l = this.filters.length; i < l; i++) {\n            this.filters[i - 1].connect(this.filters[i]);\n          }\n          this.filters[this.filters.length - 1].connect(this.getOutput());\n        } else {\n          this.source.connect(this.getOutput());\n        }\n        this._connected = true;\n        return this;\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (this._connected === false) {\n          return;\n        }\n        if (this.filters.length > 0) {\n          this.source.disconnect(this.filters[0]);\n          for (var i = 1, l = this.filters.length; i < l; i++) {\n            this.filters[i - 1].disconnect(this.filters[i]);\n          }\n          this.filters[this.filters.length - 1].disconnect(this.getOutput());\n        } else {\n          this.source.disconnect(this.getOutput());\n        }\n        this._connected = false;\n        return this;\n      }\n    }, {\n      key: \"getFilters\",\n      value: function getFilters() {\n        return this.filters;\n      }\n    }, {\n      key: \"setFilters\",\n      value: function setFilters(value) {\n        if (!value) value = [];\n        if (this._connected === true) {\n          this.disconnect();\n          this.filters = value.slice();\n          this.connect();\n        } else {\n          this.filters = value.slice();\n        }\n        return this;\n      }\n    }, {\n      key: \"setDetune\",\n      value: function setDetune(value) {\n        this.detune = value;\n        if (this.isPlaying === true && this.source.detune !== undefined) {\n          this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n        }\n        return this;\n      }\n    }, {\n      key: \"getDetune\",\n      value: function getDetune() {\n        return this.detune;\n      }\n    }, {\n      key: \"getFilter\",\n      value: function getFilter() {\n        return this.getFilters()[0];\n      }\n    }, {\n      key: \"setFilter\",\n      value: function setFilter(filter) {\n        return this.setFilters(filter ? [filter] : []);\n      }\n    }, {\n      key: \"setPlaybackRate\",\n      value: function setPlaybackRate(value) {\n        if (this.hasPlaybackControl === false) {\n          console.warn('THREE.Audio: this Audio has no playback control.');\n          return;\n        }\n        this.playbackRate = value;\n        if (this.isPlaying === true) {\n          this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n        }\n        return this;\n      }\n    }, {\n      key: \"getPlaybackRate\",\n      value: function getPlaybackRate() {\n        return this.playbackRate;\n      }\n    }, {\n      key: \"onEnded\",\n      value: function onEnded() {\n        this.isPlaying = false;\n        this._progress = 0;\n      }\n    }, {\n      key: \"getLoop\",\n      value: function getLoop() {\n        if (this.hasPlaybackControl === false) {\n          console.warn('THREE.Audio: this Audio has no playback control.');\n          return false;\n        }\n        return this.loop;\n      }\n    }, {\n      key: \"setLoop\",\n      value: function setLoop(value) {\n        if (this.hasPlaybackControl === false) {\n          console.warn('THREE.Audio: this Audio has no playback control.');\n          return;\n        }\n        this.loop = value;\n        if (this.isPlaying === true) {\n          this.source.loop = this.loop;\n        }\n        return this;\n      }\n    }, {\n      key: \"setLoopStart\",\n      value: function setLoopStart(value) {\n        this.loopStart = value;\n        return this;\n      }\n    }, {\n      key: \"setLoopEnd\",\n      value: function setLoopEnd(value) {\n        this.loopEnd = value;\n        return this;\n      }\n    }, {\n      key: \"getVolume\",\n      value: function getVolume() {\n        return this.gain.gain.value;\n      }\n    }, {\n      key: \"setVolume\",\n      value: function setVolume(value) {\n        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(Audio, \"copy\", this, 3)([source, recursive]);\n        if (source.sourceType !== 'buffer') {\n          console.warn('THREE.Audio: Audio source type cannot be copied.');\n          return this;\n        }\n        this.autoplay = source.autoplay;\n        this.buffer = source.buffer;\n        this.detune = source.detune;\n        this.loop = source.loop;\n        this.loopStart = source.loopStart;\n        this.loopEnd = source.loopEnd;\n        this.offset = source.offset;\n        this.duration = source.duration;\n        this.playbackRate = source.playbackRate;\n        this.hasPlaybackControl = source.hasPlaybackControl;\n        this.sourceType = source.sourceType;\n        this.filters = source.filters.slice();\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(recursive) {\n        return new this.constructor(this.listener).copy(this, recursive);\n      }\n    }]);\n  }(Object3D);\n  var _position = /*@__PURE__*/new Vector3();\n  var _quaternion = /*@__PURE__*/new Quaternion();\n  var _scale = /*@__PURE__*/new Vector3();\n  var _orientation = /*@__PURE__*/new Vector3();\n  var PositionalAudio = exports.PositionalAudio = /*#__PURE__*/function (_Audio) {\n    function PositionalAudio(listener) {\n      var _this111;\n      (0, _classCallCheck2.default)(this, PositionalAudio);\n      _this111 = _callSuper(this, PositionalAudio, [listener]);\n      _this111.panner = _this111.context.createPanner();\n      _this111.panner.panningModel = 'HRTF';\n      _this111.panner.connect(_this111.gain);\n      return _this111;\n    }\n    (0, _inherits2.default)(PositionalAudio, _Audio);\n    return (0, _createClass2.default)(PositionalAudio, [{\n      key: \"connect\",\n      value: function connect() {\n        _superPropGet(PositionalAudio, \"connect\", this, 3)([]);\n        this.panner.connect(this.gain);\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        _superPropGet(PositionalAudio, \"disconnect\", this, 3)([]);\n        this.panner.disconnect(this.gain);\n      }\n    }, {\n      key: \"getOutput\",\n      value: function getOutput() {\n        return this.panner;\n      }\n    }, {\n      key: \"getRefDistance\",\n      value: function getRefDistance() {\n        return this.panner.refDistance;\n      }\n    }, {\n      key: \"setRefDistance\",\n      value: function setRefDistance(value) {\n        this.panner.refDistance = value;\n        return this;\n      }\n    }, {\n      key: \"getRolloffFactor\",\n      value: function getRolloffFactor() {\n        return this.panner.rolloffFactor;\n      }\n    }, {\n      key: \"setRolloffFactor\",\n      value: function setRolloffFactor(value) {\n        this.panner.rolloffFactor = value;\n        return this;\n      }\n    }, {\n      key: \"getDistanceModel\",\n      value: function getDistanceModel() {\n        return this.panner.distanceModel;\n      }\n    }, {\n      key: \"setDistanceModel\",\n      value: function setDistanceModel(value) {\n        this.panner.distanceModel = value;\n        return this;\n      }\n    }, {\n      key: \"getMaxDistance\",\n      value: function getMaxDistance() {\n        return this.panner.maxDistance;\n      }\n    }, {\n      key: \"setMaxDistance\",\n      value: function setMaxDistance(value) {\n        this.panner.maxDistance = value;\n        return this;\n      }\n    }, {\n      key: \"setDirectionalCone\",\n      value: function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n        this.panner.coneInnerAngle = coneInnerAngle;\n        this.panner.coneOuterAngle = coneOuterAngle;\n        this.panner.coneOuterGain = coneOuterGain;\n        return this;\n      }\n    }, {\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        _superPropGet(PositionalAudio, \"updateMatrixWorld\", this, 3)([force]);\n        if (this.hasPlaybackControl === true && this.isPlaying === false) return;\n        this.matrixWorld.decompose(_position, _quaternion, _scale);\n        _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n        var panner = this.panner;\n        if (panner.positionX) {\n          // code path for Chrome and Firefox (see #14393)\n\n          var endTime = this.context.currentTime + this.listener.timeDelta;\n          panner.positionX.linearRampToValueAtTime(_position.x, endTime);\n          panner.positionY.linearRampToValueAtTime(_position.y, endTime);\n          panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n          panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n          panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n          panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n        } else {\n          panner.setPosition(_position.x, _position.y, _position.z);\n          panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n        }\n      }\n    }]);\n  }(Audio);\n  var AudioAnalyser = exports.AudioAnalyser = /*#__PURE__*/function () {\n    function AudioAnalyser(audio) {\n      var fftSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;\n      (0, _classCallCheck2.default)(this, AudioAnalyser);\n      this.analyser = audio.context.createAnalyser();\n      this.analyser.fftSize = fftSize;\n      this.data = new Uint8Array(this.analyser.frequencyBinCount);\n      audio.getOutput().connect(this.analyser);\n    }\n    return (0, _createClass2.default)(AudioAnalyser, [{\n      key: \"getFrequencyData\",\n      value: function getFrequencyData() {\n        this.analyser.getByteFrequencyData(this.data);\n        return this.data;\n      }\n    }, {\n      key: \"getAverageFrequency\",\n      value: function getAverageFrequency() {\n        var value = 0;\n        var data = this.getFrequencyData();\n        for (var i = 0; i < data.length; i++) {\n          value += data[i];\n        }\n        return value / data.length;\n      }\n    }]);\n  }();\n  var PropertyMixer = exports.PropertyMixer = /*#__PURE__*/function () {\n    function PropertyMixer(binding, typeName, valueSize) {\n      (0, _classCallCheck2.default)(this, PropertyMixer);\n      this.binding = binding;\n      this.valueSize = valueSize;\n      var mixFunction, mixFunctionAdditive, setIdentity;\n\n      // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n      //\n      // interpolators can use .buffer as their .result\n      // the data then goes to 'incoming'\n      //\n      // 'accu0' and 'accu1' are used frame-interleaved for\n      // the cumulative result and are compared to detect\n      // changes\n      //\n      // 'orig' stores the original state of the property\n      //\n      // 'add' is used for additive cumulative results\n      //\n      // 'work' is optional and is only present for quaternion types. It is used\n      // to store intermediate quaternion multiplication results\n\n      switch (typeName) {\n        case 'quaternion':\n          mixFunction = this._slerp;\n          mixFunctionAdditive = this._slerpAdditive;\n          setIdentity = this._setAdditiveIdentityQuaternion;\n          this.buffer = new Float64Array(valueSize * 6);\n          this._workIndex = 5;\n          break;\n        case 'string':\n        case 'bool':\n          mixFunction = this._select;\n\n          // Use the regular mix function and for additive on these types,\n          // additive is not relevant for non-numeric types\n          mixFunctionAdditive = this._select;\n          setIdentity = this._setAdditiveIdentityOther;\n          this.buffer = new Array(valueSize * 5);\n          break;\n        default:\n          mixFunction = this._lerp;\n          mixFunctionAdditive = this._lerpAdditive;\n          setIdentity = this._setAdditiveIdentityNumeric;\n          this.buffer = new Float64Array(valueSize * 5);\n      }\n      this._mixBufferRegion = mixFunction;\n      this._mixBufferRegionAdditive = mixFunctionAdditive;\n      this._setIdentity = setIdentity;\n      this._origIndex = 3;\n      this._addIndex = 4;\n      this.cumulativeWeight = 0;\n      this.cumulativeWeightAdditive = 0;\n      this.useCount = 0;\n      this.referenceCount = 0;\n    }\n\n    // accumulate data in the 'incoming' region into 'accu<i>'\n    return (0, _createClass2.default)(PropertyMixer, [{\n      key: \"accumulate\",\n      value: function accumulate(accuIndex, weight) {\n        // note: happily accumulating nothing when weight = 0, the caller knows\n        // the weight and shouldn't have made the call in the first place\n\n        var buffer = this.buffer,\n          stride = this.valueSize,\n          offset = accuIndex * stride + stride;\n        var currentWeight = this.cumulativeWeight;\n        if (currentWeight === 0) {\n          // accuN := incoming * weight\n\n          for (var i = 0; i !== stride; ++i) {\n            buffer[offset + i] = buffer[i];\n          }\n          currentWeight = weight;\n        } else {\n          // accuN := accuN + incoming * weight\n\n          currentWeight += weight;\n          var mix = weight / currentWeight;\n          this._mixBufferRegion(buffer, offset, 0, mix, stride);\n        }\n        this.cumulativeWeight = currentWeight;\n      }\n\n      // accumulate data in the 'incoming' region into 'add'\n    }, {\n      key: \"accumulateAdditive\",\n      value: function accumulateAdditive(weight) {\n        var buffer = this.buffer,\n          stride = this.valueSize,\n          offset = stride * this._addIndex;\n        if (this.cumulativeWeightAdditive === 0) {\n          // add = identity\n\n          this._setIdentity();\n        }\n\n        // add := add + incoming * weight\n\n        this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n        this.cumulativeWeightAdditive += weight;\n      }\n\n      // apply the state of 'accu<i>' to the binding when accus differ\n    }, {\n      key: \"apply\",\n      value: function apply(accuIndex) {\n        var stride = this.valueSize,\n          buffer = this.buffer,\n          offset = accuIndex * stride + stride,\n          weight = this.cumulativeWeight,\n          weightAdditive = this.cumulativeWeightAdditive,\n          binding = this.binding;\n        this.cumulativeWeight = 0;\n        this.cumulativeWeightAdditive = 0;\n        if (weight < 1) {\n          // accuN := accuN + original * ( 1 - cumulativeWeight )\n\n          var originalValueOffset = stride * this._origIndex;\n          this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n        }\n        if (weightAdditive > 0) {\n          // accuN := accuN + additive accuN\n\n          this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n        }\n        for (var i = stride, e = stride + stride; i !== e; ++i) {\n          if (buffer[i] !== buffer[i + stride]) {\n            // value has changed -> update scene graph\n\n            binding.setValue(buffer, offset);\n            break;\n          }\n        }\n      }\n\n      // remember the state of the bound property and copy it to both accus\n    }, {\n      key: \"saveOriginalState\",\n      value: function saveOriginalState() {\n        var binding = this.binding;\n        var buffer = this.buffer,\n          stride = this.valueSize,\n          originalValueOffset = stride * this._origIndex;\n        binding.getValue(buffer, originalValueOffset);\n\n        // accu[0..1] := orig -- initially detect changes against the original\n        for (var i = stride, e = originalValueOffset; i !== e; ++i) {\n          buffer[i] = buffer[originalValueOffset + i % stride];\n        }\n\n        // Add to identity for additive\n        this._setIdentity();\n        this.cumulativeWeight = 0;\n        this.cumulativeWeightAdditive = 0;\n      }\n\n      // apply the state previously taken via 'saveOriginalState' to the binding\n    }, {\n      key: \"restoreOriginalState\",\n      value: function restoreOriginalState() {\n        var originalValueOffset = this.valueSize * 3;\n        this.binding.setValue(this.buffer, originalValueOffset);\n      }\n    }, {\n      key: \"_setAdditiveIdentityNumeric\",\n      value: function _setAdditiveIdentityNumeric() {\n        var startIndex = this._addIndex * this.valueSize;\n        var endIndex = startIndex + this.valueSize;\n        for (var i = startIndex; i < endIndex; i++) {\n          this.buffer[i] = 0;\n        }\n      }\n    }, {\n      key: \"_setAdditiveIdentityQuaternion\",\n      value: function _setAdditiveIdentityQuaternion() {\n        this._setAdditiveIdentityNumeric();\n        this.buffer[this._addIndex * this.valueSize + 3] = 1;\n      }\n    }, {\n      key: \"_setAdditiveIdentityOther\",\n      value: function _setAdditiveIdentityOther() {\n        var startIndex = this._origIndex * this.valueSize;\n        var targetIndex = this._addIndex * this.valueSize;\n        for (var i = 0; i < this.valueSize; i++) {\n          this.buffer[targetIndex + i] = this.buffer[startIndex + i];\n        }\n      }\n\n      // mix functions\n    }, {\n      key: \"_select\",\n      value: function _select(buffer, dstOffset, srcOffset, t, stride) {\n        if (t >= 0.5) {\n          for (var i = 0; i !== stride; ++i) {\n            buffer[dstOffset + i] = buffer[srcOffset + i];\n          }\n        }\n      }\n    }, {\n      key: \"_slerp\",\n      value: function _slerp(buffer, dstOffset, srcOffset, t) {\n        Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n      }\n    }, {\n      key: \"_slerpAdditive\",\n      value: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n        var workOffset = this._workIndex * stride;\n\n        // Store result in intermediate buffer offset\n        Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);\n\n        // Slerp to the intermediate result\n        Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n      }\n    }, {\n      key: \"_lerp\",\n      value: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n        var s = 1 - t;\n        for (var i = 0; i !== stride; ++i) {\n          var j = dstOffset + i;\n          buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n        }\n      }\n    }, {\n      key: \"_lerpAdditive\",\n      value: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n        for (var i = 0; i !== stride; ++i) {\n          var j = dstOffset + i;\n          buffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n        }\n      }\n    }]);\n  }(); // Characters [].:/ are reserved for track binding syntax.\n  var _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n  var _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g');\n\n  // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n  // only latin characters, and the unicode \\p{L} is not yet supported. So\n  // instead, we exclude reserved characters and match everything else.\n  var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n  var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']';\n\n  // Parent directories, delimited by '/' or ':'. Currently unused, but must\n  // be matched to parse the rest of the track name.\n  var _directoryRe = /*@__PURE__*//((?:WC+[\\/:])*)/.source.replace('WC', _wordChar);\n\n  // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n  var _nodeRe = /*@__PURE__*//(WCOD+)?/.source.replace('WCOD', _wordCharOrDot);\n\n  // Object on target node, and accessor. May not contain reserved\n  // characters. Accessor may contain any character except closing bracket.\n  var _objectRe = /*@__PURE__*//(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar);\n\n  // Property and accessor. May not contain reserved characters. Accessor may\n  // contain any non-bracket characters.\n  var _propertyRe = /*@__PURE__*//\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n  var _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n  var _supportedObjectNames = ['material', 'materials', 'bones', 'map'];\n  var Composite = /*#__PURE__*/function () {\n    function Composite(targetGroup, path, optionalParsedPath) {\n      (0, _classCallCheck2.default)(this, Composite);\n      var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n      this._targetGroup = targetGroup;\n      this._bindings = targetGroup.subscribe_(path, parsedPath);\n    }\n    return (0, _createClass2.default)(Composite, [{\n      key: \"getValue\",\n      value: function getValue(array, offset) {\n        this.bind(); // bind all binding\n\n        var firstValidIndex = this._targetGroup.nCachedObjects_,\n          binding = this._bindings[firstValidIndex];\n\n        // and only call .getValue on the first\n        if (binding !== undefined) binding.getValue(array, offset);\n      }\n    }, {\n      key: \"setValue\",\n      value: function setValue(array, offset) {\n        var bindings = this._bindings;\n        for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n          bindings[i].setValue(array, offset);\n        }\n      }\n    }, {\n      key: \"bind\",\n      value: function bind() {\n        var bindings = this._bindings;\n        for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n          bindings[i].bind();\n        }\n      }\n    }, {\n      key: \"unbind\",\n      value: function unbind() {\n        var bindings = this._bindings;\n        for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n          bindings[i].unbind();\n        }\n      }\n    }]);\n  }(); // Note: This class uses a State pattern on a per-method basis:\n  // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n  // prototype version of these methods with one that represents\n  // the bound state. When the property is not found, the methods\n  // become no-ops.\n  var PropertyBinding = exports.PropertyBinding = /*#__PURE__*/function () {\n    function PropertyBinding(rootNode, path, parsedPath) {\n      (0, _classCallCheck2.default)(this, PropertyBinding);\n      this.path = path;\n      this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n      this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);\n      this.rootNode = rootNode;\n\n      // initial state of these methods that calls 'bind'\n      this.getValue = this._getValue_unbound;\n      this.setValue = this._setValue_unbound;\n    }\n    return (0, _createClass2.default)(PropertyBinding, [{\n      key: \"_getValue_unavailable\",\n      value:\n      // these are used to \"bind\" a nonexistent property\n      function _getValue_unavailable() {}\n    }, {\n      key: \"_setValue_unavailable\",\n      value: function _setValue_unavailable() {}\n\n      // Getters\n    }, {\n      key: \"_getValue_direct\",\n      value: function _getValue_direct(buffer, offset) {\n        buffer[offset] = this.targetObject[this.propertyName];\n      }\n    }, {\n      key: \"_getValue_array\",\n      value: function _getValue_array(buffer, offset) {\n        var source = this.resolvedProperty;\n        for (var i = 0, n = source.length; i !== n; ++i) {\n          buffer[offset++] = source[i];\n        }\n      }\n    }, {\n      key: \"_getValue_arrayElement\",\n      value: function _getValue_arrayElement(buffer, offset) {\n        buffer[offset] = this.resolvedProperty[this.propertyIndex];\n      }\n    }, {\n      key: \"_getValue_toArray\",\n      value: function _getValue_toArray(buffer, offset) {\n        this.resolvedProperty.toArray(buffer, offset);\n      }\n\n      // Direct\n    }, {\n      key: \"_setValue_direct\",\n      value: function _setValue_direct(buffer, offset) {\n        this.targetObject[this.propertyName] = buffer[offset];\n      }\n    }, {\n      key: \"_setValue_direct_setNeedsUpdate\",\n      value: function _setValue_direct_setNeedsUpdate(buffer, offset) {\n        this.targetObject[this.propertyName] = buffer[offset];\n        this.targetObject.needsUpdate = true;\n      }\n    }, {\n      key: \"_setValue_direct_setMatrixWorldNeedsUpdate\",\n      value: function _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n        this.targetObject[this.propertyName] = buffer[offset];\n        this.targetObject.matrixWorldNeedsUpdate = true;\n      }\n\n      // EntireArray\n    }, {\n      key: \"_setValue_array\",\n      value: function _setValue_array(buffer, offset) {\n        var dest = this.resolvedProperty;\n        for (var i = 0, n = dest.length; i !== n; ++i) {\n          dest[i] = buffer[offset++];\n        }\n      }\n    }, {\n      key: \"_setValue_array_setNeedsUpdate\",\n      value: function _setValue_array_setNeedsUpdate(buffer, offset) {\n        var dest = this.resolvedProperty;\n        for (var i = 0, n = dest.length; i !== n; ++i) {\n          dest[i] = buffer[offset++];\n        }\n        this.targetObject.needsUpdate = true;\n      }\n    }, {\n      key: \"_setValue_array_setMatrixWorldNeedsUpdate\",\n      value: function _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n        var dest = this.resolvedProperty;\n        for (var i = 0, n = dest.length; i !== n; ++i) {\n          dest[i] = buffer[offset++];\n        }\n        this.targetObject.matrixWorldNeedsUpdate = true;\n      }\n\n      // ArrayElement\n    }, {\n      key: \"_setValue_arrayElement\",\n      value: function _setValue_arrayElement(buffer, offset) {\n        this.resolvedProperty[this.propertyIndex] = buffer[offset];\n      }\n    }, {\n      key: \"_setValue_arrayElement_setNeedsUpdate\",\n      value: function _setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n        this.resolvedProperty[this.propertyIndex] = buffer[offset];\n        this.targetObject.needsUpdate = true;\n      }\n    }, {\n      key: \"_setValue_arrayElement_setMatrixWorldNeedsUpdate\",\n      value: function _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n        this.resolvedProperty[this.propertyIndex] = buffer[offset];\n        this.targetObject.matrixWorldNeedsUpdate = true;\n      }\n\n      // HasToFromArray\n    }, {\n      key: \"_setValue_fromArray\",\n      value: function _setValue_fromArray(buffer, offset) {\n        this.resolvedProperty.fromArray(buffer, offset);\n      }\n    }, {\n      key: \"_setValue_fromArray_setNeedsUpdate\",\n      value: function _setValue_fromArray_setNeedsUpdate(buffer, offset) {\n        this.resolvedProperty.fromArray(buffer, offset);\n        this.targetObject.needsUpdate = true;\n      }\n    }, {\n      key: \"_setValue_fromArray_setMatrixWorldNeedsUpdate\",\n      value: function _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n        this.resolvedProperty.fromArray(buffer, offset);\n        this.targetObject.matrixWorldNeedsUpdate = true;\n      }\n    }, {\n      key: \"_getValue_unbound\",\n      value: function _getValue_unbound(targetArray, offset) {\n        this.bind();\n        this.getValue(targetArray, offset);\n      }\n    }, {\n      key: \"_setValue_unbound\",\n      value: function _setValue_unbound(sourceArray, offset) {\n        this.bind();\n        this.setValue(sourceArray, offset);\n      }\n\n      // create getter / setter pair for a property in the scene graph\n    }, {\n      key: \"bind\",\n      value: function bind() {\n        var targetObject = this.node;\n        var parsedPath = this.parsedPath;\n        var objectName = parsedPath.objectName;\n        var propertyName = parsedPath.propertyName;\n        var propertyIndex = parsedPath.propertyIndex;\n        if (!targetObject) {\n          targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);\n          this.node = targetObject;\n        }\n\n        // set fail state so we can just 'return' on error\n        this.getValue = this._getValue_unavailable;\n        this.setValue = this._setValue_unavailable;\n\n        // ensure there is a value node\n        if (!targetObject) {\n          console.warn('THREE.PropertyBinding: No target node found for track: ' + this.path + '.');\n          return;\n        }\n        if (objectName) {\n          var objectIndex = parsedPath.objectIndex;\n\n          // special cases were we need to reach deeper into the hierarchy to get the face materials....\n          switch (objectName) {\n            case 'materials':\n              if (!targetObject.material) {\n                console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n                return;\n              }\n              if (!targetObject.material.materials) {\n                console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n                return;\n              }\n              targetObject = targetObject.material.materials;\n              break;\n            case 'bones':\n              if (!targetObject.skeleton) {\n                console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n                return;\n              }\n\n              // potential future optimization: skip this if propertyIndex is already an integer\n              // and convert the integer string to a true integer.\n\n              targetObject = targetObject.skeleton.bones;\n\n              // support resolving morphTarget names into indices.\n              for (var i = 0; i < targetObject.length; i++) {\n                if (targetObject[i].name === objectIndex) {\n                  objectIndex = i;\n                  break;\n                }\n              }\n              break;\n            case 'map':\n              if ('map' in targetObject) {\n                targetObject = targetObject.map;\n                break;\n              }\n              if (!targetObject.material) {\n                console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n                return;\n              }\n              if (!targetObject.material.map) {\n                console.error('THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this);\n                return;\n              }\n              targetObject = targetObject.material.map;\n              break;\n            default:\n              if (targetObject[objectName] === undefined) {\n                console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n                return;\n              }\n              targetObject = targetObject[objectName];\n          }\n          if (objectIndex !== undefined) {\n            if (targetObject[objectIndex] === undefined) {\n              console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n              return;\n            }\n            targetObject = targetObject[objectIndex];\n          }\n        }\n\n        // resolve property\n        var nodeProperty = targetObject[propertyName];\n        if (nodeProperty === undefined) {\n          var nodeName = parsedPath.nodeName;\n          console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n          return;\n        }\n\n        // determine versioning scheme\n        var versioning = this.Versioning.None;\n        this.targetObject = targetObject;\n        if (targetObject.isMaterial === true) {\n          versioning = this.Versioning.NeedsUpdate;\n        } else if (targetObject.isObject3D === true) {\n          versioning = this.Versioning.MatrixWorldNeedsUpdate;\n        }\n\n        // determine how the property gets bound\n        var bindingType = this.BindingType.Direct;\n        if (propertyIndex !== undefined) {\n          // access a sub element of the property array (only primitives are supported right now)\n\n          if (propertyName === 'morphTargetInfluences') {\n            // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n            // support resolving morphTarget names into indices.\n            if (!targetObject.geometry) {\n              console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n              return;\n            }\n            if (!targetObject.geometry.morphAttributes) {\n              console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n              return;\n            }\n            if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n            }\n          }\n          bindingType = this.BindingType.ArrayElement;\n          this.resolvedProperty = nodeProperty;\n          this.propertyIndex = propertyIndex;\n        } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n          // must use copy for Object3D.Euler/Quaternion\n\n          bindingType = this.BindingType.HasFromToArray;\n          this.resolvedProperty = nodeProperty;\n        } else if (Array.isArray(nodeProperty)) {\n          bindingType = this.BindingType.EntireArray;\n          this.resolvedProperty = nodeProperty;\n        } else {\n          this.propertyName = propertyName;\n        }\n\n        // select getter / setter\n        this.getValue = this.GetterByBindingType[bindingType];\n        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n      }\n    }, {\n      key: \"unbind\",\n      value: function unbind() {\n        this.node = null;\n\n        // back to the prototype version of getValue / setValue\n        // note: avoiding to mutate the shape of 'this' via 'delete'\n        this.getValue = this._getValue_unbound;\n        this.setValue = this._setValue_unbound;\n      }\n    }], [{\n      key: \"create\",\n      value: function create(root, path, parsedPath) {\n        if (!(root && root.isAnimationObjectGroup)) {\n          return new PropertyBinding(root, path, parsedPath);\n        } else {\n          return new PropertyBinding.Composite(root, path, parsedPath);\n        }\n      }\n\n      /**\n       * Replaces spaces with underscores and removes unsupported characters from\n       * node names, to ensure compatibility with parseTrackName().\n       *\n       * @param {string} name Node name to be sanitized.\n       * @return {string}\n       */\n    }, {\n      key: \"sanitizeNodeName\",\n      value: function sanitizeNodeName(name) {\n        return name.replace(/\\s/g, '_').replace(_reservedRe, '');\n      }\n    }, {\n      key: \"parseTrackName\",\n      value: function parseTrackName(trackName) {\n        var matches = _trackRe.exec(trackName);\n        if (matches === null) {\n          throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n        }\n        var results = {\n          // directoryName: matches[ 1 ], // (tschw) currently unused\n          nodeName: matches[2],\n          objectName: matches[3],\n          objectIndex: matches[4],\n          propertyName: matches[5],\n          // required\n          propertyIndex: matches[6]\n        };\n        var lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n        if (lastDot !== undefined && lastDot !== -1) {\n          var objectName = results.nodeName.substring(lastDot + 1);\n\n          // Object names must be checked against an allowlist. Otherwise, there\n          // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n          // 'bar' could be the objectName, or part of a nodeName (which can\n          // include '.' characters).\n          if (_supportedObjectNames.indexOf(objectName) !== -1) {\n            results.nodeName = results.nodeName.substring(0, lastDot);\n            results.objectName = objectName;\n          }\n        }\n        if (results.propertyName === null || results.propertyName.length === 0) {\n          throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n        }\n        return results;\n      }\n    }, {\n      key: \"findNode\",\n      value: function findNode(root, nodeName) {\n        if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n          return root;\n        }\n\n        // search into skeleton bones.\n        if (root.skeleton) {\n          var bone = root.skeleton.getBoneByName(nodeName);\n          if (bone !== undefined) {\n            return bone;\n          }\n        }\n\n        // search into node subtree.\n        if (root.children) {\n          var _searchNodeSubtree = function searchNodeSubtree(children) {\n            for (var i = 0; i < children.length; i++) {\n              var childNode = children[i];\n              if (childNode.name === nodeName || childNode.uuid === nodeName) {\n                return childNode;\n              }\n              var result = _searchNodeSubtree(childNode.children);\n              if (result) return result;\n            }\n            return null;\n          };\n          var subTreeNode = _searchNodeSubtree(root.children);\n          if (subTreeNode) {\n            return subTreeNode;\n          }\n        }\n        return null;\n      }\n    }]);\n  }();\n  PropertyBinding.Composite = Composite;\n  PropertyBinding.prototype.BindingType = {\n    Direct: 0,\n    EntireArray: 1,\n    ArrayElement: 2,\n    HasFromToArray: 3\n  };\n  PropertyBinding.prototype.Versioning = {\n    None: 0,\n    NeedsUpdate: 1,\n    MatrixWorldNeedsUpdate: 2\n  };\n  PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[\n  // Direct\n  PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [\n  // EntireArray\n\n  PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [\n  // ArrayElement\n  PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [\n  // HasToFromArray\n  PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n  /**\n   *\n   * A group of objects that receives a shared animation state.\n   *\n   * Usage:\n   *\n   *  - Add objects you would otherwise pass as 'root' to the\n   *    constructor or the .clipAction method of AnimationMixer.\n   *\n   *  - Instead pass this object as 'root'.\n   *\n   *  - You can also add and remove objects later when the mixer\n   *    is running.\n   *\n   * Note:\n   *\n   *    Objects of this class appear as one object to the mixer,\n   *    so cache control of the individual objects must be done\n   *    on the group.\n   *\n   * Limitation:\n   *\n   *  - The animated properties must be compatible among the\n   *    all objects in the group.\n   *\n   *  - A single property can either be controlled through a\n   *    target group or directly, but not both.\n   */\n  var AnimationObjectGroup = exports.AnimationObjectGroup = /*#__PURE__*/function () {\n    function AnimationObjectGroup() {\n      (0, _classCallCheck2.default)(this, AnimationObjectGroup);\n      this.isAnimationObjectGroup = true;\n      this.uuid = generateUUID();\n\n      // cached objects followed by the active ones\n      this._objects = Array.prototype.slice.call(arguments);\n      this.nCachedObjects_ = 0; // threshold\n      // note: read by PropertyBinding.Composite\n\n      var indices = {};\n      this._indicesByUUID = indices; // for bookkeeping\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        indices[arguments[i].uuid] = i;\n      }\n      this._paths = []; // inside: string\n      this._parsedPaths = []; // inside: { we don't care, here }\n      this._bindings = []; // inside: Array< PropertyBinding >\n      this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n      var scope = this;\n      this.stats = {\n        objects: {\n          get total() {\n            return scope._objects.length;\n          },\n          get inUse() {\n            return this.total - scope.nCachedObjects_;\n          }\n        },\n        get bindingsPerObject() {\n          return scope._bindings.length;\n        }\n      };\n    }\n    return (0, _createClass2.default)(AnimationObjectGroup, [{\n      key: \"add\",\n      value: function add() {\n        var objects = this._objects,\n          indicesByUUID = this._indicesByUUID,\n          paths = this._paths,\n          parsedPaths = this._parsedPaths,\n          bindings = this._bindings,\n          nBindings = bindings.length;\n        var knownObject = undefined,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_;\n        for (var i = 0, n = arguments.length; i !== n; ++i) {\n          var object = arguments[i],\n            uuid = object.uuid;\n          var index = indicesByUUID[uuid];\n          if (index === undefined) {\n            // unknown object -> add it to the ACTIVE region\n\n            index = nObjects++;\n            indicesByUUID[uuid] = index;\n            objects.push(object);\n\n            // accounting is done, now do the same for all bindings\n\n            for (var j = 0, m = nBindings; j !== m; ++j) {\n              bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n            }\n          } else if (index < nCachedObjects) {\n            knownObject = objects[index];\n\n            // move existing object to the ACTIVE region\n\n            var firstActiveIndex = --nCachedObjects,\n              lastCachedObject = objects[firstActiveIndex];\n            indicesByUUID[lastCachedObject.uuid] = index;\n            objects[index] = lastCachedObject;\n            indicesByUUID[uuid] = firstActiveIndex;\n            objects[firstActiveIndex] = object;\n\n            // accounting is done, now do the same for all bindings\n\n            for (var _j14 = 0, _m2 = nBindings; _j14 !== _m2; ++_j14) {\n              var bindingsForPath = bindings[_j14],\n                lastCached = bindingsForPath[firstActiveIndex];\n              var binding = bindingsForPath[index];\n              bindingsForPath[index] = lastCached;\n              if (binding === undefined) {\n                // since we do not bother to create new bindings\n                // for objects that are cached, the binding may\n                // or may not exist\n\n                binding = new PropertyBinding(object, paths[_j14], parsedPaths[_j14]);\n              }\n              bindingsForPath[firstActiveIndex] = binding;\n            }\n          } else if (objects[index] !== knownObject) {\n            console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n          } // else the object is already where we want it to be\n        } // for arguments\n\n        this.nCachedObjects_ = nCachedObjects;\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var objects = this._objects,\n          indicesByUUID = this._indicesByUUID,\n          bindings = this._bindings,\n          nBindings = bindings.length;\n        var nCachedObjects = this.nCachedObjects_;\n        for (var i = 0, n = arguments.length; i !== n; ++i) {\n          var object = arguments[i],\n            uuid = object.uuid,\n            index = indicesByUUID[uuid];\n          if (index !== undefined && index >= nCachedObjects) {\n            // move existing object into the CACHED region\n\n            var lastCachedIndex = nCachedObjects++,\n              firstActiveObject = objects[lastCachedIndex];\n            indicesByUUID[firstActiveObject.uuid] = index;\n            objects[index] = firstActiveObject;\n            indicesByUUID[uuid] = lastCachedIndex;\n            objects[lastCachedIndex] = object;\n\n            // accounting is done, now do the same for all bindings\n\n            for (var j = 0, m = nBindings; j !== m; ++j) {\n              var bindingsForPath = bindings[j],\n                firstActive = bindingsForPath[lastCachedIndex],\n                binding = bindingsForPath[index];\n              bindingsForPath[index] = firstActive;\n              bindingsForPath[lastCachedIndex] = binding;\n            }\n          }\n        } // for arguments\n\n        this.nCachedObjects_ = nCachedObjects;\n      }\n\n      // remove & forget\n    }, {\n      key: \"uncache\",\n      value: function uncache() {\n        var objects = this._objects,\n          indicesByUUID = this._indicesByUUID,\n          bindings = this._bindings,\n          nBindings = bindings.length;\n        var nCachedObjects = this.nCachedObjects_,\n          nObjects = objects.length;\n        for (var i = 0, n = arguments.length; i !== n; ++i) {\n          var object = arguments[i],\n            uuid = object.uuid,\n            index = indicesByUUID[uuid];\n          if (index !== undefined) {\n            delete indicesByUUID[uuid];\n            if (index < nCachedObjects) {\n              // object is cached, shrink the CACHED region\n\n              var firstActiveIndex = --nCachedObjects,\n                lastCachedObject = objects[firstActiveIndex],\n                lastIndex = --nObjects,\n                lastObject = objects[lastIndex];\n\n              // last cached object takes this object's place\n              indicesByUUID[lastCachedObject.uuid] = index;\n              objects[index] = lastCachedObject;\n\n              // last object goes to the activated slot and pop\n              indicesByUUID[lastObject.uuid] = firstActiveIndex;\n              objects[firstActiveIndex] = lastObject;\n              objects.pop();\n\n              // accounting is done, now do the same for all bindings\n\n              for (var j = 0, m = nBindings; j !== m; ++j) {\n                var bindingsForPath = bindings[j],\n                  lastCached = bindingsForPath[firstActiveIndex],\n                  last = bindingsForPath[lastIndex];\n                bindingsForPath[index] = lastCached;\n                bindingsForPath[firstActiveIndex] = last;\n                bindingsForPath.pop();\n              }\n            } else {\n              // object is active, just swap with the last and pop\n\n              var _lastIndex = --nObjects,\n                _lastObject = objects[_lastIndex];\n              if (_lastIndex > 0) {\n                indicesByUUID[_lastObject.uuid] = index;\n              }\n              objects[index] = _lastObject;\n              objects.pop();\n\n              // accounting is done, now do the same for all bindings\n\n              for (var _j15 = 0, _m4 = nBindings; _j15 !== _m4; ++_j15) {\n                var _bindingsForPath = bindings[_j15];\n                _bindingsForPath[index] = _bindingsForPath[_lastIndex];\n                _bindingsForPath.pop();\n              }\n            } // cached or active\n          } // if object is known\n        } // for arguments\n\n        this.nCachedObjects_ = nCachedObjects;\n      }\n\n      // Internal interface used by befriended PropertyBinding.Composite:\n    }, {\n      key: \"subscribe_\",\n      value: function subscribe_(path, parsedPath) {\n        // returns an array of bindings for the given path that is changed\n        // according to the contained objects in the group\n\n        var indicesByPath = this._bindingsIndicesByPath;\n        var index = indicesByPath[path];\n        var bindings = this._bindings;\n        if (index !== undefined) return bindings[index];\n        var paths = this._paths,\n          parsedPaths = this._parsedPaths,\n          objects = this._objects,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_,\n          bindingsForPath = new Array(nObjects);\n        index = bindings.length;\n        indicesByPath[path] = index;\n        paths.push(path);\n        parsedPaths.push(parsedPath);\n        bindings.push(bindingsForPath);\n        for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n          var object = objects[i];\n          bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n        }\n        return bindingsForPath;\n      }\n    }, {\n      key: \"unsubscribe_\",\n      value: function unsubscribe_(path) {\n        // tells the group to forget about a property path and no longer\n        // update the array previously obtained with 'subscribe_'\n\n        var indicesByPath = this._bindingsIndicesByPath,\n          index = indicesByPath[path];\n        if (index !== undefined) {\n          var paths = this._paths,\n            parsedPaths = this._parsedPaths,\n            bindings = this._bindings,\n            lastBindingsIndex = bindings.length - 1,\n            lastBindings = bindings[lastBindingsIndex],\n            lastBindingsPath = path[lastBindingsIndex];\n          indicesByPath[lastBindingsPath] = index;\n          bindings[index] = lastBindings;\n          bindings.pop();\n          parsedPaths[index] = parsedPaths[lastBindingsIndex];\n          parsedPaths.pop();\n          paths[index] = paths[lastBindingsIndex];\n          paths.pop();\n        }\n      }\n    }]);\n  }();\n  var AnimationAction = exports.AnimationAction = /*#__PURE__*/function () {\n    function AnimationAction(mixer, clip) {\n      var localRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : clip.blendMode;\n      (0, _classCallCheck2.default)(this, AnimationAction);\n      this._mixer = mixer;\n      this._clip = clip;\n      this._localRoot = localRoot;\n      this.blendMode = blendMode;\n      var tracks = clip.tracks,\n        nTracks = tracks.length,\n        interpolants = new Array(nTracks);\n      var interpolantSettings = {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding\n      };\n      for (var i = 0; i !== nTracks; ++i) {\n        var interpolant = tracks[i].createInterpolant(null);\n        interpolants[i] = interpolant;\n        interpolant.settings = interpolantSettings;\n      }\n      this._interpolantSettings = interpolantSettings;\n      this._interpolants = interpolants; // bound by the mixer\n\n      // inside: PropertyMixer (managed by the mixer)\n      this._propertyBindings = new Array(nTracks);\n      this._cacheIndex = null; // for the memory manager\n      this._byClipCacheIndex = null; // for the memory manager\n\n      this._timeScaleInterpolant = null;\n      this._weightInterpolant = null;\n      this.loop = LoopRepeat;\n      this._loopCount = -1;\n\n      // global mixer time when the action is to be started\n      // it's set back to 'null' upon start of the action\n      this._startTime = null;\n\n      // scaled local time of the action\n      // gets clamped or wrapped to 0..clip.duration according to loop\n      this.time = 0;\n      this.timeScale = 1;\n      this._effectiveTimeScale = 1;\n      this.weight = 1;\n      this._effectiveWeight = 1;\n      this.repetitions = Infinity; // no. of repetitions when looping\n\n      this.paused = false; // true -> zero effective time scale\n      this.enabled = true; // false -> zero effective weight\n\n      this.clampWhenFinished = false; // keep feeding the last frame?\n\n      this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n      this.zeroSlopeAtEnd = true; // clips for start, loop and end\n    }\n\n    // State & Scheduling\n    return (0, _createClass2.default)(AnimationAction, [{\n      key: \"play\",\n      value: function play() {\n        this._mixer._activateAction(this);\n        return this;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this._mixer._deactivateAction(this);\n        return this.reset();\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.paused = false;\n        this.enabled = true;\n        this.time = 0; // restart clip\n        this._loopCount = -1; // forget previous loops\n        this._startTime = null; // forget scheduling\n\n        return this.stopFading().stopWarping();\n      }\n    }, {\n      key: \"isRunning\",\n      value: function isRunning() {\n        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n      }\n\n      // return true when play has been called\n    }, {\n      key: \"isScheduled\",\n      value: function isScheduled() {\n        return this._mixer._isActiveAction(this);\n      }\n    }, {\n      key: \"startAt\",\n      value: function startAt(time) {\n        this._startTime = time;\n        return this;\n      }\n    }, {\n      key: \"setLoop\",\n      value: function setLoop(mode, repetitions) {\n        this.loop = mode;\n        this.repetitions = repetitions;\n        return this;\n      }\n\n      // Weight\n\n      // set the weight stopping any scheduled fading\n      // although .enabled = false yields an effective weight of zero, this\n      // method does *not* change .enabled, because it would be confusing\n    }, {\n      key: \"setEffectiveWeight\",\n      value: function setEffectiveWeight(weight) {\n        this.weight = weight;\n\n        // note: same logic as when updated at runtime\n        this._effectiveWeight = this.enabled ? weight : 0;\n        return this.stopFading();\n      }\n\n      // return the weight considering fading and .enabled\n    }, {\n      key: \"getEffectiveWeight\",\n      value: function getEffectiveWeight() {\n        return this._effectiveWeight;\n      }\n    }, {\n      key: \"fadeIn\",\n      value: function fadeIn(duration) {\n        return this._scheduleFading(duration, 0, 1);\n      }\n    }, {\n      key: \"fadeOut\",\n      value: function fadeOut(duration) {\n        return this._scheduleFading(duration, 1, 0);\n      }\n    }, {\n      key: \"crossFadeFrom\",\n      value: function crossFadeFrom(fadeOutAction, duration, warp) {\n        fadeOutAction.fadeOut(duration);\n        this.fadeIn(duration);\n        if (warp) {\n          var fadeInDuration = this._clip.duration,\n            fadeOutDuration = fadeOutAction._clip.duration,\n            startEndRatio = fadeOutDuration / fadeInDuration,\n            endStartRatio = fadeInDuration / fadeOutDuration;\n          fadeOutAction.warp(1.0, startEndRatio, duration);\n          this.warp(endStartRatio, 1.0, duration);\n        }\n        return this;\n      }\n    }, {\n      key: \"crossFadeTo\",\n      value: function crossFadeTo(fadeInAction, duration, warp) {\n        return fadeInAction.crossFadeFrom(this, duration, warp);\n      }\n    }, {\n      key: \"stopFading\",\n      value: function stopFading() {\n        var weightInterpolant = this._weightInterpolant;\n        if (weightInterpolant !== null) {\n          this._weightInterpolant = null;\n          this._mixer._takeBackControlInterpolant(weightInterpolant);\n        }\n        return this;\n      }\n\n      // Time Scale Control\n\n      // set the time scale stopping any scheduled warping\n      // although .paused = true yields an effective time scale of zero, this\n      // method does *not* change .paused, because it would be confusing\n    }, {\n      key: \"setEffectiveTimeScale\",\n      value: function setEffectiveTimeScale(timeScale) {\n        this.timeScale = timeScale;\n        this._effectiveTimeScale = this.paused ? 0 : timeScale;\n        return this.stopWarping();\n      }\n\n      // return the time scale considering warping and .paused\n    }, {\n      key: \"getEffectiveTimeScale\",\n      value: function getEffectiveTimeScale() {\n        return this._effectiveTimeScale;\n      }\n    }, {\n      key: \"setDuration\",\n      value: function setDuration(duration) {\n        this.timeScale = this._clip.duration / duration;\n        return this.stopWarping();\n      }\n    }, {\n      key: \"syncWith\",\n      value: function syncWith(action) {\n        this.time = action.time;\n        this.timeScale = action.timeScale;\n        return this.stopWarping();\n      }\n    }, {\n      key: \"halt\",\n      value: function halt(duration) {\n        return this.warp(this._effectiveTimeScale, 0, duration);\n      }\n    }, {\n      key: \"warp\",\n      value: function warp(startTimeScale, endTimeScale, duration) {\n        var mixer = this._mixer,\n          now = mixer.time,\n          timeScale = this.timeScale;\n        var interpolant = this._timeScaleInterpolant;\n        if (interpolant === null) {\n          interpolant = mixer._lendControlInterpolant();\n          this._timeScaleInterpolant = interpolant;\n        }\n        var times = interpolant.parameterPositions,\n          values = interpolant.sampleValues;\n        times[0] = now;\n        times[1] = now + duration;\n        values[0] = startTimeScale / timeScale;\n        values[1] = endTimeScale / timeScale;\n        return this;\n      }\n    }, {\n      key: \"stopWarping\",\n      value: function stopWarping() {\n        var timeScaleInterpolant = this._timeScaleInterpolant;\n        if (timeScaleInterpolant !== null) {\n          this._timeScaleInterpolant = null;\n          this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n        }\n        return this;\n      }\n\n      // Object Accessors\n    }, {\n      key: \"getMixer\",\n      value: function getMixer() {\n        return this._mixer;\n      }\n    }, {\n      key: \"getClip\",\n      value: function getClip() {\n        return this._clip;\n      }\n    }, {\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this._localRoot || this._mixer._root;\n      }\n\n      // Interna\n    }, {\n      key: \"_update\",\n      value: function _update(time, deltaTime, timeDirection, accuIndex) {\n        // called by the mixer\n\n        if (!this.enabled) {\n          // call ._updateWeight() to update ._effectiveWeight\n\n          this._updateWeight(time);\n          return;\n        }\n        var startTime = this._startTime;\n        if (startTime !== null) {\n          // check for scheduled start of action\n\n          var timeRunning = (time - startTime) * timeDirection;\n          if (timeRunning < 0 || timeDirection === 0) {\n            deltaTime = 0;\n          } else {\n            this._startTime = null; // unschedule\n            deltaTime = timeDirection * timeRunning;\n          }\n        }\n\n        // apply time scale and advance time\n\n        deltaTime *= this._updateTimeScale(time);\n        var clipTime = this._updateTime(deltaTime);\n\n        // note: _updateTime may disable the action resulting in\n        // an effective weight of 0\n\n        var weight = this._updateWeight(time);\n        if (weight > 0) {\n          var interpolants = this._interpolants;\n          var propertyMixers = this._propertyBindings;\n          switch (this.blendMode) {\n            case AdditiveAnimationBlendMode:\n              for (var j = 0, m = interpolants.length; j !== m; ++j) {\n                interpolants[j].evaluate(clipTime);\n                propertyMixers[j].accumulateAdditive(weight);\n              }\n              break;\n            case NormalAnimationBlendMode:\n            default:\n              for (var _j16 = 0, _m5 = interpolants.length; _j16 !== _m5; ++_j16) {\n                interpolants[_j16].evaluate(clipTime);\n                propertyMixers[_j16].accumulate(accuIndex, weight);\n              }\n          }\n        }\n      }\n    }, {\n      key: \"_updateWeight\",\n      value: function _updateWeight(time) {\n        var weight = 0;\n        if (this.enabled) {\n          weight = this.weight;\n          var interpolant = this._weightInterpolant;\n          if (interpolant !== null) {\n            var interpolantValue = interpolant.evaluate(time)[0];\n            weight *= interpolantValue;\n            if (time > interpolant.parameterPositions[1]) {\n              this.stopFading();\n              if (interpolantValue === 0) {\n                // faded out, disable\n                this.enabled = false;\n              }\n            }\n          }\n        }\n        this._effectiveWeight = weight;\n        return weight;\n      }\n    }, {\n      key: \"_updateTimeScale\",\n      value: function _updateTimeScale(time) {\n        var timeScale = 0;\n        if (!this.paused) {\n          timeScale = this.timeScale;\n          var interpolant = this._timeScaleInterpolant;\n          if (interpolant !== null) {\n            var interpolantValue = interpolant.evaluate(time)[0];\n            timeScale *= interpolantValue;\n            if (time > interpolant.parameterPositions[1]) {\n              this.stopWarping();\n              if (timeScale === 0) {\n                // motion has halted, pause\n                this.paused = true;\n              } else {\n                // warp done - apply final time scale\n                this.timeScale = timeScale;\n              }\n            }\n          }\n        }\n        this._effectiveTimeScale = timeScale;\n        return timeScale;\n      }\n    }, {\n      key: \"_updateTime\",\n      value: function _updateTime(deltaTime) {\n        var duration = this._clip.duration;\n        var loop = this.loop;\n        var time = this.time + deltaTime;\n        var loopCount = this._loopCount;\n        var pingPong = loop === LoopPingPong;\n        if (deltaTime === 0) {\n          if (loopCount === -1) return time;\n          return pingPong && (loopCount & 1) === 1 ? duration - time : time;\n        }\n        if (loop === LoopOnce) {\n          if (loopCount === -1) {\n            // just started\n\n            this._loopCount = 0;\n            this._setEndings(true, true, false);\n          }\n          handle_stop: {\n            if (time >= duration) {\n              time = duration;\n            } else if (time < 0) {\n              time = 0;\n            } else {\n              this.time = time;\n              break handle_stop;\n            }\n            if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n            this.time = time;\n            this._mixer.dispatchEvent({\n              type: 'finished',\n              action: this,\n              direction: deltaTime < 0 ? -1 : 1\n            });\n          }\n        } else {\n          // repetitive Repeat or PingPong\n\n          if (loopCount === -1) {\n            // just started\n\n            if (deltaTime >= 0) {\n              loopCount = 0;\n              this._setEndings(true, this.repetitions === 0, pingPong);\n            } else {\n              // when looping in reverse direction, the initial\n              // transition through zero counts as a repetition,\n              // so leave loopCount at -1\n\n              this._setEndings(this.repetitions === 0, true, pingPong);\n            }\n          }\n          if (time >= duration || time < 0) {\n            // wrap around\n\n            var loopDelta = Math.floor(time / duration); // signed\n            time -= duration * loopDelta;\n            loopCount += Math.abs(loopDelta);\n            var pending = this.repetitions - loopCount;\n            if (pending <= 0) {\n              // have to stop (switch state, clamp time, fire event)\n\n              if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n              time = deltaTime > 0 ? duration : 0;\n              this.time = time;\n              this._mixer.dispatchEvent({\n                type: 'finished',\n                action: this,\n                direction: deltaTime > 0 ? 1 : -1\n              });\n            } else {\n              // keep running\n\n              if (pending === 1) {\n                // entering the last round\n\n                var atStart = deltaTime < 0;\n                this._setEndings(atStart, !atStart, pingPong);\n              } else {\n                this._setEndings(false, false, pingPong);\n              }\n              this._loopCount = loopCount;\n              this.time = time;\n              this._mixer.dispatchEvent({\n                type: 'loop',\n                action: this,\n                loopDelta: loopDelta\n              });\n            }\n          } else {\n            this.time = time;\n          }\n          if (pingPong && (loopCount & 1) === 1) {\n            // invert time for the \"pong round\"\n\n            return duration - time;\n          }\n        }\n        return time;\n      }\n    }, {\n      key: \"_setEndings\",\n      value: function _setEndings(atStart, atEnd, pingPong) {\n        var settings = this._interpolantSettings;\n        if (pingPong) {\n          settings.endingStart = ZeroSlopeEnding;\n          settings.endingEnd = ZeroSlopeEnding;\n        } else {\n          // assuming for LoopOnce atStart == atEnd == true\n\n          if (atStart) {\n            settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n          } else {\n            settings.endingStart = WrapAroundEnding;\n          }\n          if (atEnd) {\n            settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n          } else {\n            settings.endingEnd = WrapAroundEnding;\n          }\n        }\n      }\n    }, {\n      key: \"_scheduleFading\",\n      value: function _scheduleFading(duration, weightNow, weightThen) {\n        var mixer = this._mixer,\n          now = mixer.time;\n        var interpolant = this._weightInterpolant;\n        if (interpolant === null) {\n          interpolant = mixer._lendControlInterpolant();\n          this._weightInterpolant = interpolant;\n        }\n        var times = interpolant.parameterPositions,\n          values = interpolant.sampleValues;\n        times[0] = now;\n        values[0] = weightNow;\n        times[1] = now + duration;\n        values[1] = weightThen;\n        return this;\n      }\n    }]);\n  }();\n  var _controlInterpolantsResultBuffer = new Float32Array(1);\n  var AnimationMixer = exports.AnimationMixer = /*#__PURE__*/function (_EventDispatcher6) {\n    function AnimationMixer(root) {\n      var _this112;\n      (0, _classCallCheck2.default)(this, AnimationMixer);\n      _this112 = _callSuper(this, AnimationMixer);\n      _this112._root = root;\n      _this112._initMemoryManager();\n      _this112._accuIndex = 0;\n      _this112.time = 0;\n      _this112.timeScale = 1.0;\n      return _this112;\n    }\n    (0, _inherits2.default)(AnimationMixer, _EventDispatcher6);\n    return (0, _createClass2.default)(AnimationMixer, [{\n      key: \"_bindAction\",\n      value: function _bindAction(action, prototypeAction) {\n        var root = action._localRoot || this._root,\n          tracks = action._clip.tracks,\n          nTracks = tracks.length,\n          bindings = action._propertyBindings,\n          interpolants = action._interpolants,\n          rootUuid = root.uuid,\n          bindingsByRoot = this._bindingsByRootAndName;\n        var bindingsByName = bindingsByRoot[rootUuid];\n        if (bindingsByName === undefined) {\n          bindingsByName = {};\n          bindingsByRoot[rootUuid] = bindingsByName;\n        }\n        for (var i = 0; i !== nTracks; ++i) {\n          var track = tracks[i],\n            trackName = track.name;\n          var binding = bindingsByName[trackName];\n          if (binding !== undefined) {\n            ++binding.referenceCount;\n            bindings[i] = binding;\n          } else {\n            binding = bindings[i];\n            if (binding !== undefined) {\n              // existing binding, make sure the cache knows\n\n              if (binding._cacheIndex === null) {\n                ++binding.referenceCount;\n                this._addInactiveBinding(binding, rootUuid, trackName);\n              }\n              continue;\n            }\n            var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n            binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n            ++binding.referenceCount;\n            this._addInactiveBinding(binding, rootUuid, trackName);\n            bindings[i] = binding;\n          }\n          interpolants[i].resultBuffer = binding.buffer;\n        }\n      }\n    }, {\n      key: \"_activateAction\",\n      value: function _activateAction(action) {\n        if (!this._isActiveAction(action)) {\n          if (action._cacheIndex === null) {\n            // this action has been forgotten by the cache, but the user\n            // appears to be still using it -> rebind\n\n            var rootUuid = (action._localRoot || this._root).uuid,\n              clipUuid = action._clip.uuid,\n              actionsForClip = this._actionsByClip[clipUuid];\n            this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n            this._addInactiveAction(action, clipUuid, rootUuid);\n          }\n          var bindings = action._propertyBindings;\n\n          // increment reference counts / sort out state\n          for (var i = 0, n = bindings.length; i !== n; ++i) {\n            var binding = bindings[i];\n            if (binding.useCount++ === 0) {\n              this._lendBinding(binding);\n              binding.saveOriginalState();\n            }\n          }\n          this._lendAction(action);\n        }\n      }\n    }, {\n      key: \"_deactivateAction\",\n      value: function _deactivateAction(action) {\n        if (this._isActiveAction(action)) {\n          var bindings = action._propertyBindings;\n\n          // decrement reference counts / sort out state\n          for (var i = 0, n = bindings.length; i !== n; ++i) {\n            var binding = bindings[i];\n            if (--binding.useCount === 0) {\n              binding.restoreOriginalState();\n              this._takeBackBinding(binding);\n            }\n          }\n          this._takeBackAction(action);\n        }\n      }\n\n      // Memory manager\n    }, {\n      key: \"_initMemoryManager\",\n      value: function _initMemoryManager() {\n        this._actions = []; // 'nActiveActions' followed by inactive ones\n        this._nActiveActions = 0;\n        this._actionsByClip = {};\n        // inside:\n        // {\n        // \tknownActions: Array< AnimationAction > - used as prototypes\n        // \tactionByRoot: AnimationAction - lookup\n        // }\n\n        this._bindings = []; // 'nActiveBindings' followed by inactive ones\n        this._nActiveBindings = 0;\n        this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n        this._controlInterpolants = []; // same game as above\n        this._nActiveControlInterpolants = 0;\n        var scope = this;\n        this.stats = {\n          actions: {\n            get total() {\n              return scope._actions.length;\n            },\n            get inUse() {\n              return scope._nActiveActions;\n            }\n          },\n          bindings: {\n            get total() {\n              return scope._bindings.length;\n            },\n            get inUse() {\n              return scope._nActiveBindings;\n            }\n          },\n          controlInterpolants: {\n            get total() {\n              return scope._controlInterpolants.length;\n            },\n            get inUse() {\n              return scope._nActiveControlInterpolants;\n            }\n          }\n        };\n      }\n\n      // Memory management for AnimationAction objects\n    }, {\n      key: \"_isActiveAction\",\n      value: function _isActiveAction(action) {\n        var index = action._cacheIndex;\n        return index !== null && index < this._nActiveActions;\n      }\n    }, {\n      key: \"_addInactiveAction\",\n      value: function _addInactiveAction(action, clipUuid, rootUuid) {\n        var actions = this._actions,\n          actionsByClip = this._actionsByClip;\n        var actionsForClip = actionsByClip[clipUuid];\n        if (actionsForClip === undefined) {\n          actionsForClip = {\n            knownActions: [action],\n            actionByRoot: {}\n          };\n          action._byClipCacheIndex = 0;\n          actionsByClip[clipUuid] = actionsForClip;\n        } else {\n          var knownActions = actionsForClip.knownActions;\n          action._byClipCacheIndex = knownActions.length;\n          knownActions.push(action);\n        }\n        action._cacheIndex = actions.length;\n        actions.push(action);\n        actionsForClip.actionByRoot[rootUuid] = action;\n      }\n    }, {\n      key: \"_removeInactiveAction\",\n      value: function _removeInactiveAction(action) {\n        var actions = this._actions,\n          lastInactiveAction = actions[actions.length - 1],\n          cacheIndex = action._cacheIndex;\n        lastInactiveAction._cacheIndex = cacheIndex;\n        actions[cacheIndex] = lastInactiveAction;\n        actions.pop();\n        action._cacheIndex = null;\n        var clipUuid = action._clip.uuid,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid],\n          knownActionsForClip = actionsForClip.knownActions,\n          lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n          byClipCacheIndex = action._byClipCacheIndex;\n        lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n        knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n        knownActionsForClip.pop();\n        action._byClipCacheIndex = null;\n        var actionByRoot = actionsForClip.actionByRoot,\n          rootUuid = (action._localRoot || this._root).uuid;\n        delete actionByRoot[rootUuid];\n        if (knownActionsForClip.length === 0) {\n          delete actionsByClip[clipUuid];\n        }\n        this._removeInactiveBindingsForAction(action);\n      }\n    }, {\n      key: \"_removeInactiveBindingsForAction\",\n      value: function _removeInactiveBindingsForAction(action) {\n        var bindings = action._propertyBindings;\n        for (var i = 0, n = bindings.length; i !== n; ++i) {\n          var binding = bindings[i];\n          if (--binding.referenceCount === 0) {\n            this._removeInactiveBinding(binding);\n          }\n        }\n      }\n    }, {\n      key: \"_lendAction\",\n      value: function _lendAction(action) {\n        // [ active actions |  inactive actions  ]\n        // [  active actions >| inactive actions ]\n        //                 s        a\n        //                  <-swap->\n        //                 a        s\n\n        var actions = this._actions,\n          prevIndex = action._cacheIndex,\n          lastActiveIndex = this._nActiveActions++,\n          firstInactiveAction = actions[lastActiveIndex];\n        action._cacheIndex = lastActiveIndex;\n        actions[lastActiveIndex] = action;\n        firstInactiveAction._cacheIndex = prevIndex;\n        actions[prevIndex] = firstInactiveAction;\n      }\n    }, {\n      key: \"_takeBackAction\",\n      value: function _takeBackAction(action) {\n        // [  active actions  | inactive actions ]\n        // [ active actions |< inactive actions  ]\n        //        a        s\n        //         <-swap->\n        //        s        a\n\n        var actions = this._actions,\n          prevIndex = action._cacheIndex,\n          firstInactiveIndex = --this._nActiveActions,\n          lastActiveAction = actions[firstInactiveIndex];\n        action._cacheIndex = firstInactiveIndex;\n        actions[firstInactiveIndex] = action;\n        lastActiveAction._cacheIndex = prevIndex;\n        actions[prevIndex] = lastActiveAction;\n      }\n\n      // Memory management for PropertyMixer objects\n    }, {\n      key: \"_addInactiveBinding\",\n      value: function _addInactiveBinding(binding, rootUuid, trackName) {\n        var bindingsByRoot = this._bindingsByRootAndName,\n          bindings = this._bindings;\n        var bindingByName = bindingsByRoot[rootUuid];\n        if (bindingByName === undefined) {\n          bindingByName = {};\n          bindingsByRoot[rootUuid] = bindingByName;\n        }\n        bindingByName[trackName] = binding;\n        binding._cacheIndex = bindings.length;\n        bindings.push(binding);\n      }\n    }, {\n      key: \"_removeInactiveBinding\",\n      value: function _removeInactiveBinding(binding) {\n        var bindings = this._bindings,\n          propBinding = binding.binding,\n          rootUuid = propBinding.rootNode.uuid,\n          trackName = propBinding.path,\n          bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid],\n          lastInactiveBinding = bindings[bindings.length - 1],\n          cacheIndex = binding._cacheIndex;\n        lastInactiveBinding._cacheIndex = cacheIndex;\n        bindings[cacheIndex] = lastInactiveBinding;\n        bindings.pop();\n        delete bindingByName[trackName];\n        if (Object.keys(bindingByName).length === 0) {\n          delete bindingsByRoot[rootUuid];\n        }\n      }\n    }, {\n      key: \"_lendBinding\",\n      value: function _lendBinding(binding) {\n        var bindings = this._bindings,\n          prevIndex = binding._cacheIndex,\n          lastActiveIndex = this._nActiveBindings++,\n          firstInactiveBinding = bindings[lastActiveIndex];\n        binding._cacheIndex = lastActiveIndex;\n        bindings[lastActiveIndex] = binding;\n        firstInactiveBinding._cacheIndex = prevIndex;\n        bindings[prevIndex] = firstInactiveBinding;\n      }\n    }, {\n      key: \"_takeBackBinding\",\n      value: function _takeBackBinding(binding) {\n        var bindings = this._bindings,\n          prevIndex = binding._cacheIndex,\n          firstInactiveIndex = --this._nActiveBindings,\n          lastActiveBinding = bindings[firstInactiveIndex];\n        binding._cacheIndex = firstInactiveIndex;\n        bindings[firstInactiveIndex] = binding;\n        lastActiveBinding._cacheIndex = prevIndex;\n        bindings[prevIndex] = lastActiveBinding;\n      }\n\n      // Memory management of Interpolants for weight and time scale\n    }, {\n      key: \"_lendControlInterpolant\",\n      value: function _lendControlInterpolant() {\n        var interpolants = this._controlInterpolants,\n          lastActiveIndex = this._nActiveControlInterpolants++;\n        var interpolant = interpolants[lastActiveIndex];\n        if (interpolant === undefined) {\n          interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, _controlInterpolantsResultBuffer);\n          interpolant.__cacheIndex = lastActiveIndex;\n          interpolants[lastActiveIndex] = interpolant;\n        }\n        return interpolant;\n      }\n    }, {\n      key: \"_takeBackControlInterpolant\",\n      value: function _takeBackControlInterpolant(interpolant) {\n        var interpolants = this._controlInterpolants,\n          prevIndex = interpolant.__cacheIndex,\n          firstInactiveIndex = --this._nActiveControlInterpolants,\n          lastActiveInterpolant = interpolants[firstInactiveIndex];\n        interpolant.__cacheIndex = firstInactiveIndex;\n        interpolants[firstInactiveIndex] = interpolant;\n        lastActiveInterpolant.__cacheIndex = prevIndex;\n        interpolants[prevIndex] = lastActiveInterpolant;\n      }\n\n      // return an action for a clip optionally using a custom root target\n      // object (this method allocates a lot of dynamic memory in case a\n      // previously unknown clip/root combination is specified)\n    }, {\n      key: \"clipAction\",\n      value: function clipAction(clip, optionalRoot, blendMode) {\n        var root = optionalRoot || this._root,\n          rootUuid = root.uuid;\n        var clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n        var clipUuid = clipObject !== null ? clipObject.uuid : clip;\n        var actionsForClip = this._actionsByClip[clipUuid];\n        var prototypeAction = null;\n        if (blendMode === undefined) {\n          if (clipObject !== null) {\n            blendMode = clipObject.blendMode;\n          } else {\n            blendMode = NormalAnimationBlendMode;\n          }\n        }\n        if (actionsForClip !== undefined) {\n          var existingAction = actionsForClip.actionByRoot[rootUuid];\n          if (existingAction !== undefined && existingAction.blendMode === blendMode) {\n            return existingAction;\n          }\n\n          // we know the clip, so we don't have to parse all\n          // the bindings again but can just copy\n          prototypeAction = actionsForClip.knownActions[0];\n\n          // also, take the clip from the prototype action\n          if (clipObject === null) clipObject = prototypeAction._clip;\n        }\n\n        // clip must be known when specified via string\n        if (clipObject === null) return null;\n\n        // allocate all resources required to run it\n        var newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n        this._bindAction(newAction, prototypeAction);\n\n        // and make the action known to the memory manager\n        this._addInactiveAction(newAction, clipUuid, rootUuid);\n        return newAction;\n      }\n\n      // get an existing action\n    }, {\n      key: \"existingAction\",\n      value: function existingAction(clip, optionalRoot) {\n        var root = optionalRoot || this._root,\n          rootUuid = root.uuid,\n          clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n          clipUuid = clipObject ? clipObject.uuid : clip,\n          actionsForClip = this._actionsByClip[clipUuid];\n        if (actionsForClip !== undefined) {\n          return actionsForClip.actionByRoot[rootUuid] || null;\n        }\n        return null;\n      }\n\n      // deactivates all previously scheduled actions\n    }, {\n      key: \"stopAllAction\",\n      value: function stopAllAction() {\n        var actions = this._actions,\n          nActions = this._nActiveActions;\n        for (var i = nActions - 1; i >= 0; --i) {\n          actions[i].stop();\n        }\n        return this;\n      }\n\n      // advance the time and update apply the animation\n    }, {\n      key: \"update\",\n      value: function update(deltaTime) {\n        deltaTime *= this.timeScale;\n        var actions = this._actions,\n          nActions = this._nActiveActions,\n          time = this.time += deltaTime,\n          timeDirection = Math.sign(deltaTime),\n          accuIndex = this._accuIndex ^= 1;\n\n        // run active actions\n\n        for (var i = 0; i !== nActions; ++i) {\n          var action = actions[i];\n          action._update(time, deltaTime, timeDirection, accuIndex);\n        }\n\n        // update scene graph\n\n        var bindings = this._bindings,\n          nBindings = this._nActiveBindings;\n        for (var _i63 = 0; _i63 !== nBindings; ++_i63) {\n          bindings[_i63].apply(accuIndex);\n        }\n        return this;\n      }\n\n      // Allows you to seek to a specific time in an animation.\n    }, {\n      key: \"setTime\",\n      value: function setTime(timeInSeconds) {\n        this.time = 0; // Zero out time attribute for AnimationMixer object;\n        for (var i = 0; i < this._actions.length; i++) {\n          this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n        }\n        return this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n      }\n\n      // return this mixer's root target object\n    }, {\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this._root;\n      }\n\n      // free all resources specific to a particular clip\n    }, {\n      key: \"uncacheClip\",\n      value: function uncacheClip(clip) {\n        var actions = this._actions,\n          clipUuid = clip.uuid,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid];\n        if (actionsForClip !== undefined) {\n          // note: just calling _removeInactiveAction would mess up the\n          // iteration state and also require updating the state we can\n          // just throw away\n\n          var actionsToRemove = actionsForClip.knownActions;\n          for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n            var action = actionsToRemove[i];\n            this._deactivateAction(action);\n            var cacheIndex = action._cacheIndex,\n              lastInactiveAction = actions[actions.length - 1];\n            action._cacheIndex = null;\n            action._byClipCacheIndex = null;\n            lastInactiveAction._cacheIndex = cacheIndex;\n            actions[cacheIndex] = lastInactiveAction;\n            actions.pop();\n            this._removeInactiveBindingsForAction(action);\n          }\n          delete actionsByClip[clipUuid];\n        }\n      }\n\n      // free all resources specific to a particular root target object\n    }, {\n      key: \"uncacheRoot\",\n      value: function uncacheRoot(root) {\n        var rootUuid = root.uuid,\n          actionsByClip = this._actionsByClip;\n        for (var clipUuid in actionsByClip) {\n          var actionByRoot = actionsByClip[clipUuid].actionByRoot,\n            action = actionByRoot[rootUuid];\n          if (action !== undefined) {\n            this._deactivateAction(action);\n            this._removeInactiveAction(action);\n          }\n        }\n        var bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid];\n        if (bindingByName !== undefined) {\n          for (var trackName in bindingByName) {\n            var binding = bindingByName[trackName];\n            binding.restoreOriginalState();\n            this._removeInactiveBinding(binding);\n          }\n        }\n      }\n\n      // remove a targeted clip from the cache\n    }, {\n      key: \"uncacheAction\",\n      value: function uncacheAction(clip, optionalRoot) {\n        var action = this.existingAction(clip, optionalRoot);\n        if (action !== null) {\n          this._deactivateAction(action);\n          this._removeInactiveAction(action);\n        }\n      }\n    }]);\n  }(EventDispatcher);\n  var RenderTarget3D = exports.RenderTarget3D = /*#__PURE__*/function (_RenderTarget2) {\n    function RenderTarget3D() {\n      var _this113;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      (0, _classCallCheck2.default)(this, RenderTarget3D);\n      _this113 = _callSuper(this, RenderTarget3D, [width, height, options]);\n      _this113.isRenderTarget3D = true;\n      _this113.depth = depth;\n      _this113.texture = new Data3DTexture(null, width, height, depth);\n      _this113.texture.isRenderTargetTexture = true;\n      return _this113;\n    }\n    (0, _inherits2.default)(RenderTarget3D, _RenderTarget2);\n    return (0, _createClass2.default)(RenderTarget3D);\n  }(RenderTarget);\n  var RenderTargetArray = exports.RenderTargetArray = /*#__PURE__*/function (_RenderTarget3) {\n    function RenderTargetArray() {\n      var _this114;\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      (0, _classCallCheck2.default)(this, RenderTargetArray);\n      _this114 = _callSuper(this, RenderTargetArray, [width, height, options]);\n      _this114.isRenderTargetArray = true;\n      _this114.depth = depth;\n      _this114.texture = new DataArrayTexture(null, width, height, depth);\n      _this114.texture.isRenderTargetTexture = true;\n      return _this114;\n    }\n    (0, _inherits2.default)(RenderTargetArray, _RenderTarget3);\n    return (0, _createClass2.default)(RenderTargetArray);\n  }(RenderTarget);\n  var Uniform = exports.Uniform = /*#__PURE__*/function () {\n    function Uniform(value) {\n      (0, _classCallCheck2.default)(this, Uniform);\n      this.value = value;\n    }\n    return (0, _createClass2.default)(Uniform, [{\n      key: \"clone\",\n      value: function clone() {\n        return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n      }\n    }]);\n  }();\n  var _id = 0;\n  var UniformsGroup = exports.UniformsGroup = /*#__PURE__*/function (_EventDispatcher7) {\n    function UniformsGroup() {\n      var _this115;\n      (0, _classCallCheck2.default)(this, UniformsGroup);\n      _this115 = _callSuper(this, UniformsGroup);\n      _this115.isUniformsGroup = true;\n      Object.defineProperty(_this115, 'id', {\n        value: _id++\n      });\n      _this115.name = '';\n      _this115.usage = StaticDrawUsage;\n      _this115.uniforms = [];\n      return _this115;\n    }\n    (0, _inherits2.default)(UniformsGroup, _EventDispatcher7);\n    return (0, _createClass2.default)(UniformsGroup, [{\n      key: \"add\",\n      value: function add(uniform) {\n        this.uniforms.push(uniform);\n        return this;\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(uniform) {\n        var index = this.uniforms.indexOf(uniform);\n        if (index !== -1) this.uniforms.splice(index, 1);\n        return this;\n      }\n    }, {\n      key: \"setName\",\n      value: function setName(name) {\n        this.name = name;\n        return this;\n      }\n    }, {\n      key: \"setUsage\",\n      value: function setUsage(value) {\n        this.usage = value;\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.dispatchEvent({\n          type: 'dispose'\n        });\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        this.name = source.name;\n        this.usage = source.usage;\n        var uniformsSource = source.uniforms;\n        this.uniforms.length = 0;\n        for (var i = 0, l = uniformsSource.length; i < l; i++) {\n          var uniforms = Array.isArray(uniformsSource[i]) ? uniformsSource[i] : [uniformsSource[i]];\n          for (var j = 0; j < uniforms.length; j++) {\n            this.uniforms.push(uniforms[j].clone());\n          }\n        }\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }(EventDispatcher);\n  var InstancedInterleavedBuffer = exports.InstancedInterleavedBuffer = /*#__PURE__*/function (_InterleavedBuffer) {\n    function InstancedInterleavedBuffer(array, stride) {\n      var _this116;\n      var meshPerAttribute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      (0, _classCallCheck2.default)(this, InstancedInterleavedBuffer);\n      _this116 = _callSuper(this, InstancedInterleavedBuffer, [array, stride]);\n      _this116.isInstancedInterleavedBuffer = true;\n      _this116.meshPerAttribute = meshPerAttribute;\n      return _this116;\n    }\n    (0, _inherits2.default)(InstancedInterleavedBuffer, _InterleavedBuffer);\n    return (0, _createClass2.default)(InstancedInterleavedBuffer, [{\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(InstancedInterleavedBuffer, \"copy\", this, 3)([source]);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(data) {\n        var ib = _superPropGet(InstancedInterleavedBuffer, \"clone\", this, 3)([data]);\n        ib.meshPerAttribute = this.meshPerAttribute;\n        return ib;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON(data) {\n        var json = _superPropGet(InstancedInterleavedBuffer, \"toJSON\", this, 3)([data]);\n        json.isInstancedInterleavedBuffer = true;\n        json.meshPerAttribute = this.meshPerAttribute;\n        return json;\n      }\n    }]);\n  }(InterleavedBuffer);\n  var GLBufferAttribute = exports.GLBufferAttribute = /*#__PURE__*/function () {\n    function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n      (0, _classCallCheck2.default)(this, GLBufferAttribute);\n      this.isGLBufferAttribute = true;\n      this.name = '';\n      this.buffer = buffer;\n      this.type = type;\n      this.itemSize = itemSize;\n      this.elementSize = elementSize;\n      this.count = count;\n      this.version = 0;\n    }\n    return (0, _createClass2.default)(GLBufferAttribute, [{\n      key: \"needsUpdate\",\n      set: function set(value) {\n        if (value === true) this.version++;\n      }\n    }, {\n      key: \"setBuffer\",\n      value: function setBuffer(buffer) {\n        this.buffer = buffer;\n        return this;\n      }\n    }, {\n      key: \"setType\",\n      value: function setType(type, elementSize) {\n        this.type = type;\n        this.elementSize = elementSize;\n        return this;\n      }\n    }, {\n      key: \"setItemSize\",\n      value: function setItemSize(itemSize) {\n        this.itemSize = itemSize;\n        return this;\n      }\n    }, {\n      key: \"setCount\",\n      value: function setCount(count) {\n        this.count = count;\n        return this;\n      }\n    }]);\n  }();\n  var _matrix = /*@__PURE__*/new Matrix4();\n  var Raycaster = exports.Raycaster = /*#__PURE__*/function () {\n    function Raycaster(origin, direction) {\n      var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n      (0, _classCallCheck2.default)(this, Raycaster);\n      this.ray = new Ray(origin, direction);\n      // direction is assumed to be normalized (for accurate distance calculations)\n\n      this.near = near;\n      this.far = far;\n      this.camera = null;\n      this.layers = new Layers();\n      this.params = {\n        Mesh: {},\n        Line: {\n          threshold: 1\n        },\n        LOD: {},\n        Points: {\n          threshold: 1\n        },\n        Sprite: {}\n      };\n    }\n    return (0, _createClass2.default)(Raycaster, [{\n      key: \"set\",\n      value: function set(origin, direction) {\n        // direction is assumed to be normalized (for accurate distance calculations)\n\n        this.ray.set(origin, direction);\n      }\n    }, {\n      key: \"setFromCamera\",\n      value: function setFromCamera(coords, camera) {\n        if (camera.isPerspectiveCamera) {\n          this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n          this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n          this.camera = camera;\n        } else if (camera.isOrthographicCamera) {\n          this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n          this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n          this.camera = camera;\n        } else {\n          console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n        }\n      }\n    }, {\n      key: \"setFromXRController\",\n      value: function setFromXRController(controller) {\n        _matrix.identity().extractRotation(controller.matrixWorld);\n        this.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n        this.ray.direction.set(0, 0, -1).applyMatrix4(_matrix);\n        return this;\n      }\n    }, {\n      key: \"intersectObject\",\n      value: function intersectObject(object) {\n        var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        intersect(object, this, intersects, recursive);\n        intersects.sort(ascSort);\n        return intersects;\n      }\n    }, {\n      key: \"intersectObjects\",\n      value: function intersectObjects(objects) {\n        var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        for (var i = 0, l = objects.length; i < l; i++) {\n          intersect(objects[i], this, intersects, recursive);\n        }\n        intersects.sort(ascSort);\n        return intersects;\n      }\n    }]);\n  }();\n  function ascSort(a, b) {\n    return a.distance - b.distance;\n  }\n  function intersect(object, raycaster, intersects, recursive) {\n    var propagate = true;\n    if (object.layers.test(raycaster.layers)) {\n      var result = object.raycast(raycaster, intersects);\n      if (result === false) propagate = false;\n    }\n    if (propagate === true && recursive === true) {\n      var children = object.children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        intersect(children[i], raycaster, intersects, true);\n      }\n    }\n  }\n\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   *\n   * phi (the polar angle) is measured from the positive y-axis. The positive y-axis is up.\n   * theta (the azimuthal angle) is measured from the positive z-axis.\n   */\n  var Spherical = exports.Spherical = /*#__PURE__*/function () {\n    function Spherical() {\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var phi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var theta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      (0, _classCallCheck2.default)(this, Spherical);\n      this.radius = radius;\n      this.phi = phi; // polar angle\n      this.theta = theta; // azimuthal angle\n\n      return this;\n    }\n    return (0, _createClass2.default)(Spherical, [{\n      key: \"set\",\n      value: function set(radius, phi, theta) {\n        this.radius = radius;\n        this.phi = phi;\n        this.theta = theta;\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(other) {\n        this.radius = other.radius;\n        this.phi = other.phi;\n        this.theta = other.theta;\n        return this;\n      }\n\n      // restrict phi to be between EPS and PI-EPS\n    }, {\n      key: \"makeSafe\",\n      value: function makeSafe() {\n        var EPS = 0.000001;\n        this.phi = _clamp(this.phi, EPS, Math.PI - EPS);\n        return this;\n      }\n    }, {\n      key: \"setFromVector3\",\n      value: function setFromVector3(v) {\n        return this.setFromCartesianCoords(v.x, v.y, v.z);\n      }\n    }, {\n      key: \"setFromCartesianCoords\",\n      value: function setFromCartesianCoords(x, y, z) {\n        this.radius = Math.sqrt(x * x + y * y + z * z);\n        if (this.radius === 0) {\n          this.theta = 0;\n          this.phi = 0;\n        } else {\n          this.theta = Math.atan2(x, z);\n          this.phi = Math.acos(_clamp(y / this.radius, -1, 1));\n        }\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n   */\n  var Cylindrical = exports.Cylindrical = /*#__PURE__*/function () {\n    function Cylindrical() {\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var theta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      (0, _classCallCheck2.default)(this, Cylindrical);\n      this.radius = radius; // distance from the origin to a point in the x-z plane\n      this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n      this.y = y; // height above the x-z plane\n\n      return this;\n    }\n    return (0, _createClass2.default)(Cylindrical, [{\n      key: \"set\",\n      value: function set(radius, theta, y) {\n        this.radius = radius;\n        this.theta = theta;\n        this.y = y;\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(other) {\n        this.radius = other.radius;\n        this.theta = other.theta;\n        this.y = other.y;\n        return this;\n      }\n    }, {\n      key: \"setFromVector3\",\n      value: function setFromVector3(v) {\n        return this.setFromCartesianCoords(v.x, v.y, v.z);\n      }\n    }, {\n      key: \"setFromCartesianCoords\",\n      value: function setFromCartesianCoords(x, y, z) {\n        this.radius = Math.sqrt(x * x + z * z);\n        this.theta = Math.atan2(x, z);\n        this.y = y;\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  var Matrix2 = exports.Matrix2 = /*#__PURE__*/function () {\n    function Matrix2(n11, n12, n21, n22) {\n      (0, _classCallCheck2.default)(this, Matrix2);\n      Matrix2.prototype.isMatrix2 = true;\n      this.elements = [1, 0, 0, 1];\n      if (n11 !== undefined) {\n        this.set(n11, n12, n21, n22);\n      }\n    }\n    return (0, _createClass2.default)(Matrix2, [{\n      key: \"identity\",\n      value: function identity() {\n        this.set(1, 0, 0, 1);\n        return this;\n      }\n    }, {\n      key: \"fromArray\",\n      value: function fromArray(array) {\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        for (var i = 0; i < 4; i++) {\n          this.elements[i] = array[i + offset];\n        }\n        return this;\n      }\n    }, {\n      key: \"set\",\n      value: function set(n11, n12, n21, n22) {\n        var te = this.elements;\n        te[0] = n11;\n        te[2] = n12;\n        te[1] = n21;\n        te[3] = n22;\n        return this;\n      }\n    }]);\n  }();\n  var _vector$4 = /*@__PURE__*/new Vector2();\n  var Box2 = exports.Box2 = /*#__PURE__*/function () {\n    function Box2() {\n      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2(+Infinity, +Infinity);\n      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(-Infinity, -Infinity);\n      (0, _classCallCheck2.default)(this, Box2);\n      this.isBox2 = true;\n      this.min = min;\n      this.max = max;\n    }\n    return (0, _createClass2.default)(Box2, [{\n      key: \"set\",\n      value: function set(min, max) {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n      }\n    }, {\n      key: \"setFromPoints\",\n      value: function setFromPoints(points) {\n        this.makeEmpty();\n        for (var i = 0, il = points.length; i < il; i++) {\n          this.expandByPoint(points[i]);\n        }\n        return this;\n      }\n    }, {\n      key: \"setFromCenterAndSize\",\n      value: function setFromCenterAndSize(center, size) {\n        var halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(box) {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n      }\n    }, {\n      key: \"makeEmpty\",\n      value: function makeEmpty() {\n        this.min.x = this.min.y = +Infinity;\n        this.max.x = this.max.y = -Infinity;\n        return this;\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n        return this.max.x < this.min.x || this.max.y < this.min.y;\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter(target) {\n        return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n      }\n    }, {\n      key: \"getSize\",\n      value: function getSize(target) {\n        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n      }\n    }, {\n      key: \"expandByPoint\",\n      value: function expandByPoint(point) {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n      }\n    }, {\n      key: \"expandByVector\",\n      value: function expandByVector(vector) {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n      }\n    }, {\n      key: \"expandByScalar\",\n      value: function expandByScalar(scalar) {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n      }\n    }, {\n      key: \"containsPoint\",\n      value: function containsPoint(point) {\n        return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y;\n      }\n    }, {\n      key: \"containsBox\",\n      value: function containsBox(box) {\n        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n      }\n    }, {\n      key: \"getParameter\",\n      value: function getParameter(point, target) {\n        // This can potentially have a divide by zero if the box\n        // has a size dimension of 0.\n\n        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n      }\n    }, {\n      key: \"intersectsBox\",\n      value: function intersectsBox(box) {\n        // using 4 splitting planes to rule out intersections\n\n        return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y;\n      }\n    }, {\n      key: \"clampPoint\",\n      value: function clampPoint(point, target) {\n        return target.copy(point).clamp(this.min, this.max);\n      }\n    }, {\n      key: \"distanceToPoint\",\n      value: function distanceToPoint(point) {\n        return this.clampPoint(point, _vector$4).distanceTo(point);\n      }\n    }, {\n      key: \"intersect\",\n      value: function intersect(box) {\n        this.min.max(box.min);\n        this.max.min(box.max);\n        if (this.isEmpty()) this.makeEmpty();\n        return this;\n      }\n    }, {\n      key: \"union\",\n      value: function union(box) {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate(offset) {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(box) {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n      }\n    }]);\n  }();\n  var _startP = /*@__PURE__*/new Vector3();\n  var _startEnd = /*@__PURE__*/new Vector3();\n  var Line3 = exports.Line3 = /*#__PURE__*/function () {\n    function Line3() {\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      (0, _classCallCheck2.default)(this, Line3);\n      this.start = start;\n      this.end = end;\n    }\n    return (0, _createClass2.default)(Line3, [{\n      key: \"set\",\n      value: function set(start, end) {\n        this.start.copy(start);\n        this.end.copy(end);\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(line) {\n        this.start.copy(line.start);\n        this.end.copy(line.end);\n        return this;\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter(target) {\n        return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n      }\n    }, {\n      key: \"delta\",\n      value: function delta(target) {\n        return target.subVectors(this.end, this.start);\n      }\n    }, {\n      key: \"distanceSq\",\n      value: function distanceSq() {\n        return this.start.distanceToSquared(this.end);\n      }\n    }, {\n      key: \"distance\",\n      value: function distance() {\n        return this.start.distanceTo(this.end);\n      }\n    }, {\n      key: \"at\",\n      value: function at(t, target) {\n        return this.delta(target).multiplyScalar(t).add(this.start);\n      }\n    }, {\n      key: \"closestPointToPointParameter\",\n      value: function closestPointToPointParameter(point, clampToLine) {\n        _startP.subVectors(point, this.start);\n        _startEnd.subVectors(this.end, this.start);\n        var startEnd2 = _startEnd.dot(_startEnd);\n        var startEnd_startP = _startEnd.dot(_startP);\n        var t = startEnd_startP / startEnd2;\n        if (clampToLine) {\n          t = _clamp(t, 0, 1);\n        }\n        return t;\n      }\n    }, {\n      key: \"closestPointToPoint\",\n      value: function closestPointToPoint(point, clampToLine, target) {\n        var t = this.closestPointToPointParameter(point, clampToLine);\n        return this.delta(target).multiplyScalar(t).add(this.start);\n      }\n    }, {\n      key: \"applyMatrix4\",\n      value: function applyMatrix4(matrix) {\n        this.start.applyMatrix4(matrix);\n        this.end.applyMatrix4(matrix);\n        return this;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(line) {\n        return line.start.equals(this.start) && line.end.equals(this.end);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }]);\n  }();\n  var _vector$3 = /*@__PURE__*/new Vector3();\n  var SpotLightHelper = exports.SpotLightHelper = /*#__PURE__*/function (_Object3D14) {\n    function SpotLightHelper(light, color) {\n      var _this117;\n      (0, _classCallCheck2.default)(this, SpotLightHelper);\n      _this117 = _callSuper(this, SpotLightHelper);\n      _this117.light = light;\n      _this117.matrixAutoUpdate = false;\n      _this117.color = color;\n      _this117.type = 'SpotLightHelper';\n      var geometry = new BufferGeometry();\n      var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n      for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n        var p1 = i / l * Math.PI * 2;\n        var p2 = j / l * Math.PI * 2;\n        positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      var material = new LineBasicMaterial({\n        fog: false,\n        toneMapped: false\n      });\n      _this117.cone = new LineSegments(geometry, material);\n      _this117.add(_this117.cone);\n      _this117.update();\n      return _this117;\n    }\n    (0, _inherits2.default)(SpotLightHelper, _Object3D14);\n    return (0, _createClass2.default)(SpotLightHelper, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.light.updateWorldMatrix(true, false);\n        this.light.target.updateWorldMatrix(true, false);\n\n        // update the local matrix based on the parent and light target transforms\n        if (this.parent) {\n          this.parent.updateWorldMatrix(true);\n          this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld);\n        } else {\n          this.matrix.copy(this.light.matrixWorld);\n        }\n        this.matrixWorld.copy(this.light.matrixWorld);\n        var coneLength = this.light.distance ? this.light.distance : 1000;\n        var coneWidth = coneLength * Math.tan(this.light.angle);\n        this.cone.scale.set(coneWidth, coneWidth, coneLength);\n        _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n        this.cone.lookAt(_vector$3);\n        if (this.color !== undefined) {\n          this.cone.material.color.set(this.color);\n        } else {\n          this.cone.material.color.copy(this.light.color);\n        }\n      }\n    }]);\n  }(Object3D);\n  var _vector$2 = /*@__PURE__*/new Vector3();\n  var _boneMatrix = /*@__PURE__*/new Matrix4();\n  var _matrixWorldInv = /*@__PURE__*/new Matrix4();\n  var SkeletonHelper = exports.SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n    function SkeletonHelper(object) {\n      var _this118;\n      (0, _classCallCheck2.default)(this, SkeletonHelper);\n      var bones = getBoneList(object);\n      var geometry = new BufferGeometry();\n      var vertices = [];\n      var colors = [];\n      var color1 = new Color(0, 0, 1);\n      var color2 = new Color(0, 1, 0);\n      for (var i = 0; i < bones.length; i++) {\n        var bone = bones[i];\n        if (bone.parent && bone.parent.isBone) {\n          vertices.push(0, 0, 0);\n          vertices.push(0, 0, 0);\n          colors.push(color1.r, color1.g, color1.b);\n          colors.push(color2.r, color2.g, color2.b);\n        }\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      var material = new LineBasicMaterial({\n        vertexColors: true,\n        depthTest: false,\n        depthWrite: false,\n        toneMapped: false,\n        transparent: true\n      });\n      _this118 = _callSuper(this, SkeletonHelper, [geometry, material]);\n      _this118.isSkeletonHelper = true;\n      _this118.type = 'SkeletonHelper';\n      _this118.root = object;\n      _this118.bones = bones;\n      _this118.matrix = object.matrixWorld;\n      _this118.matrixAutoUpdate = false;\n      return _this118;\n    }\n    (0, _inherits2.default)(SkeletonHelper, _LineSegments);\n    return (0, _createClass2.default)(SkeletonHelper, [{\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        var bones = this.bones;\n        var geometry = this.geometry;\n        var position = geometry.getAttribute('position');\n        _matrixWorldInv.copy(this.root.matrixWorld).invert();\n        for (var i = 0, j = 0; i < bones.length; i++) {\n          var bone = bones[i];\n          if (bone.parent && bone.parent.isBone) {\n            _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n            _vector$2.setFromMatrixPosition(_boneMatrix);\n            position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n            _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n            _vector$2.setFromMatrixPosition(_boneMatrix);\n            position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n            j += 2;\n          }\n        }\n        geometry.getAttribute('position').needsUpdate = true;\n        _superPropGet(SkeletonHelper, \"updateMatrixWorld\", this, 3)([force]);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  function getBoneList(object) {\n    var boneList = [];\n    if (object.isBone === true) {\n      boneList.push(object);\n    }\n    for (var i = 0; i < object.children.length; i++) {\n      boneList.push.apply(boneList, getBoneList(object.children[i]));\n    }\n    return boneList;\n  }\n  var PointLightHelper = exports.PointLightHelper = /*#__PURE__*/function (_Mesh4) {\n    function PointLightHelper(light, sphereSize, color) {\n      var _this119;\n      (0, _classCallCheck2.default)(this, PointLightHelper);\n      var geometry = new SphereGeometry(sphereSize, 4, 2);\n      var material = new MeshBasicMaterial({\n        wireframe: true,\n        fog: false,\n        toneMapped: false\n      });\n      _this119 = _callSuper(this, PointLightHelper, [geometry, material]);\n      _this119.light = light;\n      _this119.color = color;\n      _this119.type = 'PointLightHelper';\n      _this119.matrix = _this119.light.matrixWorld;\n      _this119.matrixAutoUpdate = false;\n      _this119.update();\n\n      /*\n      // TODO: delete this comment?\n      const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n      const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n      this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n      this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n      const d = light.distance;\n      if ( d === 0.0 ) {\n      \tthis.lightDistance.visible = false;\n      } else {\n      \tthis.lightDistance.scale.set( d, d, d );\n      }\n      this.add( this.lightDistance );\n      */\n      return _this119;\n    }\n    (0, _inherits2.default)(PointLightHelper, _Mesh4);\n    return (0, _createClass2.default)(PointLightHelper, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.light.updateWorldMatrix(true, false);\n        if (this.color !== undefined) {\n          this.material.color.set(this.color);\n        } else {\n          this.material.color.copy(this.light.color);\n        }\n\n        /*\n        const d = this.light.distance;\n        \tif ( d === 0.0 ) {\n        \t\tthis.lightDistance.visible = false;\n        \t} else {\n        \t\tthis.lightDistance.visible = true;\n        \tthis.lightDistance.scale.set( d, d, d );\n        \t}\n        */\n      }\n    }]);\n  }(Mesh);\n  var _vector$1 = /*@__PURE__*/new Vector3();\n  var _color1 = /*@__PURE__*/new Color();\n  var _color2 = /*@__PURE__*/new Color();\n  var HemisphereLightHelper = exports.HemisphereLightHelper = /*#__PURE__*/function (_Object3D15) {\n    function HemisphereLightHelper(light, size, color) {\n      var _this120;\n      (0, _classCallCheck2.default)(this, HemisphereLightHelper);\n      _this120 = _callSuper(this, HemisphereLightHelper);\n      _this120.light = light;\n      _this120.matrix = light.matrixWorld;\n      _this120.matrixAutoUpdate = false;\n      _this120.color = color;\n      _this120.type = 'HemisphereLightHelper';\n      var geometry = new OctahedronGeometry(size);\n      geometry.rotateY(Math.PI * 0.5);\n      _this120.material = new MeshBasicMaterial({\n        wireframe: true,\n        fog: false,\n        toneMapped: false\n      });\n      if (_this120.color === undefined) _this120.material.vertexColors = true;\n      var position = geometry.getAttribute('position');\n      var colors = new Float32Array(position.count * 3);\n      geometry.setAttribute('color', new BufferAttribute(colors, 3));\n      _this120.add(new Mesh(geometry, _this120.material));\n      _this120.update();\n      return _this120;\n    }\n    (0, _inherits2.default)(HemisphereLightHelper, _Object3D15);\n    return (0, _createClass2.default)(HemisphereLightHelper, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.children[0].geometry.dispose();\n        this.children[0].material.dispose();\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var mesh = this.children[0];\n        if (this.color !== undefined) {\n          this.material.color.set(this.color);\n        } else {\n          var colors = mesh.geometry.getAttribute('color');\n          _color1.copy(this.light.color);\n          _color2.copy(this.light.groundColor);\n          for (var i = 0, l = colors.count; i < l; i++) {\n            var color = i < l / 2 ? _color1 : _color2;\n            colors.setXYZ(i, color.r, color.g, color.b);\n          }\n          colors.needsUpdate = true;\n        }\n        this.light.updateWorldMatrix(true, false);\n        mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n      }\n    }]);\n  }(Object3D);\n  var GridHelper = exports.GridHelper = /*#__PURE__*/function (_LineSegments2) {\n    function GridHelper() {\n      var _this121;\n      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var divisions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      var color1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0x444444;\n      var color2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0x888888;\n      (0, _classCallCheck2.default)(this, GridHelper);\n      color1 = new Color(color1);\n      color2 = new Color(color2);\n      var center = divisions / 2;\n      var step = size / divisions;\n      var halfSize = size / 2;\n      var vertices = [],\n        colors = [];\n      for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n        vertices.push(-halfSize, 0, k, halfSize, 0, k);\n        vertices.push(k, 0, -halfSize, k, 0, halfSize);\n        var color = i === center ? color1 : color2;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n      }\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      var material = new LineBasicMaterial({\n        vertexColors: true,\n        toneMapped: false\n      });\n      _this121 = _callSuper(this, GridHelper, [geometry, material]);\n      _this121.type = 'GridHelper';\n      return _this121;\n    }\n    (0, _inherits2.default)(GridHelper, _LineSegments2);\n    return (0, _createClass2.default)(GridHelper, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  var PolarGridHelper = exports.PolarGridHelper = /*#__PURE__*/function (_LineSegments3) {\n    function PolarGridHelper() {\n      var _this122;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var sectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      var rings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n      var divisions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;\n      var color1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0x444444;\n      var color2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0x888888;\n      (0, _classCallCheck2.default)(this, PolarGridHelper);\n      color1 = new Color(color1);\n      color2 = new Color(color2);\n      var vertices = [];\n      var colors = [];\n\n      // create the sectors\n\n      if (sectors > 1) {\n        for (var i = 0; i < sectors; i++) {\n          var v = i / sectors * (Math.PI * 2);\n          var x = Math.sin(v) * radius;\n          var z = Math.cos(v) * radius;\n          vertices.push(0, 0, 0);\n          vertices.push(x, 0, z);\n          var color = i & 1 ? color1 : color2;\n          colors.push(color.r, color.g, color.b);\n          colors.push(color.r, color.g, color.b);\n        }\n      }\n\n      // create the rings\n\n      for (var _i64 = 0; _i64 < rings; _i64++) {\n        var _color3 = _i64 & 1 ? color1 : color2;\n        var r = radius - radius / rings * _i64;\n        for (var j = 0; j < divisions; j++) {\n          // first vertex\n\n          var _v = j / divisions * (Math.PI * 2);\n          var _x10 = Math.sin(_v) * r;\n          var _z3 = Math.cos(_v) * r;\n          vertices.push(_x10, 0, _z3);\n          colors.push(_color3.r, _color3.g, _color3.b);\n\n          // second vertex\n\n          _v = (j + 1) / divisions * (Math.PI * 2);\n          _x10 = Math.sin(_v) * r;\n          _z3 = Math.cos(_v) * r;\n          vertices.push(_x10, 0, _z3);\n          colors.push(_color3.r, _color3.g, _color3.b);\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      var material = new LineBasicMaterial({\n        vertexColors: true,\n        toneMapped: false\n      });\n      _this122 = _callSuper(this, PolarGridHelper, [geometry, material]);\n      _this122.type = 'PolarGridHelper';\n      return _this122;\n    }\n    (0, _inherits2.default)(PolarGridHelper, _LineSegments3);\n    return (0, _createClass2.default)(PolarGridHelper, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  var _v1 = /*@__PURE__*/new Vector3();\n  var _v2 = /*@__PURE__*/new Vector3();\n  var _v3 = /*@__PURE__*/new Vector3();\n  var DirectionalLightHelper = exports.DirectionalLightHelper = /*#__PURE__*/function (_Object3D16) {\n    function DirectionalLightHelper(light, size, color) {\n      var _this123;\n      (0, _classCallCheck2.default)(this, DirectionalLightHelper);\n      _this123 = _callSuper(this, DirectionalLightHelper);\n      _this123.light = light;\n      _this123.matrix = light.matrixWorld;\n      _this123.matrixAutoUpdate = false;\n      _this123.color = color;\n      _this123.type = 'DirectionalLightHelper';\n      if (size === undefined) size = 1;\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n      var material = new LineBasicMaterial({\n        fog: false,\n        toneMapped: false\n      });\n      _this123.lightPlane = new Line(geometry, material);\n      _this123.add(_this123.lightPlane);\n      geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n      _this123.targetLine = new Line(geometry, material);\n      _this123.add(_this123.targetLine);\n      _this123.update();\n      return _this123;\n    }\n    (0, _inherits2.default)(DirectionalLightHelper, _Object3D16);\n    return (0, _createClass2.default)(DirectionalLightHelper, [{\n      key: \"dispose\",\n      value: function dispose() {\n        this.lightPlane.geometry.dispose();\n        this.lightPlane.material.dispose();\n        this.targetLine.geometry.dispose();\n        this.targetLine.material.dispose();\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.light.updateWorldMatrix(true, false);\n        this.light.target.updateWorldMatrix(true, false);\n        _v1.setFromMatrixPosition(this.light.matrixWorld);\n        _v2.setFromMatrixPosition(this.light.target.matrixWorld);\n        _v3.subVectors(_v2, _v1);\n        this.lightPlane.lookAt(_v2);\n        if (this.color !== undefined) {\n          this.lightPlane.material.color.set(this.color);\n          this.targetLine.material.color.set(this.color);\n        } else {\n          this.lightPlane.material.color.copy(this.light.color);\n          this.targetLine.material.color.copy(this.light.color);\n        }\n        this.targetLine.lookAt(_v2);\n        this.targetLine.scale.z = _v3.length();\n      }\n    }]);\n  }(Object3D);\n  var _vector = /*@__PURE__*/new Vector3();\n  var _camera = /*@__PURE__*/new Camera();\n\n  /**\n   *\t- shows frustum, line of sight and up of the camera\n   *\t- suitable for fast updates\n   * \t- based on frustum visualization in lightgl.js shadowmap example\n   *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\n   */\n  var CameraHelper = exports.CameraHelper = /*#__PURE__*/function (_LineSegments4) {\n    function CameraHelper(camera) {\n      var _this124;\n      (0, _classCallCheck2.default)(this, CameraHelper);\n      var geometry = new BufferGeometry();\n      var material = new LineBasicMaterial({\n        color: 0xffffff,\n        vertexColors: true,\n        toneMapped: false\n      });\n      var vertices = [];\n      var colors = [];\n      var pointMap = {};\n\n      // near\n\n      addLine('n1', 'n2');\n      addLine('n2', 'n4');\n      addLine('n4', 'n3');\n      addLine('n3', 'n1');\n\n      // far\n\n      addLine('f1', 'f2');\n      addLine('f2', 'f4');\n      addLine('f4', 'f3');\n      addLine('f3', 'f1');\n\n      // sides\n\n      addLine('n1', 'f1');\n      addLine('n2', 'f2');\n      addLine('n3', 'f3');\n      addLine('n4', 'f4');\n\n      // cone\n\n      addLine('p', 'n1');\n      addLine('p', 'n2');\n      addLine('p', 'n3');\n      addLine('p', 'n4');\n\n      // up\n\n      addLine('u1', 'u2');\n      addLine('u2', 'u3');\n      addLine('u3', 'u1');\n\n      // target\n\n      addLine('c', 't');\n      addLine('p', 'c');\n\n      // cross\n\n      addLine('cn1', 'cn2');\n      addLine('cn3', 'cn4');\n      addLine('cf1', 'cf2');\n      addLine('cf3', 'cf4');\n      function addLine(a, b) {\n        addPoint(a);\n        addPoint(b);\n      }\n      function addPoint(id) {\n        vertices.push(0, 0, 0);\n        colors.push(0, 0, 0);\n        if (pointMap[id] === undefined) {\n          pointMap[id] = [];\n        }\n        pointMap[id].push(vertices.length / 3 - 1);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      _this124 = _callSuper(this, CameraHelper, [geometry, material]);\n      _this124.type = 'CameraHelper';\n      _this124.camera = camera;\n      if (_this124.camera.updateProjectionMatrix) _this124.camera.updateProjectionMatrix();\n      _this124.matrix = camera.matrixWorld;\n      _this124.matrixAutoUpdate = false;\n      _this124.pointMap = pointMap;\n      _this124.update();\n\n      // colors\n\n      var colorFrustum = new Color(0xffaa00);\n      var colorCone = new Color(0xff0000);\n      var colorUp = new Color(0x00aaff);\n      var colorTarget = new Color(0xffffff);\n      var colorCross = new Color(0x333333);\n      _this124.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);\n      return _this124;\n    }\n    (0, _inherits2.default)(CameraHelper, _LineSegments4);\n    return (0, _createClass2.default)(CameraHelper, [{\n      key: \"setColors\",\n      value: function setColors(frustum, cone, up, target, cross) {\n        var geometry = this.geometry;\n        var colorAttribute = geometry.getAttribute('color');\n\n        // near\n\n        colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2\n        colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4\n        colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3\n        colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1\n\n        // far\n\n        colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2\n        colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4\n        colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3\n        colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1\n\n        // sides\n\n        colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1\n        colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2\n        colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3\n        colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);\n        colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4\n\n        // cone\n\n        colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);\n        colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1\n        colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);\n        colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2\n        colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);\n        colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3\n        colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);\n        colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4\n\n        // up\n\n        colorAttribute.setXYZ(32, up.r, up.g, up.b);\n        colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2\n        colorAttribute.setXYZ(34, up.r, up.g, up.b);\n        colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3\n        colorAttribute.setXYZ(36, up.r, up.g, up.b);\n        colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1\n\n        // target\n\n        colorAttribute.setXYZ(38, target.r, target.g, target.b);\n        colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t\n        colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);\n        colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c\n\n        // cross\n\n        colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);\n        colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2\n        colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);\n        colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4\n\n        colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);\n        colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2\n        colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);\n        colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4\n\n        colorAttribute.needsUpdate = true;\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var geometry = this.geometry;\n        var pointMap = this.pointMap;\n        var w = 1,\n          h = 1;\n\n        // we need just camera projection matrix inverse\n        // world matrix must be identity\n\n        _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);\n\n        // Adjust z values based on coordinate system\n        var nearZ = this.camera.coordinateSystem === WebGLCoordinateSystem ? -1 : 0;\n\n        // center / target\n        setPoint('c', pointMap, geometry, _camera, 0, 0, nearZ);\n        setPoint('t', pointMap, geometry, _camera, 0, 0, 1);\n\n        // near\n\n        setPoint('n1', pointMap, geometry, _camera, -w, -h, nearZ);\n        setPoint('n2', pointMap, geometry, _camera, w, -h, nearZ);\n        setPoint('n3', pointMap, geometry, _camera, -w, h, nearZ);\n        setPoint('n4', pointMap, geometry, _camera, w, h, nearZ);\n\n        // far\n\n        setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n        setPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n        setPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n        setPoint('f4', pointMap, geometry, _camera, w, h, 1);\n\n        // up\n\n        setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, nearZ);\n        setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, nearZ);\n        setPoint('u3', pointMap, geometry, _camera, 0, h * 2, nearZ);\n\n        // cross\n\n        setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n        setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n        setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n        setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n        setPoint('cn1', pointMap, geometry, _camera, -w, 0, nearZ);\n        setPoint('cn2', pointMap, geometry, _camera, w, 0, nearZ);\n        setPoint('cn3', pointMap, geometry, _camera, 0, -h, nearZ);\n        setPoint('cn4', pointMap, geometry, _camera, 0, h, nearZ);\n        geometry.getAttribute('position').needsUpdate = true;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  function setPoint(point, pointMap, geometry, camera, x, y, z) {\n    _vector.set(x, y, z).unproject(camera);\n    var points = pointMap[point];\n    if (points !== undefined) {\n      var position = geometry.getAttribute('position');\n      for (var i = 0, l = points.length; i < l; i++) {\n        position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n      }\n    }\n  }\n  var _box = /*@__PURE__*/new Box3();\n  var BoxHelper = exports.BoxHelper = /*#__PURE__*/function (_LineSegments5) {\n    function BoxHelper(object) {\n      var _this125;\n      var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n      (0, _classCallCheck2.default)(this, BoxHelper);\n      var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n      var positions = new Float32Array(8 * 3);\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      _this125 = _callSuper(this, BoxHelper, [geometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      })]);\n      _this125.object = object;\n      _this125.type = 'BoxHelper';\n      _this125.matrixAutoUpdate = false;\n      _this125.update();\n      return _this125;\n    }\n    (0, _inherits2.default)(BoxHelper, _LineSegments5);\n    return (0, _createClass2.default)(BoxHelper, [{\n      key: \"update\",\n      value: function update(object) {\n        if (object !== undefined) {\n          console.warn('THREE.BoxHelper: .update() has no longer arguments.');\n        }\n        if (this.object !== undefined) {\n          _box.setFromObject(this.object);\n        }\n        if (_box.isEmpty()) return;\n        var min = _box.min;\n        var max = _box.max;\n\n        /*\n        \t5____4\n        1/___0/|\n        | 6__|_7\n        2/___3/\n        \t0: max.x, max.y, max.z\n        1: min.x, max.y, max.z\n        2: min.x, min.y, max.z\n        3: max.x, min.y, max.z\n        4: max.x, max.y, min.z\n        5: min.x, max.y, min.z\n        6: min.x, min.y, min.z\n        7: max.x, min.y, min.z\n        */\n\n        var position = this.geometry.attributes.position;\n        var array = position.array;\n        array[0] = max.x;\n        array[1] = max.y;\n        array[2] = max.z;\n        array[3] = min.x;\n        array[4] = max.y;\n        array[5] = max.z;\n        array[6] = min.x;\n        array[7] = min.y;\n        array[8] = max.z;\n        array[9] = max.x;\n        array[10] = min.y;\n        array[11] = max.z;\n        array[12] = max.x;\n        array[13] = max.y;\n        array[14] = min.z;\n        array[15] = min.x;\n        array[16] = max.y;\n        array[17] = min.z;\n        array[18] = min.x;\n        array[19] = min.y;\n        array[20] = min.z;\n        array[21] = max.x;\n        array[22] = min.y;\n        array[23] = min.z;\n        position.needsUpdate = true;\n        this.geometry.computeBoundingSphere();\n      }\n    }, {\n      key: \"setFromObject\",\n      value: function setFromObject(object) {\n        this.object = object;\n        this.update();\n        return this;\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source, recursive) {\n        _superPropGet(BoxHelper, \"copy\", this, 3)([source, recursive]);\n        this.object = source.object;\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  var Box3Helper = exports.Box3Helper = /*#__PURE__*/function (_LineSegments6) {\n    function Box3Helper(box) {\n      var _this126;\n      var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n      (0, _classCallCheck2.default)(this, Box3Helper);\n      var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n      var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      _this126 = _callSuper(this, Box3Helper, [geometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      })]);\n      _this126.box = box;\n      _this126.type = 'Box3Helper';\n      _this126.geometry.computeBoundingSphere();\n      return _this126;\n    }\n    (0, _inherits2.default)(Box3Helper, _LineSegments6);\n    return (0, _createClass2.default)(Box3Helper, [{\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        var box = this.box;\n        if (box.isEmpty()) return;\n        box.getCenter(this.position);\n        box.getSize(this.scale);\n        this.scale.multiplyScalar(0.5);\n        _superPropGet(Box3Helper, \"updateMatrixWorld\", this, 3)([force]);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  var PlaneHelper = exports.PlaneHelper = /*#__PURE__*/function (_Line3) {\n    function PlaneHelper(plane) {\n      var _this127;\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var hex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0xffff00;\n      (0, _classCallCheck2.default)(this, PlaneHelper);\n      var color = hex;\n      var positions = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      geometry.computeBoundingSphere();\n      _this127 = _callSuper(this, PlaneHelper, [geometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      })]);\n      _this127.type = 'PlaneHelper';\n      _this127.plane = plane;\n      _this127.size = size;\n      var positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n      var geometry2 = new BufferGeometry();\n      geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n      geometry2.computeBoundingSphere();\n      _this127.add(new Mesh(geometry2, new MeshBasicMaterial({\n        color: color,\n        opacity: 0.2,\n        transparent: true,\n        depthWrite: false,\n        toneMapped: false\n      })));\n      return _this127;\n    }\n    (0, _inherits2.default)(PlaneHelper, _Line3);\n    return (0, _createClass2.default)(PlaneHelper, [{\n      key: \"updateMatrixWorld\",\n      value: function updateMatrixWorld(force) {\n        this.position.set(0, 0, 0);\n        this.scale.set(0.5 * this.size, 0.5 * this.size, 1);\n        this.lookAt(this.plane.normal);\n        this.translateZ(-this.plane.constant);\n        _superPropGet(PlaneHelper, \"updateMatrixWorld\", this, 3)([force]);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n        this.children[0].geometry.dispose();\n        this.children[0].material.dispose();\n      }\n    }]);\n  }(Line);\n  var _axis = /*@__PURE__*/new Vector3();\n  var _lineGeometry, _coneGeometry;\n  var ArrowHelper = exports.ArrowHelper = /*#__PURE__*/function (_Object3D17) {\n    // dir is assumed to be normalized\n\n    function ArrowHelper() {\n      var _this128;\n      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 1);\n      var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, 0);\n      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0xffff00;\n      var headLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : length * 0.2;\n      var headWidth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : headLength * 0.2;\n      (0, _classCallCheck2.default)(this, ArrowHelper);\n      _this128 = _callSuper(this, ArrowHelper);\n      _this128.type = 'ArrowHelper';\n      if (_lineGeometry === undefined) {\n        _lineGeometry = new BufferGeometry();\n        _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n        _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n        _coneGeometry.translate(0, -0.5, 0);\n      }\n      _this128.position.copy(origin);\n      _this128.line = new Line(_lineGeometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      _this128.line.matrixAutoUpdate = false;\n      _this128.add(_this128.line);\n      _this128.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      _this128.cone.matrixAutoUpdate = false;\n      _this128.add(_this128.cone);\n      _this128.setDirection(dir);\n      _this128.setLength(length, headLength, headWidth);\n      return _this128;\n    }\n    (0, _inherits2.default)(ArrowHelper, _Object3D17);\n    return (0, _createClass2.default)(ArrowHelper, [{\n      key: \"setDirection\",\n      value: function setDirection(dir) {\n        // dir is assumed to be normalized\n\n        if (dir.y > 0.99999) {\n          this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < -0.99999) {\n          this.quaternion.set(1, 0, 0, 0);\n        } else {\n          _axis.set(dir.z, 0, -dir.x).normalize();\n          var radians = Math.acos(dir.y);\n          this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n      }\n    }, {\n      key: \"setLength\",\n      value: function setLength(length) {\n        var headLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : length * 0.2;\n        var headWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : headLength * 0.2;\n        this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n        this.line.updateMatrix();\n        this.cone.scale.set(headWidth, headLength, headWidth);\n        this.cone.position.y = length;\n        this.cone.updateMatrix();\n      }\n    }, {\n      key: \"setColor\",\n      value: function setColor(color) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        _superPropGet(ArrowHelper, \"copy\", this, 3)([source, false]);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n      }\n    }]);\n  }(Object3D);\n  var AxesHelper = exports.AxesHelper = /*#__PURE__*/function (_LineSegments7) {\n    function AxesHelper() {\n      var _this129;\n      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      (0, _classCallCheck2.default)(this, AxesHelper);\n      var vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n      var colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      var material = new LineBasicMaterial({\n        vertexColors: true,\n        toneMapped: false\n      });\n      _this129 = _callSuper(this, AxesHelper, [geometry, material]);\n      _this129.type = 'AxesHelper';\n      return _this129;\n    }\n    (0, _inherits2.default)(AxesHelper, _LineSegments7);\n    return (0, _createClass2.default)(AxesHelper, [{\n      key: \"setColors\",\n      value: function setColors(xAxisColor, yAxisColor, zAxisColor) {\n        var color = new Color();\n        var array = this.geometry.attributes.color.array;\n        color.set(xAxisColor);\n        color.toArray(array, 0);\n        color.toArray(array, 3);\n        color.set(yAxisColor);\n        color.toArray(array, 6);\n        color.toArray(array, 9);\n        color.set(zAxisColor);\n        color.toArray(array, 12);\n        color.toArray(array, 15);\n        this.geometry.attributes.color.needsUpdate = true;\n        return this;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n        this.material.dispose();\n      }\n    }]);\n  }(LineSegments);\n  var ShapePath = exports.ShapePath = /*#__PURE__*/function () {\n    function ShapePath() {\n      (0, _classCallCheck2.default)(this, ShapePath);\n      this.type = 'ShapePath';\n      this.color = new Color();\n      this.subPaths = [];\n      this.currentPath = null;\n    }\n    return (0, _createClass2.default)(ShapePath, [{\n      key: \"moveTo\",\n      value: function moveTo(x, y) {\n        this.currentPath = new Path();\n        this.subPaths.push(this.currentPath);\n        this.currentPath.moveTo(x, y);\n        return this;\n      }\n    }, {\n      key: \"lineTo\",\n      value: function lineTo(x, y) {\n        this.currentPath.lineTo(x, y);\n        return this;\n      }\n    }, {\n      key: \"quadraticCurveTo\",\n      value: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n        this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n        return this;\n      }\n    }, {\n      key: \"bezierCurveTo\",\n      value: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n        this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n        return this;\n      }\n    }, {\n      key: \"splineThru\",\n      value: function splineThru(pts) {\n        this.currentPath.splineThru(pts);\n        return this;\n      }\n    }, {\n      key: \"toShapes\",\n      value: function toShapes(isCCW) {\n        function toShapesNoHoles(inSubpaths) {\n          var shapes = [];\n          for (var i = 0, l = inSubpaths.length; i < l; i++) {\n            var _tmpPath = inSubpaths[i];\n            var _tmpShape = new Shape();\n            _tmpShape.curves = _tmpPath.curves;\n            shapes.push(_tmpShape);\n          }\n          return shapes;\n        }\n        function isPointInsidePolygon(inPt, inPolygon) {\n          var polyLen = inPolygon.length;\n\n          // inPt on polygon contour => immediate success    or\n          // toggling of inside/outside at every single! intersection point of an edge\n          //  with the horizontal line through inPt, left of inPt\n          //  not counting lowerY endpoints of edges and whole edges on that line\n          var inside = false;\n          for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n            var edgeLowPt = inPolygon[p];\n            var edgeHighPt = inPolygon[q];\n            var edgeDx = edgeHighPt.x - edgeLowPt.x;\n            var edgeDy = edgeHighPt.y - edgeLowPt.y;\n            if (Math.abs(edgeDy) > Number.EPSILON) {\n              // not parallel\n              if (edgeDy < 0) {\n                edgeLowPt = inPolygon[q];\n                edgeDx = -edgeDx;\n                edgeHighPt = inPolygon[p];\n                edgeDy = -edgeDy;\n              }\n              if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n              if (inPt.y === edgeLowPt.y) {\n                if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n                // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n              } else {\n                var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n                if (perpEdge === 0) return true; // inPt is on contour ?\n                if (perpEdge < 0) continue;\n                inside = !inside; // true intersection left of inPt\n              }\n            } else {\n              // parallel or collinear\n              if (inPt.y !== edgeLowPt.y) continue; // parallel\n              // edge lies on the same horizontal line as inPt\n              if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n              // continue;\n            }\n          }\n          return inside;\n        }\n        var isClockWise = ShapeUtils.isClockWise;\n        var subPaths = this.subPaths;\n        if (subPaths.length === 0) return [];\n        var solid, tmpPath, tmpShape;\n        var shapes = [];\n        if (subPaths.length === 1) {\n          tmpPath = subPaths[0];\n          tmpShape = new Shape();\n          tmpShape.curves = tmpPath.curves;\n          shapes.push(tmpShape);\n          return shapes;\n        }\n        var holesFirst = !isClockWise(subPaths[0].getPoints());\n        holesFirst = isCCW ? !holesFirst : holesFirst;\n\n        // console.log(\"Holes first\", holesFirst);\n\n        var betterShapeHoles = [];\n        var newShapes = [];\n        var newShapeHoles = [];\n        var mainIdx = 0;\n        var tmpPoints;\n        newShapes[mainIdx] = undefined;\n        newShapeHoles[mainIdx] = [];\n        for (var i = 0, l = subPaths.length; i < l; i++) {\n          tmpPath = subPaths[i];\n          tmpPoints = tmpPath.getPoints();\n          solid = isClockWise(tmpPoints);\n          solid = isCCW ? !solid : solid;\n          if (solid) {\n            if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n            newShapes[mainIdx] = {\n              s: new Shape(),\n              p: tmpPoints\n            };\n            newShapes[mainIdx].s.curves = tmpPath.curves;\n            if (holesFirst) mainIdx++;\n            newShapeHoles[mainIdx] = [];\n\n            //console.log('cw', i);\n          } else {\n            newShapeHoles[mainIdx].push({\n              h: tmpPath,\n              p: tmpPoints[0]\n            });\n\n            //console.log('ccw', i);\n          }\n        }\n\n        // only Holes? -> probably all Shapes with wrong orientation\n        if (!newShapes[0]) return toShapesNoHoles(subPaths);\n        if (newShapes.length > 1) {\n          var ambiguous = false;\n          var toChange = 0;\n          for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n            betterShapeHoles[sIdx] = [];\n          }\n          for (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n            var sho = newShapeHoles[_sIdx];\n            for (var hIdx = 0; hIdx < sho.length; hIdx++) {\n              var ho = sho[hIdx];\n              var hole_unassigned = true;\n              for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n                if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n                  if (_sIdx !== s2Idx) toChange++;\n                  if (hole_unassigned) {\n                    hole_unassigned = false;\n                    betterShapeHoles[s2Idx].push(ho);\n                  } else {\n                    ambiguous = true;\n                  }\n                }\n              }\n              if (hole_unassigned) {\n                betterShapeHoles[_sIdx].push(ho);\n              }\n            }\n          }\n          if (toChange > 0 && ambiguous === false) {\n            newShapeHoles = betterShapeHoles;\n          }\n        }\n        var tmpHoles;\n        for (var _i65 = 0, il = newShapes.length; _i65 < il; _i65++) {\n          tmpShape = newShapes[_i65].s;\n          shapes.push(tmpShape);\n          tmpHoles = newShapeHoles[_i65];\n          for (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n            tmpShape.holes.push(tmpHoles[j].h);\n          }\n        }\n\n        //console.log(\"shape\", shapes);\n\n        return shapes;\n      }\n    }]);\n  }();\n  var Controls = exports.Controls = /*#__PURE__*/function (_EventDispatcher8) {\n    function Controls(object) {\n      var _this130;\n      var domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      (0, _classCallCheck2.default)(this, Controls);\n      _this130 = _callSuper(this, Controls);\n      _this130.object = object;\n      _this130.domElement = domElement;\n      _this130.enabled = true;\n      _this130.state = -1;\n      _this130.keys = {};\n      _this130.mouseButtons = {\n        LEFT: null,\n        MIDDLE: null,\n        RIGHT: null\n      };\n      _this130.touches = {\n        ONE: null,\n        TWO: null\n      };\n      return _this130;\n    }\n    (0, _inherits2.default)(Controls, _EventDispatcher8);\n    return (0, _createClass2.default)(Controls, [{\n      key: \"connect\",\n      value: function connect() {}\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {}\n    }, {\n      key: \"dispose\",\n      value: function dispose() {}\n    }, {\n      key: \"update\",\n      value: function update(/* delta */) {}\n    }]);\n  }(EventDispatcher);\n  function contain(texture, aspect) {\n    var imageAspect = texture.image && texture.image.width ? texture.image.width / texture.image.height : 1;\n    if (imageAspect > aspect) {\n      texture.repeat.x = 1;\n      texture.repeat.y = imageAspect / aspect;\n      texture.offset.x = 0;\n      texture.offset.y = (1 - texture.repeat.y) / 2;\n    } else {\n      texture.repeat.x = aspect / imageAspect;\n      texture.repeat.y = 1;\n      texture.offset.x = (1 - texture.repeat.x) / 2;\n      texture.offset.y = 0;\n    }\n    return texture;\n  }\n  function cover(texture, aspect) {\n    var imageAspect = texture.image && texture.image.width ? texture.image.width / texture.image.height : 1;\n    if (imageAspect > aspect) {\n      texture.repeat.x = aspect / imageAspect;\n      texture.repeat.y = 1;\n      texture.offset.x = (1 - texture.repeat.x) / 2;\n      texture.offset.y = 0;\n    } else {\n      texture.repeat.x = 1;\n      texture.repeat.y = imageAspect / aspect;\n      texture.offset.x = 0;\n      texture.offset.y = (1 - texture.repeat.y) / 2;\n    }\n    return texture;\n  }\n  function fill(texture) {\n    texture.repeat.x = 1;\n    texture.repeat.y = 1;\n    texture.offset.x = 0;\n    texture.offset.y = 0;\n    return texture;\n  }\n\n  /**\n   * Given the width, height, format, and type of a texture. Determines how many\n   * bytes must be used to represent the texture.\n   *\n   * @param {Number} width\n   * @param {Number} height\n   * @param {Number} format\n   * @param {Number} type\n   * @return {Number} The number of bytes required to represent the texture.\n   */\n  function getByteLength(width, height, format, type) {\n    var typeByteLength = getTextureTypeByteLength(type);\n    switch (format) {\n      // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n      case AlphaFormat:\n        return width * height;\n      case LuminanceFormat:\n        return width * height;\n      case LuminanceAlphaFormat:\n        return width * height * 2;\n      case RedFormat:\n        return width * height / typeByteLength.components * typeByteLength.byteLength;\n      case RedIntegerFormat:\n        return width * height / typeByteLength.components * typeByteLength.byteLength;\n      case RGFormat:\n        return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;\n      case RGIntegerFormat:\n        return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;\n      case RGBFormat:\n        return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;\n      case RGBAFormat:\n        return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;\n      case RGBAIntegerFormat:\n        return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;\n\n      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n      case RGB_S3TC_DXT1_Format:\n      case RGBA_S3TC_DXT1_Format:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n      case RGBA_S3TC_DXT3_Format:\n      case RGBA_S3TC_DXT5_Format:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n      case RGB_PVRTC_2BPPV1_Format:\n      case RGBA_PVRTC_2BPPV1_Format:\n        return Math.max(width, 16) * Math.max(height, 8) / 4;\n      case RGB_PVRTC_4BPPV1_Format:\n      case RGBA_PVRTC_4BPPV1_Format:\n        return Math.max(width, 8) * Math.max(height, 8) / 2;\n\n      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n      case RGB_ETC1_Format:\n      case RGB_ETC2_Format:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n      case RGBA_ETC2_EAC_Format:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n      case RGBA_ASTC_4x4_Format:\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n      case RGBA_ASTC_5x4_Format:\n        return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n      case RGBA_ASTC_5x5_Format:\n        return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n      case RGBA_ASTC_6x5_Format:\n        return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n      case RGBA_ASTC_6x6_Format:\n        return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n      case RGBA_ASTC_8x5_Format:\n        return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n      case RGBA_ASTC_8x6_Format:\n        return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n      case RGBA_ASTC_8x8_Format:\n        return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n      case RGBA_ASTC_10x5_Format:\n        return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n      case RGBA_ASTC_10x6_Format:\n        return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n      case RGBA_ASTC_10x8_Format:\n        return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n      case RGBA_ASTC_10x10_Format:\n        return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n      case RGBA_ASTC_12x10_Format:\n        return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n      case RGBA_ASTC_12x12_Format:\n        return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n\n      // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n      case RGBA_BPTC_Format:\n      case RGB_BPTC_SIGNED_Format:\n      case RGB_BPTC_UNSIGNED_Format:\n        return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n\n      // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n      case RED_RGTC1_Format:\n      case SIGNED_RED_RGTC1_Format:\n        return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;\n      case RED_GREEN_RGTC2_Format:\n      case SIGNED_RED_GREEN_RGTC2_Format:\n        return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n    }\n    throw new Error(`Unable to determine texture byte length for ${format} format.`);\n  }\n  function getTextureTypeByteLength(type) {\n    switch (type) {\n      case UnsignedByteType:\n      case ByteType:\n        return {\n          byteLength: 1,\n          components: 1\n        };\n      case UnsignedShortType:\n      case ShortType:\n      case HalfFloatType:\n        return {\n          byteLength: 2,\n          components: 1\n        };\n      case UnsignedShort4444Type:\n      case UnsignedShort5551Type:\n        return {\n          byteLength: 2,\n          components: 4\n        };\n      case UnsignedIntType:\n      case IntType:\n      case FloatType:\n        return {\n          byteLength: 4,\n          components: 1\n        };\n      case UnsignedInt5999Type:\n        return {\n          byteLength: 4,\n          components: 3\n        };\n    }\n    throw new Error(`Unknown texture type ${type}.`);\n  }\n  var TextureUtils = exports.TextureUtils = {\n    contain: contain,\n    cover: cover,\n    fill: fill,\n    getByteLength: getByteLength\n  };\n  if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n      detail: {\n        revision: REVISION\n      }\n    }));\n  }\n  if (typeof window !== 'undefined') {\n    if (window.__THREE__) {\n      console.warn('WARNING: Multiple instances of Three.js being imported.');\n    } else {\n      window.__THREE__ = REVISION;\n    }\n  }\n},4,[1,2,5,11,17,19,23,10,26,27,30,31,32],\"../../node_modules/three/build/three.core.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _wrapNativeSuper(t) {\n    var r = \"function\" == typeof Map ? new Map() : void 0;\n    return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {\n      if (null === t || !_$$_REQUIRE(_dependencyMap[0], \"./isNativeFunction.js\")(t)) return t;\n      if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n      if (void 0 !== r) {\n        if (r.has(t)) return r.get(t);\n        r.set(t, Wrapper);\n      }\n      function Wrapper() {\n        return _$$_REQUIRE(_dependencyMap[1], \"./construct.js\")(t, arguments, _$$_REQUIRE(_dependencyMap[2], \"./getPrototypeOf.js\")(this).constructor);\n      }\n      return Wrapper.prototype = Object.create(t.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), _$$_REQUIRE(_dependencyMap[3], \"./setPrototypeOf.js\")(Wrapper, t);\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _wrapNativeSuper(t);\n  }\n  module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},5,[6,7,10,9],\"../../node_modules/@babel/runtime/helpers/wrapNativeSuper.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _isNativeFunction(t) {\n    try {\n      return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n    } catch (n) {\n      return \"function\" == typeof t;\n    }\n  }\n  module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},6,[],\"../../node_modules/@babel/runtime/helpers/isNativeFunction.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _construct(t, e, r) {\n    if (_$$_REQUIRE(_dependencyMap[0], \"./isNativeReflectConstruct.js\")()) return Reflect.construct.apply(null, arguments);\n    var o = [null];\n    o.push.apply(o, e);\n    var p = new (t.bind.apply(t, o))();\n    return r && _$$_REQUIRE(_dependencyMap[1], \"./setPrototypeOf.js\")(p, r.prototype), p;\n  }\n  module.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},7,[8,9],\"../../node_modules/@babel/runtime/helpers/construct.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (t) {}\n    return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {\n      return !!t;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n  }\n  module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},8,[],\"../../node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _setPrototypeOf(t, e) {\n    return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _setPrototypeOf(t, e);\n  }\n  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},9,[],\"../../node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _getPrototypeOf(t) {\n    return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _getPrototypeOf(t);\n  }\n  module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},10,[],\"../../node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _slicedToArray(r, e) {\n    return _$$_REQUIRE(_dependencyMap[0], \"./arrayWithHoles.js\")(r) || _$$_REQUIRE(_dependencyMap[1], \"./iterableToArrayLimit.js\")(r, e) || _$$_REQUIRE(_dependencyMap[2], \"./unsupportedIterableToArray.js\")(r, e) || _$$_REQUIRE(_dependencyMap[3], \"./nonIterableRest.js\")();\n  }\n  module.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},11,[12,13,14,16],\"../../node_modules/@babel/runtime/helpers/slicedToArray.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n  }\n  module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},12,[],\"../../node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n      var e,\n        n,\n        i,\n        u,\n        a = [],\n        f = !0,\n        o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) return;\n          f = !1;\n        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return a;\n    }\n  }\n  module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},13,[],\"../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if (\"string\" == typeof r) return _$$_REQUIRE(_dependencyMap[0], \"./arrayLikeToArray.js\")(r, a);\n      var t = {}.toString.call(r).slice(8, -1);\n      return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _$$_REQUIRE(_dependencyMap[0], \"./arrayLikeToArray.js\")(r, a) : void 0;\n    }\n  }\n  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},14,[15],\"../../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n    return n;\n  }\n  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},15,[],\"../../node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},16,[],\"../../node_modules/@babel/runtime/helpers/nonIterableRest.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _get() {\n    return module.exports = _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {\n      var p = _$$_REQUIRE(_dependencyMap[0], \"./superPropBase.js\")(e, t);\n      if (p) {\n        var n = Object.getOwnPropertyDescriptor(p, t);\n        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n      }\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _get.apply(null, arguments);\n  }\n  module.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},17,[18],\"../../node_modules/@babel/runtime/helpers/get.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _superPropBase(t, o) {\n    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _$$_REQUIRE(_dependencyMap[0], \"./getPrototypeOf.js\")(t)););\n    return t;\n  }\n  module.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},18,[10],\"../../node_modules/@babel/runtime/helpers/superPropBase.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _toConsumableArray(r) {\n    return _$$_REQUIRE(_dependencyMap[0], \"./arrayWithoutHoles.js\")(r) || _$$_REQUIRE(_dependencyMap[1], \"./iterableToArray.js\")(r) || _$$_REQUIRE(_dependencyMap[2], \"./unsupportedIterableToArray.js\")(r) || _$$_REQUIRE(_dependencyMap[3], \"./nonIterableSpread.js\")();\n  }\n  module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},19,[20,21,14,22],\"../../node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _$$_REQUIRE(_dependencyMap[0], \"./arrayLikeToArray.js\")(r);\n  }\n  module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},20,[15],\"../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n  }\n  module.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},21,[],\"../../node_modules/@babel/runtime/helpers/iterableToArray.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},22,[],\"../../node_modules/@babel/runtime/helpers/nonIterableSpread.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _possibleConstructorReturn(t, e) {\n    if (e && (\"object\" == _$$_REQUIRE(_dependencyMap[0], \"./typeof.js\")[\"default\"](e) || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _$$_REQUIRE(_dependencyMap[1], \"./assertThisInitialized.js\")(t);\n  }\n  module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},23,[24,25],\"../../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n  }\n  module.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},24,[],\"../../node_modules/@babel/runtime/helpers/typeof.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _assertThisInitialized(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }\n  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},25,[],\"../../node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _inherits(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(t, \"prototype\", {\n      writable: !1\n    }), e && _$$_REQUIRE(_dependencyMap[0], \"./setPrototypeOf.js\")(t, e);\n  }\n  module.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},26,[9],\"../../node_modules/@babel/runtime/helpers/inherits.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _defineProperty(e, r, t) {\n    return (r = _$$_REQUIRE(_dependencyMap[0], \"./toPropertyKey.js\")(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  module.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},27,[28],\"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function toPropertyKey(t) {\n    var i = _$$_REQUIRE(_dependencyMap[0], \"./toPrimitive.js\")(t, \"string\");\n    return \"symbol\" == _$$_REQUIRE(_dependencyMap[1], \"./typeof.js\")[\"default\"](i) ? i : i + \"\";\n  }\n  module.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},28,[29,24],\"../../node_modules/@babel/runtime/helpers/toPropertyKey.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function toPrimitive(t, r) {\n    if (\"object\" != _$$_REQUIRE(_dependencyMap[0], \"./typeof.js\")[\"default\"](t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != _$$_REQUIRE(_dependencyMap[0], \"./typeof.js\")[\"default\"](i)) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  module.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},29,[24],\"../../node_modules/@babel/runtime/helpers/toPrimitive.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _readOnlyError(r) {\n    throw new TypeError('\"' + r + '\" is read-only');\n  }\n  module.exports = _readOnlyError, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},30,[],\"../../node_modules/@babel/runtime/helpers/readOnlyError.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n  module.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},31,[],\"../../node_modules/@babel/runtime/helpers/classCallCheck.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _$$_REQUIRE(_dependencyMap[0], \"./toPropertyKey.js\")(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), e;\n  }\n  module.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n},32,[28],\"../../node_modules/@babel/runtime/helpers/createClass.js\");\n__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.makeWebGPURenderer = exports.ReactNativeCanvas = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var THREE = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], \"three\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  // Here we need to wrap the Canvas into a non-host object for now\n  var ReactNativeCanvas = exports.ReactNativeCanvas = /*#__PURE__*/function () {\n    function ReactNativeCanvas(canvas) {\n      (0, _classCallCheck2.default)(this, ReactNativeCanvas);\n      this.canvas = canvas;\n    }\n    return (0, _createClass2.default)(ReactNativeCanvas, [{\n      key: \"width\",\n      get: function get() {\n        return this.canvas.width;\n      },\n      set: function set(width) {\n        this.canvas.width = width;\n      }\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this.canvas.height;\n      },\n      set: function set(height) {\n        this.canvas.height = height;\n      }\n    }, {\n      key: \"clientWidth\",\n      get: function get() {\n        return this.canvas.width;\n      },\n      set: function set(width) {\n        this.canvas.width = width;\n      }\n    }, {\n      key: \"clientHeight\",\n      get: function get() {\n        return this.canvas.height;\n      },\n      set: function set(height) {\n        this.canvas.height = height;\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(_type, _listener) {\n        // TODO\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(_type, _listener) {\n        // TODO\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(_event) {\n        // TODO\n      }\n    }, {\n      key: \"setPointerCapture\",\n      value: function setPointerCapture() {\n        // TODO\n      }\n    }, {\n      key: \"releasePointerCapture\",\n      value: function releasePointerCapture() {\n        // TODO\n      }\n    }]);\n  }();\n  var makeWebGPURenderer = exports.makeWebGPURenderer = function makeWebGPURenderer(context, device) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$antialias = _ref.antialias,\n      antialias = _ref$antialias === void 0 ? true : _ref$antialias;\n    return new THREE.WebGPURenderer({\n      antialias: antialias,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      canvas: new ReactNativeCanvas(context.canvas),\n      context: context,\n      device: device\n    });\n  };\n},33,[1,31,32,3],\"src/ThreeJS/components/makeWebGPURenderer.ts\");\n__r(0);";
